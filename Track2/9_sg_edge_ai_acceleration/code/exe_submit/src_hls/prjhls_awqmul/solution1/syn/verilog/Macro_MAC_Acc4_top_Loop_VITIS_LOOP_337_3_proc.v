// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Macro_MAC_Acc4_top_Loop_VITIS_LOOP_337_3_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read15;
input  [31:0] p_read16;
input  [31:0] p_read17;
input  [31:0] p_read18;
input  [31:0] p_read19;
input  [31:0] p_read20;
input  [31:0] p_read21;
input  [31:0] p_read22;
input  [31:0] p_read23;
input  [31:0] p_read24;
input  [31:0] p_read25;
input  [31:0] p_read26;
input  [31:0] p_read27;
input  [31:0] p_read28;
input  [31:0] p_read29;
input  [31:0] p_read30;
input  [31:0] p_read31;
output  [127:0] out_r;
output   out_r_ap_vld;

reg ap_idle;
reg[127:0] out_r;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln337_fu_636_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln3386_reg_319;
wire   [0:0] icmp_ln338_fu_624_p2;
reg   [0:0] ap_phi_mux_icmp_ln3386_phi_fu_322_p4;
wire    ap_loop_init;
reg   [31:0] ap_phi_mux_empty_phi_fu_332_p8;
wire   [31:0] select_ln351_6_fu_535_p3;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_reg_329;
wire   [1:0] empty_52_fu_429_p1;
wire   [31:0] select_ln351_14_fu_463_p3;
wire   [31:0] select_ln351_10_fu_499_p3;
wire   [31:0] select_ln351_2_fu_571_p3;
reg   [31:0] ap_phi_mux_empty_49_phi_fu_345_p8;
wire   [31:0] select_ln351_4_fu_517_p3;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_49_reg_342;
wire   [31:0] select_ln351_12_fu_445_p3;
wire   [31:0] select_ln351_8_fu_481_p3;
wire   [31:0] select_ln351_fu_553_p3;
reg   [31:0] ap_phi_mux_empty_50_phi_fu_358_p8;
wire   [31:0] select_ln351_5_fu_526_p3;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_50_reg_355;
wire   [31:0] select_ln351_13_fu_454_p3;
wire   [31:0] select_ln351_9_fu_490_p3;
wire   [31:0] select_ln351_1_fu_562_p3;
reg   [31:0] ap_phi_mux_empty_51_phi_fu_371_p8;
wire   [31:0] select_ln351_7_fu_544_p3;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_51_reg_368;
wire   [31:0] select_ln351_15_fu_472_p3;
wire   [31:0] select_ln351_11_fu_508_p3;
wire   [31:0] select_ln351_3_fu_580_p3;
reg   [2:0] indvar_flatten2_fu_104;
wire   [2:0] add_ln337_1_fu_439_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten2_load;
reg   [2:0] ch3_fu_108;
wire   [2:0] ch_fu_421_p3;
reg   [2:0] ap_sig_allocacmp_ch3_load;
reg   [1:0] group4_fu_112;
wire   [1:0] group_fu_618_p2;
reg   [1:0] ap_sig_allocacmp_group4_load;
reg   [2:0] add_ln3377_fu_116;
wire   [2:0] add_ln337_fu_630_p2;
reg   [2:0] ap_sig_allocacmp_add_ln3377_load;
wire   [127:0] or_ln353_8_fu_605_p5;
reg   [127:0] out_r_preg;
wire   [1:0] select_ln337_fu_413_p3;
wire   [0:0] icmp_ln351_fu_433_p2;
wire   [31:0] bitcast_ln353_3_fu_601_p1;
wire   [31:0] bitcast_ln353_2_fu_597_p1;
wire   [31:0] bitcast_ln353_1_fu_593_p1;
wire   [31:0] bitcast_ln353_fu_589_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 indvar_flatten2_fu_104 = 3'd0;
#0 ch3_fu_108 = 3'd0;
#0 group4_fu_112 = 2'd0;
#0 add_ln3377_fu_116 = 3'd0;
#0 out_r_preg = 128'd0;
end

Macro_MAC_Acc4_top_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_r_preg <= 128'd0;
    end else begin
        if (((ap_loop_exit_ready == 1'b1) & (icmp_ln337_fu_636_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            out_r_preg <= or_ln353_8_fu_605_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln3377_fu_116 <= add_ln337_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
    ch3_fu_108 <= ch_fu_421_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
    group4_fu_112 <= group_fu_618_p2;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
    indvar_flatten2_fu_104 <= add_ln337_1_fu_439_p2;
end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln337_fu_636_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln3386_reg_319 <= icmp_ln338_fu_624_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln337_fu_636_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((empty_52_fu_429_p1 == 2'd0)) begin
        ap_phi_mux_empty_49_phi_fu_345_p8 = select_ln351_fu_553_p3;
    end else if ((empty_52_fu_429_p1 == 2'd1)) begin
        ap_phi_mux_empty_49_phi_fu_345_p8 = select_ln351_8_fu_481_p3;
    end else if ((empty_52_fu_429_p1 == 2'd2)) begin
        ap_phi_mux_empty_49_phi_fu_345_p8 = select_ln351_12_fu_445_p3;
    end else if ((empty_52_fu_429_p1 == 2'd3)) begin
        ap_phi_mux_empty_49_phi_fu_345_p8 = select_ln351_4_fu_517_p3;
    end else begin
        ap_phi_mux_empty_49_phi_fu_345_p8 = ap_phi_reg_pp0_iter0_empty_49_reg_342;
    end
end

always @ (*) begin
    if ((empty_52_fu_429_p1 == 2'd0)) begin
        ap_phi_mux_empty_50_phi_fu_358_p8 = select_ln351_1_fu_562_p3;
    end else if ((empty_52_fu_429_p1 == 2'd1)) begin
        ap_phi_mux_empty_50_phi_fu_358_p8 = select_ln351_9_fu_490_p3;
    end else if ((empty_52_fu_429_p1 == 2'd2)) begin
        ap_phi_mux_empty_50_phi_fu_358_p8 = select_ln351_13_fu_454_p3;
    end else if ((empty_52_fu_429_p1 == 2'd3)) begin
        ap_phi_mux_empty_50_phi_fu_358_p8 = select_ln351_5_fu_526_p3;
    end else begin
        ap_phi_mux_empty_50_phi_fu_358_p8 = ap_phi_reg_pp0_iter0_empty_50_reg_355;
    end
end

always @ (*) begin
    if ((empty_52_fu_429_p1 == 2'd0)) begin
        ap_phi_mux_empty_51_phi_fu_371_p8 = select_ln351_3_fu_580_p3;
    end else if ((empty_52_fu_429_p1 == 2'd1)) begin
        ap_phi_mux_empty_51_phi_fu_371_p8 = select_ln351_11_fu_508_p3;
    end else if ((empty_52_fu_429_p1 == 2'd2)) begin
        ap_phi_mux_empty_51_phi_fu_371_p8 = select_ln351_15_fu_472_p3;
    end else if ((empty_52_fu_429_p1 == 2'd3)) begin
        ap_phi_mux_empty_51_phi_fu_371_p8 = select_ln351_7_fu_544_p3;
    end else begin
        ap_phi_mux_empty_51_phi_fu_371_p8 = ap_phi_reg_pp0_iter0_empty_51_reg_368;
    end
end

always @ (*) begin
    if ((empty_52_fu_429_p1 == 2'd0)) begin
        ap_phi_mux_empty_phi_fu_332_p8 = select_ln351_2_fu_571_p3;
    end else if ((empty_52_fu_429_p1 == 2'd1)) begin
        ap_phi_mux_empty_phi_fu_332_p8 = select_ln351_10_fu_499_p3;
    end else if ((empty_52_fu_429_p1 == 2'd2)) begin
        ap_phi_mux_empty_phi_fu_332_p8 = select_ln351_14_fu_463_p3;
    end else if ((empty_52_fu_429_p1 == 2'd3)) begin
        ap_phi_mux_empty_phi_fu_332_p8 = select_ln351_6_fu_535_p3;
    end else begin
        ap_phi_mux_empty_phi_fu_332_p8 = ap_phi_reg_pp0_iter0_empty_reg_329;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_icmp_ln3386_phi_fu_322_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln3386_phi_fu_322_p4 = icmp_ln3386_reg_319;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_add_ln3377_load = 3'd1;
    end else begin
        ap_sig_allocacmp_add_ln3377_load = add_ln3377_fu_116;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_ch3_load = 3'd0;
    end else begin
        ap_sig_allocacmp_ch3_load = ch3_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_group4_load = 2'd0;
    end else begin
        ap_sig_allocacmp_group4_load = group4_fu_112;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten2_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten2_load = indvar_flatten2_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln337_fu_636_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r = or_ln353_8_fu_605_p5;
    end else begin
        out_r = out_r_preg;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln337_fu_636_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln337_1_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten2_load + 3'd1);

assign add_ln337_fu_630_p2 = (ch_fu_421_p3 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_49_reg_342 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_50_reg_355 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_51_reg_368 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_329 = 'bx;

assign ap_ready = ap_ready_sig;

assign bitcast_ln353_1_fu_593_p1 = ap_phi_mux_empty_50_phi_fu_358_p8;

assign bitcast_ln353_2_fu_597_p1 = ap_phi_mux_empty_phi_fu_332_p8;

assign bitcast_ln353_3_fu_601_p1 = ap_phi_mux_empty_51_phi_fu_371_p8;

assign bitcast_ln353_fu_589_p1 = ap_phi_mux_empty_49_phi_fu_345_p8;

assign ch_fu_421_p3 = ((ap_phi_mux_icmp_ln3386_phi_fu_322_p4[0:0] == 1'b1) ? ap_sig_allocacmp_add_ln3377_load : ap_sig_allocacmp_ch3_load);

assign empty_52_fu_429_p1 = ch_fu_421_p3[1:0];

assign group_fu_618_p2 = (select_ln337_fu_413_p3 + 2'd1);

assign icmp_ln337_fu_636_p2 = ((ap_sig_allocacmp_indvar_flatten2_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_624_p2 = ((group_fu_618_p2 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln351_fu_433_p2 = ((select_ln337_fu_413_p3 == 2'd1) ? 1'b1 : 1'b0);

assign or_ln353_8_fu_605_p5 = {{{{bitcast_ln353_3_fu_601_p1}, {bitcast_ln353_2_fu_597_p1}}, {bitcast_ln353_1_fu_593_p1}}, {bitcast_ln353_fu_589_p1}};

assign select_ln337_fu_413_p3 = ((ap_phi_mux_icmp_ln3386_phi_fu_322_p4[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_group4_load);

assign select_ln351_10_fu_499_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read21 : p_read20);

assign select_ln351_11_fu_508_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read23 : p_read22);

assign select_ln351_12_fu_445_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read9 : p_read8);

assign select_ln351_13_fu_454_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read11 : p_read10);

assign select_ln351_14_fu_463_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read13 : p_read12);

assign select_ln351_15_fu_472_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read15 : p_read14);

assign select_ln351_1_fu_562_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read27 : p_read26);

assign select_ln351_2_fu_571_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read29 : p_read28);

assign select_ln351_3_fu_580_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read31 : p_read30);

assign select_ln351_4_fu_517_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read1 : p_read);

assign select_ln351_5_fu_526_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read3 : p_read2);

assign select_ln351_6_fu_535_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read5 : p_read4);

assign select_ln351_7_fu_544_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read7 : p_read6);

assign select_ln351_8_fu_481_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read17 : p_read16);

assign select_ln351_9_fu_490_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read19 : p_read18);

assign select_ln351_fu_553_p3 = ((icmp_ln351_fu_433_p2[0:0] == 1'b1) ? p_read25 : p_read24);

endmodule //Macro_MAC_Acc4_top_Loop_VITIS_LOOP_337_3_proc
