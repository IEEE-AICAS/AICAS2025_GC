// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Macro_MAC_Acc4_top_Loop_VITIS_LOOP_324_2_proc_Pipeline_VITIS_LOOP_146_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        qscale2_7_promoted,
        qscale2_6_promoted,
        qscale2_1_promoted,
        qscale2_0_promoted,
        qscale2_3_promoted,
        qscale2_2_promoted,
        qscale2_5_promoted,
        qscale2_4_promoted,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] qscale2_7_promoted;
input  [31:0] qscale2_6_promoted;
input  [31:0] qscale2_1_promoted;
input  [31:0] qscale2_0_promoted;
input  [31:0] qscale2_3_promoted;
input  [31:0] qscale2_2_promoted;
input  [31:0] qscale2_5_promoted;
input  [31:0] qscale2_4_promoted;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] p_out2;
output   p_out2_ap_vld;
output  [31:0] p_out3;
output   p_out3_ap_vld;
output  [31:0] p_out4;
output   p_out4_ap_vld;
output  [31:0] p_out5;
output   p_out5_ap_vld;
output  [31:0] p_out6;
output   p_out6_ap_vld;
output  [31:0] p_out7;
output   p_out7_ap_vld;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln146_fu_256_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] j_4_fu_68;
wire   [2:0] add_ln146_fu_262_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j;
reg   [31:0] empty_fu_72;
wire   [1:0] trunc_ln146_fu_268_p1;
reg   [31:0] empty_60_fu_76;
reg   [31:0] empty_61_fu_80;
reg   [31:0] empty_62_fu_84;
reg   [31:0] empty_63_fu_88;
reg   [31:0] empty_64_fu_92;
reg   [31:0] empty_65_fu_96;
reg   [31:0] empty_66_fu_100;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 j_4_fu_68 = 3'd0;
#0 empty_fu_72 = 32'd0;
#0 empty_60_fu_76 = 32'd0;
#0 empty_61_fu_80 = 32'd0;
#0 empty_62_fu_84 = 32'd0;
#0 empty_63_fu_88 = 32'd0;
#0 empty_64_fu_92 = 32'd0;
#0 empty_65_fu_96 = 32'd0;
#0 empty_66_fu_100 = 32'd0;
#0 ap_done_reg = 1'b0;
end

Macro_MAC_Acc4_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd2) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_60_fu_76 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_60_fu_76 <= qscale2_5_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd1) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_61_fu_80 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_61_fu_80 <= qscale2_2_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd1) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_62_fu_84 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_62_fu_84 <= qscale2_3_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd0) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_63_fu_88 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_63_fu_88 <= qscale2_0_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd0) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_64_fu_92 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_64_fu_92 <= qscale2_1_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd3) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_65_fu_96 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_65_fu_96 <= qscale2_6_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd3) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_66_fu_100 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_66_fu_100 <= qscale2_7_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln146_fu_268_p1 == 2'd2) & (icmp_ln146_fu_256_p2 == 1'd0))) begin
            empty_fu_72 <= 32'd939524096;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_fu_72 <= qscale2_4_promoted;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln146_fu_256_p2 == 1'd0)) begin
            j_4_fu_68 <= add_ln146_fu_262_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_4_fu_68 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j = 3'd0;
    end else begin
        ap_sig_allocacmp_j = j_4_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln146_fu_256_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln146_fu_262_p2 = (ap_sig_allocacmp_j + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln146_fu_256_p2 = ((ap_sig_allocacmp_j == 3'd4) ? 1'b1 : 1'b0);

assign p_out = empty_66_fu_100;

assign p_out1 = empty_65_fu_96;

assign p_out2 = empty_64_fu_92;

assign p_out3 = empty_63_fu_88;

assign p_out4 = empty_62_fu_84;

assign p_out5 = empty_61_fu_80;

assign p_out6 = empty_60_fu_76;

assign p_out7 = empty_fu_72;

assign trunc_ln146_fu_268_p1 = ap_sig_allocacmp_j[1:0];

endmodule //Macro_MAC_Acc4_top_Loop_VITIS_LOOP_324_2_proc_Pipeline_VITIS_LOOP_146_13
