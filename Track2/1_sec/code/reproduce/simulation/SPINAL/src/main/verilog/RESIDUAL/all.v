/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="RESIDUAL_RESIDUAL,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.703500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1921,HLS_SYN_LUT=1958,HLS_VERSION=2024_2}" *)

module RESIDUAL (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        x_stream_TDATA,
        x_stream_TVALID,
        x_stream_TREADY,
        res_i_stream_TDATA,
        res_i_stream_TVALID,
        res_i_stream_TREADY,
        res_o_stream_TDATA,
        res_o_stream_TVALID,
        res_o_stream_TREADY,
        y_stream_TDATA,
        y_stream_TVALID,
        y_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [207:0] x_stream_TDATA;
input   x_stream_TVALID;
output   x_stream_TREADY;
input  [207:0] res_i_stream_TDATA;
input   res_i_stream_TVALID;
output   res_i_stream_TREADY;
output  [207:0] res_o_stream_TDATA;
output   res_o_stream_TVALID;
input   res_o_stream_TREADY;
output  [207:0] y_stream_TDATA;
output   y_stream_TVALID;
input   y_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_241;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_247;
wire   [31:0] add_ln84_fu_138_p2;
reg   [31:0] add_ln84_reg_253;
wire   [0:0] empty_fu_144_p2;
reg   [0:0] empty_reg_260;
wire   [0:0] empty_12_fu_150_p2;
reg   [0:0] empty_12_reg_265;
wire   [31:0] sub_ln84_fu_169_p2;
reg   [31:0] sub_ln84_reg_270;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln84_1_fu_185_p2;
reg   [31:0] sub_ln84_1_reg_276;
wire   [0:0] empty_13_fu_190_p2;
reg   [0:0] empty_13_reg_282;
wire    ap_CS_fsm_state3;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_done;
wire   [31:0] sub_ln84_2_fu_199_p2;
reg   [31:0] sub_ln84_2_reg_287;
wire    ap_CS_fsm_state4;
wire   [1:0] pass_1_fu_218_p2;
reg   [1:0] pass_1_reg_301;
wire    ap_CS_fsm_state6;
reg   [9:0] x_buf_address0;
reg    x_buf_ce0;
wire   [207:0] x_buf_q0;
reg   [9:0] x_buf_address1;
reg    x_buf_ce1;
reg    x_buf_we1;
reg   [207:0] x_buf_d1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_idle;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_ready;
wire   [9:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_address1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_ce1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_we1;
wire   [207:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_d1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_stream_TREADY;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_done;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_idle;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_ready;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TREADY;
wire   [9:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_x_buf_address0;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_x_buf_ce0;
wire   [207:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TDATA;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TVALID;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_done;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_idle;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_ready;
wire   [9:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_address0;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_ce0;
wire   [9:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_address1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_ce1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_we1;
wire   [207:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_d1;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_res_i_stream_TREADY;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_done;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_idle;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_ready;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TREADY;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TREADY;
wire   [207:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TDATA;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TVALID;
wire   [9:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_x_buf_address0;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_x_buf_ce0;
wire   [207:0] grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TDATA;
wire    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TVALID;
reg   [1:0] pass_reg_96;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln84_fu_207_p2;
wire    ap_CS_fsm_state9;
reg    grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start_reg;
reg    grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start_reg;
wire   [0:0] icmp_ln85_fu_212_p2;
wire    ap_CS_fsm_state7;
reg   [207:0] res_o_stream_TDATA_reg;
reg    grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [207:0] y_stream_TDATA_reg;
reg   [31:0] l_fu_76;
wire   [31:0] l_3_fu_224_p2;
wire   [31:0] smax_fu_164_p3;
wire   [30:0] trunc_ln35_fu_161_p1;
wire   [30:0] smax1_fu_174_p3;
wire   [31:0] zext_ln84_fu_181_p1;
wire   [31:0] umax_fu_194_p3;
wire    ap_CS_fsm_state12;
wire    regslice_both_res_o_stream_U_apdone_blk;
wire    regslice_both_y_stream_U_apdone_blk;
reg    ap_block_state12;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    regslice_both_x_stream_U_apdone_blk;
wire   [207:0] x_stream_TDATA_int_regslice;
wire    x_stream_TVALID_int_regslice;
reg    x_stream_TREADY_int_regslice;
wire    regslice_both_x_stream_U_ack_in;
wire    regslice_both_res_i_stream_U_apdone_blk;
wire   [207:0] res_i_stream_TDATA_int_regslice;
wire    res_i_stream_TVALID_int_regslice;
reg    res_i_stream_TREADY_int_regslice;
wire    regslice_both_res_i_stream_U_ack_in;
reg   [207:0] res_o_stream_TDATA_int_regslice;
reg    res_o_stream_TVALID_int_regslice;
wire    res_o_stream_TREADY_int_regslice;
wire    regslice_both_res_o_stream_U_vld_out;
reg   [207:0] y_stream_TDATA_int_regslice;
wire    y_stream_TREADY_int_regslice;
wire    regslice_both_y_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 12'd1;
//#0 grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start_reg = 1'b0;
//#0 grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start_reg = 1'b0;
//#0 grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start_reg = 1'b0;
//#0 grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start_reg = 1'b0;
//#0 l_fu_76 = 32'd0;
end

RESIDUAL_x_buf_RAM_2P_URAM_1R1W #(
    .DataWidth( 208 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
x_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_buf_address0),
    .ce0(x_buf_ce0),
    .q0(x_buf_q0),
    .address1(x_buf_address1),
    .ce1(x_buf_ce1),
    .we1(x_buf_we1),
    .d1(x_buf_d1)
);

RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2 grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start),
    .ap_done(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_done),
    .ap_idle(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_idle),
    .ap_ready(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_ready),
    .x_stream_TVALID(x_stream_TVALID_int_regslice),
    .x_buf_address1(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_address1),
    .x_buf_ce1(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_ce1),
    .x_buf_we1(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_we1),
    .x_buf_d1(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_d1),
    .x_stream_TDATA(x_stream_TDATA_int_regslice),
    .x_stream_TREADY(grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_stream_TREADY)
);

RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8 grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start),
    .ap_done(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_done),
    .ap_idle(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_idle),
    .ap_ready(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_ready),
    .res_o_stream_TREADY(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TREADY),
    .x_buf_address0(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_x_buf_address0),
    .x_buf_ce0(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_x_buf_ce0),
    .x_buf_q0(x_buf_q0),
    .res_o_stream_TDATA(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TDATA),
    .res_o_stream_TVALID(grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TVALID)
);

RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12 grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start),
    .ap_done(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_done),
    .ap_idle(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_idle),
    .ap_ready(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_ready),
    .res_i_stream_TVALID(res_i_stream_TVALID_int_regslice),
    .x_buf_address0(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_address0),
    .x_buf_ce0(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_ce0),
    .x_buf_q0(x_buf_q0),
    .x_buf_address1(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_address1),
    .x_buf_ce1(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_ce1),
    .x_buf_we1(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_we1),
    .x_buf_d1(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_d1),
    .res_i_stream_TDATA(res_i_stream_TDATA_int_regslice),
    .res_i_stream_TREADY(grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_res_i_stream_TREADY)
);

RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20 grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start),
    .ap_done(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_done),
    .ap_idle(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_idle),
    .ap_ready(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_ready),
    .y_stream_TREADY(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TREADY),
    .res_o_stream_TREADY(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TREADY),
    .res_o_stream_TDATA(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TDATA),
    .res_o_stream_TVALID(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TVALID),
    .x_buf_address0(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_x_buf_address0),
    .x_buf_ce0(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_x_buf_ce0),
    .x_buf_q0(x_buf_q0),
    .y_stream_TDATA(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TDATA),
    .y_stream_TVALID(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TVALID),
    .l_close(l_close_read_reg_241)
);

RESIDUAL_regslice_both #(
    .DataWidth( 208 ))
regslice_both_x_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_stream_TDATA),
    .vld_in(x_stream_TVALID),
    .ack_in(regslice_both_x_stream_U_ack_in),
    .data_out(x_stream_TDATA_int_regslice),
    .vld_out(x_stream_TVALID_int_regslice),
    .ack_out(x_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_stream_U_apdone_blk)
);

RESIDUAL_regslice_both #(
    .DataWidth( 208 ))
regslice_both_res_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_i_stream_TDATA),
    .vld_in(res_i_stream_TVALID),
    .ack_in(regslice_both_res_i_stream_U_ack_in),
    .data_out(res_i_stream_TDATA_int_regslice),
    .vld_out(res_i_stream_TVALID_int_regslice),
    .ack_out(res_i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_res_i_stream_U_apdone_blk)
);

RESIDUAL_regslice_both #(
    .DataWidth( 208 ))
regslice_both_res_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_o_stream_TDATA_int_regslice),
    .vld_in(res_o_stream_TVALID_int_regslice),
    .ack_in(res_o_stream_TREADY_int_regslice),
    .data_out(res_o_stream_TDATA),
    .vld_out(regslice_both_res_o_stream_U_vld_out),
    .ack_out(res_o_stream_TREADY),
    .apdone_blk(regslice_both_res_o_stream_U_apdone_blk)
);

RESIDUAL_regslice_both #(
    .DataWidth( 208 ))
regslice_both_y_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(y_stream_TDATA_int_regslice),
    .vld_in(grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TVALID),
    .ack_in(y_stream_TREADY_int_regslice),
    .data_out(y_stream_TDATA),
    .vld_out(regslice_both_y_stream_U_vld_out),
    .ack_out(y_stream_TREADY),
    .apdone_blk(regslice_both_y_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start_reg <= 1'b1;
        end else if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_ready == 1'b1)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start_reg <= 1'b1;
        end else if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_ready == 1'b1)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start_reg <= 1'b1;
        end else if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_ready == 1'b1)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln85_fu_212_p2 == 1'd0))) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start_reg <= 1'b1;
        end else if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_ready == 1'b1)) begin
            grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_76 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln85_fu_212_p2 == 1'd1))) begin
        l_fu_76 <= l_3_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_done == 1'b1))) begin
        pass_reg_96 <= pass_1_reg_301;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_207_p2 == 1'd0))) begin
        pass_reg_96 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TVALID == 1'b1))) begin
        res_o_stream_TDATA_reg <= grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TVALID == 1'b1))) begin
        res_o_stream_TDATA_reg <= grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln84_reg_253 <= add_ln84_fu_138_p2;
        empty_12_reg_265 <= empty_12_fu_150_p2;
        empty_reg_260 <= empty_fu_144_p2;
        l_begin_read_reg_247 <= l_begin;
        l_close_read_reg_241 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_13_reg_282 <= empty_13_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pass_1_reg_301 <= pass_1_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln84_1_reg_276 <= sub_ln84_1_fu_185_p2;
        sub_ln84_reg_270 <= sub_ln84_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_ln84_2_reg_287 <= sub_ln84_2_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TVALID == 1'b1))) begin
        y_stream_TDATA_reg <= grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state12)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_i_stream_TREADY_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_res_i_stream_TREADY;
    end else begin
        res_i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TVALID == 1'b1))) begin
        res_o_stream_TDATA_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TVALID == 1'b1))) begin
        res_o_stream_TDATA_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TDATA;
    end else begin
        res_o_stream_TDATA_int_regslice = res_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_o_stream_TVALID_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        res_o_stream_TVALID_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TVALID;
    end else begin
        res_o_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_buf_address0 = grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_x_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_buf_address0 = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_buf_address0 = grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_x_buf_address0;
    end else begin
        x_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_buf_address1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_buf_address1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_address1;
    end else begin
        x_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_buf_ce0 = grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_x_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_buf_ce0 = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_buf_ce0 = grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_x_buf_ce0;
    end else begin
        x_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_buf_ce1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_buf_ce1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_ce1;
    end else begin
        x_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_buf_d1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_buf_d1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_d1;
    end else begin
        x_buf_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_buf_we1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_x_buf_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_buf_we1 = grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_buf_we1;
    end else begin
        x_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_stream_TREADY_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_x_stream_TREADY;
    end else begin
        x_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TVALID == 1'b1))) begin
        y_stream_TDATA_int_regslice = grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TDATA;
    end else begin
        y_stream_TDATA_int_regslice = y_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_207_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln85_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_fu_138_p2 = ($signed(l_begin) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((regslice_both_y_stream_U_apdone_blk == 1'b1) | (regslice_both_res_o_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_12_fu_150_p2 = (($signed(l_begin) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_13_fu_190_p2 = ((sub_ln84_reg_270 > sub_ln84_1_reg_276) ? 1'b1 : 1'b0);

assign empty_fu_144_p2 = (($signed(l_close) > $signed(l_begin)) ? 1'b1 : 1'b0);

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start = grp_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12_fu_121_ap_start_reg;

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start = grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_ap_start_reg;

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_res_o_stream_TREADY = (res_o_stream_TREADY_int_regslice & ap_CS_fsm_state11);

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20_fu_128_y_stream_TREADY = (y_stream_TREADY_int_regslice & ap_CS_fsm_state11);

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start = grp_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2_fu_107_ap_start_reg;

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start = grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_ap_start_reg;

assign grp_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8_fu_114_res_o_stream_TREADY = (res_o_stream_TREADY_int_regslice & ap_CS_fsm_state7);

assign icmp_ln84_fu_207_p2 = ((l_fu_76 == sub_ln84_2_reg_287) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_212_p2 = ((pass_reg_96 == 2'd2) ? 1'b1 : 1'b0);

assign l_3_fu_224_p2 = (l_fu_76 + 32'd1);

assign pass_1_fu_218_p2 = (pass_reg_96 + 2'd1);

assign res_i_stream_TREADY = regslice_both_res_i_stream_U_ack_in;

assign res_o_stream_TVALID = regslice_both_res_o_stream_U_vld_out;

assign smax1_fu_174_p3 = ((empty_12_reg_265[0:0] == 1'b1) ? trunc_ln35_fu_161_p1 : 31'd24);

assign smax_fu_164_p3 = ((empty_reg_260[0:0] == 1'b1) ? l_close_read_reg_241 : l_begin_read_reg_247);

assign sub_ln84_1_fu_185_p2 = (add_ln84_reg_253 - zext_ln84_fu_181_p1);

assign sub_ln84_2_fu_199_p2 = (add_ln84_reg_253 - umax_fu_194_p3);

assign sub_ln84_fu_169_p2 = (add_ln84_reg_253 - smax_fu_164_p3);

assign trunc_ln35_fu_161_p1 = l_begin_read_reg_247[30:0];

assign umax_fu_194_p3 = ((empty_13_reg_282[0:0] == 1'b1) ? sub_ln84_reg_270 : sub_ln84_1_reg_276);

assign x_stream_TREADY = regslice_both_x_stream_U_ack_in;

assign y_stream_TVALID = regslice_both_y_stream_U_vld_out;

assign zext_ln84_fu_181_p1 = smax1_fu_174_p3;

endmodule //RESIDUAL
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module RESIDUAL_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not RESIDUAL module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not RESIDUAL module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module RESIDUAL_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_i_stream_TVALID,
        x_buf_address0,
        x_buf_ce0,
        x_buf_q0,
        x_buf_address1,
        x_buf_ce1,
        x_buf_we1,
        x_buf_d1,
        res_i_stream_TDATA,
        res_i_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   res_i_stream_TVALID;
output  [9:0] x_buf_address0;
output   x_buf_ce0;
input  [207:0] x_buf_q0;
output  [9:0] x_buf_address1;
output   x_buf_ce1;
output   x_buf_we1;
output  [207:0] x_buf_d1;
input  [207:0] res_i_stream_TDATA;
output   res_i_stream_TREADY;

reg ap_idle;
reg res_i_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
wire   [0:0] icmp_ln101_fu_161_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    res_i_stream_TDATA_blk_n;
reg   [0:0] icmp_ln101_reg_478;
wire   [0:0] icmp_ln101_reg_478_pp0_iter0_reg;
reg   [0:0] icmp_ln101_reg_478_pp0_iter1_reg;
reg   [0:0] icmp_ln101_reg_478_pp0_iter2_reg;
reg   [0:0] icmp_ln101_reg_478_pp0_iter3_reg;
wire   [25:0] trunc_ln109_fu_173_p1;
reg   [25:0] trunc_ln109_reg_482;
reg   [25:0] trunc_ln109_reg_482_pp0_iter1_reg;
reg   [25:0] trunc_ln109_reg_482_pp0_iter2_reg;
reg   [25:0] trunc_ln109_reg_482_pp0_iter3_reg;
reg   [25:0] trunc_ln109_1_reg_487;
reg   [25:0] trunc_ln109_1_reg_487_pp0_iter1_reg;
reg   [25:0] trunc_ln109_1_reg_487_pp0_iter2_reg;
reg   [25:0] trunc_ln109_1_reg_487_pp0_iter3_reg;
reg   [25:0] trunc_ln109_2_reg_492;
reg   [25:0] trunc_ln109_2_reg_492_pp0_iter1_reg;
reg   [25:0] trunc_ln109_2_reg_492_pp0_iter2_reg;
reg   [25:0] trunc_ln109_2_reg_492_pp0_iter3_reg;
reg   [25:0] trunc_ln109_3_reg_497;
reg   [25:0] trunc_ln109_3_reg_497_pp0_iter1_reg;
reg   [25:0] trunc_ln109_3_reg_497_pp0_iter2_reg;
reg   [25:0] trunc_ln109_3_reg_497_pp0_iter3_reg;
reg   [25:0] trunc_ln109_4_reg_502;
reg   [25:0] trunc_ln109_4_reg_502_pp0_iter1_reg;
reg   [25:0] trunc_ln109_4_reg_502_pp0_iter2_reg;
reg   [25:0] trunc_ln109_4_reg_502_pp0_iter3_reg;
reg   [25:0] trunc_ln109_5_reg_507;
reg   [25:0] trunc_ln109_5_reg_507_pp0_iter1_reg;
reg   [25:0] trunc_ln109_5_reg_507_pp0_iter2_reg;
reg   [25:0] trunc_ln109_5_reg_507_pp0_iter3_reg;
reg   [25:0] trunc_ln109_6_reg_512;
reg   [25:0] trunc_ln109_6_reg_512_pp0_iter1_reg;
reg   [25:0] trunc_ln109_6_reg_512_pp0_iter2_reg;
reg   [25:0] trunc_ln109_6_reg_512_pp0_iter3_reg;
reg   [25:0] trunc_ln109_7_reg_517;
reg   [25:0] trunc_ln109_7_reg_517_pp0_iter1_reg;
reg   [25:0] trunc_ln109_7_reg_517_pp0_iter2_reg;
reg   [25:0] trunc_ln109_7_reg_517_pp0_iter3_reg;
wire   [3:0] select_ln101_fu_270_p3;
reg   [3:0] select_ln101_reg_522;
wire   [6:0] select_ln101_1_fu_278_p3;
reg   [6:0] select_ln101_1_reg_527;
wire   [2:0] trunc_ln117_fu_286_p1;
reg   [2:0] trunc_ln117_reg_532;
reg   [9:0] x_buf_addr_reg_537;
reg   [9:0] x_buf_addr_reg_537_pp0_iter3_reg;
wire   [25:0] trunc_ln117_1_fu_344_p1;
reg   [25:0] trunc_ln117_1_reg_543;
reg   [25:0] tmp_1_reg_548;
reg   [25:0] tmp_2_reg_553;
reg   [25:0] tmp_3_reg_558;
reg   [25:0] tmp_4_reg_563;
reg   [25:0] tmp_5_reg_568;
reg   [25:0] tmp_6_reg_573;
reg   [25:0] tmp_8_reg_578;
wire   [63:0] zext_ln117_1_fu_339_p1;
reg   [3:0] tt_fu_108;
wire   [3:0] add_ln102_fu_290_p2;
wire    ap_loop_init;
reg   [6:0] ct_fu_112;
reg   [9:0] indvar_flatten13_fu_116;
wire   [9:0] add_ln101_1_fu_167_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten13_load;
reg    x_buf_ce0_local;
reg    x_buf_we1_local;
wire   [207:0] tmp_9_fu_436_p9;
reg    x_buf_ce1_local;
wire   [0:0] icmp_ln102_fu_264_p2;
wire   [6:0] add_ln101_fu_258_p2;
wire   [7:0] tmp_fu_309_p3;
wire   [9:0] tmp_7_fu_316_p3;
wire   [9:0] zext_ln117_fu_323_p1;
wire   [9:0] sub_ln117_fu_327_p2;
wire   [9:0] zext_ln102_fu_306_p1;
wire   [9:0] add_ln117_fu_333_p2;
wire   [25:0] add_ln123_7_fu_432_p2;
wire   [25:0] add_ln123_6_fu_428_p2;
wire   [25:0] add_ln123_5_fu_424_p2;
wire   [25:0] add_ln123_4_fu_420_p2;
wire   [25:0] add_ln123_3_fu_416_p2;
wire   [25:0] add_ln123_2_fu_412_p2;
wire   [25:0] add_ln123_1_fu_408_p2;
wire   [25:0] add_ln123_fu_404_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 tt_fu_108 = 4'd0;
//#0 ct_fu_112 = 7'd0;
//#0 indvar_flatten13_fu_116 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

RESIDUAL_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_112 <= 7'd0;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln101_reg_478_pp0_iter0_reg == 1'd0))) begin
        ct_fu_112 <= select_ln101_1_fu_278_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        if ((icmp_ln101_fu_161_p2 == 1'd0)) begin
            indvar_flatten13_fu_116 <= add_ln101_1_fu_167_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_116 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_108 <= 4'd0;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln101_reg_478_pp0_iter0_reg == 1'd0))) begin
        tt_fu_108 <= add_ln102_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln101_reg_478 <= icmp_ln101_fu_161_p2;
        trunc_ln109_1_reg_487 <= {{res_i_stream_TDATA[51:26]}};
        trunc_ln109_2_reg_492 <= {{res_i_stream_TDATA[77:52]}};
        trunc_ln109_3_reg_497 <= {{res_i_stream_TDATA[103:78]}};
        trunc_ln109_4_reg_502 <= {{res_i_stream_TDATA[129:104]}};
        trunc_ln109_5_reg_507 <= {{res_i_stream_TDATA[155:130]}};
        trunc_ln109_6_reg_512 <= {{res_i_stream_TDATA[181:156]}};
        trunc_ln109_7_reg_517 <= {{res_i_stream_TDATA[207:182]}};
        trunc_ln109_reg_482 <= trunc_ln109_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln101_reg_478_pp0_iter1_reg <= icmp_ln101_reg_478;
        select_ln101_1_reg_527 <= select_ln101_1_fu_278_p3;
        select_ln101_reg_522 <= select_ln101_fu_270_p3;
        trunc_ln109_1_reg_487_pp0_iter1_reg <= trunc_ln109_1_reg_487;
        trunc_ln109_2_reg_492_pp0_iter1_reg <= trunc_ln109_2_reg_492;
        trunc_ln109_3_reg_497_pp0_iter1_reg <= trunc_ln109_3_reg_497;
        trunc_ln109_4_reg_502_pp0_iter1_reg <= trunc_ln109_4_reg_502;
        trunc_ln109_5_reg_507_pp0_iter1_reg <= trunc_ln109_5_reg_507;
        trunc_ln109_6_reg_512_pp0_iter1_reg <= trunc_ln109_6_reg_512;
        trunc_ln109_7_reg_517_pp0_iter1_reg <= trunc_ln109_7_reg_517;
        trunc_ln109_reg_482_pp0_iter1_reg <= trunc_ln109_reg_482;
        trunc_ln117_reg_532 <= trunc_ln117_fu_286_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln101_reg_478_pp0_iter2_reg <= icmp_ln101_reg_478_pp0_iter1_reg;
        trunc_ln109_1_reg_487_pp0_iter2_reg <= trunc_ln109_1_reg_487_pp0_iter1_reg;
        trunc_ln109_2_reg_492_pp0_iter2_reg <= trunc_ln109_2_reg_492_pp0_iter1_reg;
        trunc_ln109_3_reg_497_pp0_iter2_reg <= trunc_ln109_3_reg_497_pp0_iter1_reg;
        trunc_ln109_4_reg_502_pp0_iter2_reg <= trunc_ln109_4_reg_502_pp0_iter1_reg;
        trunc_ln109_5_reg_507_pp0_iter2_reg <= trunc_ln109_5_reg_507_pp0_iter1_reg;
        trunc_ln109_6_reg_512_pp0_iter2_reg <= trunc_ln109_6_reg_512_pp0_iter1_reg;
        trunc_ln109_7_reg_517_pp0_iter2_reg <= trunc_ln109_7_reg_517_pp0_iter1_reg;
        trunc_ln109_reg_482_pp0_iter2_reg <= trunc_ln109_reg_482_pp0_iter1_reg;
        x_buf_addr_reg_537 <= zext_ln117_1_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        icmp_ln101_reg_478_pp0_iter3_reg <= icmp_ln101_reg_478_pp0_iter2_reg;
        tmp_1_reg_548 <= {{x_buf_q0[51:26]}};
        tmp_2_reg_553 <= {{x_buf_q0[77:52]}};
        tmp_3_reg_558 <= {{x_buf_q0[103:78]}};
        tmp_4_reg_563 <= {{x_buf_q0[129:104]}};
        tmp_5_reg_568 <= {{x_buf_q0[155:130]}};
        tmp_6_reg_573 <= {{x_buf_q0[181:156]}};
        tmp_8_reg_578 <= {{x_buf_q0[207:182]}};
        trunc_ln109_1_reg_487_pp0_iter3_reg <= trunc_ln109_1_reg_487_pp0_iter2_reg;
        trunc_ln109_2_reg_492_pp0_iter3_reg <= trunc_ln109_2_reg_492_pp0_iter2_reg;
        trunc_ln109_3_reg_497_pp0_iter3_reg <= trunc_ln109_3_reg_497_pp0_iter2_reg;
        trunc_ln109_4_reg_502_pp0_iter3_reg <= trunc_ln109_4_reg_502_pp0_iter2_reg;
        trunc_ln109_5_reg_507_pp0_iter3_reg <= trunc_ln109_5_reg_507_pp0_iter2_reg;
        trunc_ln109_6_reg_512_pp0_iter3_reg <= trunc_ln109_6_reg_512_pp0_iter2_reg;
        trunc_ln109_7_reg_517_pp0_iter3_reg <= trunc_ln109_7_reg_517_pp0_iter2_reg;
        trunc_ln109_reg_482_pp0_iter3_reg <= trunc_ln109_reg_482_pp0_iter2_reg;
        trunc_ln117_1_reg_543 <= trunc_ln117_1_fu_344_p1;
        x_buf_addr_reg_537_pp0_iter3_reg <= x_buf_addr_reg_537;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln101_fu_161_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_116;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln101_fu_161_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
        res_i_stream_TDATA_blk_n = res_i_stream_TVALID;
    end else begin
        res_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln101_fu_161_p2 == 1'd0))) begin
        res_i_stream_TREADY = 1'b1;
    end else begin
        res_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        x_buf_ce0_local = 1'b1;
    end else begin
        x_buf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        x_buf_ce1_local = 1'b1;
    end else begin
        x_buf_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (icmp_ln101_reg_478_pp0_iter3_reg == 1'd0))) begin
        x_buf_we1_local = 1'b1;
    end else begin
        x_buf_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((1'b0 == ap_CS_iter3_fsm_state4)) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if (((1'b1 == ap_CS_iter3_fsm_state4) | ((1'b1 == ap_CS_iter4_fsm_state5) & (icmp_ln101_reg_478_pp0_iter3_reg == 1'd1)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln101_1_fu_167_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 10'd1);

assign add_ln101_fu_258_p2 = (ct_fu_112 + 7'd1);

assign add_ln102_fu_290_p2 = (select_ln101_fu_270_p3 + 4'd1);

assign add_ln117_fu_333_p2 = (sub_ln117_fu_327_p2 + zext_ln102_fu_306_p1);

assign add_ln123_1_fu_408_p2 = (tmp_1_reg_548 + trunc_ln109_1_reg_487_pp0_iter3_reg);

assign add_ln123_2_fu_412_p2 = (tmp_2_reg_553 + trunc_ln109_2_reg_492_pp0_iter3_reg);

assign add_ln123_3_fu_416_p2 = (tmp_3_reg_558 + trunc_ln109_3_reg_497_pp0_iter3_reg);

assign add_ln123_4_fu_420_p2 = (tmp_4_reg_563 + trunc_ln109_4_reg_502_pp0_iter3_reg);

assign add_ln123_5_fu_424_p2 = (tmp_5_reg_568 + trunc_ln109_5_reg_507_pp0_iter3_reg);

assign add_ln123_6_fu_428_p2 = (tmp_6_reg_573 + trunc_ln109_6_reg_512_pp0_iter3_reg);

assign add_ln123_7_fu_432_p2 = (tmp_8_reg_578 + trunc_ln109_7_reg_517_pp0_iter3_reg);

assign add_ln123_fu_404_p2 = (trunc_ln117_1_reg_543 + trunc_ln109_reg_482_pp0_iter3_reg);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln101_fu_161_p2 == 1'd0) & (res_i_stream_TVALID == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln101_fu_161_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln101_reg_478_pp0_iter0_reg = icmp_ln101_reg_478;

assign icmp_ln102_fu_264_p2 = ((tt_fu_108 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln101_1_fu_278_p3 = ((icmp_ln102_fu_264_p2[0:0] == 1'b1) ? add_ln101_fu_258_p2 : ct_fu_112);

assign select_ln101_fu_270_p3 = ((icmp_ln102_fu_264_p2[0:0] == 1'b1) ? 4'd0 : tt_fu_108);

assign sub_ln117_fu_327_p2 = (tmp_7_fu_316_p3 - zext_ln117_fu_323_p1);

assign tmp_7_fu_316_p3 = {{trunc_ln117_reg_532}, {7'd0}};

assign tmp_9_fu_436_p9 = {{{{{{{{add_ln123_7_fu_432_p2}, {add_ln123_6_fu_428_p2}}, {add_ln123_5_fu_424_p2}}, {add_ln123_4_fu_420_p2}}, {add_ln123_3_fu_416_p2}}, {add_ln123_2_fu_412_p2}}, {add_ln123_1_fu_408_p2}}, {add_ln123_fu_404_p2}};

assign tmp_fu_309_p3 = {{select_ln101_reg_522}, {4'd0}};

assign trunc_ln109_fu_173_p1 = res_i_stream_TDATA[25:0];

assign trunc_ln117_1_fu_344_p1 = x_buf_q0[25:0];

assign trunc_ln117_fu_286_p1 = select_ln101_fu_270_p3[2:0];

assign x_buf_address0 = zext_ln117_1_fu_339_p1;

assign x_buf_address1 = x_buf_addr_reg_537_pp0_iter3_reg;

assign x_buf_ce0 = x_buf_ce0_local;

assign x_buf_ce1 = x_buf_ce1_local;

assign x_buf_d1 = tmp_9_fu_436_p9;

assign x_buf_we1 = x_buf_we1_local;

assign zext_ln102_fu_306_p1 = select_ln101_1_reg_527;

assign zext_ln117_1_fu_339_p1 = add_ln117_fu_333_p2;

assign zext_ln117_fu_323_p1 = tmp_fu_309_p3;

endmodule //RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_101_11_VITIS_LOOP_102_12
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_stream_TREADY,
        res_o_stream_TREADY,
        res_o_stream_TDATA,
        res_o_stream_TVALID,
        x_buf_address0,
        x_buf_ce0,
        x_buf_q0,
        y_stream_TDATA,
        y_stream_TVALID,
        l_close
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   y_stream_TREADY;
input   res_o_stream_TREADY;
output  [207:0] res_o_stream_TDATA;
output   res_o_stream_TVALID;
output  [9:0] x_buf_address0;
output   x_buf_ce0;
input  [207:0] x_buf_q0;
output  [207:0] y_stream_TDATA;
output   y_stream_TVALID;
input  [31:0] l_close;

reg ap_idle;
reg res_o_stream_TVALID;
reg y_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln134_reg_273;
reg   [0:0] icmp_ln134_reg_273_pp0_iter2_reg;
reg   [0:0] run_cls_reg_269;
reg    ap_predicate_op49_write_state4;
reg    ap_predicate_op51_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln134_fu_139_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    res_o_stream_TDATA_blk_n;
reg    y_stream_TDATA_blk_n;
wire   [0:0] run_cls_fu_115_p2;
wire   [0:0] icmp_ln134_reg_273_pp0_iter0_reg;
reg   [0:0] icmp_ln134_reg_273_pp0_iter1_reg;
wire   [6:0] select_ln134_fu_174_p3;
reg   [6:0] select_ln134_reg_277;
wire   [3:0] select_ln134_1_fu_182_p3;
reg   [3:0] select_ln134_1_reg_282;
wire   [2:0] trunc_ln141_fu_190_p1;
reg   [2:0] trunc_ln141_reg_287;
wire   [63:0] zext_ln141_2_fu_243_p1;
reg   [6:0] ct_fu_68;
wire   [6:0] add_ln135_fu_194_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_72;
reg   [9:0] indvar_flatten20_fu_76;
wire   [9:0] add_ln134_1_fu_145_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten20_load;
reg    x_buf_ce0_local;
wire   [0:0] icmp_ln135_fu_168_p2;
wire   [3:0] add_ln134_fu_162_p2;
wire   [7:0] tmp_fu_210_p3;
wire   [9:0] tmp_3_fu_217_p3;
wire   [9:0] zext_ln141_fu_224_p1;
wire   [9:0] sub_ln135_fu_228_p2;
wire   [9:0] zext_ln141_1_fu_234_p1;
wire   [9:0] add_ln141_fu_237_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_91;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ct_fu_68 = 7'd0;
//#0 tt_fu_72 = 4'd0;
//#0 indvar_flatten20_fu_76 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

RESIDUAL_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_68 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln134_reg_273_pp0_iter0_reg == 1'd0))) begin
        ct_fu_68 <= add_ln135_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_91)) begin
        if ((icmp_ln134_fu_139_p2 == 1'd0)) begin
            indvar_flatten20_fu_76 <= add_ln134_1_fu_145_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_76 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_72 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln134_reg_273_pp0_iter0_reg == 1'd0))) begin
        tt_fu_72 <= select_ln134_1_fu_182_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln134_reg_273 <= icmp_ln134_fu_139_p2;
        run_cls_reg_269 <= run_cls_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln134_reg_273_pp0_iter1_reg <= icmp_ln134_reg_273;
        select_ln134_1_reg_282 <= select_ln134_1_fu_182_p3;
        select_ln134_reg_277 <= select_ln134_fu_174_p3;
        trunc_ln141_reg_287 <= trunc_ln141_fu_190_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln134_reg_273_pp0_iter2_reg <= icmp_ln134_reg_273_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln134_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_76;
    end
end

always @ (*) begin
    if (((ap_predicate_op51_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        res_o_stream_TDATA_blk_n = res_o_stream_TREADY;
    end else begin
        res_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op51_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        res_o_stream_TVALID = 1'b1;
    end else begin
        res_o_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        x_buf_ce0_local = 1'b1;
    end else begin
        x_buf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        y_stream_TDATA_blk_n = y_stream_TREADY;
    end else begin
        y_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        y_stream_TVALID = 1'b1;
    end else begin
        y_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((icmp_ln134_reg_273_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln134_1_fu_145_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 10'd1);

assign add_ln134_fu_162_p2 = (tt_fu_72 + 4'd1);

assign add_ln135_fu_194_p2 = (select_ln134_fu_174_p3 + 7'd1);

assign add_ln141_fu_237_p2 = (sub_ln135_fu_228_p2 + zext_ln141_1_fu_234_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((ap_predicate_op51_write_state4 == 1'b1) & (res_o_stream_TREADY == 1'b0)) | ((ap_predicate_op49_write_state4 == 1'b1) & (y_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_91 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op49_write_state4 = ((run_cls_reg_269 == 1'd0) & (icmp_ln134_reg_273_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op51_write_state4 = ((run_cls_reg_269 == 1'd1) & (icmp_ln134_reg_273_pp0_iter2_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln134_fu_139_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln134_reg_273_pp0_iter0_reg = icmp_ln134_reg_273;

assign icmp_ln135_fu_168_p2 = ((ct_fu_68 == 7'd112) ? 1'b1 : 1'b0);

assign res_o_stream_TDATA = x_buf_q0;

assign run_cls_fu_115_p2 = ((l_close == 32'd25) ? 1'b1 : 1'b0);

assign select_ln134_1_fu_182_p3 = ((icmp_ln135_fu_168_p2[0:0] == 1'b1) ? add_ln134_fu_162_p2 : tt_fu_72);

assign select_ln134_fu_174_p3 = ((icmp_ln135_fu_168_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_68);

assign sub_ln135_fu_228_p2 = (tmp_3_fu_217_p3 - zext_ln141_fu_224_p1);

assign tmp_3_fu_217_p3 = {{trunc_ln141_reg_287}, {7'd0}};

assign tmp_fu_210_p3 = {{select_ln134_1_reg_282}, {4'd0}};

assign trunc_ln141_fu_190_p1 = select_ln134_1_fu_182_p3[2:0];

assign x_buf_address0 = zext_ln141_2_fu_243_p1;

assign x_buf_ce0 = x_buf_ce0_local;

assign y_stream_TDATA = x_buf_q0;

assign zext_ln141_1_fu_234_p1 = select_ln134_reg_277;

assign zext_ln141_2_fu_243_p1 = add_ln141_fu_237_p2;

assign zext_ln141_fu_224_p1 = tmp_fu_210_p3;

endmodule //RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_134_19_VITIS_LOOP_135_20
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_stream_TVALID,
        x_buf_address1,
        x_buf_ce1,
        x_buf_we1,
        x_buf_d1,
        x_stream_TDATA,
        x_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_stream_TVALID;
output  [9:0] x_buf_address1;
output   x_buf_ce1;
output   x_buf_we1;
output  [207:0] x_buf_d1;
input  [207:0] x_stream_TDATA;
output   x_stream_TREADY;

reg ap_idle;
reg x_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln69_reg_244;
reg   [0:0] icmp_ln69_reg_244_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln69_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    x_stream_TDATA_blk_n;
wire   [0:0] icmp_ln69_reg_244_pp0_iter0_reg;
wire   [6:0] select_ln69_fu_149_p3;
reg   [6:0] select_ln69_reg_248;
wire   [3:0] select_ln69_1_fu_157_p3;
reg   [3:0] select_ln69_1_reg_253;
wire   [2:0] trunc_ln76_fu_165_p1;
reg   [2:0] trunc_ln76_reg_258;
wire   [63:0] zext_ln76_2_fu_218_p1;
reg   [6:0] ct_fu_60;
wire   [6:0] add_ln70_fu_169_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_64;
reg   [9:0] indvar_flatten_fu_68;
wire   [9:0] add_ln69_1_fu_120_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg    x_buf_we1_local;
reg    x_buf_ce1_local;
wire   [0:0] icmp_ln70_fu_143_p2;
wire   [3:0] add_ln69_fu_137_p2;
wire   [7:0] tmp_fu_185_p3;
wire   [9:0] tmp_2_fu_192_p3;
wire   [9:0] zext_ln76_fu_199_p1;
wire   [9:0] sub_ln70_fu_203_p2;
wire   [9:0] zext_ln76_1_fu_209_p1;
wire   [9:0] add_ln76_fu_212_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_60 = 7'd0;
//#0 tt_fu_64 = 4'd0;
//#0 indvar_flatten_fu_68 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

RESIDUAL_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_60 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (icmp_ln69_reg_244_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct_fu_60 <= add_ln70_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln69_fu_114_p2 == 1'd0)) begin
            indvar_flatten_fu_68 <= add_ln69_1_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_64 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (icmp_ln69_reg_244_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tt_fu_64 <= select_ln69_1_fu_157_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln69_reg_244 <= icmp_ln69_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln69_reg_244_pp0_iter1_reg <= icmp_ln69_reg_244;
        select_ln69_1_reg_253 <= select_ln69_1_fu_157_p3;
        select_ln69_reg_248 <= select_ln69_fu_149_p3;
        trunc_ln76_reg_258 <= trunc_ln76_fu_165_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln69_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        x_buf_ce1_local = 1'b1;
    end else begin
        x_buf_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_244_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        x_buf_we1_local = 1'b1;
    end else begin
        x_buf_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_244_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        x_stream_TDATA_blk_n = x_stream_TVALID;
    end else begin
        x_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_244_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        x_stream_TREADY = 1'b1;
    end else begin
        x_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln69_reg_244_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln69_1_fu_120_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln69_fu_137_p2 = (tt_fu_64 + 4'd1);

assign add_ln70_fu_169_p2 = (select_ln69_fu_149_p3 + 7'd1);

assign add_ln76_fu_212_p2 = (sub_ln70_fu_203_p2 + zext_ln76_1_fu_209_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln69_reg_244_pp0_iter1_reg == 1'd0) & (x_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln69_fu_114_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln69_reg_244_pp0_iter0_reg = icmp_ln69_reg_244;

assign icmp_ln70_fu_143_p2 = ((ct_fu_60 == 7'd112) ? 1'b1 : 1'b0);

assign select_ln69_1_fu_157_p3 = ((icmp_ln70_fu_143_p2[0:0] == 1'b1) ? add_ln69_fu_137_p2 : tt_fu_64);

assign select_ln69_fu_149_p3 = ((icmp_ln70_fu_143_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_60);

assign sub_ln70_fu_203_p2 = (tmp_2_fu_192_p3 - zext_ln76_fu_199_p1);

assign tmp_2_fu_192_p3 = {{trunc_ln76_reg_258}, {7'd0}};

assign tmp_fu_185_p3 = {{select_ln69_1_reg_253}, {4'd0}};

assign trunc_ln76_fu_165_p1 = select_ln69_1_fu_157_p3[2:0];

assign x_buf_address1 = zext_ln76_2_fu_218_p1;

assign x_buf_ce1 = x_buf_ce1_local;

assign x_buf_d1 = x_stream_TDATA;

assign x_buf_we1 = x_buf_we1_local;

assign zext_ln76_1_fu_209_p1 = select_ln69_reg_248;

assign zext_ln76_2_fu_218_p1 = add_ln76_fu_212_p2;

assign zext_ln76_fu_199_p1 = tmp_fu_185_p3;

endmodule //RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_69_1_VITIS_LOOP_70_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_o_stream_TREADY,
        x_buf_address0,
        x_buf_ce0,
        x_buf_q0,
        res_o_stream_TDATA,
        res_o_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   res_o_stream_TREADY;
output  [9:0] x_buf_address0;
output   x_buf_ce0;
input  [207:0] x_buf_q0;
output  [207:0] res_o_stream_TDATA;
output   res_o_stream_TVALID;

reg ap_idle;
reg res_o_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln87_reg_241;
reg   [0:0] icmp_ln87_reg_241_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln87_fu_111_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    res_o_stream_TDATA_blk_n;
wire   [0:0] icmp_ln87_reg_241_pp0_iter0_reg;
reg   [0:0] icmp_ln87_reg_241_pp0_iter1_reg;
wire   [6:0] select_ln87_fu_146_p3;
reg   [6:0] select_ln87_reg_245;
wire   [3:0] select_ln87_1_fu_154_p3;
reg   [3:0] select_ln87_1_reg_250;
wire   [2:0] trunc_ln94_fu_162_p1;
reg   [2:0] trunc_ln94_reg_255;
wire   [63:0] zext_ln94_2_fu_215_p1;
reg   [6:0] ct_fu_60;
wire   [6:0] add_ln88_fu_166_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_64;
reg   [9:0] indvar_flatten6_fu_68;
wire   [9:0] add_ln87_1_fu_117_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    x_buf_ce0_local;
wire   [0:0] icmp_ln88_fu_140_p2;
wire   [3:0] add_ln87_fu_134_p2;
wire   [7:0] tmp_fu_182_p3;
wire   [9:0] tmp_1_fu_189_p3;
wire   [9:0] zext_ln94_fu_196_p1;
wire   [9:0] sub_ln88_fu_200_p2;
wire   [9:0] zext_ln94_1_fu_206_p1;
wire   [9:0] add_ln94_fu_209_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_80;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ct_fu_60 = 7'd0;
//#0 tt_fu_64 = 4'd0;
//#0 indvar_flatten6_fu_68 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

RESIDUAL_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_60 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln87_reg_241_pp0_iter0_reg == 1'd0))) begin
        ct_fu_60 <= add_ln88_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_80)) begin
        if ((icmp_ln87_fu_111_p2 == 1'd0)) begin
            indvar_flatten6_fu_68 <= add_ln87_1_fu_117_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_68 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_64 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln87_reg_241_pp0_iter0_reg == 1'd0))) begin
        tt_fu_64 <= select_ln87_1_fu_154_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln87_reg_241 <= icmp_ln87_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln87_reg_241_pp0_iter1_reg <= icmp_ln87_reg_241;
        select_ln87_1_reg_250 <= select_ln87_1_fu_154_p3;
        select_ln87_reg_245 <= select_ln87_fu_146_p3;
        trunc_ln94_reg_255 <= trunc_ln94_fu_162_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln87_reg_241_pp0_iter2_reg <= icmp_ln87_reg_241_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln87_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_68;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_241_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        res_o_stream_TDATA_blk_n = res_o_stream_TREADY;
    end else begin
        res_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_241_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        res_o_stream_TVALID = 1'b1;
    end else begin
        res_o_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        x_buf_ce0_local = 1'b1;
    end else begin
        x_buf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((icmp_ln87_reg_241_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln87_1_fu_117_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln87_fu_134_p2 = (tt_fu_64 + 4'd1);

assign add_ln88_fu_166_p2 = (select_ln87_fu_146_p3 + 7'd1);

assign add_ln94_fu_209_p2 = (sub_ln88_fu_200_p2 + zext_ln94_1_fu_206_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln87_reg_241_pp0_iter2_reg == 1'd0) & (res_o_stream_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_80 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln87_fu_111_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln87_reg_241_pp0_iter0_reg = icmp_ln87_reg_241;

assign icmp_ln88_fu_140_p2 = ((ct_fu_60 == 7'd112) ? 1'b1 : 1'b0);

assign res_o_stream_TDATA = x_buf_q0;

assign select_ln87_1_fu_154_p3 = ((icmp_ln88_fu_140_p2[0:0] == 1'b1) ? add_ln87_fu_134_p2 : tt_fu_64);

assign select_ln87_fu_146_p3 = ((icmp_ln88_fu_140_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_60);

assign sub_ln88_fu_200_p2 = (tmp_1_fu_189_p3 - zext_ln94_fu_196_p1);

assign tmp_1_fu_189_p3 = {{trunc_ln94_reg_255}, {7'd0}};

assign tmp_fu_182_p3 = {{select_ln87_1_reg_250}, {4'd0}};

assign trunc_ln94_fu_162_p1 = select_ln87_1_fu_154_p3[2:0];

assign x_buf_address0 = zext_ln94_2_fu_215_p1;

assign x_buf_ce0 = x_buf_ce0_local;

assign zext_ln94_1_fu_206_p1 = select_ln87_reg_245;

assign zext_ln94_2_fu_215_p1 = add_ln94_fu_209_p2;

assign zext_ln94_fu_196_p1 = tmp_fu_182_p3;

endmodule //RESIDUAL_RESIDUAL_Pipeline_VITIS_LOOP_87_7_VITIS_LOOP_88_8
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RESIDUAL_x_buf_RAM_2P_URAM_1R1W (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 208;
parameter AddressWidth = 10;
parameter AddressRange = 896;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "hls_ultra" , cascade_height = 1 *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

