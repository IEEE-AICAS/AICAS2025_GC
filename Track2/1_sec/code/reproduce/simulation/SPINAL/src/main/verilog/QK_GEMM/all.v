/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="QK_GEMM_QK_GEMM,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.134000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=7694,HLS_SYN_LUT=9030,HLS_VERSION=2024_2}" *)

module QK_GEMM (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        pos_id,
        qk_q_stream_TDATA,
        qk_q_stream_TVALID,
        qk_q_stream_TREADY,
        qk_s_stream_TDATA,
        qk_s_stream_TVALID,
        qk_s_stream_TREADY,
        kq_cache_i_stream_TDATA,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TDATA,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        kq_cache_o_stream_TDATA,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ks_cache_o_stream_TDATA,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        r_stream_TDATA,
        r_stream_TVALID,
        r_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [31:0] pos_id;
input  [63:0] qk_q_stream_TDATA;
input   qk_q_stream_TVALID;
output   qk_q_stream_TREADY;
input  [7:0] qk_s_stream_TDATA;
input   qk_s_stream_TVALID;
output   qk_s_stream_TREADY;
input  [63:0] kq_cache_i_stream_TDATA;
input   kq_cache_i_stream_TVALID;
output   kq_cache_i_stream_TREADY;
input  [7:0] ks_cache_i_stream_TDATA;
input   ks_cache_i_stream_TVALID;
output   ks_cache_i_stream_TREADY;
output  [63:0] kq_cache_o_stream_TDATA;
output   kq_cache_o_stream_TVALID;
input   kq_cache_o_stream_TREADY;
output  [7:0] ks_cache_o_stream_TDATA;
output   ks_cache_o_stream_TVALID;
input   ks_cache_o_stream_TREADY;
output  [135:0] r_stream_TDATA;
output   r_stream_TVALID;
input   r_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_193;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_198;
wire   [31:0] add_ln83_fu_97_p2;
reg   [31:0] add_ln83_reg_204;
wire   [0:0] empty_fu_103_p2;
reg   [0:0] empty_reg_211;
wire   [0:0] empty_26_fu_109_p2;
reg   [0:0] empty_26_reg_216;
wire   [31:0] sub_ln83_fu_128_p2;
reg   [31:0] sub_ln83_reg_221;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln83_1_fu_144_p2;
reg   [31:0] sub_ln83_1_reg_227;
wire   [0:0] empty_27_fu_149_p2;
reg   [0:0] empty_27_reg_233;
wire    ap_CS_fsm_state3;
wire   [7:0] trunc_ln49_fu_153_p1;
reg   [7:0] trunc_ln49_reg_238;
wire    ap_CS_fsm_state4;
wire   [31:0] sub_ln83_2_fu_162_p2;
reg   [31:0] sub_ln83_2_reg_243;
wire   [63:0] grp_do_qk_gemm_fu_78_kq_cache_o_stream_TDATA;
wire   [7:0] grp_do_qk_gemm_fu_78_ks_cache_o_stream_TDATA;
wire   [135:0] grp_do_qk_gemm_fu_78_r_stream_TDATA;
wire    grp_do_qk_gemm_fu_78_ap_start;
wire    grp_do_qk_gemm_fu_78_qk_q_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_qk_s_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_kq_cache_i_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_kq_cache_o_stream_TVALID;
wire    grp_do_qk_gemm_fu_78_kq_cache_o_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_ks_cache_i_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_ks_cache_o_stream_TVALID;
wire    grp_do_qk_gemm_fu_78_ks_cache_o_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_ap_done;
wire    grp_do_qk_gemm_fu_78_r_stream_TVALID;
wire    grp_do_qk_gemm_fu_78_r_stream_TREADY;
wire    grp_do_qk_gemm_fu_78_ap_ready;
wire    grp_do_qk_gemm_fu_78_ap_idle;
reg    grp_do_qk_gemm_fu_78_ap_continue;
reg    grp_do_qk_gemm_fu_78_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln83_fu_170_p2;
wire    ap_CS_fsm_state6;
reg    ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready;
reg    ap_sync_reg_grp_do_qk_gemm_fu_78_ap_done;
reg    ap_block_state6_on_subcall_done;
wire    ap_sync_grp_do_qk_gemm_fu_78_ap_ready;
reg   [63:0] kq_cache_o_stream_TDATA_reg;
reg   [7:0] ks_cache_o_stream_TDATA_reg;
reg   [135:0] r_stream_TDATA_reg;
reg   [31:0] l_fu_56;
wire   [31:0] l_3_fu_175_p2;
wire   [31:0] smax_fu_123_p3;
wire   [30:0] trunc_ln49_1_fu_120_p1;
wire   [30:0] smax1_fu_133_p3;
wire   [31:0] zext_ln83_fu_140_p1;
wire   [31:0] umax_fu_157_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_kq_cache_o_stream_U_apdone_blk;
wire    regslice_both_ks_cache_o_stream_U_apdone_blk;
wire    regslice_both_r_stream_U_apdone_blk;
reg    ap_block_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_qk_q_stream_U_apdone_blk;
wire   [63:0] qk_q_stream_TDATA_int_regslice;
wire    qk_q_stream_TVALID_int_regslice;
reg    qk_q_stream_TREADY_int_regslice;
wire    regslice_both_qk_q_stream_U_ack_in;
wire    regslice_both_qk_s_stream_U_apdone_blk;
wire   [7:0] qk_s_stream_TDATA_int_regslice;
wire    qk_s_stream_TVALID_int_regslice;
reg    qk_s_stream_TREADY_int_regslice;
wire    regslice_both_qk_s_stream_U_ack_in;
wire    regslice_both_kq_cache_i_stream_U_apdone_blk;
wire   [63:0] kq_cache_i_stream_TDATA_int_regslice;
wire    kq_cache_i_stream_TVALID_int_regslice;
reg    kq_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_kq_cache_i_stream_U_ack_in;
wire    regslice_both_ks_cache_i_stream_U_apdone_blk;
wire   [7:0] ks_cache_i_stream_TDATA_int_regslice;
wire    ks_cache_i_stream_TVALID_int_regslice;
reg    ks_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_ks_cache_i_stream_U_ack_in;
reg   [63:0] kq_cache_o_stream_TDATA_int_regslice;
wire    kq_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_kq_cache_o_stream_U_vld_out;
reg   [7:0] ks_cache_o_stream_TDATA_int_regslice;
wire    ks_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_ks_cache_o_stream_U_vld_out;
reg   [135:0] r_stream_TDATA_int_regslice;
wire    r_stream_TREADY_int_regslice;
wire    regslice_both_r_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 7'd1;
//#0 grp_do_qk_gemm_fu_78_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_do_qk_gemm_fu_78_ap_done = 1'b0;
//#0 l_fu_56 = 32'd0;
end

QK_GEMM_do_qk_gemm grp_do_qk_gemm_fu_78(
    .pos_r(trunc_ln49_reg_238),
    .qk_q_stream_TDATA(qk_q_stream_TDATA_int_regslice),
    .qk_s_stream_TDATA(qk_s_stream_TDATA_int_regslice),
    .kq_cache_i_stream_TDATA(kq_cache_i_stream_TDATA_int_regslice),
    .ks_cache_i_stream_TDATA(ks_cache_i_stream_TDATA_int_regslice),
    .kq_cache_o_stream_TDATA(grp_do_qk_gemm_fu_78_kq_cache_o_stream_TDATA),
    .ks_cache_o_stream_TDATA(grp_do_qk_gemm_fu_78_ks_cache_o_stream_TDATA),
    .r_stream_TDATA(grp_do_qk_gemm_fu_78_r_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .pos_r_ap_vld(1'b1),
    .ap_start(grp_do_qk_gemm_fu_78_ap_start),
    .qk_q_stream_TVALID(qk_q_stream_TVALID_int_regslice),
    .qk_q_stream_TREADY(grp_do_qk_gemm_fu_78_qk_q_stream_TREADY),
    .qk_s_stream_TVALID(qk_s_stream_TVALID_int_regslice),
    .qk_s_stream_TREADY(grp_do_qk_gemm_fu_78_qk_s_stream_TREADY),
    .kq_cache_i_stream_TVALID(kq_cache_i_stream_TVALID_int_regslice),
    .kq_cache_i_stream_TREADY(grp_do_qk_gemm_fu_78_kq_cache_i_stream_TREADY),
    .kq_cache_o_stream_TVALID(grp_do_qk_gemm_fu_78_kq_cache_o_stream_TVALID),
    .kq_cache_o_stream_TREADY(grp_do_qk_gemm_fu_78_kq_cache_o_stream_TREADY),
    .ks_cache_i_stream_TVALID(ks_cache_i_stream_TVALID_int_regslice),
    .ks_cache_i_stream_TREADY(grp_do_qk_gemm_fu_78_ks_cache_i_stream_TREADY),
    .ks_cache_o_stream_TVALID(grp_do_qk_gemm_fu_78_ks_cache_o_stream_TVALID),
    .ks_cache_o_stream_TREADY(grp_do_qk_gemm_fu_78_ks_cache_o_stream_TREADY),
    .ap_done(grp_do_qk_gemm_fu_78_ap_done),
    .r_stream_TVALID(grp_do_qk_gemm_fu_78_r_stream_TVALID),
    .r_stream_TREADY(grp_do_qk_gemm_fu_78_r_stream_TREADY),
    .ap_ready(grp_do_qk_gemm_fu_78_ap_ready),
    .ap_idle(grp_do_qk_gemm_fu_78_ap_idle),
    .ap_continue(grp_do_qk_gemm_fu_78_ap_continue)
);

QK_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_qk_q_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qk_q_stream_TDATA),
    .vld_in(qk_q_stream_TVALID),
    .ack_in(regslice_both_qk_q_stream_U_ack_in),
    .data_out(qk_q_stream_TDATA_int_regslice),
    .vld_out(qk_q_stream_TVALID_int_regslice),
    .ack_out(qk_q_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_qk_q_stream_U_apdone_blk)
);

QK_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_qk_s_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qk_s_stream_TDATA),
    .vld_in(qk_s_stream_TVALID),
    .ack_in(regslice_both_qk_s_stream_U_ack_in),
    .data_out(qk_s_stream_TDATA_int_regslice),
    .vld_out(qk_s_stream_TVALID_int_regslice),
    .ack_out(qk_s_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_qk_s_stream_U_apdone_blk)
);

QK_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_kq_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(kq_cache_i_stream_TDATA),
    .vld_in(kq_cache_i_stream_TVALID),
    .ack_in(regslice_both_kq_cache_i_stream_U_ack_in),
    .data_out(kq_cache_i_stream_TDATA_int_regslice),
    .vld_out(kq_cache_i_stream_TVALID_int_regslice),
    .ack_out(kq_cache_i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_kq_cache_i_stream_U_apdone_blk)
);

QK_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_ks_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ks_cache_i_stream_TDATA),
    .vld_in(ks_cache_i_stream_TVALID),
    .ack_in(regslice_both_ks_cache_i_stream_U_ack_in),
    .data_out(ks_cache_i_stream_TDATA_int_regslice),
    .vld_out(ks_cache_i_stream_TVALID_int_regslice),
    .ack_out(ks_cache_i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_ks_cache_i_stream_U_apdone_blk)
);

QK_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_kq_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(kq_cache_o_stream_TDATA_int_regslice),
    .vld_in(grp_do_qk_gemm_fu_78_kq_cache_o_stream_TVALID),
    .ack_in(kq_cache_o_stream_TREADY_int_regslice),
    .data_out(kq_cache_o_stream_TDATA),
    .vld_out(regslice_both_kq_cache_o_stream_U_vld_out),
    .ack_out(kq_cache_o_stream_TREADY),
    .apdone_blk(regslice_both_kq_cache_o_stream_U_apdone_blk)
);

QK_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_ks_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ks_cache_o_stream_TDATA_int_regslice),
    .vld_in(grp_do_qk_gemm_fu_78_ks_cache_o_stream_TVALID),
    .ack_in(ks_cache_o_stream_TREADY_int_regslice),
    .data_out(ks_cache_o_stream_TDATA),
    .vld_out(regslice_both_ks_cache_o_stream_U_vld_out),
    .ack_out(ks_cache_o_stream_TREADY),
    .apdone_blk(regslice_both_ks_cache_o_stream_U_apdone_blk)
);

QK_GEMM_regslice_both #(
    .DataWidth( 136 ))
regslice_both_r_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(r_stream_TDATA_int_regslice),
    .vld_in(grp_do_qk_gemm_fu_78_r_stream_TVALID),
    .ack_in(r_stream_TREADY_int_regslice),
    .data_out(r_stream_TDATA),
    .vld_out(regslice_both_r_stream_U_vld_out),
    .ack_out(r_stream_TREADY),
    .apdone_blk(regslice_both_r_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_do_qk_gemm_fu_78_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_do_qk_gemm_fu_78_ap_done <= 1'b0;
        end else if ((grp_do_qk_gemm_fu_78_ap_done == 1'b1)) begin
            ap_sync_reg_grp_do_qk_gemm_fu_78_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready <= 1'b0;
        end else if ((grp_do_qk_gemm_fu_78_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_do_qk_gemm_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (ap_sync_grp_do_qk_gemm_fu_78_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln83_fu_170_p2 == 1'd0)))) begin
            grp_do_qk_gemm_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_do_qk_gemm_fu_78_ap_ready == 1'b1)) begin
            grp_do_qk_gemm_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_56 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln83_fu_170_p2 == 1'd0))) begin
        l_fu_56 <= l_3_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln83_reg_204 <= add_ln83_fu_97_p2;
        empty_26_reg_216 <= empty_26_fu_109_p2;
        empty_reg_211 <= empty_fu_103_p2;
        l_begin_read_reg_198 <= l_begin;
        l_close_read_reg_193 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_27_reg_233 <= empty_27_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_do_qk_gemm_fu_78_kq_cache_o_stream_TVALID == 1'b1))) begin
        kq_cache_o_stream_TDATA_reg <= grp_do_qk_gemm_fu_78_kq_cache_o_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_do_qk_gemm_fu_78_ks_cache_o_stream_TVALID == 1'b1))) begin
        ks_cache_o_stream_TDATA_reg <= grp_do_qk_gemm_fu_78_ks_cache_o_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_do_qk_gemm_fu_78_r_stream_TVALID == 1'b1))) begin
        r_stream_TDATA_reg <= grp_do_qk_gemm_fu_78_r_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln83_1_reg_227 <= sub_ln83_1_fu_144_p2;
        sub_ln83_reg_221 <= sub_ln83_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_ln83_2_reg_243 <= sub_ln83_2_fu_162_p2;
        trunc_ln49_reg_238 <= trunc_ln49_fu_153_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_do_qk_gemm_fu_78_ap_continue = 1'b1;
    end else begin
        grp_do_qk_gemm_fu_78_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kq_cache_i_stream_TREADY_int_regslice = grp_do_qk_gemm_fu_78_kq_cache_i_stream_TREADY;
    end else begin
        kq_cache_i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_do_qk_gemm_fu_78_kq_cache_o_stream_TVALID == 1'b1))) begin
        kq_cache_o_stream_TDATA_int_regslice = grp_do_qk_gemm_fu_78_kq_cache_o_stream_TDATA;
    end else begin
        kq_cache_o_stream_TDATA_int_regslice = kq_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ks_cache_i_stream_TREADY_int_regslice = grp_do_qk_gemm_fu_78_ks_cache_i_stream_TREADY;
    end else begin
        ks_cache_i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_do_qk_gemm_fu_78_ks_cache_o_stream_TVALID == 1'b1))) begin
        ks_cache_o_stream_TDATA_int_regslice = grp_do_qk_gemm_fu_78_ks_cache_o_stream_TDATA;
    end else begin
        ks_cache_o_stream_TDATA_int_regslice = ks_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        qk_q_stream_TREADY_int_regslice = grp_do_qk_gemm_fu_78_qk_q_stream_TREADY;
    end else begin
        qk_q_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        qk_s_stream_TREADY_int_regslice = grp_do_qk_gemm_fu_78_qk_s_stream_TREADY;
    end else begin
        qk_s_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_do_qk_gemm_fu_78_r_stream_TVALID == 1'b1))) begin
        r_stream_TDATA_int_regslice = grp_do_qk_gemm_fu_78_r_stream_TDATA;
    end else begin
        r_stream_TDATA_int_regslice = r_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln83_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_97_p2 = ($signed(l_begin) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready & ap_sync_reg_grp_do_qk_gemm_fu_78_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state7 = ((regslice_both_r_stream_U_apdone_blk == 1'b1) | (regslice_both_ks_cache_o_stream_U_apdone_blk == 1'b1) | (regslice_both_kq_cache_o_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_do_qk_gemm_fu_78_ap_ready = (grp_do_qk_gemm_fu_78_ap_ready | ap_sync_reg_grp_do_qk_gemm_fu_78_ap_ready);

assign empty_26_fu_109_p2 = (($signed(l_begin) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_27_fu_149_p2 = ((sub_ln83_reg_221 > sub_ln83_1_reg_227) ? 1'b1 : 1'b0);

assign empty_fu_103_p2 = (($signed(l_close) > $signed(l_begin)) ? 1'b1 : 1'b0);

assign grp_do_qk_gemm_fu_78_ap_start = grp_do_qk_gemm_fu_78_ap_start_reg;

assign grp_do_qk_gemm_fu_78_kq_cache_o_stream_TREADY = (kq_cache_o_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_do_qk_gemm_fu_78_ks_cache_o_stream_TREADY = (ks_cache_o_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_do_qk_gemm_fu_78_r_stream_TREADY = (r_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign icmp_ln83_fu_170_p2 = ((l_fu_56 == sub_ln83_2_reg_243) ? 1'b1 : 1'b0);

assign kq_cache_i_stream_TREADY = regslice_both_kq_cache_i_stream_U_ack_in;

assign kq_cache_o_stream_TVALID = regslice_both_kq_cache_o_stream_U_vld_out;

assign ks_cache_i_stream_TREADY = regslice_both_ks_cache_i_stream_U_ack_in;

assign ks_cache_o_stream_TVALID = regslice_both_ks_cache_o_stream_U_vld_out;

assign l_3_fu_175_p2 = (l_fu_56 + 32'd1);

assign qk_q_stream_TREADY = regslice_both_qk_q_stream_U_ack_in;

assign qk_s_stream_TREADY = regslice_both_qk_s_stream_U_ack_in;

assign r_stream_TVALID = regslice_both_r_stream_U_vld_out;

assign smax1_fu_133_p3 = ((empty_26_reg_216[0:0] == 1'b1) ? trunc_ln49_1_fu_120_p1 : 31'd24);

assign smax_fu_123_p3 = ((empty_reg_211[0:0] == 1'b1) ? l_close_read_reg_193 : l_begin_read_reg_198);

assign sub_ln83_1_fu_144_p2 = (add_ln83_reg_204 - zext_ln83_fu_140_p1);

assign sub_ln83_2_fu_162_p2 = (add_ln83_reg_204 - umax_fu_157_p3);

assign sub_ln83_fu_128_p2 = (add_ln83_reg_204 - smax_fu_123_p3);

assign trunc_ln49_1_fu_120_p1 = l_begin_read_reg_198[30:0];

assign trunc_ln49_fu_153_p1 = pos_id[7:0];

assign umax_fu_157_p3 = ((empty_27_reg_233[0:0] == 1'b1) ? sub_ln83_reg_221 : sub_ln83_1_reg_227);

assign zext_ln83_fu_140_p1 = smax1_fu_133_p3;

endmodule //QK_GEMM
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_dataflow_in_loop_x_1 (
        ap_clk,
        ap_rst,
        pos_r,
        kq_stream_dout,
        kq_stream_empty_n,
        kq_stream_read,
        kq_cache_i_stream_TDATA,
        kq_cache_o_stream_TDATA,
        ks_stream_dout,
        ks_stream_empty_n,
        ks_stream_read,
        ks_cache_i_stream_TDATA,
        ks_cache_o_stream_TDATA,
        kq_stream_r_din,
        kq_stream_r_full_n,
        kq_stream_r_write,
        ks_stream_r_din,
        ks_stream_r_full_n,
        ks_stream_r_write,
        pos_r_ap_vld,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ap_start,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [7:0] pos_r;
input  [63:0] kq_stream_dout;
input   kq_stream_empty_n;
output   kq_stream_read;
input  [63:0] kq_cache_i_stream_TDATA;
output  [63:0] kq_cache_o_stream_TDATA;
input  [3:0] ks_stream_dout;
input   ks_stream_empty_n;
output   ks_stream_read;
input  [7:0] ks_cache_i_stream_TDATA;
output  [7:0] ks_cache_o_stream_TDATA;
output  [511:0] kq_stream_r_din;
input   kq_stream_r_full_n;
output   kq_stream_r_write;
output  [31:0] ks_stream_r_din;
input   ks_stream_r_full_n;
output   ks_stream_r_write;
input   pos_r_ap_vld;
input   kq_cache_i_stream_TVALID;
output   kq_cache_i_stream_TREADY;
output   kq_cache_o_stream_TVALID;
input   kq_cache_o_stream_TREADY;
input   ap_start;
input   ks_cache_i_stream_TVALID;
output   ks_cache_i_stream_TREADY;
output   ks_cache_o_stream_TVALID;
input   ks_cache_o_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [3:0] ks_cache_buffer_i_q0;
wire   [3:0] ks_cache_buffer_i_q1;
wire   [3:0] ks_cache_buffer_t_q0;
wire   [3:0] ks_cache_buffer_t_q1;
wire   [3:0] ks_cache_buffer_1_44_i_q0;
wire   [3:0] ks_cache_buffer_1_44_i_q1;
wire   [3:0] ks_cache_buffer_1_44_t_q0;
wire   [3:0] ks_cache_buffer_1_44_t_q1;
wire   [3:0] ks_cache_buffer_1_i_q0;
wire   [3:0] ks_cache_buffer_1_i_q1;
wire   [3:0] ks_cache_buffer_1_t_q0;
wire   [3:0] ks_cache_buffer_1_t_q1;
wire   [3:0] ks_cache_buffer_2_i_q0;
wire   [3:0] ks_cache_buffer_2_i_q1;
wire   [3:0] ks_cache_buffer_2_t_q0;
wire   [3:0] ks_cache_buffer_2_t_q1;
wire   [63:0] kq_cache_buffer_i_q0;
wire   [63:0] kq_cache_buffer_i_q1;
wire   [63:0] kq_cache_buffer_t_q0;
wire   [63:0] kq_cache_buffer_t_q1;
wire   [63:0] kq_cache_buffer_1_i_q0;
wire   [63:0] kq_cache_buffer_1_i_q1;
wire   [63:0] kq_cache_buffer_1_t_q0;
wire   [63:0] kq_cache_buffer_1_t_q1;
wire   [63:0] kq_cache_buffer_2_i_q0;
wire   [63:0] kq_cache_buffer_2_i_q1;
wire   [63:0] kq_cache_buffer_2_t_q0;
wire   [63:0] kq_cache_buffer_2_t_q1;
wire   [63:0] kq_cache_buffer_3_i_q0;
wire   [63:0] kq_cache_buffer_3_i_q1;
wire   [63:0] kq_cache_buffer_3_t_q0;
wire   [63:0] kq_cache_buffer_3_t_q1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_ap_start;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_ap_done;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_ap_continue;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_ap_idle;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_kq_stream_read;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_i_stream_TREADY;
wire   [63:0] update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_o_stream_TDATA;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_o_stream_TVALID;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_address0;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_ce0;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_address1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_ce1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_we1;
wire   [63:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_d1;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_address0;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_ce0;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_address1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_ce1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_we1;
wire   [63:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_d1;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_address0;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_ce0;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_address1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_ce1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_we1;
wire   [63:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_d1;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_address0;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_ce0;
wire   [8:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_address1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_ce1;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_we1;
wire   [63:0] update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_d1;
wire    ap_channel_done_kq_cache_buffer;
wire    update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_full_n;
reg    ap_sync_reg_channel_write_kq_cache_buffer;
wire    ap_sync_channel_write_kq_cache_buffer;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ap_start;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ap_done;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ap_continue;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ap_idle;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ks_stream_read;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_i_stream_TREADY;
wire   [7:0] update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_o_stream_TDATA;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_o_stream_TVALID;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_address0;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_ce0;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_address1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_ce1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_we1;
wire   [3:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_d1;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_address0;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_ce0;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_address1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_ce1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_we1;
wire   [3:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_d1;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_address0;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_ce0;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_address1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_ce1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_we1;
wire   [3:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_d1;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_address0;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_ce0;
wire   [8:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_address1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_ce1;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_we1;
wire   [3:0] update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_d1;
wire    ap_channel_done_ks_cache_buffer;
wire    update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_full_n;
reg    ap_sync_reg_channel_write_ks_cache_buffer;
wire    ap_sync_channel_write_ks_cache_buffer;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_start;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_done;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_continue;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_idle;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_ready;
wire   [511:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_kq_stream_r_din;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_kq_stream_r_write;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_address0;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_address1;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_ce1;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_address0;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_address1;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_ce1;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_address0;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_address1;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_ce1;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_address0;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_address1;
wire    repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_ce1;
wire    ap_sync_continue;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_start;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_done;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_continue;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_idle;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_ready;
wire   [31:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ks_stream_r_din;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ks_stream_r_write;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_address0;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_address1;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_ce1;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_address0;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_address1;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_ce1;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_address0;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_address1;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_ce1;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_address0;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_address1;
wire    repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_ce1;
wire    kq_cache_buffer_3_i_full_n;
wire    kq_cache_buffer_3_t_empty_n;
wire    kq_cache_buffer_2_i_full_n;
wire    kq_cache_buffer_2_t_empty_n;
wire    kq_cache_buffer_1_i_full_n;
wire    kq_cache_buffer_1_t_empty_n;
wire    kq_cache_buffer_i_full_n;
wire    kq_cache_buffer_t_empty_n;
wire    ks_cache_buffer_2_i_full_n;
wire    ks_cache_buffer_2_t_empty_n;
wire    ks_cache_buffer_1_i_full_n;
wire    ks_cache_buffer_1_t_empty_n;
wire    ks_cache_buffer_1_44_i_full_n;
wire    ks_cache_buffer_1_44_t_empty_n;
wire    ks_cache_buffer_i_full_n;
wire    ks_cache_buffer_t_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready;
wire    ap_sync_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready;
reg    ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready;
wire    ap_sync_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_channel_write_kq_cache_buffer = 1'b0;
//#0 ap_sync_reg_channel_write_ks_cache_buffer = 1'b0;
//#0 ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready = 1'b0;
end

QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
ks_cache_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_address0),
    .i_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_ce0),
    .i_q0(ks_cache_buffer_i_q0),
    .i_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_address1),
    .i_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_ce1),
    .i_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_we1),
    .i_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_d1),
    .i_q1(ks_cache_buffer_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_ce0),
    .t_q0(ks_cache_buffer_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(ks_cache_buffer_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(ks_cache_buffer_i_full_n),
    .i_write(ap_channel_done_ks_cache_buffer),
    .t_empty_n(ks_cache_buffer_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
ks_cache_buffer_1_44_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_address0),
    .i_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_ce0),
    .i_q0(ks_cache_buffer_1_44_i_q0),
    .i_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_address1),
    .i_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_ce1),
    .i_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_we1),
    .i_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_d1),
    .i_q1(ks_cache_buffer_1_44_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_ce0),
    .t_q0(ks_cache_buffer_1_44_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(ks_cache_buffer_1_44_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(ks_cache_buffer_1_44_i_full_n),
    .i_write(ap_channel_done_ks_cache_buffer),
    .t_empty_n(ks_cache_buffer_1_44_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
ks_cache_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_address0),
    .i_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_ce0),
    .i_q0(ks_cache_buffer_1_i_q0),
    .i_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_address1),
    .i_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_ce1),
    .i_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_we1),
    .i_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_d1),
    .i_q1(ks_cache_buffer_1_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_ce0),
    .t_q0(ks_cache_buffer_1_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(ks_cache_buffer_1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(ks_cache_buffer_1_i_full_n),
    .i_write(ap_channel_done_ks_cache_buffer),
    .t_empty_n(ks_cache_buffer_1_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
ks_cache_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_address0),
    .i_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_ce0),
    .i_q0(ks_cache_buffer_2_i_q0),
    .i_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_address1),
    .i_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_ce1),
    .i_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_we1),
    .i_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_d1),
    .i_q1(ks_cache_buffer_2_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_ce0),
    .t_q0(ks_cache_buffer_2_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(ks_cache_buffer_2_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(ks_cache_buffer_2_i_full_n),
    .i_write(ap_channel_done_ks_cache_buffer),
    .t_empty_n(ks_cache_buffer_2_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
kq_cache_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_address0),
    .i_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_ce0),
    .i_q0(kq_cache_buffer_i_q0),
    .i_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_address1),
    .i_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_ce1),
    .i_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_we1),
    .i_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_d1),
    .i_q1(kq_cache_buffer_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_ce0),
    .t_q0(kq_cache_buffer_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(kq_cache_buffer_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(kq_cache_buffer_i_full_n),
    .i_write(ap_channel_done_kq_cache_buffer),
    .t_empty_n(kq_cache_buffer_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
kq_cache_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_address0),
    .i_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_ce0),
    .i_q0(kq_cache_buffer_1_i_q0),
    .i_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_address1),
    .i_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_ce1),
    .i_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_we1),
    .i_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_d1),
    .i_q1(kq_cache_buffer_1_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_ce0),
    .t_q0(kq_cache_buffer_1_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(kq_cache_buffer_1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(kq_cache_buffer_1_i_full_n),
    .i_write(ap_channel_done_kq_cache_buffer),
    .t_empty_n(kq_cache_buffer_1_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
kq_cache_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_address0),
    .i_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_ce0),
    .i_q0(kq_cache_buffer_2_i_q0),
    .i_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_address1),
    .i_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_ce1),
    .i_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_we1),
    .i_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_d1),
    .i_q1(kq_cache_buffer_2_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_ce0),
    .t_q0(kq_cache_buffer_2_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(kq_cache_buffer_2_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(kq_cache_buffer_2_i_full_n),
    .i_write(ap_channel_done_kq_cache_buffer),
    .t_empty_n(kq_cache_buffer_2_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
kq_cache_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_address0),
    .i_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_ce0),
    .i_q0(kq_cache_buffer_3_i_q0),
    .i_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_address1),
    .i_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_ce1),
    .i_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_we1),
    .i_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_d1),
    .i_q1(kq_cache_buffer_3_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_ce0),
    .t_q0(kq_cache_buffer_3_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(kq_cache_buffer_3_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(kq_cache_buffer_3_i_full_n),
    .i_write(ap_channel_done_kq_cache_buffer),
    .t_empty_n(kq_cache_buffer_3_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_ready)
);

QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_s update_k_cache_ap_int_8_8_192_64_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(update_k_cache_ap_int_8_8_192_64_8_U0_ap_start),
    .ap_done(update_k_cache_ap_int_8_8_192_64_8_U0_ap_done),
    .ap_continue(update_k_cache_ap_int_8_8_192_64_8_U0_ap_continue),
    .ap_idle(update_k_cache_ap_int_8_8_192_64_8_U0_ap_idle),
    .ap_ready(update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready),
    .pos_r(pos_r),
    .kq_stream_dout(kq_stream_dout),
    .kq_stream_empty_n(kq_stream_empty_n),
    .kq_stream_read(update_k_cache_ap_int_8_8_192_64_8_U0_kq_stream_read),
    .kq_stream_num_data_valid(3'd0),
    .kq_stream_fifo_cap(3'd0),
    .kq_cache_i_stream_TDATA(kq_cache_i_stream_TDATA),
    .kq_cache_i_stream_TVALID(kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_i_stream_TREADY),
    .kq_cache_o_stream_TDATA(update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_o_stream_TDATA),
    .kq_cache_o_stream_TVALID(update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_o_stream_TVALID),
    .kq_cache_o_stream_TREADY(kq_cache_o_stream_TREADY),
    .cache_0_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_address0),
    .cache_0_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_ce0),
    .cache_0_q0(kq_cache_buffer_3_i_q0),
    .cache_0_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_address1),
    .cache_0_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_ce1),
    .cache_0_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_we1),
    .cache_0_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_0_d1),
    .cache_1_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_address0),
    .cache_1_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_ce0),
    .cache_1_q0(kq_cache_buffer_2_i_q0),
    .cache_1_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_address1),
    .cache_1_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_ce1),
    .cache_1_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_we1),
    .cache_1_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_1_d1),
    .cache_2_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_address0),
    .cache_2_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_ce0),
    .cache_2_q0(kq_cache_buffer_1_i_q0),
    .cache_2_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_address1),
    .cache_2_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_ce1),
    .cache_2_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_we1),
    .cache_2_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_2_d1),
    .cache_3_address0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_address0),
    .cache_3_ce0(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_ce0),
    .cache_3_q0(kq_cache_buffer_i_q0),
    .cache_3_address1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_address1),
    .cache_3_ce1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_ce1),
    .cache_3_we1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_we1),
    .cache_3_d1(update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_d1)
);

QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_s update_k_cache_ap_uint_4_8_192_8_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(update_k_cache_ap_uint_4_8_192_8_1_U0_ap_start),
    .ap_done(update_k_cache_ap_uint_4_8_192_8_1_U0_ap_done),
    .ap_continue(update_k_cache_ap_uint_4_8_192_8_1_U0_ap_continue),
    .ap_idle(update_k_cache_ap_uint_4_8_192_8_1_U0_ap_idle),
    .ap_ready(update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready),
    .pos_r(pos_r),
    .ks_stream_dout(ks_stream_dout),
    .ks_stream_empty_n(ks_stream_empty_n),
    .ks_stream_read(update_k_cache_ap_uint_4_8_192_8_1_U0_ks_stream_read),
    .ks_stream_num_data_valid(3'd0),
    .ks_stream_fifo_cap(3'd0),
    .ks_cache_i_stream_TDATA(ks_cache_i_stream_TDATA),
    .ks_cache_i_stream_TVALID(ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_i_stream_TREADY),
    .ks_cache_o_stream_TDATA(update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_o_stream_TDATA),
    .ks_cache_o_stream_TVALID(update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_o_stream_TVALID),
    .ks_cache_o_stream_TREADY(ks_cache_o_stream_TREADY),
    .cache_0_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_address0),
    .cache_0_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_ce0),
    .cache_0_q0(ks_cache_buffer_2_i_q0),
    .cache_0_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_address1),
    .cache_0_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_ce1),
    .cache_0_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_we1),
    .cache_0_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_0_d1),
    .cache_1_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_address0),
    .cache_1_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_ce0),
    .cache_1_q0(ks_cache_buffer_1_i_q0),
    .cache_1_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_address1),
    .cache_1_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_ce1),
    .cache_1_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_we1),
    .cache_1_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_1_d1),
    .cache_2_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_address0),
    .cache_2_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_ce0),
    .cache_2_q0(ks_cache_buffer_1_44_i_q0),
    .cache_2_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_address1),
    .cache_2_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_ce1),
    .cache_2_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_we1),
    .cache_2_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_2_d1),
    .cache_3_address0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_address0),
    .cache_3_ce0(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_ce0),
    .cache_3_q0(ks_cache_buffer_i_q0),
    .cache_3_address1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_address1),
    .cache_3_ce1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_ce1),
    .cache_3_we1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_we1),
    .cache_3_d1(update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_d1)
);

QK_GEMM_repeat_w_tokens_ap_int_8_8_192_8_64_8_s repeat_w_tokens_ap_int_8_8_192_8_64_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_start),
    .ap_done(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_done),
    .ap_continue(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_continue),
    .ap_idle(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_idle),
    .ap_ready(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_ready),
    .kq_stream_r_din(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_kq_stream_r_din),
    .kq_stream_r_full_n(kq_stream_r_full_n),
    .kq_stream_r_write(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_kq_stream_r_write),
    .kq_stream_r_num_data_valid(3'd0),
    .kq_stream_r_fifo_cap(3'd0),
    .src_0_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_address0),
    .src_0_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_ce0),
    .src_0_q0(kq_cache_buffer_3_t_q0),
    .src_0_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_address1),
    .src_0_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_0_ce1),
    .src_0_q1(kq_cache_buffer_3_t_q1),
    .src_1_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_address0),
    .src_1_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_ce0),
    .src_1_q0(kq_cache_buffer_2_t_q0),
    .src_1_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_address1),
    .src_1_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_1_ce1),
    .src_1_q1(kq_cache_buffer_2_t_q1),
    .src_2_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_address0),
    .src_2_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_ce0),
    .src_2_q0(kq_cache_buffer_1_t_q0),
    .src_2_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_address1),
    .src_2_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_2_ce1),
    .src_2_q1(kq_cache_buffer_1_t_q1),
    .src_3_address0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_address0),
    .src_3_ce0(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_ce0),
    .src_3_q0(kq_cache_buffer_t_q0),
    .src_3_address1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_address1),
    .src_3_ce1(repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_src_3_ce1),
    .src_3_q1(kq_cache_buffer_t_q1)
);

QK_GEMM_repeat_w_tokens_ap_uint_4_8_192_8_8_1_s repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_start),
    .ap_done(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_done),
    .ap_continue(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_continue),
    .ap_idle(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_idle),
    .ap_ready(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_ready),
    .ks_stream_r_din(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ks_stream_r_din),
    .ks_stream_r_full_n(ks_stream_r_full_n),
    .ks_stream_r_write(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ks_stream_r_write),
    .ks_stream_r_num_data_valid(3'd0),
    .ks_stream_r_fifo_cap(3'd0),
    .src_0_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_address0),
    .src_0_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_ce0),
    .src_0_q0(ks_cache_buffer_2_t_q0),
    .src_0_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_address1),
    .src_0_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_0_ce1),
    .src_0_q1(ks_cache_buffer_2_t_q1),
    .src_1_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_address0),
    .src_1_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_ce0),
    .src_1_q0(ks_cache_buffer_1_t_q0),
    .src_1_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_address1),
    .src_1_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_1_ce1),
    .src_1_q1(ks_cache_buffer_1_t_q1),
    .src_2_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_address0),
    .src_2_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_ce0),
    .src_2_q0(ks_cache_buffer_1_44_t_q0),
    .src_2_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_address1),
    .src_2_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_2_ce1),
    .src_2_q1(ks_cache_buffer_1_44_t_q1),
    .src_3_address0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_address0),
    .src_3_ce0(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_ce0),
    .src_3_q0(ks_cache_buffer_t_q0),
    .src_3_address1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_address1),
    .src_3_ce1(repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_src_3_ce1),
    .src_3_q1(ks_cache_buffer_t_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_kq_cache_buffer <= 1'b0;
    end else begin
        if (((update_k_cache_ap_int_8_8_192_64_8_U0_ap_done & update_k_cache_ap_int_8_8_192_64_8_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_kq_cache_buffer <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_kq_cache_buffer <= ap_sync_channel_write_kq_cache_buffer;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ks_cache_buffer <= 1'b0;
    end else begin
        if (((update_k_cache_ap_uint_4_8_192_8_1_U0_ap_done & update_k_cache_ap_uint_4_8_192_8_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ks_cache_buffer <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ks_cache_buffer <= ap_sync_channel_write_ks_cache_buffer;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready <= ap_sync_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready <= ap_sync_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready;
        end
    end
end

assign ap_channel_done_kq_cache_buffer = (update_k_cache_ap_int_8_8_192_64_8_U0_ap_done & (ap_sync_reg_channel_write_kq_cache_buffer ^ 1'b1));

assign ap_channel_done_ks_cache_buffer = (update_k_cache_ap_uint_4_8_192_8_1_U0_ap_done & (ap_sync_reg_channel_write_ks_cache_buffer ^ 1'b1));

assign ap_done = ap_sync_done;

assign ap_idle = (update_k_cache_ap_uint_4_8_192_8_1_U0_ap_idle & update_k_cache_ap_int_8_8_192_64_8_U0_ap_idle & repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_idle & repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_idle & (ks_cache_buffer_t_empty_n ^ 1'b1) & (kq_cache_buffer_t_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_kq_cache_buffer = ((update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_full_n & ap_channel_done_kq_cache_buffer) | ap_sync_reg_channel_write_kq_cache_buffer);

assign ap_sync_channel_write_ks_cache_buffer = ((update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_full_n & ap_channel_done_ks_cache_buffer) | ap_sync_reg_channel_write_ks_cache_buffer);

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_done & repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_done);

assign ap_sync_ready = (ap_sync_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready & ap_sync_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready);

assign ap_sync_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready = (update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready | ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready);

assign ap_sync_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready = (update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready | ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready);

assign kq_cache_i_stream_TREADY = update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_i_stream_TREADY;

assign kq_cache_o_stream_TDATA = update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_o_stream_TDATA;

assign kq_cache_o_stream_TVALID = update_k_cache_ap_int_8_8_192_64_8_U0_kq_cache_o_stream_TVALID;

assign kq_stream_r_din = repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_kq_stream_r_din;

assign kq_stream_r_write = repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_kq_stream_r_write;

assign kq_stream_read = update_k_cache_ap_int_8_8_192_64_8_U0_kq_stream_read;

assign ks_cache_i_stream_TREADY = update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_i_stream_TREADY;

assign ks_cache_o_stream_TDATA = update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_o_stream_TDATA;

assign ks_cache_o_stream_TVALID = update_k_cache_ap_uint_4_8_192_8_1_U0_ks_cache_o_stream_TVALID;

assign ks_stream_r_din = repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ks_stream_r_din;

assign ks_stream_r_write = repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ks_stream_r_write;

assign ks_stream_read = update_k_cache_ap_uint_4_8_192_8_1_U0_ks_stream_read;

assign repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_continue = ap_sync_continue;

assign repeat_w_tokens_ap_int_8_8_192_8_64_8_U0_ap_start = kq_cache_buffer_t_empty_n;

assign repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_continue = ap_sync_continue;

assign repeat_w_tokens_ap_uint_4_8_192_8_8_1_U0_ap_start = ks_cache_buffer_t_empty_n;

assign update_k_cache_ap_int_8_8_192_64_8_U0_ap_continue = ap_sync_channel_write_kq_cache_buffer;

assign update_k_cache_ap_int_8_8_192_64_8_U0_ap_start = ((ap_sync_reg_update_k_cache_ap_int_8_8_192_64_8_U0_ap_ready ^ 1'b1) & ap_start);

assign update_k_cache_ap_int_8_8_192_64_8_U0_cache_3_full_n = kq_cache_buffer_i_full_n;

assign update_k_cache_ap_uint_4_8_192_8_1_U0_ap_continue = ap_sync_channel_write_ks_cache_buffer;

assign update_k_cache_ap_uint_4_8_192_8_1_U0_ap_start = ((ap_sync_reg_update_k_cache_ap_uint_4_8_192_8_1_U0_ap_ready ^ 1'b1) & ap_start);

assign update_k_cache_ap_uint_4_8_192_8_1_U0_cache_3_full_n = ks_cache_buffer_i_full_n;

endmodule //QK_GEMM_dataflow_in_loop_x_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_dataflow_in_loop_x_122 (
        ap_clk,
        ap_rst,
        qq_stream_dout,
        qq_stream_empty_n,
        qq_stream_read,
        qs_stream_dout,
        qs_stream_empty_n,
        qs_stream_read,
        qq_stream_r_din,
        qq_stream_r_full_n,
        qq_stream_r_write,
        qs_stream_r_din,
        qs_stream_r_full_n,
        qs_stream_r_write,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [63:0] qq_stream_dout;
input   qq_stream_empty_n;
output   qq_stream_read;
input  [3:0] qs_stream_dout;
input   qs_stream_empty_n;
output   qs_stream_read;
output  [63:0] qq_stream_r_din;
input   qq_stream_r_full_n;
output   qq_stream_r_write;
output  [3:0] qs_stream_r_din;
input   qs_stream_r_full_n;
output   qs_stream_r_write;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [3:0] qs_buffer_i_q0;
wire   [3:0] qs_buffer_t_q0;
wire   [63:0] qq_buffer_i_q0;
wire   [63:0] qq_buffer_t_q0;
wire    pack_tokens_ap_int_8_8_64_8_U0_ap_start;
wire    pack_tokens_ap_int_8_8_64_8_U0_ap_done;
wire    pack_tokens_ap_int_8_8_64_8_U0_ap_continue;
wire    pack_tokens_ap_int_8_8_64_8_U0_ap_idle;
wire    pack_tokens_ap_int_8_8_64_8_U0_ap_ready;
wire    pack_tokens_ap_int_8_8_64_8_U0_qq_stream_read;
wire   [5:0] pack_tokens_ap_int_8_8_64_8_U0_buffer_r_address1;
wire    pack_tokens_ap_int_8_8_64_8_U0_buffer_r_ce1;
wire    pack_tokens_ap_int_8_8_64_8_U0_buffer_r_we1;
wire   [63:0] pack_tokens_ap_int_8_8_64_8_U0_buffer_r_d1;
wire    pack_tokens_ap_uint_4_8_8_1_U0_ap_start;
wire    pack_tokens_ap_uint_4_8_8_1_U0_ap_done;
wire    pack_tokens_ap_uint_4_8_8_1_U0_ap_continue;
wire    pack_tokens_ap_uint_4_8_8_1_U0_ap_idle;
wire    pack_tokens_ap_uint_4_8_8_1_U0_ap_ready;
wire    pack_tokens_ap_uint_4_8_8_1_U0_qs_stream_read;
wire   [5:0] pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_address0;
wire    pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_ce0;
wire    pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_we0;
wire   [3:0] pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_d0;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_start;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_done;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_continue;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_idle;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_ready;
wire   [63:0] repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_qq_stream_r_din;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_qq_stream_r_write;
wire   [5:0] repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_src_address0;
wire    repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_src_ce0;
wire    ap_sync_continue;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_start;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_done;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_continue;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_idle;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_ready;
wire   [3:0] repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_qs_stream_r_din;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_qs_stream_r_write;
wire   [5:0] repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_src_address0;
wire    repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_src_ce0;
wire    qq_buffer_i_full_n;
wire    qq_buffer_t_empty_n;
wire    qs_buffer_i_full_n;
wire    qs_buffer_t_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready;
wire    ap_sync_pack_tokens_ap_int_8_8_64_8_U0_ap_ready;
reg    ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready;
wire    ap_sync_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready = 1'b0;
end

QK_GEMM_dataflow_in_loop_x_122_qs_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
qs_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_address0),
    .i_ce0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_ce0),
    .i_we0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_we0),
    .i_d0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_d0),
    .i_q0(qs_buffer_i_q0),
    .t_address0(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_src_address0),
    .t_ce0(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_src_ce0),
    .t_we0(1'b0),
    .t_d0(4'd0),
    .t_q0(qs_buffer_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(qs_buffer_i_full_n),
    .i_write(pack_tokens_ap_uint_4_8_8_1_U0_ap_done),
    .t_empty_n(qs_buffer_t_empty_n),
    .t_read(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_ready)
);

QK_GEMM_dataflow_in_loop_x_122_qq_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
qq_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(6'd0),
    .i_ce0(1'b0),
    .i_q0(qq_buffer_i_q0),
    .i_address1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_address1),
    .i_ce1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_ce1),
    .i_we1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_we1),
    .i_d1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_d1),
    .t_address0(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_src_address0),
    .t_ce0(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_src_ce0),
    .t_q0(qq_buffer_t_q0),
    .t_address1(6'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(qq_buffer_i_full_n),
    .i_write(pack_tokens_ap_int_8_8_64_8_U0_ap_done),
    .t_empty_n(qq_buffer_t_empty_n),
    .t_read(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_ready)
);

QK_GEMM_pack_tokens_ap_int_8_8_64_8_s pack_tokens_ap_int_8_8_64_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(pack_tokens_ap_int_8_8_64_8_U0_ap_start),
    .ap_done(pack_tokens_ap_int_8_8_64_8_U0_ap_done),
    .ap_continue(pack_tokens_ap_int_8_8_64_8_U0_ap_continue),
    .ap_idle(pack_tokens_ap_int_8_8_64_8_U0_ap_idle),
    .ap_ready(pack_tokens_ap_int_8_8_64_8_U0_ap_ready),
    .qq_stream_dout(qq_stream_dout),
    .qq_stream_empty_n(qq_stream_empty_n),
    .qq_stream_read(pack_tokens_ap_int_8_8_64_8_U0_qq_stream_read),
    .qq_stream_num_data_valid(3'd0),
    .qq_stream_fifo_cap(3'd0),
    .buffer_r_address1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_address1),
    .buffer_r_ce1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_ce1),
    .buffer_r_we1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_we1),
    .buffer_r_d1(pack_tokens_ap_int_8_8_64_8_U0_buffer_r_d1)
);

QK_GEMM_pack_tokens_ap_uint_4_8_8_1_s pack_tokens_ap_uint_4_8_8_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(pack_tokens_ap_uint_4_8_8_1_U0_ap_start),
    .ap_done(pack_tokens_ap_uint_4_8_8_1_U0_ap_done),
    .ap_continue(pack_tokens_ap_uint_4_8_8_1_U0_ap_continue),
    .ap_idle(pack_tokens_ap_uint_4_8_8_1_U0_ap_idle),
    .ap_ready(pack_tokens_ap_uint_4_8_8_1_U0_ap_ready),
    .qs_stream_dout(qs_stream_dout),
    .qs_stream_empty_n(qs_stream_empty_n),
    .qs_stream_read(pack_tokens_ap_uint_4_8_8_1_U0_qs_stream_read),
    .qs_stream_num_data_valid(3'd0),
    .qs_stream_fifo_cap(3'd0),
    .buffer_r_address0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_address0),
    .buffer_r_ce0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_ce0),
    .buffer_r_we0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_we0),
    .buffer_r_d0(pack_tokens_ap_uint_4_8_8_1_U0_buffer_r_d0)
);

QK_GEMM_repeat_x_tokens_ap_int_8_24_8_1_64_8_s repeat_x_tokens_ap_int_8_24_8_1_64_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_start),
    .ap_done(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_done),
    .ap_continue(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_continue),
    .ap_idle(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_idle),
    .ap_ready(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_ready),
    .qq_stream_r_din(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_qq_stream_r_din),
    .qq_stream_r_full_n(qq_stream_r_full_n),
    .qq_stream_r_write(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_qq_stream_r_write),
    .qq_stream_r_num_data_valid(3'd0),
    .qq_stream_r_fifo_cap(3'd0),
    .src_address0(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_src_address0),
    .src_ce0(repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_src_ce0),
    .src_q0(qq_buffer_t_q0)
);

QK_GEMM_repeat_x_tokens_ap_uint_4_24_8_1_8_1_s repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_start),
    .ap_done(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_done),
    .ap_continue(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_continue),
    .ap_idle(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_idle),
    .ap_ready(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_ready),
    .qs_stream_r_din(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_qs_stream_r_din),
    .qs_stream_r_full_n(qs_stream_r_full_n),
    .qs_stream_r_write(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_qs_stream_r_write),
    .qs_stream_r_num_data_valid(3'd0),
    .qs_stream_r_fifo_cap(3'd0),
    .src_address0(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_src_address0),
    .src_ce0(repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_src_ce0),
    .src_q0(qs_buffer_t_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready <= ap_sync_pack_tokens_ap_int_8_8_64_8_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready <= ap_sync_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready;
        end
    end
end

assign ap_done = ap_sync_done;

assign ap_idle = (repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_idle & repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_idle & pack_tokens_ap_uint_4_8_8_1_U0_ap_idle & pack_tokens_ap_int_8_8_64_8_U0_ap_idle & (qs_buffer_t_empty_n ^ 1'b1) & (qq_buffer_t_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_done & repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_done);

assign ap_sync_pack_tokens_ap_int_8_8_64_8_U0_ap_ready = (pack_tokens_ap_int_8_8_64_8_U0_ap_ready | ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready);

assign ap_sync_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready = (pack_tokens_ap_uint_4_8_8_1_U0_ap_ready | ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready);

assign ap_sync_ready = (ap_sync_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready & ap_sync_pack_tokens_ap_int_8_8_64_8_U0_ap_ready);

assign pack_tokens_ap_int_8_8_64_8_U0_ap_continue = qq_buffer_i_full_n;

assign pack_tokens_ap_int_8_8_64_8_U0_ap_start = ((ap_sync_reg_pack_tokens_ap_int_8_8_64_8_U0_ap_ready ^ 1'b1) & ap_start);

assign pack_tokens_ap_uint_4_8_8_1_U0_ap_continue = qs_buffer_i_full_n;

assign pack_tokens_ap_uint_4_8_8_1_U0_ap_start = ((ap_sync_reg_pack_tokens_ap_uint_4_8_8_1_U0_ap_ready ^ 1'b1) & ap_start);

assign qq_stream_r_din = repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_qq_stream_r_din;

assign qq_stream_r_write = repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_qq_stream_r_write;

assign qq_stream_read = pack_tokens_ap_int_8_8_64_8_U0_qq_stream_read;

assign qs_stream_r_din = repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_qs_stream_r_din;

assign qs_stream_r_write = repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_qs_stream_r_write;

assign qs_stream_read = pack_tokens_ap_uint_4_8_8_1_U0_qs_stream_read;

assign repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_continue = ap_sync_continue;

assign repeat_x_tokens_ap_int_8_24_8_1_64_8_U0_ap_start = qq_buffer_t_empty_n;

assign repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_continue = ap_sync_continue;

assign repeat_x_tokens_ap_uint_4_24_8_1_8_1_U0_ap_start = qs_buffer_t_empty_n;

endmodule //QK_GEMM_dataflow_in_loop_x_122
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module QK_GEMM_dataflow_in_loop_x_122_qq_buffer_RAM_2P_LUTRAM_1R1W
#(parameter
    DataWidth    = 64,
    AddressRange = 64,
    AddressWidth = 6,
    BufferCount  = 2,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                     t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b1; // whether all buffers are written
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        QK_GEMM_dataflow_in_loop_x_122_qq_buffer_RAM_2P_LUTRAM_1R1W_memcore QK_GEMM_dataflow_in_loop_x_122_qq_buffer_RAM_2P_LUTRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push_buf && !pop_buf && count == BufferCount - 2'd2)
        full_n <= 1'b0;
    else if (!push_buf && pop_buf)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if ((!write_buf && pop_buf && count == 1'b1)
             || (pop_buf && count == 1'b0))
        empty_n <= 1'b0;
    else if (write_buf && !pop_buf)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module QK_GEMM_dataflow_in_loop_x_122_qq_buffer_RAM_2P_LUTRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 64;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module QK_GEMM_dataflow_in_loop_x_122_qs_buffer_RAM_AUTO_1R1W
#(parameter
    DataWidth    = 4,
    AddressRange = 64,
    AddressWidth = 6,
    BufferCount  = 2,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire                     i_we0,
    input  wire [AddressWidth-1:0] i_address0,
    input  wire [DataWidth-1:0]    i_d0,
    output wire [DataWidth-1:0]    i_q0,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire                    t_we0,
    input  wire [AddressWidth-1:0] t_address0,
    input  wire [DataWidth-1:0]    t_d0,
    output wire [DataWidth-1:0]    t_q0,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b1; // whether all buffers are written
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer

wire [AddressWidth+IndexWidth-1:0]   memcore_iaddr;
wire [AddressWidth+IndexWidth-1:0]   memcore_taddr;

//------------------------Instantiation------------------
assign memcore_iaddr = {i_address0, iptr};
assign memcore_taddr = {t_address0, tptr};


QK_GEMM_dataflow_in_loop_x_122_qs_buffer_RAM_AUTO_1R1W_memcore QK_GEMM_dataflow_in_loop_x_122_qs_buffer_RAM_AUTO_1R1W_memcore_U (  
    .ce0      ( i_ce0 ),
    .we0      ( i_we0),
    .address0 ( memcore_iaddr ),
    .d0       ( i_d0 ),
    .q0       ( i_q0 ),

    .ce1      ( t_ce0 ),
    .we1      ( t_we0),
    .address1 ( memcore_taddr ),
    .d1       ( t_d0 ),
    .q1       ( t_q0 ),
    .clk      ( clk ),
    .reset    ( reset )
);
//------------------------Body---------------------------

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push_buf && !pop_buf && count == BufferCount - 2'd2)
        full_n <= 1'b0;
    else if (!push_buf && pop_buf)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if ((!write_buf && pop_buf && count == 1'b1)
             || (pop_buf && count == 1'b0))
        empty_n <= 1'b0;
    else if (write_buf && !pop_buf)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module QK_GEMM_dataflow_in_loop_x_122_qs_buffer_RAM_AUTO_1R1W_memcore (
     
    address0, ce0,
    d0, we0, 
    q0, 
      
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 7;
parameter AddressRange = 128;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "auto"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
  





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W
#(parameter
    DataWidth    = 64,
    AddressRange = 384,
    AddressWidth = 9,
    BufferCount  = 2,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    output wire [DataWidth-1:0]    i_q1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                    t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    output wire [DataWidth-1:0]    t_q1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b1; // whether all buffers are written
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W_memcore QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .q1       ( buf_q1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];
assign i_q1      = buf_q1[prev_iptr];
assign t_q1      = reg_valid1 ? reg_q1 : buf_q1[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end
// reg_q1 and reg_valid1
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q1     <= 1'b0;
        reg_valid1 <= 1'b0;
    end else if (!t_ce1 && !reg_valid1) begin
        reg_q1     <= buf_q1[prev_tptr];
        reg_valid1 <= 1'b1;
    end else if (t_ce1) begin
        reg_valid1 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push_buf && !pop_buf && count == BufferCount - 2'd2)
        full_n <= 1'b0;
    else if (!push_buf && pop_buf)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if ((!write_buf && pop_buf && count == 1'b1)
             || (pop_buf && count == 1'b0))
        empty_n <= 1'b0;
    else if (write_buf && !pop_buf)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module QK_GEMM_dataflow_in_loop_x_1_kq_cache_buffer_RAM_2P_BRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 64;
parameter AddressWidth = 9;
parameter AddressRange = 384;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "block"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W
#(parameter
    DataWidth    = 4,
    AddressRange = 384,
    AddressWidth = 9,
    BufferCount  = 2,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    output wire [DataWidth-1:0]    i_q1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                    t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    output wire [DataWidth-1:0]    t_q1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b1; // whether all buffers are written
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W_memcore QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .q1       ( buf_q1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];
assign i_q1      = buf_q1[prev_iptr];
assign t_q1      = reg_valid1 ? reg_q1 : buf_q1[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end
// reg_q1 and reg_valid1
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q1     <= 1'b0;
        reg_valid1 <= 1'b0;
    end else if (!t_ce1 && !reg_valid1) begin
        reg_q1     <= buf_q1[prev_tptr];
        reg_valid1 <= 1'b1;
    end else if (t_ce1) begin
        reg_valid1 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push_buf && !pop_buf && count == BufferCount - 2'd2)
        full_n <= 1'b0;
    else if (!push_buf && pop_buf)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if ((!write_buf && pop_buf && count == 1'b1)
             || (pop_buf && count == 1'b0))
        empty_n <= 1'b0;
    else if (write_buf && !pop_buf)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module QK_GEMM_dataflow_in_loop_x_1_ks_cache_buffer_RAM_2P_LUTRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 9;
parameter AddressRange = 384;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_do_bmm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_stream_r_dout,
        qq_stream_r_empty_n,
        qq_stream_r_read,
        qq_stream_r_num_data_valid,
        qq_stream_r_fifo_cap,
        qs_stream_r_dout,
        qs_stream_r_empty_n,
        qs_stream_r_read,
        qs_stream_r_num_data_valid,
        qs_stream_r_fifo_cap,
        kq_stream_r_dout,
        kq_stream_r_empty_n,
        kq_stream_r_read,
        kq_stream_r_num_data_valid,
        kq_stream_r_fifo_cap,
        ks_stream_r_dout,
        ks_stream_r_empty_n,
        ks_stream_r_read,
        ks_stream_r_num_data_valid,
        ks_stream_r_fifo_cap,
        r_stream_TREADY,
        r_stream_TDATA,
        r_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] qq_stream_r_dout;
input   qq_stream_r_empty_n;
output   qq_stream_r_read;
input  [2:0] qq_stream_r_num_data_valid;
input  [2:0] qq_stream_r_fifo_cap;
input  [3:0] qs_stream_r_dout;
input   qs_stream_r_empty_n;
output   qs_stream_r_read;
input  [2:0] qs_stream_r_num_data_valid;
input  [2:0] qs_stream_r_fifo_cap;
input  [511:0] kq_stream_r_dout;
input   kq_stream_r_empty_n;
output   kq_stream_r_read;
input  [2:0] kq_stream_r_num_data_valid;
input  [2:0] kq_stream_r_fifo_cap;
input  [31:0] ks_stream_r_dout;
input   ks_stream_r_empty_n;
output   ks_stream_r_read;
input  [2:0] ks_stream_r_num_data_valid;
input  [2:0] ks_stream_r_fifo_cap;
input   r_stream_TREADY;
output  [135:0] r_stream_TDATA;
output   r_stream_TVALID;

reg ap_idle;
reg qq_stream_r_read;
reg qs_stream_r_read;
reg kq_stream_r_read;
reg ks_stream_r_read;
reg r_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
wire   [0:0] icmp_ln48_fu_502_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter4_fsm_state5;
reg   [0:0] icmp_ln48_reg_2934;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter9_reg;
reg   [0:0] icmp_ln93_reg_4160;
reg    ap_predicate_op741_write_state11;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_CS_iter10_fsm_state11;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg;
reg    ap_loop_exit_ready_delayed;
reg    qq_stream_r_blk_n;
reg    qs_stream_r_blk_n;
reg    kq_stream_r_blk_n;
reg    ks_stream_r_blk_n;
reg    r_stream_TDATA_blk_n;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter1_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter2_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter3_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter4_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter5_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter6_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter7_reg;
reg   [0:0] icmp_ln48_reg_2934_pp0_iter8_reg;
wire   [7:0] trunc_ln64_fu_514_p1;
reg   [7:0] trunc_ln64_reg_2938;
reg  signed [7:0] trunc_ln64_1_reg_2943;
reg   [7:0] trunc_ln64_2_reg_2948;
reg   [7:0] trunc_ln64_2_reg_2948_pp0_iter1_reg;
reg   [7:0] trunc_ln64_2_reg_2948_pp0_iter2_reg;
reg   [7:0] trunc_ln64_3_reg_2953;
reg   [7:0] trunc_ln64_3_reg_2953_pp0_iter1_reg;
reg   [7:0] trunc_ln64_3_reg_2953_pp0_iter2_reg;
reg   [7:0] trunc_ln64_3_reg_2953_pp0_iter3_reg;
reg   [7:0] trunc_ln64_3_reg_2953_pp0_iter4_reg;
reg   [7:0] trunc_ln64_4_reg_2958;
reg   [7:0] trunc_ln64_4_reg_2958_pp0_iter1_reg;
reg   [7:0] trunc_ln64_4_reg_2958_pp0_iter2_reg;
reg   [7:0] trunc_ln64_4_reg_2958_pp0_iter3_reg;
reg   [7:0] trunc_ln64_4_reg_2958_pp0_iter4_reg;
reg   [7:0] trunc_ln64_5_reg_2963;
reg   [7:0] trunc_ln64_6_reg_2968;
reg   [7:0] trunc_ln64_6_reg_2968_pp0_iter1_reg;
reg   [7:0] trunc_ln64_6_reg_2968_pp0_iter2_reg;
reg   [7:0] trunc_ln64_6_reg_2968_pp0_iter3_reg;
reg   [7:0] trunc_ln64_7_reg_2973;
reg   [7:0] trunc_ln64_7_reg_2973_pp0_iter1_reg;
reg   [7:0] trunc_ln64_7_reg_2973_pp0_iter2_reg;
reg   [7:0] trunc_ln64_7_reg_2973_pp0_iter3_reg;
reg   [7:0] trunc_ln64_7_reg_2973_pp0_iter4_reg;
reg   [7:0] trunc_ln64_7_reg_2973_pp0_iter5_reg;
reg   [3:0] qs_stream_r_read_reg_2978;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter1_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter2_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter3_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter4_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter5_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter6_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter7_reg;
reg   [3:0] qs_stream_r_read_reg_2978_pp0_iter8_reg;
wire   [7:0] trunc_ln66_fu_588_p1;
reg   [7:0] trunc_ln66_reg_2983;
reg   [7:0] trunc_ln66_reg_2983_pp0_iter1_reg;
reg   [7:0] trunc_ln66_reg_2983_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_reg_2983_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_1_reg_2988;
reg   [7:0] trunc_ln66_2_reg_2993;
reg   [7:0] trunc_ln66_2_reg_2993_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_2_reg_2993_pp0_iter2_reg;
reg   [7:0] trunc_ln66_3_reg_2998;
reg   [7:0] trunc_ln66_3_reg_2998_pp0_iter1_reg;
reg   [7:0] trunc_ln66_3_reg_2998_pp0_iter2_reg;
reg   [7:0] trunc_ln66_3_reg_2998_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_3_reg_2998_pp0_iter4_reg;
reg   [7:0] trunc_ln66_4_reg_3003;
reg   [7:0] trunc_ln66_4_reg_3003_pp0_iter1_reg;
reg   [7:0] trunc_ln66_4_reg_3003_pp0_iter2_reg;
reg   [7:0] trunc_ln66_4_reg_3003_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_4_reg_3003_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_5_reg_3008;
reg   [7:0] trunc_ln66_6_reg_3013;
reg   [7:0] trunc_ln66_6_reg_3013_pp0_iter1_reg;
reg   [7:0] trunc_ln66_6_reg_3013_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_6_reg_3013_pp0_iter3_reg;
reg   [7:0] trunc_ln66_7_reg_3018;
reg   [7:0] trunc_ln66_7_reg_3018_pp0_iter1_reg;
reg   [7:0] trunc_ln66_7_reg_3018_pp0_iter2_reg;
reg   [7:0] trunc_ln66_7_reg_3018_pp0_iter3_reg;
reg   [7:0] trunc_ln66_7_reg_3018_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_7_reg_3018_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_8_reg_3023;
reg   [7:0] trunc_ln66_9_reg_3028;
reg   [7:0] trunc_ln66_9_reg_3028_pp0_iter1_reg;
reg   [7:0] trunc_ln66_9_reg_3028_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_9_reg_3028_pp0_iter3_reg;
reg   [7:0] trunc_ln66_s_reg_3033;
reg   [7:0] trunc_ln66_s_reg_3033_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_s_reg_3033_pp0_iter2_reg;
reg   [7:0] trunc_ln66_10_reg_3038;
reg   [7:0] trunc_ln66_10_reg_3038_pp0_iter1_reg;
reg   [7:0] trunc_ln66_10_reg_3038_pp0_iter2_reg;
reg   [7:0] trunc_ln66_10_reg_3038_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_10_reg_3038_pp0_iter4_reg;
reg   [7:0] trunc_ln66_11_reg_3043;
reg   [7:0] trunc_ln66_11_reg_3043_pp0_iter1_reg;
reg   [7:0] trunc_ln66_11_reg_3043_pp0_iter2_reg;
reg   [7:0] trunc_ln66_11_reg_3043_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_11_reg_3043_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_12_reg_3048;
reg   [7:0] trunc_ln66_13_reg_3053;
reg   [7:0] trunc_ln66_13_reg_3053_pp0_iter1_reg;
reg   [7:0] trunc_ln66_13_reg_3053_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_13_reg_3053_pp0_iter3_reg;
reg   [7:0] trunc_ln66_14_reg_3058;
reg   [7:0] trunc_ln66_14_reg_3058_pp0_iter1_reg;
reg   [7:0] trunc_ln66_14_reg_3058_pp0_iter2_reg;
reg   [7:0] trunc_ln66_14_reg_3058_pp0_iter3_reg;
reg   [7:0] trunc_ln66_14_reg_3058_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_14_reg_3058_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_15_reg_3063;
reg   [7:0] trunc_ln66_16_reg_3068;
reg   [7:0] trunc_ln66_16_reg_3068_pp0_iter1_reg;
reg   [7:0] trunc_ln66_16_reg_3068_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_16_reg_3068_pp0_iter3_reg;
reg   [7:0] trunc_ln66_17_reg_3073;
reg   [7:0] trunc_ln66_17_reg_3073_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_17_reg_3073_pp0_iter2_reg;
reg   [7:0] trunc_ln66_18_reg_3078;
reg   [7:0] trunc_ln66_18_reg_3078_pp0_iter1_reg;
reg   [7:0] trunc_ln66_18_reg_3078_pp0_iter2_reg;
reg   [7:0] trunc_ln66_18_reg_3078_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_18_reg_3078_pp0_iter4_reg;
reg   [7:0] trunc_ln66_19_reg_3083;
reg   [7:0] trunc_ln66_19_reg_3083_pp0_iter1_reg;
reg   [7:0] trunc_ln66_19_reg_3083_pp0_iter2_reg;
reg   [7:0] trunc_ln66_19_reg_3083_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_19_reg_3083_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_20_reg_3088;
reg   [7:0] trunc_ln66_21_reg_3093;
reg   [7:0] trunc_ln66_21_reg_3093_pp0_iter1_reg;
reg   [7:0] trunc_ln66_21_reg_3093_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_21_reg_3093_pp0_iter3_reg;
reg   [7:0] trunc_ln66_22_reg_3098;
reg   [7:0] trunc_ln66_22_reg_3098_pp0_iter1_reg;
reg   [7:0] trunc_ln66_22_reg_3098_pp0_iter2_reg;
reg   [7:0] trunc_ln66_22_reg_3098_pp0_iter3_reg;
reg   [7:0] trunc_ln66_22_reg_3098_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_22_reg_3098_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_23_reg_3103;
reg   [7:0] trunc_ln66_24_reg_3108;
reg   [7:0] trunc_ln66_24_reg_3108_pp0_iter1_reg;
reg   [7:0] trunc_ln66_24_reg_3108_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_24_reg_3108_pp0_iter3_reg;
reg   [7:0] trunc_ln66_25_reg_3113;
reg   [7:0] trunc_ln66_25_reg_3113_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_25_reg_3113_pp0_iter2_reg;
reg   [7:0] trunc_ln66_26_reg_3118;
reg   [7:0] trunc_ln66_26_reg_3118_pp0_iter1_reg;
reg   [7:0] trunc_ln66_26_reg_3118_pp0_iter2_reg;
reg   [7:0] trunc_ln66_26_reg_3118_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_26_reg_3118_pp0_iter4_reg;
reg   [7:0] trunc_ln66_27_reg_3123;
reg   [7:0] trunc_ln66_27_reg_3123_pp0_iter1_reg;
reg   [7:0] trunc_ln66_27_reg_3123_pp0_iter2_reg;
reg   [7:0] trunc_ln66_27_reg_3123_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_27_reg_3123_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_28_reg_3128;
reg   [7:0] trunc_ln66_29_reg_3133;
reg   [7:0] trunc_ln66_29_reg_3133_pp0_iter1_reg;
reg   [7:0] trunc_ln66_29_reg_3133_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_29_reg_3133_pp0_iter3_reg;
reg   [7:0] trunc_ln66_30_reg_3138;
reg   [7:0] trunc_ln66_30_reg_3138_pp0_iter1_reg;
reg   [7:0] trunc_ln66_30_reg_3138_pp0_iter2_reg;
reg   [7:0] trunc_ln66_30_reg_3138_pp0_iter3_reg;
reg   [7:0] trunc_ln66_30_reg_3138_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_30_reg_3138_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_31_reg_3143;
reg   [7:0] trunc_ln66_32_reg_3148;
reg   [7:0] trunc_ln66_32_reg_3148_pp0_iter1_reg;
reg   [7:0] trunc_ln66_32_reg_3148_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_32_reg_3148_pp0_iter3_reg;
reg   [7:0] trunc_ln66_33_reg_3153;
reg   [7:0] trunc_ln66_33_reg_3153_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_33_reg_3153_pp0_iter2_reg;
reg   [7:0] trunc_ln66_34_reg_3158;
reg   [7:0] trunc_ln66_34_reg_3158_pp0_iter1_reg;
reg   [7:0] trunc_ln66_34_reg_3158_pp0_iter2_reg;
reg   [7:0] trunc_ln66_34_reg_3158_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_34_reg_3158_pp0_iter4_reg;
reg   [7:0] trunc_ln66_35_reg_3163;
reg   [7:0] trunc_ln66_35_reg_3163_pp0_iter1_reg;
reg   [7:0] trunc_ln66_35_reg_3163_pp0_iter2_reg;
reg   [7:0] trunc_ln66_35_reg_3163_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_35_reg_3163_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_36_reg_3168;
reg   [7:0] trunc_ln66_37_reg_3173;
reg   [7:0] trunc_ln66_37_reg_3173_pp0_iter1_reg;
reg   [7:0] trunc_ln66_37_reg_3173_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_37_reg_3173_pp0_iter3_reg;
reg   [7:0] trunc_ln66_38_reg_3178;
reg   [7:0] trunc_ln66_38_reg_3178_pp0_iter1_reg;
reg   [7:0] trunc_ln66_38_reg_3178_pp0_iter2_reg;
reg   [7:0] trunc_ln66_38_reg_3178_pp0_iter3_reg;
reg   [7:0] trunc_ln66_38_reg_3178_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_38_reg_3178_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_39_reg_3183;
reg   [7:0] trunc_ln66_40_reg_3188;
reg   [7:0] trunc_ln66_40_reg_3188_pp0_iter1_reg;
reg   [7:0] trunc_ln66_40_reg_3188_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_40_reg_3188_pp0_iter3_reg;
reg   [7:0] trunc_ln66_41_reg_3193;
reg   [7:0] trunc_ln66_41_reg_3193_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_41_reg_3193_pp0_iter2_reg;
reg   [7:0] trunc_ln66_42_reg_3198;
reg   [7:0] trunc_ln66_42_reg_3198_pp0_iter1_reg;
reg   [7:0] trunc_ln66_42_reg_3198_pp0_iter2_reg;
reg   [7:0] trunc_ln66_42_reg_3198_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_42_reg_3198_pp0_iter4_reg;
reg   [7:0] trunc_ln66_43_reg_3203;
reg   [7:0] trunc_ln66_43_reg_3203_pp0_iter1_reg;
reg   [7:0] trunc_ln66_43_reg_3203_pp0_iter2_reg;
reg   [7:0] trunc_ln66_43_reg_3203_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_43_reg_3203_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_44_reg_3208;
reg   [7:0] trunc_ln66_45_reg_3213;
reg   [7:0] trunc_ln66_45_reg_3213_pp0_iter1_reg;
reg   [7:0] trunc_ln66_45_reg_3213_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_45_reg_3213_pp0_iter3_reg;
reg   [7:0] trunc_ln66_46_reg_3218;
reg   [7:0] trunc_ln66_46_reg_3218_pp0_iter1_reg;
reg   [7:0] trunc_ln66_46_reg_3218_pp0_iter2_reg;
reg   [7:0] trunc_ln66_46_reg_3218_pp0_iter3_reg;
reg   [7:0] trunc_ln66_46_reg_3218_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_46_reg_3218_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_47_reg_3223;
reg   [7:0] trunc_ln66_48_reg_3228;
reg   [7:0] trunc_ln66_48_reg_3228_pp0_iter1_reg;
reg   [7:0] trunc_ln66_48_reg_3228_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_48_reg_3228_pp0_iter3_reg;
reg   [7:0] trunc_ln66_49_reg_3233;
reg   [7:0] trunc_ln66_49_reg_3233_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_49_reg_3233_pp0_iter2_reg;
reg   [7:0] trunc_ln66_50_reg_3238;
reg   [7:0] trunc_ln66_50_reg_3238_pp0_iter1_reg;
reg   [7:0] trunc_ln66_50_reg_3238_pp0_iter2_reg;
reg   [7:0] trunc_ln66_50_reg_3238_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_50_reg_3238_pp0_iter4_reg;
reg   [7:0] trunc_ln66_51_reg_3243;
reg   [7:0] trunc_ln66_51_reg_3243_pp0_iter1_reg;
reg   [7:0] trunc_ln66_51_reg_3243_pp0_iter2_reg;
reg   [7:0] trunc_ln66_51_reg_3243_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_51_reg_3243_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_52_reg_3248;
reg   [7:0] trunc_ln66_53_reg_3253;
reg   [7:0] trunc_ln66_53_reg_3253_pp0_iter1_reg;
reg   [7:0] trunc_ln66_53_reg_3253_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_53_reg_3253_pp0_iter3_reg;
reg   [7:0] trunc_ln66_54_reg_3258;
reg   [7:0] trunc_ln66_54_reg_3258_pp0_iter1_reg;
reg   [7:0] trunc_ln66_54_reg_3258_pp0_iter2_reg;
reg   [7:0] trunc_ln66_54_reg_3258_pp0_iter3_reg;
reg   [7:0] trunc_ln66_54_reg_3258_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_54_reg_3258_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_55_reg_3263;
reg   [7:0] trunc_ln66_56_reg_3268;
reg   [7:0] trunc_ln66_56_reg_3268_pp0_iter1_reg;
reg   [7:0] trunc_ln66_56_reg_3268_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_56_reg_3268_pp0_iter3_reg;
reg   [7:0] trunc_ln66_57_reg_3273;
reg   [7:0] trunc_ln66_57_reg_3273_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_57_reg_3273_pp0_iter2_reg;
reg   [7:0] trunc_ln66_58_reg_3278;
reg   [7:0] trunc_ln66_58_reg_3278_pp0_iter1_reg;
reg   [7:0] trunc_ln66_58_reg_3278_pp0_iter2_reg;
reg   [7:0] trunc_ln66_58_reg_3278_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_58_reg_3278_pp0_iter4_reg;
reg   [7:0] trunc_ln66_59_reg_3283;
reg   [7:0] trunc_ln66_59_reg_3283_pp0_iter1_reg;
reg   [7:0] trunc_ln66_59_reg_3283_pp0_iter2_reg;
reg   [7:0] trunc_ln66_59_reg_3283_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_59_reg_3283_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_60_reg_3288;
reg   [7:0] trunc_ln66_61_reg_3293;
reg   [7:0] trunc_ln66_61_reg_3293_pp0_iter1_reg;
reg   [7:0] trunc_ln66_61_reg_3293_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_61_reg_3293_pp0_iter3_reg;
reg   [7:0] trunc_ln66_62_reg_3298;
reg   [7:0] trunc_ln66_62_reg_3298_pp0_iter1_reg;
reg   [7:0] trunc_ln66_62_reg_3298_pp0_iter2_reg;
reg   [7:0] trunc_ln66_62_reg_3298_pp0_iter3_reg;
reg   [7:0] trunc_ln66_62_reg_3298_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_62_reg_3298_pp0_iter5_reg;
wire   [3:0] trunc_ln67_fu_1222_p1;
reg   [3:0] trunc_ln67_reg_3303;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter1_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter2_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter3_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter4_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter5_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter6_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter7_reg;
reg   [3:0] trunc_ln67_reg_3303_pp0_iter8_reg;
reg   [3:0] tmp_reg_3308;
reg   [3:0] tmp_reg_3308_pp0_iter1_reg;
reg   [3:0] tmp_reg_3308_pp0_iter2_reg;
reg   [3:0] tmp_reg_3308_pp0_iter3_reg;
reg   [3:0] tmp_reg_3308_pp0_iter4_reg;
reg   [3:0] tmp_reg_3308_pp0_iter5_reg;
reg   [3:0] tmp_reg_3308_pp0_iter6_reg;
reg   [3:0] tmp_reg_3308_pp0_iter7_reg;
reg   [3:0] tmp_reg_3308_pp0_iter8_reg;
reg   [3:0] tmp_9_reg_3313;
reg   [3:0] tmp_9_reg_3313_pp0_iter1_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter2_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter3_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter4_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter5_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter6_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter7_reg;
reg   [3:0] tmp_9_reg_3313_pp0_iter8_reg;
reg   [3:0] tmp_s_reg_3318;
reg   [3:0] tmp_s_reg_3318_pp0_iter1_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter2_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter3_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter4_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter5_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter6_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter7_reg;
reg   [3:0] tmp_s_reg_3318_pp0_iter8_reg;
reg   [3:0] tmp_1_reg_3323;
reg   [3:0] tmp_1_reg_3323_pp0_iter1_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter2_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter3_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter4_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter5_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter6_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter7_reg;
reg   [3:0] tmp_1_reg_3323_pp0_iter8_reg;
reg   [3:0] tmp_2_reg_3328;
reg   [3:0] tmp_2_reg_3328_pp0_iter1_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter2_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter3_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter4_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter5_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter6_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter7_reg;
reg   [3:0] tmp_2_reg_3328_pp0_iter8_reg;
reg   [3:0] tmp_3_reg_3333;
reg   [3:0] tmp_3_reg_3333_pp0_iter1_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter2_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter3_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter4_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter5_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter6_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter7_reg;
reg   [3:0] tmp_3_reg_3333_pp0_iter8_reg;
reg   [3:0] tmp_4_reg_3338;
reg   [3:0] tmp_4_reg_3338_pp0_iter1_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter2_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter3_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter4_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter5_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter6_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter7_reg;
reg   [3:0] tmp_4_reg_3338_pp0_iter8_reg;
wire  signed [15:0] sext_ln79_fu_1301_p1;
reg  signed [15:0] sext_ln79_reg_3343;
reg  signed [15:0] sext_ln79_reg_3343_pp0_iter2_reg;
reg  signed [15:0] sext_ln79_reg_3343_pp0_iter3_reg;
wire  signed [15:0] sext_ln79_3_fu_1304_p1;
reg  signed [15:0] sext_ln79_3_reg_3355;
reg  signed [15:0] sext_ln79_3_reg_3355_pp0_iter2_reg;
reg  signed [15:0] sext_ln79_3_reg_3355_pp0_iter3_reg;
wire  signed [15:0] sext_ln79_15_fu_1316_p1;
wire  signed [15:0] sext_ln79_6_fu_1454_p1;
wire  signed [15:0] sext_ln79_18_fu_1484_p1;
wire  signed [15:0] sext_ln79_9_fu_1536_p1;
wire  signed [15:0] sext_ln79_12_fu_1542_p1;
wire   [15:0] grp_fu_1322_p2;
reg  signed [15:0] mul_ln79_5_reg_3642;
wire   [15:0] grp_fu_1340_p2;
reg  signed [15:0] mul_ln79_13_reg_3662;
wire   [15:0] grp_fu_1358_p2;
reg  signed [15:0] mul_ln79_21_reg_3682;
wire   [15:0] grp_fu_1376_p2;
reg  signed [15:0] mul_ln79_29_reg_3702;
wire   [15:0] grp_fu_1394_p2;
reg  signed [15:0] mul_ln79_37_reg_3722;
wire   [15:0] grp_fu_1412_p2;
reg  signed [15:0] mul_ln79_45_reg_3742;
wire   [15:0] grp_fu_1430_p2;
reg  signed [15:0] mul_ln79_53_reg_3762;
wire   [15:0] grp_fu_1448_p2;
reg  signed [15:0] mul_ln79_61_reg_3782;
wire   [0:0] icmp_ln49_fu_1621_p2;
reg   [0:0] icmp_ln49_reg_3787;
reg   [0:0] icmp_ln49_reg_3787_pp0_iter7_reg;
wire  signed [16:0] grp_fu_2450_p3;
wire  signed [15:0] sext_ln79_21_fu_1630_p1;
wire  signed [16:0] grp_fu_2458_p3;
wire  signed [16:0] grp_fu_2466_p3;
wire  signed [16:0] grp_fu_2474_p3;
wire  signed [16:0] grp_fu_2482_p3;
wire  signed [16:0] grp_fu_2490_p3;
wire  signed [16:0] grp_fu_2498_p3;
wire  signed [16:0] grp_fu_2506_p3;
wire   [0:0] xor_ln48_fu_1700_p2;
reg   [0:0] xor_ln48_reg_3927;
wire   [0:0] icmp_ln50_fu_1705_p2;
reg   [0:0] icmp_ln50_reg_3932;
wire   [0:0] and_ln48_1_fu_1711_p2;
reg   [0:0] and_ln48_1_reg_3937;
wire  signed [16:0] grp_fu_2522_p3;
wire  signed [16:0] grp_fu_2538_p3;
wire  signed [16:0] grp_fu_2554_p3;
wire  signed [16:0] grp_fu_2570_p3;
wire  signed [16:0] grp_fu_2586_p3;
wire  signed [16:0] grp_fu_2602_p3;
wire  signed [16:0] grp_fu_2618_p3;
wire  signed [16:0] grp_fu_2634_p3;
wire   [3:0] select_ln50_fu_1805_p3;
reg   [3:0] select_ln50_reg_4022;
wire   [0:0] icmp_ln54_fu_1920_p2;
reg   [0:0] icmp_ln54_reg_4068;
wire  signed [18:0] grp_fu_2786_p3;
reg  signed [18:0] add_ln79_6_reg_4080;
wire  signed [18:0] grp_fu_2794_p3;
reg  signed [18:0] add_ln79_13_reg_4085;
wire  signed [18:0] grp_fu_2802_p3;
reg  signed [18:0] add_ln79_20_reg_4090;
wire  signed [18:0] grp_fu_2810_p3;
reg  signed [18:0] add_ln79_27_reg_4095;
wire  signed [18:0] grp_fu_2818_p3;
reg  signed [18:0] add_ln79_34_reg_4100;
wire  signed [18:0] grp_fu_2826_p3;
reg  signed [18:0] add_ln79_41_reg_4105;
wire  signed [18:0] grp_fu_2834_p3;
reg  signed [18:0] add_ln79_48_reg_4110;
wire  signed [18:0] grp_fu_2842_p3;
reg  signed [18:0] add_ln79_55_reg_4115;
wire   [4:0] add_ln89_fu_1931_p2;
reg   [4:0] add_ln89_reg_4120;
wire   [4:0] add_ln89_2_fu_1940_p2;
reg   [4:0] add_ln89_2_reg_4125;
wire   [4:0] add_ln89_4_fu_1949_p2;
reg   [4:0] add_ln89_4_reg_4130;
wire   [4:0] add_ln89_6_fu_1958_p2;
reg   [4:0] add_ln89_6_reg_4135;
wire   [4:0] add_ln89_8_fu_1967_p2;
reg   [4:0] add_ln89_8_reg_4140;
wire   [4:0] add_ln89_10_fu_1976_p2;
reg   [4:0] add_ln89_10_reg_4145;
wire   [4:0] add_ln89_12_fu_1985_p2;
reg   [4:0] add_ln89_12_reg_4150;
wire   [4:0] add_ln89_14_fu_1994_p2;
reg   [4:0] add_ln89_14_reg_4155;
wire   [0:0] icmp_ln93_fu_2000_p2;
reg   [3:0] cit_fu_360;
wire   [3:0] cit_1_fu_1909_p2;
wire    ap_loop_init;
reg   [28:0] empty_fu_364;
wire   [28:0] add_ln89_1_fu_2101_p2;
reg   [28:0] empty_36_fu_368;
wire   [28:0] add_ln89_3_fu_2123_p2;
reg   [28:0] empty_37_fu_372;
wire   [28:0] add_ln89_5_fu_2145_p2;
reg   [28:0] empty_38_fu_376;
wire   [28:0] add_ln89_7_fu_2167_p2;
reg   [28:0] empty_39_fu_380;
wire   [28:0] add_ln89_9_fu_2189_p2;
reg   [28:0] empty_40_fu_384;
wire   [28:0] add_ln89_11_fu_2211_p2;
reg   [28:0] empty_41_fu_388;
wire   [28:0] add_ln89_13_fu_2233_p2;
reg   [28:0] empty_42_fu_392;
wire   [28:0] add_ln89_15_fu_2255_p2;
reg   [8:0] indvar_flatten_fu_396;
wire   [8:0] select_ln50_1_fu_1752_p3;
reg   [11:0] indvar_flatten137_fu_400;
wire   [11:0] select_ln49_fu_1684_p3;
reg   [14:0] indvar_flatten252_fu_404;
wire   [14:0] add_ln48_fu_508_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten252_load;
wire  signed [7:0] grp_fu_1322_p1;
wire  signed [7:0] grp_fu_1331_p1;
wire  signed [7:0] grp_fu_1340_p1;
wire  signed [7:0] grp_fu_1349_p1;
wire  signed [7:0] grp_fu_1358_p1;
wire  signed [7:0] grp_fu_1367_p1;
wire  signed [7:0] grp_fu_1376_p1;
wire  signed [7:0] grp_fu_1385_p1;
wire  signed [7:0] grp_fu_1394_p1;
wire  signed [7:0] grp_fu_1403_p1;
wire  signed [7:0] grp_fu_1412_p1;
wire  signed [7:0] grp_fu_1421_p1;
wire  signed [7:0] grp_fu_1430_p1;
wire  signed [7:0] grp_fu_1439_p1;
wire  signed [7:0] grp_fu_1448_p1;
wire  signed [15:0] grp_fu_1310_p2;
wire  signed [15:0] grp_fu_1331_p2;
wire  signed [15:0] grp_fu_1349_p2;
wire  signed [15:0] grp_fu_1367_p2;
wire  signed [15:0] grp_fu_1385_p2;
wire  signed [15:0] grp_fu_1403_p2;
wire  signed [15:0] grp_fu_1421_p2;
wire  signed [15:0] grp_fu_1439_p2;
wire   [11:0] add_ln49_fu_1678_p2;
wire  signed [16:0] grp_fu_2514_p3;
wire  signed [16:0] grp_fu_2530_p3;
wire  signed [16:0] grp_fu_2546_p3;
wire  signed [16:0] grp_fu_2562_p3;
wire  signed [16:0] grp_fu_2578_p3;
wire  signed [16:0] grp_fu_2594_p3;
wire  signed [16:0] grp_fu_2610_p3;
wire  signed [16:0] grp_fu_2626_p3;
wire   [0:0] or_ln50_1_fu_1747_p2;
wire   [8:0] add_ln50_fu_1741_p2;
wire   [0:0] xor_ln49_fu_1774_p2;
wire   [0:0] icmp_ln51_fu_1768_p2;
wire   [0:0] and_ln48_fu_1784_p2;
wire   [0:0] or_ln49_fu_1779_p2;
wire   [0:0] and_ln49_fu_1789_p2;
wire   [0:0] or_ln50_fu_1795_p2;
wire   [0:0] or_ln50_2_fu_1800_p2;
wire  signed [16:0] grp_fu_2651_p3;
wire  signed [17:0] sext_ln79_39_fu_1813_p1;
wire  signed [17:0] grp_fu_2642_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_5_fu_1816_p2;
wire  signed [16:0] grp_fu_2669_p3;
wire  signed [17:0] sext_ln79_61_fu_1825_p1;
wire  signed [17:0] grp_fu_2660_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_12_fu_1828_p2;
wire  signed [16:0] grp_fu_2687_p3;
wire  signed [17:0] sext_ln79_83_fu_1837_p1;
wire  signed [17:0] grp_fu_2678_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_19_fu_1840_p2;
wire  signed [16:0] grp_fu_2705_p3;
wire  signed [17:0] sext_ln79_119_fu_1849_p1;
wire  signed [17:0] grp_fu_2696_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_26_fu_1852_p2;
wire  signed [16:0] grp_fu_2723_p3;
wire  signed [17:0] sext_ln79_138_fu_1861_p1;
wire  signed [17:0] grp_fu_2714_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_33_fu_1864_p2;
wire  signed [16:0] grp_fu_2741_p3;
wire  signed [17:0] sext_ln79_149_fu_1873_p1;
wire  signed [17:0] grp_fu_2732_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_40_fu_1876_p2;
wire  signed [16:0] grp_fu_2759_p3;
wire  signed [17:0] sext_ln79_155_fu_1885_p1;
wire  signed [17:0] grp_fu_2750_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_47_fu_1888_p2;
wire  signed [16:0] grp_fu_2777_p3;
wire  signed [17:0] sext_ln79_159_fu_1897_p1;
wire  signed [17:0] grp_fu_2768_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_54_fu_1900_p2;
wire   [4:0] zext_ln89_1_fu_1928_p1;
wire   [4:0] zext_ln89_fu_1925_p1;
wire   [4:0] zext_ln89_3_fu_1937_p1;
wire   [4:0] zext_ln89_5_fu_1946_p1;
wire   [4:0] zext_ln89_7_fu_1955_p1;
wire   [4:0] zext_ln89_9_fu_1964_p1;
wire   [4:0] zext_ln89_11_fu_1973_p1;
wire   [4:0] zext_ln89_13_fu_1982_p1;
wire   [4:0] zext_ln89_15_fu_1991_p1;
wire  signed [30:0] sext_ln89_fu_2085_p1;
wire   [30:0] zext_ln89_2_fu_2088_p1;
wire   [30:0] shl_ln89_fu_2091_p2;
wire   [28:0] trunc_ln89_fu_2097_p1;
wire   [28:0] select_ln54_7_fu_2078_p3;
wire  signed [30:0] sext_ln89_1_fu_2107_p1;
wire   [30:0] zext_ln89_4_fu_2110_p1;
wire   [30:0] shl_ln89_1_fu_2113_p2;
wire   [28:0] trunc_ln89_1_fu_2119_p1;
wire   [28:0] select_ln54_6_fu_2071_p3;
wire  signed [30:0] sext_ln89_2_fu_2129_p1;
wire   [30:0] zext_ln89_6_fu_2132_p1;
wire   [30:0] shl_ln89_2_fu_2135_p2;
wire   [28:0] trunc_ln89_2_fu_2141_p1;
wire   [28:0] select_ln54_5_fu_2064_p3;
wire  signed [30:0] sext_ln89_3_fu_2151_p1;
wire   [30:0] zext_ln89_8_fu_2154_p1;
wire   [30:0] shl_ln89_3_fu_2157_p2;
wire   [28:0] trunc_ln89_3_fu_2163_p1;
wire   [28:0] select_ln54_4_fu_2057_p3;
wire  signed [30:0] sext_ln89_4_fu_2173_p1;
wire   [30:0] zext_ln89_10_fu_2176_p1;
wire   [30:0] shl_ln89_4_fu_2179_p2;
wire   [28:0] trunc_ln89_4_fu_2185_p1;
wire   [28:0] select_ln54_3_fu_2050_p3;
wire  signed [30:0] sext_ln89_5_fu_2195_p1;
wire   [30:0] zext_ln89_12_fu_2198_p1;
wire   [30:0] shl_ln89_5_fu_2201_p2;
wire   [28:0] trunc_ln89_5_fu_2207_p1;
wire   [28:0] select_ln54_2_fu_2043_p3;
wire  signed [30:0] sext_ln89_6_fu_2217_p1;
wire   [30:0] zext_ln89_14_fu_2220_p1;
wire   [30:0] shl_ln89_6_fu_2223_p2;
wire   [28:0] trunc_ln89_6_fu_2229_p1;
wire   [28:0] select_ln54_1_fu_2036_p3;
wire  signed [30:0] sext_ln89_7_fu_2239_p1;
wire   [30:0] zext_ln89_16_fu_2242_p1;
wire   [30:0] shl_ln89_7_fu_2245_p2;
wire   [28:0] trunc_ln89_7_fu_2251_p1;
wire   [28:0] select_ln54_fu_2029_p3;
wire   [28:0] add_ln89_23_fu_2303_p2;
wire   [28:0] add_ln89_22_fu_2297_p2;
wire   [28:0] add_ln89_21_fu_2291_p2;
wire   [28:0] add_ln89_20_fu_2285_p2;
wire   [28:0] add_ln89_19_fu_2279_p2;
wire   [28:0] add_ln89_18_fu_2273_p2;
wire   [28:0] add_ln89_17_fu_2267_p2;
wire   [28:0] add_ln89_16_fu_2261_p2;
wire   [16:0] trunc_ln99_7_fu_2379_p4;
wire   [16:0] trunc_ln99_6_fu_2369_p4;
wire   [16:0] trunc_ln99_5_fu_2359_p4;
wire   [16:0] trunc_ln99_4_fu_2349_p4;
wire   [16:0] trunc_ln99_3_fu_2339_p4;
wire   [16:0] trunc_ln99_2_fu_2329_p4;
wire   [16:0] trunc_ln99_1_fu_2319_p4;
wire   [16:0] trunc_ln8_fu_2309_p4;
wire  signed [7:0] grp_fu_2450_p1;
wire  signed [7:0] grp_fu_2458_p1;
wire  signed [7:0] grp_fu_2466_p1;
wire  signed [7:0] grp_fu_2474_p1;
wire  signed [7:0] grp_fu_2482_p1;
wire  signed [7:0] grp_fu_2490_p1;
wire  signed [7:0] grp_fu_2498_p1;
wire  signed [7:0] grp_fu_2506_p1;
wire  signed [7:0] grp_fu_2514_p1;
wire  signed [7:0] grp_fu_2522_p1;
wire  signed [7:0] grp_fu_2530_p1;
wire  signed [7:0] grp_fu_2538_p1;
wire  signed [7:0] grp_fu_2546_p1;
wire  signed [7:0] grp_fu_2554_p1;
wire  signed [7:0] grp_fu_2562_p1;
wire  signed [7:0] grp_fu_2570_p1;
wire  signed [7:0] grp_fu_2578_p1;
wire  signed [7:0] grp_fu_2586_p1;
wire  signed [7:0] grp_fu_2594_p1;
wire  signed [7:0] grp_fu_2602_p1;
wire  signed [7:0] grp_fu_2610_p1;
wire  signed [7:0] grp_fu_2618_p1;
wire  signed [7:0] grp_fu_2626_p1;
wire  signed [7:0] grp_fu_2634_p1;
wire  signed [7:0] grp_fu_2642_p1;
wire  signed [7:0] grp_fu_2651_p1;
wire  signed [7:0] grp_fu_2660_p1;
wire  signed [7:0] grp_fu_2669_p1;
wire  signed [7:0] grp_fu_2678_p1;
wire  signed [7:0] grp_fu_2687_p1;
wire  signed [7:0] grp_fu_2696_p1;
wire  signed [7:0] grp_fu_2705_p1;
wire  signed [7:0] grp_fu_2714_p1;
wire  signed [7:0] grp_fu_2723_p1;
wire  signed [7:0] grp_fu_2732_p1;
wire  signed [7:0] grp_fu_2741_p1;
wire  signed [7:0] grp_fu_2750_p1;
wire  signed [7:0] grp_fu_2759_p1;
wire  signed [7:0] grp_fu_2768_p1;
wire  signed [7:0] grp_fu_2777_p1;
wire  signed [7:0] grp_fu_2786_p1;
wire  signed [7:0] grp_fu_2794_p1;
wire  signed [7:0] grp_fu_2802_p1;
wire  signed [7:0] grp_fu_2810_p1;
wire  signed [7:0] grp_fu_2818_p1;
wire  signed [7:0] grp_fu_2826_p1;
wire  signed [7:0] grp_fu_2834_p1;
wire  signed [7:0] grp_fu_2842_p1;
reg    grp_fu_1310_ce;
reg    grp_fu_1322_ce;
reg    grp_fu_1331_ce;
reg    grp_fu_1340_ce;
reg    grp_fu_1349_ce;
reg    grp_fu_1358_ce;
reg    grp_fu_1367_ce;
reg    grp_fu_1376_ce;
reg    grp_fu_1385_ce;
reg    grp_fu_1394_ce;
reg    grp_fu_1403_ce;
reg    grp_fu_1412_ce;
reg    grp_fu_1421_ce;
reg    grp_fu_1430_ce;
reg    grp_fu_1439_ce;
reg    grp_fu_1448_ce;
reg    grp_fu_2450_ce;
reg    grp_fu_2458_ce;
reg    grp_fu_2466_ce;
reg    grp_fu_2474_ce;
reg    grp_fu_2482_ce;
reg    grp_fu_2490_ce;
reg    grp_fu_2498_ce;
reg    grp_fu_2506_ce;
reg    grp_fu_2514_ce;
reg    grp_fu_2522_ce;
reg    grp_fu_2530_ce;
reg    grp_fu_2538_ce;
reg    grp_fu_2546_ce;
reg    grp_fu_2554_ce;
reg    grp_fu_2562_ce;
reg    grp_fu_2570_ce;
reg    grp_fu_2578_ce;
reg    grp_fu_2586_ce;
reg    grp_fu_2594_ce;
reg    grp_fu_2602_ce;
reg    grp_fu_2610_ce;
reg    grp_fu_2618_ce;
reg    grp_fu_2626_ce;
reg    grp_fu_2634_ce;
reg    grp_fu_2642_ce;
reg    grp_fu_2651_ce;
reg    grp_fu_2660_ce;
reg    grp_fu_2669_ce;
reg    grp_fu_2678_ce;
reg    grp_fu_2687_ce;
reg    grp_fu_2696_ce;
reg    grp_fu_2705_ce;
reg    grp_fu_2714_ce;
reg    grp_fu_2723_ce;
reg    grp_fu_2732_ce;
reg    grp_fu_2741_ce;
reg    grp_fu_2750_ce;
reg    grp_fu_2759_ce;
reg    grp_fu_2768_ce;
reg    grp_fu_2777_ce;
reg    grp_fu_2786_ce;
reg    grp_fu_2794_ce;
reg    grp_fu_2802_ce;
reg    grp_fu_2810_ce;
reg    grp_fu_2818_ce;
reg    grp_fu_2826_ce;
reg    grp_fu_2834_ce;
reg    grp_fu_2842_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
reg    ap_ST_iter10_fsm_state11_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_221;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg = 1'b0;
//#0 cit_fu_360 = 4'd0;
//#0 empty_fu_364 = 29'd0;
//#0 empty_36_fu_368 = 29'd0;
//#0 empty_37_fu_372 = 29'd0;
//#0 empty_38_fu_376 = 29'd0;
//#0 empty_39_fu_380 = 29'd0;
//#0 empty_40_fu_384 = 29'd0;
//#0 empty_41_fu_388 = 29'd0;
//#0 empty_42_fu_392 = 29'd0;
//#0 indvar_flatten_fu_396 = 9'd0;
//#0 indvar_flatten137_fu_400 = 12'd0;
//#0 indvar_flatten252_fu_404 = 15'd0;
end

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_1_reg_2988),
    .din1(trunc_ln64_1_reg_2943),
    .ce(grp_fu_1310_ce),
    .dout(grp_fu_1310_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_5_reg_3008),
    .din1(grp_fu_1322_p1),
    .ce(grp_fu_1322_ce),
    .dout(grp_fu_1322_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_8_reg_3023),
    .din1(grp_fu_1331_p1),
    .ce(grp_fu_1331_ce),
    .dout(grp_fu_1331_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_12_reg_3048),
    .din1(grp_fu_1340_p1),
    .ce(grp_fu_1340_ce),
    .dout(grp_fu_1340_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_15_reg_3063),
    .din1(grp_fu_1349_p1),
    .ce(grp_fu_1349_ce),
    .dout(grp_fu_1349_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_20_reg_3088),
    .din1(grp_fu_1358_p1),
    .ce(grp_fu_1358_ce),
    .dout(grp_fu_1358_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_23_reg_3103),
    .din1(grp_fu_1367_p1),
    .ce(grp_fu_1367_ce),
    .dout(grp_fu_1367_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_28_reg_3128),
    .din1(grp_fu_1376_p1),
    .ce(grp_fu_1376_ce),
    .dout(grp_fu_1376_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_31_reg_3143),
    .din1(grp_fu_1385_p1),
    .ce(grp_fu_1385_ce),
    .dout(grp_fu_1385_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_36_reg_3168),
    .din1(grp_fu_1394_p1),
    .ce(grp_fu_1394_ce),
    .dout(grp_fu_1394_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_39_reg_3183),
    .din1(grp_fu_1403_p1),
    .ce(grp_fu_1403_ce),
    .dout(grp_fu_1403_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_44_reg_3208),
    .din1(grp_fu_1412_p1),
    .ce(grp_fu_1412_ce),
    .dout(grp_fu_1412_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U123(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_47_reg_3223),
    .din1(grp_fu_1421_p1),
    .ce(grp_fu_1421_ce),
    .dout(grp_fu_1421_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_52_reg_3248),
    .din1(grp_fu_1430_p1),
    .ce(grp_fu_1430_ce),
    .dout(grp_fu_1430_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U125(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_55_reg_3263),
    .din1(grp_fu_1439_p1),
    .ce(grp_fu_1439_ce),
    .dout(grp_fu_1439_p2)
);

QK_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_60_reg_3288),
    .din1(grp_fu_1448_p1),
    .ce(grp_fu_1448_ce),
    .dout(grp_fu_1448_p2)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_2_reg_2993_pp0_iter2_reg),
    .din1(grp_fu_2450_p1),
    .din2(grp_fu_1310_p2),
    .ce(grp_fu_2450_ce),
    .dout(grp_fu_2450_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_s_reg_3033_pp0_iter2_reg),
    .din1(grp_fu_2458_p1),
    .din2(grp_fu_1331_p2),
    .ce(grp_fu_2458_ce),
    .dout(grp_fu_2458_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U129(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_17_reg_3073_pp0_iter2_reg),
    .din1(grp_fu_2466_p1),
    .din2(grp_fu_1349_p2),
    .ce(grp_fu_2466_ce),
    .dout(grp_fu_2466_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U130(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_25_reg_3113_pp0_iter2_reg),
    .din1(grp_fu_2474_p1),
    .din2(grp_fu_1367_p2),
    .ce(grp_fu_2474_ce),
    .dout(grp_fu_2474_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U131(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_33_reg_3153_pp0_iter2_reg),
    .din1(grp_fu_2482_p1),
    .din2(grp_fu_1385_p2),
    .ce(grp_fu_2482_ce),
    .dout(grp_fu_2482_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U132(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_41_reg_3193_pp0_iter2_reg),
    .din1(grp_fu_2490_p1),
    .din2(grp_fu_1403_p2),
    .ce(grp_fu_2490_ce),
    .dout(grp_fu_2490_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U133(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_49_reg_3233_pp0_iter2_reg),
    .din1(grp_fu_2498_p1),
    .din2(grp_fu_1421_p2),
    .ce(grp_fu_2498_ce),
    .dout(grp_fu_2498_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U134(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_57_reg_3273_pp0_iter2_reg),
    .din1(grp_fu_2506_p1),
    .din2(grp_fu_1439_p2),
    .ce(grp_fu_2506_ce),
    .dout(grp_fu_2506_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U135(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_reg_2983_pp0_iter3_reg),
    .din1(grp_fu_2514_p1),
    .din2(grp_fu_2450_p3),
    .ce(grp_fu_2514_ce),
    .dout(grp_fu_2514_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_6_reg_3013_pp0_iter3_reg),
    .din1(grp_fu_2522_p1),
    .din2(mul_ln79_5_reg_3642),
    .ce(grp_fu_2522_ce),
    .dout(grp_fu_2522_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_9_reg_3028_pp0_iter3_reg),
    .din1(grp_fu_2530_p1),
    .din2(grp_fu_2458_p3),
    .ce(grp_fu_2530_ce),
    .dout(grp_fu_2530_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_13_reg_3053_pp0_iter3_reg),
    .din1(grp_fu_2538_p1),
    .din2(mul_ln79_13_reg_3662),
    .ce(grp_fu_2538_ce),
    .dout(grp_fu_2538_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_16_reg_3068_pp0_iter3_reg),
    .din1(grp_fu_2546_p1),
    .din2(grp_fu_2466_p3),
    .ce(grp_fu_2546_ce),
    .dout(grp_fu_2546_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_21_reg_3093_pp0_iter3_reg),
    .din1(grp_fu_2554_p1),
    .din2(mul_ln79_21_reg_3682),
    .ce(grp_fu_2554_ce),
    .dout(grp_fu_2554_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_24_reg_3108_pp0_iter3_reg),
    .din1(grp_fu_2562_p1),
    .din2(grp_fu_2474_p3),
    .ce(grp_fu_2562_ce),
    .dout(grp_fu_2562_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_29_reg_3133_pp0_iter3_reg),
    .din1(grp_fu_2570_p1),
    .din2(mul_ln79_29_reg_3702),
    .ce(grp_fu_2570_ce),
    .dout(grp_fu_2570_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_32_reg_3148_pp0_iter3_reg),
    .din1(grp_fu_2578_p1),
    .din2(grp_fu_2482_p3),
    .ce(grp_fu_2578_ce),
    .dout(grp_fu_2578_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_37_reg_3173_pp0_iter3_reg),
    .din1(grp_fu_2586_p1),
    .din2(mul_ln79_37_reg_3722),
    .ce(grp_fu_2586_ce),
    .dout(grp_fu_2586_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_40_reg_3188_pp0_iter3_reg),
    .din1(grp_fu_2594_p1),
    .din2(grp_fu_2490_p3),
    .ce(grp_fu_2594_ce),
    .dout(grp_fu_2594_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_45_reg_3213_pp0_iter3_reg),
    .din1(grp_fu_2602_p1),
    .din2(mul_ln79_45_reg_3742),
    .ce(grp_fu_2602_ce),
    .dout(grp_fu_2602_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_48_reg_3228_pp0_iter3_reg),
    .din1(grp_fu_2610_p1),
    .din2(grp_fu_2498_p3),
    .ce(grp_fu_2610_ce),
    .dout(grp_fu_2610_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_53_reg_3253_pp0_iter3_reg),
    .din1(grp_fu_2618_p1),
    .din2(mul_ln79_53_reg_3762),
    .ce(grp_fu_2618_ce),
    .dout(grp_fu_2618_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_56_reg_3268_pp0_iter3_reg),
    .din1(grp_fu_2626_p1),
    .din2(grp_fu_2506_p3),
    .ce(grp_fu_2626_ce),
    .dout(grp_fu_2626_p3)
);

QK_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_61_reg_3293_pp0_iter3_reg),
    .din1(grp_fu_2634_p1),
    .din2(mul_ln79_61_reg_3782),
    .ce(grp_fu_2634_ce),
    .dout(grp_fu_2634_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_3_reg_2998_pp0_iter4_reg),
    .din1(grp_fu_2642_p1),
    .din2(grp_fu_2514_p3),
    .ce(grp_fu_2642_ce),
    .dout(grp_fu_2642_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_4_reg_3003_pp0_iter4_reg),
    .din1(grp_fu_2651_p1),
    .din2(grp_fu_2522_p3),
    .ce(grp_fu_2651_ce),
    .dout(grp_fu_2651_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_10_reg_3038_pp0_iter4_reg),
    .din1(grp_fu_2660_p1),
    .din2(grp_fu_2530_p3),
    .ce(grp_fu_2660_ce),
    .dout(grp_fu_2660_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_11_reg_3043_pp0_iter4_reg),
    .din1(grp_fu_2669_p1),
    .din2(grp_fu_2538_p3),
    .ce(grp_fu_2669_ce),
    .dout(grp_fu_2669_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U155(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_18_reg_3078_pp0_iter4_reg),
    .din1(grp_fu_2678_p1),
    .din2(grp_fu_2546_p3),
    .ce(grp_fu_2678_ce),
    .dout(grp_fu_2678_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_19_reg_3083_pp0_iter4_reg),
    .din1(grp_fu_2687_p1),
    .din2(grp_fu_2554_p3),
    .ce(grp_fu_2687_ce),
    .dout(grp_fu_2687_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_26_reg_3118_pp0_iter4_reg),
    .din1(grp_fu_2696_p1),
    .din2(grp_fu_2562_p3),
    .ce(grp_fu_2696_ce),
    .dout(grp_fu_2696_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_27_reg_3123_pp0_iter4_reg),
    .din1(grp_fu_2705_p1),
    .din2(grp_fu_2570_p3),
    .ce(grp_fu_2705_ce),
    .dout(grp_fu_2705_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_34_reg_3158_pp0_iter4_reg),
    .din1(grp_fu_2714_p1),
    .din2(grp_fu_2578_p3),
    .ce(grp_fu_2714_ce),
    .dout(grp_fu_2714_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_35_reg_3163_pp0_iter4_reg),
    .din1(grp_fu_2723_p1),
    .din2(grp_fu_2586_p3),
    .ce(grp_fu_2723_ce),
    .dout(grp_fu_2723_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_42_reg_3198_pp0_iter4_reg),
    .din1(grp_fu_2732_p1),
    .din2(grp_fu_2594_p3),
    .ce(grp_fu_2732_ce),
    .dout(grp_fu_2732_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_43_reg_3203_pp0_iter4_reg),
    .din1(grp_fu_2741_p1),
    .din2(grp_fu_2602_p3),
    .ce(grp_fu_2741_ce),
    .dout(grp_fu_2741_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_50_reg_3238_pp0_iter4_reg),
    .din1(grp_fu_2750_p1),
    .din2(grp_fu_2610_p3),
    .ce(grp_fu_2750_ce),
    .dout(grp_fu_2750_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_51_reg_3243_pp0_iter4_reg),
    .din1(grp_fu_2759_p1),
    .din2(grp_fu_2618_p3),
    .ce(grp_fu_2759_ce),
    .dout(grp_fu_2759_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_58_reg_3278_pp0_iter4_reg),
    .din1(grp_fu_2768_p1),
    .din2(grp_fu_2626_p3),
    .ce(grp_fu_2768_ce),
    .dout(grp_fu_2768_p3)
);

QK_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_59_reg_3283_pp0_iter4_reg),
    .din1(grp_fu_2777_p1),
    .din2(grp_fu_2634_p3),
    .ce(grp_fu_2777_ce),
    .dout(grp_fu_2777_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_7_reg_3018_pp0_iter5_reg),
    .din1(grp_fu_2786_p1),
    .din2(add_ln79_5_fu_1816_p2),
    .ce(grp_fu_2786_ce),
    .dout(grp_fu_2786_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_14_reg_3058_pp0_iter5_reg),
    .din1(grp_fu_2794_p1),
    .din2(add_ln79_12_fu_1828_p2),
    .ce(grp_fu_2794_ce),
    .dout(grp_fu_2794_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_22_reg_3098_pp0_iter5_reg),
    .din1(grp_fu_2802_p1),
    .din2(add_ln79_19_fu_1840_p2),
    .ce(grp_fu_2802_ce),
    .dout(grp_fu_2802_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_30_reg_3138_pp0_iter5_reg),
    .din1(grp_fu_2810_p1),
    .din2(add_ln79_26_fu_1852_p2),
    .ce(grp_fu_2810_ce),
    .dout(grp_fu_2810_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_38_reg_3178_pp0_iter5_reg),
    .din1(grp_fu_2818_p1),
    .din2(add_ln79_33_fu_1864_p2),
    .ce(grp_fu_2818_ce),
    .dout(grp_fu_2818_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_46_reg_3218_pp0_iter5_reg),
    .din1(grp_fu_2826_p1),
    .din2(add_ln79_40_fu_1876_p2),
    .ce(grp_fu_2826_ce),
    .dout(grp_fu_2826_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_54_reg_3258_pp0_iter5_reg),
    .din1(grp_fu_2834_p1),
    .din2(add_ln79_47_fu_1888_p2),
    .ce(grp_fu_2834_ce),
    .dout(grp_fu_2834_p3)
);

QK_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_62_reg_3298_pp0_iter5_reg),
    .din1(grp_fu_2842_p1),
    .din2(add_ln79_54_fu_1900_p2),
    .ce(grp_fu_2842_ce),
    .dout(grp_fu_2842_p3)
);

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter9_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter2_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter3_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter4_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter5_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter6_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter7_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter8_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        cit_fu_360 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (icmp_ln48_reg_2934_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        cit_fu_360 <= cit_1_fu_1909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_36_fu_368 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_36_fu_368 <= add_ln89_3_fu_2123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_37_fu_372 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_37_fu_372 <= add_ln89_5_fu_2145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_38_fu_376 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_38_fu_376 <= add_ln89_7_fu_2167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_39_fu_380 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_39_fu_380 <= add_ln89_9_fu_2189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_40_fu_384 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_40_fu_384 <= add_ln89_11_fu_2211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_41_fu_388 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_41_fu_388 <= add_ln89_13_fu_2233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_42_fu_392 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_42_fu_392 <= add_ln89_15_fu_2255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_fu_364 <= 29'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_fu_364 <= add_ln89_1_fu_2101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        indvar_flatten137_fu_400 <= 12'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (icmp_ln48_reg_2934_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        indvar_flatten137_fu_400 <= select_ln49_fu_1684_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln48_fu_502_p2 == 1'd0)) begin
            indvar_flatten252_fu_404 <= add_ln48_fu_508_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten252_fu_404 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        indvar_flatten_fu_396 <= 9'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (icmp_ln48_reg_2934_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        indvar_flatten_fu_396 <= select_ln50_1_fu_1752_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        add_ln79_13_reg_4085 <= grp_fu_2794_p3;
        add_ln79_20_reg_4090 <= grp_fu_2802_p3;
        add_ln79_27_reg_4095 <= grp_fu_2810_p3;
        add_ln79_34_reg_4100 <= grp_fu_2818_p3;
        add_ln79_41_reg_4105 <= grp_fu_2826_p3;
        add_ln79_48_reg_4110 <= grp_fu_2834_p3;
        add_ln79_55_reg_4115 <= grp_fu_2842_p3;
        add_ln79_6_reg_4080 <= grp_fu_2786_p3;
        add_ln89_10_reg_4145 <= add_ln89_10_fu_1976_p2;
        add_ln89_12_reg_4150 <= add_ln89_12_fu_1985_p2;
        add_ln89_14_reg_4155 <= add_ln89_14_fu_1994_p2;
        add_ln89_2_reg_4125 <= add_ln89_2_fu_1940_p2;
        add_ln89_4_reg_4130 <= add_ln89_4_fu_1949_p2;
        add_ln89_6_reg_4135 <= add_ln89_6_fu_1958_p2;
        add_ln89_8_reg_4140 <= add_ln89_8_fu_1967_p2;
        add_ln89_reg_4120 <= add_ln89_fu_1931_p2;
        icmp_ln48_reg_2934_pp0_iter9_reg <= icmp_ln48_reg_2934_pp0_iter8_reg;
        icmp_ln54_reg_4068 <= icmp_ln54_fu_1920_p2;
        icmp_ln93_reg_4160 <= icmp_ln93_fu_2000_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        and_ln48_1_reg_3937 <= and_ln48_1_fu_1711_p2;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln48_reg_2934_pp0_iter7_reg <= icmp_ln48_reg_2934_pp0_iter6_reg;
        icmp_ln49_reg_3787_pp0_iter7_reg <= icmp_ln49_reg_3787;
        icmp_ln50_reg_3932 <= icmp_ln50_fu_1705_p2;
        qs_stream_r_read_reg_2978_pp0_iter7_reg <= qs_stream_r_read_reg_2978_pp0_iter6_reg;
        tmp_1_reg_3323_pp0_iter7_reg <= tmp_1_reg_3323_pp0_iter6_reg;
        tmp_2_reg_3328_pp0_iter7_reg <= tmp_2_reg_3328_pp0_iter6_reg;
        tmp_3_reg_3333_pp0_iter7_reg <= tmp_3_reg_3333_pp0_iter6_reg;
        tmp_4_reg_3338_pp0_iter7_reg <= tmp_4_reg_3338_pp0_iter6_reg;
        tmp_9_reg_3313_pp0_iter7_reg <= tmp_9_reg_3313_pp0_iter6_reg;
        tmp_reg_3308_pp0_iter7_reg <= tmp_reg_3308_pp0_iter6_reg;
        tmp_s_reg_3318_pp0_iter7_reg <= tmp_s_reg_3318_pp0_iter6_reg;
        trunc_ln67_reg_3303_pp0_iter7_reg <= trunc_ln67_reg_3303_pp0_iter6_reg;
        xor_ln48_reg_3927 <= xor_ln48_fu_1700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln48_reg_2934 <= icmp_ln48_fu_502_p2;
        qs_stream_r_read_reg_2978 <= qs_stream_r_dout;
        tmp_1_reg_3323 <= {{ks_stream_r_dout[19:16]}};
        tmp_2_reg_3328 <= {{ks_stream_r_dout[23:20]}};
        tmp_3_reg_3333 <= {{ks_stream_r_dout[27:24]}};
        tmp_4_reg_3338 <= {{ks_stream_r_dout[31:28]}};
        tmp_9_reg_3313 <= {{ks_stream_r_dout[11:8]}};
        tmp_reg_3308 <= {{ks_stream_r_dout[7:4]}};
        tmp_s_reg_3318 <= {{ks_stream_r_dout[15:12]}};
        trunc_ln64_1_reg_2943 <= {{qq_stream_r_dout[15:8]}};
        trunc_ln64_2_reg_2948 <= {{qq_stream_r_dout[23:16]}};
        trunc_ln64_3_reg_2953 <= {{qq_stream_r_dout[31:24]}};
        trunc_ln64_4_reg_2958 <= {{qq_stream_r_dout[39:32]}};
        trunc_ln64_5_reg_2963 <= {{qq_stream_r_dout[47:40]}};
        trunc_ln64_6_reg_2968 <= {{qq_stream_r_dout[55:48]}};
        trunc_ln64_7_reg_2973 <= {{qq_stream_r_dout[63:56]}};
        trunc_ln64_reg_2938 <= trunc_ln64_fu_514_p1;
        trunc_ln66_10_reg_3038 <= {{kq_stream_r_dout[95:88]}};
        trunc_ln66_11_reg_3043 <= {{kq_stream_r_dout[103:96]}};
        trunc_ln66_12_reg_3048 <= {{kq_stream_r_dout[111:104]}};
        trunc_ln66_13_reg_3053 <= {{kq_stream_r_dout[119:112]}};
        trunc_ln66_14_reg_3058 <= {{kq_stream_r_dout[127:120]}};
        trunc_ln66_15_reg_3063 <= {{kq_stream_r_dout[135:128]}};
        trunc_ln66_16_reg_3068 <= {{kq_stream_r_dout[143:136]}};
        trunc_ln66_17_reg_3073 <= {{kq_stream_r_dout[151:144]}};
        trunc_ln66_18_reg_3078 <= {{kq_stream_r_dout[159:152]}};
        trunc_ln66_19_reg_3083 <= {{kq_stream_r_dout[167:160]}};
        trunc_ln66_1_reg_2988 <= {{kq_stream_r_dout[15:8]}};
        trunc_ln66_20_reg_3088 <= {{kq_stream_r_dout[175:168]}};
        trunc_ln66_21_reg_3093 <= {{kq_stream_r_dout[183:176]}};
        trunc_ln66_22_reg_3098 <= {{kq_stream_r_dout[191:184]}};
        trunc_ln66_23_reg_3103 <= {{kq_stream_r_dout[199:192]}};
        trunc_ln66_24_reg_3108 <= {{kq_stream_r_dout[207:200]}};
        trunc_ln66_25_reg_3113 <= {{kq_stream_r_dout[215:208]}};
        trunc_ln66_26_reg_3118 <= {{kq_stream_r_dout[223:216]}};
        trunc_ln66_27_reg_3123 <= {{kq_stream_r_dout[231:224]}};
        trunc_ln66_28_reg_3128 <= {{kq_stream_r_dout[239:232]}};
        trunc_ln66_29_reg_3133 <= {{kq_stream_r_dout[247:240]}};
        trunc_ln66_2_reg_2993 <= {{kq_stream_r_dout[23:16]}};
        trunc_ln66_30_reg_3138 <= {{kq_stream_r_dout[255:248]}};
        trunc_ln66_31_reg_3143 <= {{kq_stream_r_dout[263:256]}};
        trunc_ln66_32_reg_3148 <= {{kq_stream_r_dout[271:264]}};
        trunc_ln66_33_reg_3153 <= {{kq_stream_r_dout[279:272]}};
        trunc_ln66_34_reg_3158 <= {{kq_stream_r_dout[287:280]}};
        trunc_ln66_35_reg_3163 <= {{kq_stream_r_dout[295:288]}};
        trunc_ln66_36_reg_3168 <= {{kq_stream_r_dout[303:296]}};
        trunc_ln66_37_reg_3173 <= {{kq_stream_r_dout[311:304]}};
        trunc_ln66_38_reg_3178 <= {{kq_stream_r_dout[319:312]}};
        trunc_ln66_39_reg_3183 <= {{kq_stream_r_dout[327:320]}};
        trunc_ln66_3_reg_2998 <= {{kq_stream_r_dout[31:24]}};
        trunc_ln66_40_reg_3188 <= {{kq_stream_r_dout[335:328]}};
        trunc_ln66_41_reg_3193 <= {{kq_stream_r_dout[343:336]}};
        trunc_ln66_42_reg_3198 <= {{kq_stream_r_dout[351:344]}};
        trunc_ln66_43_reg_3203 <= {{kq_stream_r_dout[359:352]}};
        trunc_ln66_44_reg_3208 <= {{kq_stream_r_dout[367:360]}};
        trunc_ln66_45_reg_3213 <= {{kq_stream_r_dout[375:368]}};
        trunc_ln66_46_reg_3218 <= {{kq_stream_r_dout[383:376]}};
        trunc_ln66_47_reg_3223 <= {{kq_stream_r_dout[391:384]}};
        trunc_ln66_48_reg_3228 <= {{kq_stream_r_dout[399:392]}};
        trunc_ln66_49_reg_3233 <= {{kq_stream_r_dout[407:400]}};
        trunc_ln66_4_reg_3003 <= {{kq_stream_r_dout[39:32]}};
        trunc_ln66_50_reg_3238 <= {{kq_stream_r_dout[415:408]}};
        trunc_ln66_51_reg_3243 <= {{kq_stream_r_dout[423:416]}};
        trunc_ln66_52_reg_3248 <= {{kq_stream_r_dout[431:424]}};
        trunc_ln66_53_reg_3253 <= {{kq_stream_r_dout[439:432]}};
        trunc_ln66_54_reg_3258 <= {{kq_stream_r_dout[447:440]}};
        trunc_ln66_55_reg_3263 <= {{kq_stream_r_dout[455:448]}};
        trunc_ln66_56_reg_3268 <= {{kq_stream_r_dout[463:456]}};
        trunc_ln66_57_reg_3273 <= {{kq_stream_r_dout[471:464]}};
        trunc_ln66_58_reg_3278 <= {{kq_stream_r_dout[479:472]}};
        trunc_ln66_59_reg_3283 <= {{kq_stream_r_dout[487:480]}};
        trunc_ln66_5_reg_3008 <= {{kq_stream_r_dout[47:40]}};
        trunc_ln66_60_reg_3288 <= {{kq_stream_r_dout[495:488]}};
        trunc_ln66_61_reg_3293 <= {{kq_stream_r_dout[503:496]}};
        trunc_ln66_62_reg_3298 <= {{kq_stream_r_dout[511:504]}};
        trunc_ln66_6_reg_3013 <= {{kq_stream_r_dout[55:48]}};
        trunc_ln66_7_reg_3018 <= {{kq_stream_r_dout[63:56]}};
        trunc_ln66_8_reg_3023 <= {{kq_stream_r_dout[71:64]}};
        trunc_ln66_9_reg_3028 <= {{kq_stream_r_dout[79:72]}};
        trunc_ln66_reg_2983 <= trunc_ln66_fu_588_p1;
        trunc_ln66_s_reg_3033 <= {{kq_stream_r_dout[87:80]}};
        trunc_ln67_reg_3303 <= trunc_ln67_fu_1222_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln48_reg_2934_pp0_iter1_reg <= icmp_ln48_reg_2934;
        qs_stream_r_read_reg_2978_pp0_iter1_reg <= qs_stream_r_read_reg_2978;
        sext_ln79_3_reg_3355 <= sext_ln79_3_fu_1304_p1;
        sext_ln79_reg_3343 <= sext_ln79_fu_1301_p1;
        tmp_1_reg_3323_pp0_iter1_reg <= tmp_1_reg_3323;
        tmp_2_reg_3328_pp0_iter1_reg <= tmp_2_reg_3328;
        tmp_3_reg_3333_pp0_iter1_reg <= tmp_3_reg_3333;
        tmp_4_reg_3338_pp0_iter1_reg <= tmp_4_reg_3338;
        tmp_9_reg_3313_pp0_iter1_reg <= tmp_9_reg_3313;
        tmp_reg_3308_pp0_iter1_reg <= tmp_reg_3308;
        tmp_s_reg_3318_pp0_iter1_reg <= tmp_s_reg_3318;
        trunc_ln64_2_reg_2948_pp0_iter1_reg <= trunc_ln64_2_reg_2948;
        trunc_ln64_3_reg_2953_pp0_iter1_reg <= trunc_ln64_3_reg_2953;
        trunc_ln64_4_reg_2958_pp0_iter1_reg <= trunc_ln64_4_reg_2958;
        trunc_ln64_6_reg_2968_pp0_iter1_reg <= trunc_ln64_6_reg_2968;
        trunc_ln64_7_reg_2973_pp0_iter1_reg <= trunc_ln64_7_reg_2973;
        trunc_ln66_10_reg_3038_pp0_iter1_reg <= trunc_ln66_10_reg_3038;
        trunc_ln66_11_reg_3043_pp0_iter1_reg <= trunc_ln66_11_reg_3043;
        trunc_ln66_13_reg_3053_pp0_iter1_reg <= trunc_ln66_13_reg_3053;
        trunc_ln66_14_reg_3058_pp0_iter1_reg <= trunc_ln66_14_reg_3058;
        trunc_ln66_16_reg_3068_pp0_iter1_reg <= trunc_ln66_16_reg_3068;
        trunc_ln66_17_reg_3073_pp0_iter1_reg <= trunc_ln66_17_reg_3073;
        trunc_ln66_18_reg_3078_pp0_iter1_reg <= trunc_ln66_18_reg_3078;
        trunc_ln66_19_reg_3083_pp0_iter1_reg <= trunc_ln66_19_reg_3083;
        trunc_ln66_21_reg_3093_pp0_iter1_reg <= trunc_ln66_21_reg_3093;
        trunc_ln66_22_reg_3098_pp0_iter1_reg <= trunc_ln66_22_reg_3098;
        trunc_ln66_24_reg_3108_pp0_iter1_reg <= trunc_ln66_24_reg_3108;
        trunc_ln66_25_reg_3113_pp0_iter1_reg <= trunc_ln66_25_reg_3113;
        trunc_ln66_26_reg_3118_pp0_iter1_reg <= trunc_ln66_26_reg_3118;
        trunc_ln66_27_reg_3123_pp0_iter1_reg <= trunc_ln66_27_reg_3123;
        trunc_ln66_29_reg_3133_pp0_iter1_reg <= trunc_ln66_29_reg_3133;
        trunc_ln66_2_reg_2993_pp0_iter1_reg <= trunc_ln66_2_reg_2993;
        trunc_ln66_30_reg_3138_pp0_iter1_reg <= trunc_ln66_30_reg_3138;
        trunc_ln66_32_reg_3148_pp0_iter1_reg <= trunc_ln66_32_reg_3148;
        trunc_ln66_33_reg_3153_pp0_iter1_reg <= trunc_ln66_33_reg_3153;
        trunc_ln66_34_reg_3158_pp0_iter1_reg <= trunc_ln66_34_reg_3158;
        trunc_ln66_35_reg_3163_pp0_iter1_reg <= trunc_ln66_35_reg_3163;
        trunc_ln66_37_reg_3173_pp0_iter1_reg <= trunc_ln66_37_reg_3173;
        trunc_ln66_38_reg_3178_pp0_iter1_reg <= trunc_ln66_38_reg_3178;
        trunc_ln66_3_reg_2998_pp0_iter1_reg <= trunc_ln66_3_reg_2998;
        trunc_ln66_40_reg_3188_pp0_iter1_reg <= trunc_ln66_40_reg_3188;
        trunc_ln66_41_reg_3193_pp0_iter1_reg <= trunc_ln66_41_reg_3193;
        trunc_ln66_42_reg_3198_pp0_iter1_reg <= trunc_ln66_42_reg_3198;
        trunc_ln66_43_reg_3203_pp0_iter1_reg <= trunc_ln66_43_reg_3203;
        trunc_ln66_45_reg_3213_pp0_iter1_reg <= trunc_ln66_45_reg_3213;
        trunc_ln66_46_reg_3218_pp0_iter1_reg <= trunc_ln66_46_reg_3218;
        trunc_ln66_48_reg_3228_pp0_iter1_reg <= trunc_ln66_48_reg_3228;
        trunc_ln66_49_reg_3233_pp0_iter1_reg <= trunc_ln66_49_reg_3233;
        trunc_ln66_4_reg_3003_pp0_iter1_reg <= trunc_ln66_4_reg_3003;
        trunc_ln66_50_reg_3238_pp0_iter1_reg <= trunc_ln66_50_reg_3238;
        trunc_ln66_51_reg_3243_pp0_iter1_reg <= trunc_ln66_51_reg_3243;
        trunc_ln66_53_reg_3253_pp0_iter1_reg <= trunc_ln66_53_reg_3253;
        trunc_ln66_54_reg_3258_pp0_iter1_reg <= trunc_ln66_54_reg_3258;
        trunc_ln66_56_reg_3268_pp0_iter1_reg <= trunc_ln66_56_reg_3268;
        trunc_ln66_57_reg_3273_pp0_iter1_reg <= trunc_ln66_57_reg_3273;
        trunc_ln66_58_reg_3278_pp0_iter1_reg <= trunc_ln66_58_reg_3278;
        trunc_ln66_59_reg_3283_pp0_iter1_reg <= trunc_ln66_59_reg_3283;
        trunc_ln66_61_reg_3293_pp0_iter1_reg <= trunc_ln66_61_reg_3293;
        trunc_ln66_62_reg_3298_pp0_iter1_reg <= trunc_ln66_62_reg_3298;
        trunc_ln66_6_reg_3013_pp0_iter1_reg <= trunc_ln66_6_reg_3013;
        trunc_ln66_7_reg_3018_pp0_iter1_reg <= trunc_ln66_7_reg_3018;
        trunc_ln66_9_reg_3028_pp0_iter1_reg <= trunc_ln66_9_reg_3028;
        trunc_ln66_reg_2983_pp0_iter1_reg <= trunc_ln66_reg_2983;
        trunc_ln66_s_reg_3033_pp0_iter1_reg <= trunc_ln66_s_reg_3033;
        trunc_ln67_reg_3303_pp0_iter1_reg <= trunc_ln67_reg_3303;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln48_reg_2934_pp0_iter2_reg <= icmp_ln48_reg_2934_pp0_iter1_reg;
        qs_stream_r_read_reg_2978_pp0_iter2_reg <= qs_stream_r_read_reg_2978_pp0_iter1_reg;
        sext_ln79_3_reg_3355_pp0_iter2_reg <= sext_ln79_3_reg_3355;
        sext_ln79_reg_3343_pp0_iter2_reg <= sext_ln79_reg_3343;
        tmp_1_reg_3323_pp0_iter2_reg <= tmp_1_reg_3323_pp0_iter1_reg;
        tmp_2_reg_3328_pp0_iter2_reg <= tmp_2_reg_3328_pp0_iter1_reg;
        tmp_3_reg_3333_pp0_iter2_reg <= tmp_3_reg_3333_pp0_iter1_reg;
        tmp_4_reg_3338_pp0_iter2_reg <= tmp_4_reg_3338_pp0_iter1_reg;
        tmp_9_reg_3313_pp0_iter2_reg <= tmp_9_reg_3313_pp0_iter1_reg;
        tmp_reg_3308_pp0_iter2_reg <= tmp_reg_3308_pp0_iter1_reg;
        tmp_s_reg_3318_pp0_iter2_reg <= tmp_s_reg_3318_pp0_iter1_reg;
        trunc_ln64_2_reg_2948_pp0_iter2_reg <= trunc_ln64_2_reg_2948_pp0_iter1_reg;
        trunc_ln64_3_reg_2953_pp0_iter2_reg <= trunc_ln64_3_reg_2953_pp0_iter1_reg;
        trunc_ln64_4_reg_2958_pp0_iter2_reg <= trunc_ln64_4_reg_2958_pp0_iter1_reg;
        trunc_ln64_6_reg_2968_pp0_iter2_reg <= trunc_ln64_6_reg_2968_pp0_iter1_reg;
        trunc_ln64_7_reg_2973_pp0_iter2_reg <= trunc_ln64_7_reg_2973_pp0_iter1_reg;
        trunc_ln66_10_reg_3038_pp0_iter2_reg <= trunc_ln66_10_reg_3038_pp0_iter1_reg;
        trunc_ln66_11_reg_3043_pp0_iter2_reg <= trunc_ln66_11_reg_3043_pp0_iter1_reg;
        trunc_ln66_13_reg_3053_pp0_iter2_reg <= trunc_ln66_13_reg_3053_pp0_iter1_reg;
        trunc_ln66_14_reg_3058_pp0_iter2_reg <= trunc_ln66_14_reg_3058_pp0_iter1_reg;
        trunc_ln66_16_reg_3068_pp0_iter2_reg <= trunc_ln66_16_reg_3068_pp0_iter1_reg;
        trunc_ln66_17_reg_3073_pp0_iter2_reg <= trunc_ln66_17_reg_3073_pp0_iter1_reg;
        trunc_ln66_18_reg_3078_pp0_iter2_reg <= trunc_ln66_18_reg_3078_pp0_iter1_reg;
        trunc_ln66_19_reg_3083_pp0_iter2_reg <= trunc_ln66_19_reg_3083_pp0_iter1_reg;
        trunc_ln66_21_reg_3093_pp0_iter2_reg <= trunc_ln66_21_reg_3093_pp0_iter1_reg;
        trunc_ln66_22_reg_3098_pp0_iter2_reg <= trunc_ln66_22_reg_3098_pp0_iter1_reg;
        trunc_ln66_24_reg_3108_pp0_iter2_reg <= trunc_ln66_24_reg_3108_pp0_iter1_reg;
        trunc_ln66_25_reg_3113_pp0_iter2_reg <= trunc_ln66_25_reg_3113_pp0_iter1_reg;
        trunc_ln66_26_reg_3118_pp0_iter2_reg <= trunc_ln66_26_reg_3118_pp0_iter1_reg;
        trunc_ln66_27_reg_3123_pp0_iter2_reg <= trunc_ln66_27_reg_3123_pp0_iter1_reg;
        trunc_ln66_29_reg_3133_pp0_iter2_reg <= trunc_ln66_29_reg_3133_pp0_iter1_reg;
        trunc_ln66_2_reg_2993_pp0_iter2_reg <= trunc_ln66_2_reg_2993_pp0_iter1_reg;
        trunc_ln66_30_reg_3138_pp0_iter2_reg <= trunc_ln66_30_reg_3138_pp0_iter1_reg;
        trunc_ln66_32_reg_3148_pp0_iter2_reg <= trunc_ln66_32_reg_3148_pp0_iter1_reg;
        trunc_ln66_33_reg_3153_pp0_iter2_reg <= trunc_ln66_33_reg_3153_pp0_iter1_reg;
        trunc_ln66_34_reg_3158_pp0_iter2_reg <= trunc_ln66_34_reg_3158_pp0_iter1_reg;
        trunc_ln66_35_reg_3163_pp0_iter2_reg <= trunc_ln66_35_reg_3163_pp0_iter1_reg;
        trunc_ln66_37_reg_3173_pp0_iter2_reg <= trunc_ln66_37_reg_3173_pp0_iter1_reg;
        trunc_ln66_38_reg_3178_pp0_iter2_reg <= trunc_ln66_38_reg_3178_pp0_iter1_reg;
        trunc_ln66_3_reg_2998_pp0_iter2_reg <= trunc_ln66_3_reg_2998_pp0_iter1_reg;
        trunc_ln66_40_reg_3188_pp0_iter2_reg <= trunc_ln66_40_reg_3188_pp0_iter1_reg;
        trunc_ln66_41_reg_3193_pp0_iter2_reg <= trunc_ln66_41_reg_3193_pp0_iter1_reg;
        trunc_ln66_42_reg_3198_pp0_iter2_reg <= trunc_ln66_42_reg_3198_pp0_iter1_reg;
        trunc_ln66_43_reg_3203_pp0_iter2_reg <= trunc_ln66_43_reg_3203_pp0_iter1_reg;
        trunc_ln66_45_reg_3213_pp0_iter2_reg <= trunc_ln66_45_reg_3213_pp0_iter1_reg;
        trunc_ln66_46_reg_3218_pp0_iter2_reg <= trunc_ln66_46_reg_3218_pp0_iter1_reg;
        trunc_ln66_48_reg_3228_pp0_iter2_reg <= trunc_ln66_48_reg_3228_pp0_iter1_reg;
        trunc_ln66_49_reg_3233_pp0_iter2_reg <= trunc_ln66_49_reg_3233_pp0_iter1_reg;
        trunc_ln66_4_reg_3003_pp0_iter2_reg <= trunc_ln66_4_reg_3003_pp0_iter1_reg;
        trunc_ln66_50_reg_3238_pp0_iter2_reg <= trunc_ln66_50_reg_3238_pp0_iter1_reg;
        trunc_ln66_51_reg_3243_pp0_iter2_reg <= trunc_ln66_51_reg_3243_pp0_iter1_reg;
        trunc_ln66_53_reg_3253_pp0_iter2_reg <= trunc_ln66_53_reg_3253_pp0_iter1_reg;
        trunc_ln66_54_reg_3258_pp0_iter2_reg <= trunc_ln66_54_reg_3258_pp0_iter1_reg;
        trunc_ln66_56_reg_3268_pp0_iter2_reg <= trunc_ln66_56_reg_3268_pp0_iter1_reg;
        trunc_ln66_57_reg_3273_pp0_iter2_reg <= trunc_ln66_57_reg_3273_pp0_iter1_reg;
        trunc_ln66_58_reg_3278_pp0_iter2_reg <= trunc_ln66_58_reg_3278_pp0_iter1_reg;
        trunc_ln66_59_reg_3283_pp0_iter2_reg <= trunc_ln66_59_reg_3283_pp0_iter1_reg;
        trunc_ln66_61_reg_3293_pp0_iter2_reg <= trunc_ln66_61_reg_3293_pp0_iter1_reg;
        trunc_ln66_62_reg_3298_pp0_iter2_reg <= trunc_ln66_62_reg_3298_pp0_iter1_reg;
        trunc_ln66_6_reg_3013_pp0_iter2_reg <= trunc_ln66_6_reg_3013_pp0_iter1_reg;
        trunc_ln66_7_reg_3018_pp0_iter2_reg <= trunc_ln66_7_reg_3018_pp0_iter1_reg;
        trunc_ln66_9_reg_3028_pp0_iter2_reg <= trunc_ln66_9_reg_3028_pp0_iter1_reg;
        trunc_ln66_reg_2983_pp0_iter2_reg <= trunc_ln66_reg_2983_pp0_iter1_reg;
        trunc_ln66_s_reg_3033_pp0_iter2_reg <= trunc_ln66_s_reg_3033_pp0_iter1_reg;
        trunc_ln67_reg_3303_pp0_iter2_reg <= trunc_ln67_reg_3303_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln48_reg_2934_pp0_iter3_reg <= icmp_ln48_reg_2934_pp0_iter2_reg;
        qs_stream_r_read_reg_2978_pp0_iter3_reg <= qs_stream_r_read_reg_2978_pp0_iter2_reg;
        sext_ln79_3_reg_3355_pp0_iter3_reg <= sext_ln79_3_reg_3355_pp0_iter2_reg;
        sext_ln79_reg_3343_pp0_iter3_reg <= sext_ln79_reg_3343_pp0_iter2_reg;
        tmp_1_reg_3323_pp0_iter3_reg <= tmp_1_reg_3323_pp0_iter2_reg;
        tmp_2_reg_3328_pp0_iter3_reg <= tmp_2_reg_3328_pp0_iter2_reg;
        tmp_3_reg_3333_pp0_iter3_reg <= tmp_3_reg_3333_pp0_iter2_reg;
        tmp_4_reg_3338_pp0_iter3_reg <= tmp_4_reg_3338_pp0_iter2_reg;
        tmp_9_reg_3313_pp0_iter3_reg <= tmp_9_reg_3313_pp0_iter2_reg;
        tmp_reg_3308_pp0_iter3_reg <= tmp_reg_3308_pp0_iter2_reg;
        tmp_s_reg_3318_pp0_iter3_reg <= tmp_s_reg_3318_pp0_iter2_reg;
        trunc_ln64_3_reg_2953_pp0_iter3_reg <= trunc_ln64_3_reg_2953_pp0_iter2_reg;
        trunc_ln64_4_reg_2958_pp0_iter3_reg <= trunc_ln64_4_reg_2958_pp0_iter2_reg;
        trunc_ln64_6_reg_2968_pp0_iter3_reg <= trunc_ln64_6_reg_2968_pp0_iter2_reg;
        trunc_ln64_7_reg_2973_pp0_iter3_reg <= trunc_ln64_7_reg_2973_pp0_iter2_reg;
        trunc_ln66_10_reg_3038_pp0_iter3_reg <= trunc_ln66_10_reg_3038_pp0_iter2_reg;
        trunc_ln66_11_reg_3043_pp0_iter3_reg <= trunc_ln66_11_reg_3043_pp0_iter2_reg;
        trunc_ln66_13_reg_3053_pp0_iter3_reg <= trunc_ln66_13_reg_3053_pp0_iter2_reg;
        trunc_ln66_14_reg_3058_pp0_iter3_reg <= trunc_ln66_14_reg_3058_pp0_iter2_reg;
        trunc_ln66_16_reg_3068_pp0_iter3_reg <= trunc_ln66_16_reg_3068_pp0_iter2_reg;
        trunc_ln66_18_reg_3078_pp0_iter3_reg <= trunc_ln66_18_reg_3078_pp0_iter2_reg;
        trunc_ln66_19_reg_3083_pp0_iter3_reg <= trunc_ln66_19_reg_3083_pp0_iter2_reg;
        trunc_ln66_21_reg_3093_pp0_iter3_reg <= trunc_ln66_21_reg_3093_pp0_iter2_reg;
        trunc_ln66_22_reg_3098_pp0_iter3_reg <= trunc_ln66_22_reg_3098_pp0_iter2_reg;
        trunc_ln66_24_reg_3108_pp0_iter3_reg <= trunc_ln66_24_reg_3108_pp0_iter2_reg;
        trunc_ln66_26_reg_3118_pp0_iter3_reg <= trunc_ln66_26_reg_3118_pp0_iter2_reg;
        trunc_ln66_27_reg_3123_pp0_iter3_reg <= trunc_ln66_27_reg_3123_pp0_iter2_reg;
        trunc_ln66_29_reg_3133_pp0_iter3_reg <= trunc_ln66_29_reg_3133_pp0_iter2_reg;
        trunc_ln66_30_reg_3138_pp0_iter3_reg <= trunc_ln66_30_reg_3138_pp0_iter2_reg;
        trunc_ln66_32_reg_3148_pp0_iter3_reg <= trunc_ln66_32_reg_3148_pp0_iter2_reg;
        trunc_ln66_34_reg_3158_pp0_iter3_reg <= trunc_ln66_34_reg_3158_pp0_iter2_reg;
        trunc_ln66_35_reg_3163_pp0_iter3_reg <= trunc_ln66_35_reg_3163_pp0_iter2_reg;
        trunc_ln66_37_reg_3173_pp0_iter3_reg <= trunc_ln66_37_reg_3173_pp0_iter2_reg;
        trunc_ln66_38_reg_3178_pp0_iter3_reg <= trunc_ln66_38_reg_3178_pp0_iter2_reg;
        trunc_ln66_3_reg_2998_pp0_iter3_reg <= trunc_ln66_3_reg_2998_pp0_iter2_reg;
        trunc_ln66_40_reg_3188_pp0_iter3_reg <= trunc_ln66_40_reg_3188_pp0_iter2_reg;
        trunc_ln66_42_reg_3198_pp0_iter3_reg <= trunc_ln66_42_reg_3198_pp0_iter2_reg;
        trunc_ln66_43_reg_3203_pp0_iter3_reg <= trunc_ln66_43_reg_3203_pp0_iter2_reg;
        trunc_ln66_45_reg_3213_pp0_iter3_reg <= trunc_ln66_45_reg_3213_pp0_iter2_reg;
        trunc_ln66_46_reg_3218_pp0_iter3_reg <= trunc_ln66_46_reg_3218_pp0_iter2_reg;
        trunc_ln66_48_reg_3228_pp0_iter3_reg <= trunc_ln66_48_reg_3228_pp0_iter2_reg;
        trunc_ln66_4_reg_3003_pp0_iter3_reg <= trunc_ln66_4_reg_3003_pp0_iter2_reg;
        trunc_ln66_50_reg_3238_pp0_iter3_reg <= trunc_ln66_50_reg_3238_pp0_iter2_reg;
        trunc_ln66_51_reg_3243_pp0_iter3_reg <= trunc_ln66_51_reg_3243_pp0_iter2_reg;
        trunc_ln66_53_reg_3253_pp0_iter3_reg <= trunc_ln66_53_reg_3253_pp0_iter2_reg;
        trunc_ln66_54_reg_3258_pp0_iter3_reg <= trunc_ln66_54_reg_3258_pp0_iter2_reg;
        trunc_ln66_56_reg_3268_pp0_iter3_reg <= trunc_ln66_56_reg_3268_pp0_iter2_reg;
        trunc_ln66_58_reg_3278_pp0_iter3_reg <= trunc_ln66_58_reg_3278_pp0_iter2_reg;
        trunc_ln66_59_reg_3283_pp0_iter3_reg <= trunc_ln66_59_reg_3283_pp0_iter2_reg;
        trunc_ln66_61_reg_3293_pp0_iter3_reg <= trunc_ln66_61_reg_3293_pp0_iter2_reg;
        trunc_ln66_62_reg_3298_pp0_iter3_reg <= trunc_ln66_62_reg_3298_pp0_iter2_reg;
        trunc_ln66_6_reg_3013_pp0_iter3_reg <= trunc_ln66_6_reg_3013_pp0_iter2_reg;
        trunc_ln66_7_reg_3018_pp0_iter3_reg <= trunc_ln66_7_reg_3018_pp0_iter2_reg;
        trunc_ln66_9_reg_3028_pp0_iter3_reg <= trunc_ln66_9_reg_3028_pp0_iter2_reg;
        trunc_ln66_reg_2983_pp0_iter3_reg <= trunc_ln66_reg_2983_pp0_iter2_reg;
        trunc_ln67_reg_3303_pp0_iter3_reg <= trunc_ln67_reg_3303_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln48_reg_2934_pp0_iter4_reg <= icmp_ln48_reg_2934_pp0_iter3_reg;
        qs_stream_r_read_reg_2978_pp0_iter4_reg <= qs_stream_r_read_reg_2978_pp0_iter3_reg;
        tmp_1_reg_3323_pp0_iter4_reg <= tmp_1_reg_3323_pp0_iter3_reg;
        tmp_2_reg_3328_pp0_iter4_reg <= tmp_2_reg_3328_pp0_iter3_reg;
        tmp_3_reg_3333_pp0_iter4_reg <= tmp_3_reg_3333_pp0_iter3_reg;
        tmp_4_reg_3338_pp0_iter4_reg <= tmp_4_reg_3338_pp0_iter3_reg;
        tmp_9_reg_3313_pp0_iter4_reg <= tmp_9_reg_3313_pp0_iter3_reg;
        tmp_reg_3308_pp0_iter4_reg <= tmp_reg_3308_pp0_iter3_reg;
        tmp_s_reg_3318_pp0_iter4_reg <= tmp_s_reg_3318_pp0_iter3_reg;
        trunc_ln64_3_reg_2953_pp0_iter4_reg <= trunc_ln64_3_reg_2953_pp0_iter3_reg;
        trunc_ln64_4_reg_2958_pp0_iter4_reg <= trunc_ln64_4_reg_2958_pp0_iter3_reg;
        trunc_ln64_7_reg_2973_pp0_iter4_reg <= trunc_ln64_7_reg_2973_pp0_iter3_reg;
        trunc_ln66_10_reg_3038_pp0_iter4_reg <= trunc_ln66_10_reg_3038_pp0_iter3_reg;
        trunc_ln66_11_reg_3043_pp0_iter4_reg <= trunc_ln66_11_reg_3043_pp0_iter3_reg;
        trunc_ln66_14_reg_3058_pp0_iter4_reg <= trunc_ln66_14_reg_3058_pp0_iter3_reg;
        trunc_ln66_18_reg_3078_pp0_iter4_reg <= trunc_ln66_18_reg_3078_pp0_iter3_reg;
        trunc_ln66_19_reg_3083_pp0_iter4_reg <= trunc_ln66_19_reg_3083_pp0_iter3_reg;
        trunc_ln66_22_reg_3098_pp0_iter4_reg <= trunc_ln66_22_reg_3098_pp0_iter3_reg;
        trunc_ln66_26_reg_3118_pp0_iter4_reg <= trunc_ln66_26_reg_3118_pp0_iter3_reg;
        trunc_ln66_27_reg_3123_pp0_iter4_reg <= trunc_ln66_27_reg_3123_pp0_iter3_reg;
        trunc_ln66_30_reg_3138_pp0_iter4_reg <= trunc_ln66_30_reg_3138_pp0_iter3_reg;
        trunc_ln66_34_reg_3158_pp0_iter4_reg <= trunc_ln66_34_reg_3158_pp0_iter3_reg;
        trunc_ln66_35_reg_3163_pp0_iter4_reg <= trunc_ln66_35_reg_3163_pp0_iter3_reg;
        trunc_ln66_38_reg_3178_pp0_iter4_reg <= trunc_ln66_38_reg_3178_pp0_iter3_reg;
        trunc_ln66_3_reg_2998_pp0_iter4_reg <= trunc_ln66_3_reg_2998_pp0_iter3_reg;
        trunc_ln66_42_reg_3198_pp0_iter4_reg <= trunc_ln66_42_reg_3198_pp0_iter3_reg;
        trunc_ln66_43_reg_3203_pp0_iter4_reg <= trunc_ln66_43_reg_3203_pp0_iter3_reg;
        trunc_ln66_46_reg_3218_pp0_iter4_reg <= trunc_ln66_46_reg_3218_pp0_iter3_reg;
        trunc_ln66_4_reg_3003_pp0_iter4_reg <= trunc_ln66_4_reg_3003_pp0_iter3_reg;
        trunc_ln66_50_reg_3238_pp0_iter4_reg <= trunc_ln66_50_reg_3238_pp0_iter3_reg;
        trunc_ln66_51_reg_3243_pp0_iter4_reg <= trunc_ln66_51_reg_3243_pp0_iter3_reg;
        trunc_ln66_54_reg_3258_pp0_iter4_reg <= trunc_ln66_54_reg_3258_pp0_iter3_reg;
        trunc_ln66_58_reg_3278_pp0_iter4_reg <= trunc_ln66_58_reg_3278_pp0_iter3_reg;
        trunc_ln66_59_reg_3283_pp0_iter4_reg <= trunc_ln66_59_reg_3283_pp0_iter3_reg;
        trunc_ln66_62_reg_3298_pp0_iter4_reg <= trunc_ln66_62_reg_3298_pp0_iter3_reg;
        trunc_ln66_7_reg_3018_pp0_iter4_reg <= trunc_ln66_7_reg_3018_pp0_iter3_reg;
        trunc_ln67_reg_3303_pp0_iter4_reg <= trunc_ln67_reg_3303_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln48_reg_2934_pp0_iter5_reg <= icmp_ln48_reg_2934_pp0_iter4_reg;
        mul_ln79_13_reg_3662 <= grp_fu_1340_p2;
        mul_ln79_21_reg_3682 <= grp_fu_1358_p2;
        mul_ln79_29_reg_3702 <= grp_fu_1376_p2;
        mul_ln79_37_reg_3722 <= grp_fu_1394_p2;
        mul_ln79_45_reg_3742 <= grp_fu_1412_p2;
        mul_ln79_53_reg_3762 <= grp_fu_1430_p2;
        mul_ln79_5_reg_3642 <= grp_fu_1322_p2;
        mul_ln79_61_reg_3782 <= grp_fu_1448_p2;
        qs_stream_r_read_reg_2978_pp0_iter5_reg <= qs_stream_r_read_reg_2978_pp0_iter4_reg;
        tmp_1_reg_3323_pp0_iter5_reg <= tmp_1_reg_3323_pp0_iter4_reg;
        tmp_2_reg_3328_pp0_iter5_reg <= tmp_2_reg_3328_pp0_iter4_reg;
        tmp_3_reg_3333_pp0_iter5_reg <= tmp_3_reg_3333_pp0_iter4_reg;
        tmp_4_reg_3338_pp0_iter5_reg <= tmp_4_reg_3338_pp0_iter4_reg;
        tmp_9_reg_3313_pp0_iter5_reg <= tmp_9_reg_3313_pp0_iter4_reg;
        tmp_reg_3308_pp0_iter5_reg <= tmp_reg_3308_pp0_iter4_reg;
        tmp_s_reg_3318_pp0_iter5_reg <= tmp_s_reg_3318_pp0_iter4_reg;
        trunc_ln64_7_reg_2973_pp0_iter5_reg <= trunc_ln64_7_reg_2973_pp0_iter4_reg;
        trunc_ln66_14_reg_3058_pp0_iter5_reg <= trunc_ln66_14_reg_3058_pp0_iter4_reg;
        trunc_ln66_22_reg_3098_pp0_iter5_reg <= trunc_ln66_22_reg_3098_pp0_iter4_reg;
        trunc_ln66_30_reg_3138_pp0_iter5_reg <= trunc_ln66_30_reg_3138_pp0_iter4_reg;
        trunc_ln66_38_reg_3178_pp0_iter5_reg <= trunc_ln66_38_reg_3178_pp0_iter4_reg;
        trunc_ln66_46_reg_3218_pp0_iter5_reg <= trunc_ln66_46_reg_3218_pp0_iter4_reg;
        trunc_ln66_54_reg_3258_pp0_iter5_reg <= trunc_ln66_54_reg_3258_pp0_iter4_reg;
        trunc_ln66_62_reg_3298_pp0_iter5_reg <= trunc_ln66_62_reg_3298_pp0_iter4_reg;
        trunc_ln66_7_reg_3018_pp0_iter5_reg <= trunc_ln66_7_reg_3018_pp0_iter4_reg;
        trunc_ln67_reg_3303_pp0_iter5_reg <= trunc_ln67_reg_3303_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln48_reg_2934_pp0_iter6_reg <= icmp_ln48_reg_2934_pp0_iter5_reg;
        icmp_ln49_reg_3787 <= icmp_ln49_fu_1621_p2;
        qs_stream_r_read_reg_2978_pp0_iter6_reg <= qs_stream_r_read_reg_2978_pp0_iter5_reg;
        tmp_1_reg_3323_pp0_iter6_reg <= tmp_1_reg_3323_pp0_iter5_reg;
        tmp_2_reg_3328_pp0_iter6_reg <= tmp_2_reg_3328_pp0_iter5_reg;
        tmp_3_reg_3333_pp0_iter6_reg <= tmp_3_reg_3333_pp0_iter5_reg;
        tmp_4_reg_3338_pp0_iter6_reg <= tmp_4_reg_3338_pp0_iter5_reg;
        tmp_9_reg_3313_pp0_iter6_reg <= tmp_9_reg_3313_pp0_iter5_reg;
        tmp_reg_3308_pp0_iter6_reg <= tmp_reg_3308_pp0_iter5_reg;
        tmp_s_reg_3318_pp0_iter6_reg <= tmp_s_reg_3318_pp0_iter5_reg;
        trunc_ln67_reg_3303_pp0_iter6_reg <= trunc_ln67_reg_3303_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln48_reg_2934_pp0_iter8_reg <= icmp_ln48_reg_2934_pp0_iter7_reg;
        qs_stream_r_read_reg_2978_pp0_iter8_reg <= qs_stream_r_read_reg_2978_pp0_iter7_reg;
        select_ln50_reg_4022 <= select_ln50_fu_1805_p3;
        tmp_1_reg_3323_pp0_iter8_reg <= tmp_1_reg_3323_pp0_iter7_reg;
        tmp_2_reg_3328_pp0_iter8_reg <= tmp_2_reg_3328_pp0_iter7_reg;
        tmp_3_reg_3333_pp0_iter8_reg <= tmp_3_reg_3333_pp0_iter7_reg;
        tmp_4_reg_3338_pp0_iter8_reg <= tmp_4_reg_3338_pp0_iter7_reg;
        tmp_9_reg_3313_pp0_iter8_reg <= tmp_9_reg_3313_pp0_iter7_reg;
        tmp_reg_3308_pp0_iter8_reg <= tmp_reg_3308_pp0_iter7_reg;
        tmp_s_reg_3318_pp0_iter8_reg <= tmp_s_reg_3318_pp0_iter7_reg;
        trunc_ln67_reg_3303_pp0_iter8_reg <= trunc_ln67_reg_3303_pp0_iter7_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state11_pp0_stage0_iter10)) begin
        ap_ST_iter10_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_iter10_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten252_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten252_load = indvar_flatten252_fu_404;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1310_ce = 1'b1;
    end else begin
        grp_fu_1310_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1322_ce = 1'b1;
    end else begin
        grp_fu_1322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1331_ce = 1'b1;
    end else begin
        grp_fu_1331_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1340_ce = 1'b1;
    end else begin
        grp_fu_1340_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1349_ce = 1'b1;
    end else begin
        grp_fu_1349_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1358_ce = 1'b1;
    end else begin
        grp_fu_1358_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1367_ce = 1'b1;
    end else begin
        grp_fu_1367_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1376_ce = 1'b1;
    end else begin
        grp_fu_1376_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1385_ce = 1'b1;
    end else begin
        grp_fu_1385_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1394_ce = 1'b1;
    end else begin
        grp_fu_1394_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1403_ce = 1'b1;
    end else begin
        grp_fu_1403_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1412_ce = 1'b1;
    end else begin
        grp_fu_1412_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1421_ce = 1'b1;
    end else begin
        grp_fu_1421_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1430_ce = 1'b1;
    end else begin
        grp_fu_1430_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1439_ce = 1'b1;
    end else begin
        grp_fu_1439_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1448_ce = 1'b1;
    end else begin
        grp_fu_1448_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2450_ce = 1'b1;
    end else begin
        grp_fu_2450_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2458_ce = 1'b1;
    end else begin
        grp_fu_2458_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2466_ce = 1'b1;
    end else begin
        grp_fu_2466_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2474_ce = 1'b1;
    end else begin
        grp_fu_2474_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2482_ce = 1'b1;
    end else begin
        grp_fu_2482_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2490_ce = 1'b1;
    end else begin
        grp_fu_2490_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2498_ce = 1'b1;
    end else begin
        grp_fu_2498_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2506_ce = 1'b1;
    end else begin
        grp_fu_2506_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2514_ce = 1'b1;
    end else begin
        grp_fu_2514_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2522_ce = 1'b1;
    end else begin
        grp_fu_2522_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2530_ce = 1'b1;
    end else begin
        grp_fu_2530_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2538_ce = 1'b1;
    end else begin
        grp_fu_2538_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2546_ce = 1'b1;
    end else begin
        grp_fu_2546_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2554_ce = 1'b1;
    end else begin
        grp_fu_2554_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2562_ce = 1'b1;
    end else begin
        grp_fu_2562_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2570_ce = 1'b1;
    end else begin
        grp_fu_2570_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2578_ce = 1'b1;
    end else begin
        grp_fu_2578_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2586_ce = 1'b1;
    end else begin
        grp_fu_2586_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2594_ce = 1'b1;
    end else begin
        grp_fu_2594_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2602_ce = 1'b1;
    end else begin
        grp_fu_2602_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2610_ce = 1'b1;
    end else begin
        grp_fu_2610_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2618_ce = 1'b1;
    end else begin
        grp_fu_2618_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2626_ce = 1'b1;
    end else begin
        grp_fu_2626_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2634_ce = 1'b1;
    end else begin
        grp_fu_2634_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2642_ce = 1'b1;
    end else begin
        grp_fu_2642_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2651_ce = 1'b1;
    end else begin
        grp_fu_2651_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2660_ce = 1'b1;
    end else begin
        grp_fu_2660_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2669_ce = 1'b1;
    end else begin
        grp_fu_2669_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2678_ce = 1'b1;
    end else begin
        grp_fu_2678_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2687_ce = 1'b1;
    end else begin
        grp_fu_2687_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2696_ce = 1'b1;
    end else begin
        grp_fu_2696_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2705_ce = 1'b1;
    end else begin
        grp_fu_2705_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2714_ce = 1'b1;
    end else begin
        grp_fu_2714_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2723_ce = 1'b1;
    end else begin
        grp_fu_2723_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2732_ce = 1'b1;
    end else begin
        grp_fu_2732_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2741_ce = 1'b1;
    end else begin
        grp_fu_2741_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2750_ce = 1'b1;
    end else begin
        grp_fu_2750_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2759_ce = 1'b1;
    end else begin
        grp_fu_2759_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2768_ce = 1'b1;
    end else begin
        grp_fu_2768_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2777_ce = 1'b1;
    end else begin
        grp_fu_2777_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2786_ce = 1'b1;
    end else begin
        grp_fu_2786_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2794_ce = 1'b1;
    end else begin
        grp_fu_2794_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2802_ce = 1'b1;
    end else begin
        grp_fu_2802_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2810_ce = 1'b1;
    end else begin
        grp_fu_2810_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2818_ce = 1'b1;
    end else begin
        grp_fu_2818_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2826_ce = 1'b1;
    end else begin
        grp_fu_2826_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2834_ce = 1'b1;
    end else begin
        grp_fu_2834_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2842_ce = 1'b1;
    end else begin
        grp_fu_2842_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        kq_stream_r_blk_n = kq_stream_r_empty_n;
    end else begin
        kq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        kq_stream_r_read = 1'b1;
    end else begin
        kq_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        ks_stream_r_blk_n = ks_stream_r_empty_n;
    end else begin
        ks_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        ks_stream_r_read = 1'b1;
    end else begin
        ks_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        qq_stream_r_blk_n = qq_stream_r_empty_n;
    end else begin
        qq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        qq_stream_r_read = 1'b1;
    end else begin
        qq_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        qs_stream_r_blk_n = qs_stream_r_empty_n;
    end else begin
        qs_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_502_p2 == 1'd0))) begin
        qs_stream_r_read = 1'b1;
    end else begin
        qs_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op741_write_state11 == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        r_stream_TDATA_blk_n = r_stream_TREADY;
    end else begin
        r_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_predicate_op741_write_state11 == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        r_stream_TVALID = 1'b1;
    end else begin
        r_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else if (((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd1) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_508_p2 = (ap_sig_allocacmp_indvar_flatten252_load + 15'd1);

assign add_ln49_fu_1678_p2 = (indvar_flatten137_fu_400 + 12'd1);

assign add_ln50_fu_1741_p2 = (indvar_flatten_fu_396 + 9'd1);

assign add_ln79_12_fu_1828_p2 = ($signed(sext_ln79_61_fu_1825_p1) + $signed(grp_fu_2660_p3));

assign add_ln79_19_fu_1840_p2 = ($signed(sext_ln79_83_fu_1837_p1) + $signed(grp_fu_2678_p3));

assign add_ln79_26_fu_1852_p2 = ($signed(sext_ln79_119_fu_1849_p1) + $signed(grp_fu_2696_p3));

assign add_ln79_33_fu_1864_p2 = ($signed(sext_ln79_138_fu_1861_p1) + $signed(grp_fu_2714_p3));

assign add_ln79_40_fu_1876_p2 = ($signed(sext_ln79_149_fu_1873_p1) + $signed(grp_fu_2732_p3));

assign add_ln79_47_fu_1888_p2 = ($signed(sext_ln79_155_fu_1885_p1) + $signed(grp_fu_2750_p3));

assign add_ln79_54_fu_1900_p2 = ($signed(sext_ln79_159_fu_1897_p1) + $signed(grp_fu_2768_p3));

assign add_ln79_5_fu_1816_p2 = ($signed(sext_ln79_39_fu_1813_p1) + $signed(grp_fu_2642_p3));

assign add_ln89_10_fu_1976_p2 = (zext_ln89_11_fu_1973_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_11_fu_2211_p2 = (trunc_ln89_5_fu_2207_p1 + select_ln54_2_fu_2043_p3);

assign add_ln89_12_fu_1985_p2 = (zext_ln89_13_fu_1982_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_13_fu_2233_p2 = (trunc_ln89_6_fu_2229_p1 + select_ln54_1_fu_2036_p3);

assign add_ln89_14_fu_1994_p2 = (zext_ln89_15_fu_1991_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_15_fu_2255_p2 = (trunc_ln89_7_fu_2251_p1 + select_ln54_fu_2029_p3);

assign add_ln89_16_fu_2261_p2 = (trunc_ln89_7_fu_2251_p1 + empty_42_fu_392);

assign add_ln89_17_fu_2267_p2 = (trunc_ln89_6_fu_2229_p1 + empty_41_fu_388);

assign add_ln89_18_fu_2273_p2 = (trunc_ln89_5_fu_2207_p1 + empty_40_fu_384);

assign add_ln89_19_fu_2279_p2 = (trunc_ln89_4_fu_2185_p1 + empty_39_fu_380);

assign add_ln89_1_fu_2101_p2 = (trunc_ln89_fu_2097_p1 + select_ln54_7_fu_2078_p3);

assign add_ln89_20_fu_2285_p2 = (trunc_ln89_3_fu_2163_p1 + empty_38_fu_376);

assign add_ln89_21_fu_2291_p2 = (trunc_ln89_2_fu_2141_p1 + empty_37_fu_372);

assign add_ln89_22_fu_2297_p2 = (trunc_ln89_1_fu_2119_p1 + empty_36_fu_368);

assign add_ln89_23_fu_2303_p2 = (trunc_ln89_fu_2097_p1 + empty_fu_364);

assign add_ln89_2_fu_1940_p2 = (zext_ln89_3_fu_1937_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_3_fu_2123_p2 = (trunc_ln89_1_fu_2119_p1 + select_ln54_6_fu_2071_p3);

assign add_ln89_4_fu_1949_p2 = (zext_ln89_5_fu_1946_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_5_fu_2145_p2 = (trunc_ln89_2_fu_2141_p1 + select_ln54_5_fu_2064_p3);

assign add_ln89_6_fu_1958_p2 = (zext_ln89_7_fu_1955_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_7_fu_2167_p2 = (trunc_ln89_3_fu_2163_p1 + select_ln54_4_fu_2057_p3);

assign add_ln89_8_fu_1967_p2 = (zext_ln89_9_fu_1964_p1 + zext_ln89_fu_1925_p1);

assign add_ln89_9_fu_2189_p2 = (trunc_ln89_4_fu_2185_p1 + select_ln54_3_fu_2050_p3);

assign add_ln89_fu_1931_p2 = (zext_ln89_1_fu_1928_p1 + zext_ln89_fu_1925_p1);

assign and_ln48_1_fu_1711_p2 = (xor_ln48_fu_1700_p2 & icmp_ln50_fu_1705_p2);

assign and_ln48_fu_1784_p2 = (xor_ln48_reg_3927 & icmp_ln51_fu_1768_p2);

assign and_ln49_fu_1789_p2 = (or_ln49_fu_1779_p2 & and_ln48_fu_1784_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((ap_predicate_op741_write_state11 == 1'b1) & (r_stream_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((ks_stream_r_empty_n == 1'b0) & (icmp_ln48_fu_502_p2 == 1'd0)) | ((kq_stream_r_empty_n == 1'b0) & (icmp_ln48_fu_502_p2 == 1'd0)) | ((qs_stream_r_empty_n == 1'b0) & (icmp_ln48_fu_502_p2 == 1'd0)) | ((icmp_ln48_fu_502_p2 == 1'd0) & (qq_stream_r_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_221 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op741_write_state11 = ((icmp_ln93_reg_4160 == 1'd1) & (icmp_ln48_reg_2934_pp0_iter9_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign cit_1_fu_1909_p2 = (select_ln50_fu_1805_p3 + 4'd1);

assign grp_fu_1322_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1331_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1340_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1349_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1358_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1367_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1376_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1385_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1394_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1403_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1412_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1421_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1430_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_1439_p1 = sext_ln79_fu_1301_p1;

assign grp_fu_1448_p1 = sext_ln79_15_fu_1316_p1;

assign grp_fu_2450_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2458_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2466_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2474_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2482_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2490_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2498_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2506_p1 = sext_ln79_6_fu_1454_p1;

assign grp_fu_2514_p1 = sext_ln79_reg_3343_pp0_iter3_reg;

assign grp_fu_2522_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2530_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2538_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2546_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2554_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2562_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2570_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2578_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2586_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2594_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2602_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2610_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2618_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2626_p1 = sext_ln79_3_reg_3355_pp0_iter3_reg;

assign grp_fu_2634_p1 = sext_ln79_18_fu_1484_p1;

assign grp_fu_2642_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2651_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2660_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2669_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2678_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2687_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2696_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2705_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2714_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2723_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2732_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2741_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2750_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2759_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2768_p1 = sext_ln79_9_fu_1536_p1;

assign grp_fu_2777_p1 = sext_ln79_12_fu_1542_p1;

assign grp_fu_2786_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2794_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2802_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2810_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2818_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2826_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2834_p1 = sext_ln79_21_fu_1630_p1;

assign grp_fu_2842_p1 = sext_ln79_21_fu_1630_p1;

assign icmp_ln48_fu_502_p2 = ((ap_sig_allocacmp_indvar_flatten252_load == 15'd21504) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1621_p2 = ((indvar_flatten137_fu_400 == 12'd1536) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1705_p2 = ((indvar_flatten_fu_396 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1768_p2 = ((cit_fu_360 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1920_p2 = ((select_ln50_reg_4022 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_2000_p2 = ((select_ln50_reg_4022 == 4'd7) ? 1'b1 : 1'b0);

assign or_ln49_fu_1779_p2 = (xor_ln49_fu_1774_p2 | icmp_ln49_reg_3787_pp0_iter7_reg);

assign or_ln50_1_fu_1747_p2 = (icmp_ln49_reg_3787 | and_ln48_1_fu_1711_p2);

assign or_ln50_2_fu_1800_p2 = (or_ln50_fu_1795_p2 | icmp_ln49_reg_3787_pp0_iter7_reg);

assign or_ln50_fu_1795_p2 = (and_ln49_fu_1789_p2 | and_ln48_1_reg_3937);

assign r_stream_TDATA = {{{{{{{{trunc_ln99_7_fu_2379_p4}, {trunc_ln99_6_fu_2369_p4}}, {trunc_ln99_5_fu_2359_p4}}, {trunc_ln99_4_fu_2349_p4}}, {trunc_ln99_3_fu_2339_p4}}, {trunc_ln99_2_fu_2329_p4}}, {trunc_ln99_1_fu_2319_p4}}, {trunc_ln8_fu_2309_p4}};

assign select_ln49_fu_1684_p3 = ((icmp_ln49_fu_1621_p2[0:0] == 1'b1) ? 12'd1 : add_ln49_fu_1678_p2);

assign select_ln50_1_fu_1752_p3 = ((or_ln50_1_fu_1747_p2[0:0] == 1'b1) ? 9'd1 : add_ln50_fu_1741_p2);

assign select_ln50_fu_1805_p3 = ((or_ln50_2_fu_1800_p2[0:0] == 1'b1) ? 4'd0 : cit_fu_360);

assign select_ln54_1_fu_2036_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_41_fu_388);

assign select_ln54_2_fu_2043_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_40_fu_384);

assign select_ln54_3_fu_2050_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_39_fu_380);

assign select_ln54_4_fu_2057_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_38_fu_376);

assign select_ln54_5_fu_2064_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_37_fu_372);

assign select_ln54_6_fu_2071_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_36_fu_368);

assign select_ln54_7_fu_2078_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_fu_364);

assign select_ln54_fu_2029_p3 = ((icmp_ln54_reg_4068[0:0] == 1'b1) ? 29'd0 : empty_42_fu_392);

assign sext_ln79_119_fu_1849_p1 = grp_fu_2705_p3;

assign sext_ln79_12_fu_1542_p1 = $signed(trunc_ln64_4_reg_2958_pp0_iter4_reg);

assign sext_ln79_138_fu_1861_p1 = grp_fu_2723_p3;

assign sext_ln79_149_fu_1873_p1 = grp_fu_2741_p3;

assign sext_ln79_155_fu_1885_p1 = grp_fu_2759_p3;

assign sext_ln79_159_fu_1897_p1 = grp_fu_2777_p3;

assign sext_ln79_15_fu_1316_p1 = $signed(trunc_ln64_5_reg_2963);

assign sext_ln79_18_fu_1484_p1 = $signed(trunc_ln64_6_reg_2968_pp0_iter3_reg);

assign sext_ln79_21_fu_1630_p1 = $signed(trunc_ln64_7_reg_2973_pp0_iter5_reg);

assign sext_ln79_39_fu_1813_p1 = grp_fu_2651_p3;

assign sext_ln79_3_fu_1304_p1 = trunc_ln64_1_reg_2943;

assign sext_ln79_61_fu_1825_p1 = grp_fu_2669_p3;

assign sext_ln79_6_fu_1454_p1 = $signed(trunc_ln64_2_reg_2948_pp0_iter2_reg);

assign sext_ln79_83_fu_1837_p1 = grp_fu_2687_p3;

assign sext_ln79_9_fu_1536_p1 = $signed(trunc_ln64_3_reg_2953_pp0_iter4_reg);

assign sext_ln79_fu_1301_p1 = $signed(trunc_ln64_reg_2938);

assign sext_ln89_1_fu_2107_p1 = add_ln79_13_reg_4085;

assign sext_ln89_2_fu_2129_p1 = add_ln79_20_reg_4090;

assign sext_ln89_3_fu_2151_p1 = add_ln79_27_reg_4095;

assign sext_ln89_4_fu_2173_p1 = add_ln79_34_reg_4100;

assign sext_ln89_5_fu_2195_p1 = add_ln79_41_reg_4105;

assign sext_ln89_6_fu_2217_p1 = add_ln79_48_reg_4110;

assign sext_ln89_7_fu_2239_p1 = add_ln79_55_reg_4115;

assign sext_ln89_fu_2085_p1 = add_ln79_6_reg_4080;

assign shl_ln89_1_fu_2113_p2 = sext_ln89_1_fu_2107_p1 << zext_ln89_4_fu_2110_p1;

assign shl_ln89_2_fu_2135_p2 = sext_ln89_2_fu_2129_p1 << zext_ln89_6_fu_2132_p1;

assign shl_ln89_3_fu_2157_p2 = sext_ln89_3_fu_2151_p1 << zext_ln89_8_fu_2154_p1;

assign shl_ln89_4_fu_2179_p2 = sext_ln89_4_fu_2173_p1 << zext_ln89_10_fu_2176_p1;

assign shl_ln89_5_fu_2201_p2 = sext_ln89_5_fu_2195_p1 << zext_ln89_12_fu_2198_p1;

assign shl_ln89_6_fu_2223_p2 = sext_ln89_6_fu_2217_p1 << zext_ln89_14_fu_2220_p1;

assign shl_ln89_7_fu_2245_p2 = sext_ln89_7_fu_2239_p1 << zext_ln89_16_fu_2242_p1;

assign shl_ln89_fu_2091_p2 = sext_ln89_fu_2085_p1 << zext_ln89_2_fu_2088_p1;

assign trunc_ln64_fu_514_p1 = qq_stream_r_dout[7:0];

assign trunc_ln66_fu_588_p1 = kq_stream_r_dout[7:0];

assign trunc_ln67_fu_1222_p1 = ks_stream_r_dout[3:0];

assign trunc_ln89_1_fu_2119_p1 = shl_ln89_1_fu_2113_p2[28:0];

assign trunc_ln89_2_fu_2141_p1 = shl_ln89_2_fu_2135_p2[28:0];

assign trunc_ln89_3_fu_2163_p1 = shl_ln89_3_fu_2157_p2[28:0];

assign trunc_ln89_4_fu_2185_p1 = shl_ln89_4_fu_2179_p2[28:0];

assign trunc_ln89_5_fu_2207_p1 = shl_ln89_5_fu_2201_p2[28:0];

assign trunc_ln89_6_fu_2229_p1 = shl_ln89_6_fu_2223_p2[28:0];

assign trunc_ln89_7_fu_2251_p1 = shl_ln89_7_fu_2245_p2[28:0];

assign trunc_ln89_fu_2097_p1 = shl_ln89_fu_2091_p2[28:0];

assign trunc_ln8_fu_2309_p4 = {{add_ln89_23_fu_2303_p2[28:12]}};

assign trunc_ln99_1_fu_2319_p4 = {{add_ln89_22_fu_2297_p2[28:12]}};

assign trunc_ln99_2_fu_2329_p4 = {{add_ln89_21_fu_2291_p2[28:12]}};

assign trunc_ln99_3_fu_2339_p4 = {{add_ln89_20_fu_2285_p2[28:12]}};

assign trunc_ln99_4_fu_2349_p4 = {{add_ln89_19_fu_2279_p2[28:12]}};

assign trunc_ln99_5_fu_2359_p4 = {{add_ln89_18_fu_2273_p2[28:12]}};

assign trunc_ln99_6_fu_2369_p4 = {{add_ln89_17_fu_2267_p2[28:12]}};

assign trunc_ln99_7_fu_2379_p4 = {{add_ln89_16_fu_2261_p2[28:12]}};

assign xor_ln48_fu_1700_p2 = (icmp_ln49_reg_3787 ^ 1'd1);

assign xor_ln49_fu_1774_p2 = (icmp_ln50_reg_3932 ^ 1'd1);

assign zext_ln89_10_fu_2176_p1 = add_ln89_8_reg_4140;

assign zext_ln89_11_fu_1973_p1 = tmp_2_reg_3328_pp0_iter8_reg;

assign zext_ln89_12_fu_2198_p1 = add_ln89_10_reg_4145;

assign zext_ln89_13_fu_1982_p1 = tmp_3_reg_3333_pp0_iter8_reg;

assign zext_ln89_14_fu_2220_p1 = add_ln89_12_reg_4150;

assign zext_ln89_15_fu_1991_p1 = tmp_4_reg_3338_pp0_iter8_reg;

assign zext_ln89_16_fu_2242_p1 = add_ln89_14_reg_4155;

assign zext_ln89_1_fu_1928_p1 = trunc_ln67_reg_3303_pp0_iter8_reg;

assign zext_ln89_2_fu_2088_p1 = add_ln89_reg_4120;

assign zext_ln89_3_fu_1937_p1 = tmp_reg_3308_pp0_iter8_reg;

assign zext_ln89_4_fu_2110_p1 = add_ln89_2_reg_4125;

assign zext_ln89_5_fu_1946_p1 = tmp_9_reg_3313_pp0_iter8_reg;

assign zext_ln89_6_fu_2132_p1 = add_ln89_4_reg_4130;

assign zext_ln89_7_fu_1955_p1 = tmp_s_reg_3318_pp0_iter8_reg;

assign zext_ln89_8_fu_2154_p1 = add_ln89_6_reg_4135;

assign zext_ln89_9_fu_1964_p1 = tmp_1_reg_3323_pp0_iter8_reg;

assign zext_ln89_fu_1925_p1 = qs_stream_r_read_reg_2978_pp0_iter8_reg;

endmodule //QK_GEMM_do_bmm
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_do_qk_gemm (
        pos_r,
        qk_q_stream_TDATA,
        qk_s_stream_TDATA,
        kq_cache_i_stream_TDATA,
        ks_cache_i_stream_TDATA,
        kq_cache_o_stream_TDATA,
        ks_cache_o_stream_TDATA,
        r_stream_TDATA,
        ap_clk,
        ap_rst,
        pos_r_ap_vld,
        ap_start,
        qk_q_stream_TVALID,
        qk_q_stream_TREADY,
        qk_s_stream_TVALID,
        qk_s_stream_TREADY,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        ap_done,
        r_stream_TVALID,
        r_stream_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] pos_r;
input  [63:0] qk_q_stream_TDATA;
input  [7:0] qk_s_stream_TDATA;
input  [63:0] kq_cache_i_stream_TDATA;
input  [7:0] ks_cache_i_stream_TDATA;
output  [63:0] kq_cache_o_stream_TDATA;
output  [7:0] ks_cache_o_stream_TDATA;
output  [135:0] r_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   pos_r_ap_vld;
input   ap_start;
input   qk_q_stream_TVALID;
output   qk_q_stream_TREADY;
input   qk_s_stream_TVALID;
output   qk_s_stream_TREADY;
input   kq_cache_i_stream_TVALID;
output   kq_cache_i_stream_TREADY;
output   kq_cache_o_stream_TVALID;
input   kq_cache_o_stream_TREADY;
input   ks_cache_i_stream_TVALID;
output   ks_cache_i_stream_TREADY;
output   ks_cache_o_stream_TVALID;
input   ks_cache_o_stream_TREADY;
output   ap_done;
output   r_stream_TVALID;
input   r_stream_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire    entry_proc_U0_start_out;
wire    entry_proc_U0_start_write;
wire   [7:0] entry_proc_U0_pos_c_din;
wire    entry_proc_U0_pos_c_write;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_start;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_done;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_continue;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_idle;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready;
wire   [63:0] split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_kq_stream_din;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_kq_stream_write;
wire   [63:0] split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qq_stream_din;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qq_stream_write;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_start_out;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_start_write;
wire    split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qk_q_stream_TREADY;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_start;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_done;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_continue;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_idle;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready;
wire   [3:0] split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ks_stream_din;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ks_stream_write;
wire   [3:0] split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qs_stream_din;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qs_stream_write;
wire    split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qk_s_stream_TREADY;
wire    Loop_0_proc_U0_ap_start;
wire    Loop_0_proc_U0_start_out;
wire    Loop_0_proc_U0_start_write;
wire    Loop_0_proc_U0_qq_stream_read;
wire    Loop_0_proc_U0_qs_stream_read;
wire   [63:0] Loop_0_proc_U0_qq_stream_r_din;
wire    Loop_0_proc_U0_qq_stream_r_write;
wire   [3:0] Loop_0_proc_U0_qs_stream_r_din;
wire    Loop_0_proc_U0_qs_stream_r_write;
wire    Loop_0_proc_U0_ap_done;
wire    Loop_0_proc_U0_ap_ready;
wire    Loop_0_proc_U0_ap_idle;
wire    Loop_0_proc_U0_ap_continue;
wire    Loop_1_proc_wrapper_U0_pos_r_read;
wire    Loop_1_proc_wrapper_U0_kq_stream_read;
wire   [63:0] Loop_1_proc_wrapper_U0_kq_cache_o_stream_TDATA;
wire    Loop_1_proc_wrapper_U0_ks_stream_read;
wire   [7:0] Loop_1_proc_wrapper_U0_ks_cache_o_stream_TDATA;
wire   [511:0] Loop_1_proc_wrapper_U0_kq_stream_r_din;
wire    Loop_1_proc_wrapper_U0_kq_stream_r_write;
wire   [31:0] Loop_1_proc_wrapper_U0_ks_stream_r_din;
wire    Loop_1_proc_wrapper_U0_ks_stream_r_write;
wire    Loop_1_proc_wrapper_U0_ap_start;
wire    Loop_1_proc_wrapper_U0_kq_cache_i_stream_TREADY;
wire    Loop_1_proc_wrapper_U0_kq_cache_o_stream_TVALID;
wire    Loop_1_proc_wrapper_U0_ks_cache_i_stream_TREADY;
wire    Loop_1_proc_wrapper_U0_ks_cache_o_stream_TVALID;
wire    Loop_1_proc_wrapper_U0_ap_done;
wire    Loop_1_proc_wrapper_U0_ap_ready;
wire    Loop_1_proc_wrapper_U0_ap_idle;
wire    Loop_1_proc_wrapper_U0_ap_continue;
wire    ap_sync_continue;
wire    do_bmm_U0_ap_start;
wire    do_bmm_U0_ap_done;
wire    do_bmm_U0_ap_continue;
wire    do_bmm_U0_ap_idle;
wire    do_bmm_U0_ap_ready;
wire    do_bmm_U0_qq_stream_r_read;
wire    do_bmm_U0_qs_stream_r_read;
wire    do_bmm_U0_kq_stream_r_read;
wire    do_bmm_U0_ks_stream_r_read;
wire   [135:0] do_bmm_U0_r_stream_TDATA;
wire    do_bmm_U0_r_stream_TVALID;
wire    pos_c_full_n;
wire   [7:0] pos_c_dout;
wire    pos_c_empty_n;
wire   [2:0] pos_c_num_data_valid;
wire   [2:0] pos_c_fifo_cap;
wire    qq_stream_full_n;
wire   [63:0] qq_stream_dout;
wire    qq_stream_empty_n;
wire   [2:0] qq_stream_num_data_valid;
wire   [2:0] qq_stream_fifo_cap;
wire    kq_stream_full_n;
wire   [63:0] kq_stream_dout;
wire    kq_stream_empty_n;
wire   [2:0] kq_stream_num_data_valid;
wire   [2:0] kq_stream_fifo_cap;
wire    qs_stream_full_n;
wire   [3:0] qs_stream_dout;
wire    qs_stream_empty_n;
wire   [2:0] qs_stream_num_data_valid;
wire   [2:0] qs_stream_fifo_cap;
wire    ks_stream_full_n;
wire   [3:0] ks_stream_dout;
wire    ks_stream_empty_n;
wire   [2:0] ks_stream_num_data_valid;
wire   [2:0] ks_stream_fifo_cap;
wire    qq_stream_r_full_n;
wire   [63:0] qq_stream_r_dout;
wire    qq_stream_r_empty_n;
wire   [2:0] qq_stream_r_num_data_valid;
wire   [2:0] qq_stream_r_fifo_cap;
wire    qs_stream_r_full_n;
wire   [3:0] qs_stream_r_dout;
wire    qs_stream_r_empty_n;
wire   [2:0] qs_stream_r_num_data_valid;
wire   [2:0] qs_stream_r_fifo_cap;
wire    kq_stream_r_full_n;
wire   [511:0] kq_stream_r_dout;
wire    kq_stream_r_empty_n;
wire   [2:0] kq_stream_r_num_data_valid;
wire   [2:0] kq_stream_r_fifo_cap;
wire    ks_stream_r_full_n;
wire   [31:0] ks_stream_r_dout;
wire    ks_stream_r_empty_n;
wire   [2:0] ks_stream_r_num_data_valid;
wire   [2:0] ks_stream_r_fifo_cap;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready;
wire    ap_sync_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready;
reg    ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready;
wire    ap_sync_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready;
wire   [0:0] start_for_Loop_1_proc_wrapper_U0_din;
wire    start_for_Loop_1_proc_wrapper_U0_full_n;
wire   [0:0] start_for_Loop_1_proc_wrapper_U0_dout;
wire    start_for_Loop_1_proc_wrapper_U0_empty_n;
wire   [0:0] start_for_Loop_0_proc_U0_din;
wire    start_for_Loop_0_proc_U0_full_n;
wire   [0:0] start_for_Loop_0_proc_U0_dout;
wire    start_for_Loop_0_proc_U0_empty_n;
wire   [0:0] start_for_do_bmm_U0_din;
wire    start_for_do_bmm_U0_full_n;
wire   [0:0] start_for_do_bmm_U0_dout;
wire    start_for_do_bmm_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready = 1'b0;
end

QK_GEMM_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .start_full_n(start_for_Loop_1_proc_wrapper_U0_full_n),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .start_out(entry_proc_U0_start_out),
    .start_write(entry_proc_U0_start_write),
    .pos_r(pos_r),
    .pos_c_din(entry_proc_U0_pos_c_din),
    .pos_c_full_n(pos_c_full_n),
    .pos_c_write(entry_proc_U0_pos_c_write),
    .pos_c_num_data_valid(pos_c_num_data_valid),
    .pos_c_fifo_cap(pos_c_fifo_cap)
);

QK_GEMM_split_interleaved_streams_ap_int_8_14_8_1_64_8_s split_interleaved_streams_ap_int_8_14_8_1_64_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_start),
    .start_full_n(start_for_Loop_0_proc_U0_full_n),
    .ap_done(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_done),
    .ap_continue(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_continue),
    .ap_idle(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_idle),
    .ap_ready(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready),
    .qk_q_stream_TVALID(qk_q_stream_TVALID),
    .kq_stream_din(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_kq_stream_din),
    .kq_stream_full_n(kq_stream_full_n),
    .kq_stream_write(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_kq_stream_write),
    .kq_stream_num_data_valid(kq_stream_num_data_valid),
    .kq_stream_fifo_cap(kq_stream_fifo_cap),
    .qq_stream_din(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qq_stream_din),
    .qq_stream_full_n(qq_stream_full_n),
    .qq_stream_write(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qq_stream_write),
    .qq_stream_num_data_valid(qq_stream_num_data_valid),
    .qq_stream_fifo_cap(qq_stream_fifo_cap),
    .start_out(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_start_out),
    .start_write(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_start_write),
    .qk_q_stream_TDATA(qk_q_stream_TDATA),
    .qk_q_stream_TREADY(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qk_q_stream_TREADY)
);

QK_GEMM_split_interleaved_streams_ap_uint_4_14_8_1_8_1_s split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_start),
    .ap_done(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_done),
    .ap_continue(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_continue),
    .ap_idle(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_idle),
    .ap_ready(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready),
    .qk_s_stream_TVALID(qk_s_stream_TVALID),
    .ks_stream_din(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ks_stream_din),
    .ks_stream_full_n(ks_stream_full_n),
    .ks_stream_write(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ks_stream_write),
    .ks_stream_num_data_valid(ks_stream_num_data_valid),
    .ks_stream_fifo_cap(ks_stream_fifo_cap),
    .qs_stream_din(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qs_stream_din),
    .qs_stream_full_n(qs_stream_full_n),
    .qs_stream_write(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qs_stream_write),
    .qs_stream_num_data_valid(qs_stream_num_data_valid),
    .qs_stream_fifo_cap(qs_stream_fifo_cap),
    .qk_s_stream_TDATA(qk_s_stream_TDATA),
    .qk_s_stream_TREADY(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qk_s_stream_TREADY)
);

QK_GEMM_Loop_0_proc Loop_0_proc_U0(
    .ap_start(Loop_0_proc_U0_ap_start),
    .start_full_n(start_for_do_bmm_U0_full_n),
    .start_out(Loop_0_proc_U0_start_out),
    .start_write(Loop_0_proc_U0_start_write),
    .qq_stream_dout(qq_stream_dout),
    .qq_stream_empty_n(qq_stream_empty_n),
    .qq_stream_read(Loop_0_proc_U0_qq_stream_read),
    .qs_stream_dout(qs_stream_dout),
    .qs_stream_empty_n(qs_stream_empty_n),
    .qs_stream_read(Loop_0_proc_U0_qs_stream_read),
    .qq_stream_r_din(Loop_0_proc_U0_qq_stream_r_din),
    .qq_stream_r_full_n(qq_stream_r_full_n),
    .qq_stream_r_write(Loop_0_proc_U0_qq_stream_r_write),
    .qs_stream_r_din(Loop_0_proc_U0_qs_stream_r_din),
    .qs_stream_r_full_n(qs_stream_r_full_n),
    .qs_stream_r_write(Loop_0_proc_U0_qs_stream_r_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(Loop_0_proc_U0_ap_done),
    .ap_ready(Loop_0_proc_U0_ap_ready),
    .ap_idle(Loop_0_proc_U0_ap_idle),
    .ap_continue(Loop_0_proc_U0_ap_continue)
);

QK_GEMM_Loop_1_proc_wrapper Loop_1_proc_wrapper_U0(
    .pos_r_dout(pos_c_dout),
    .pos_r_empty_n(pos_c_empty_n),
    .pos_r_read(Loop_1_proc_wrapper_U0_pos_r_read),
    .kq_stream_dout(kq_stream_dout),
    .kq_stream_empty_n(kq_stream_empty_n),
    .kq_stream_read(Loop_1_proc_wrapper_U0_kq_stream_read),
    .kq_cache_i_stream_TDATA(kq_cache_i_stream_TDATA),
    .kq_cache_o_stream_TDATA(Loop_1_proc_wrapper_U0_kq_cache_o_stream_TDATA),
    .ks_stream_dout(ks_stream_dout),
    .ks_stream_empty_n(ks_stream_empty_n),
    .ks_stream_read(Loop_1_proc_wrapper_U0_ks_stream_read),
    .ks_cache_i_stream_TDATA(ks_cache_i_stream_TDATA),
    .ks_cache_o_stream_TDATA(Loop_1_proc_wrapper_U0_ks_cache_o_stream_TDATA),
    .kq_stream_r_din(Loop_1_proc_wrapper_U0_kq_stream_r_din),
    .kq_stream_r_full_n(kq_stream_r_full_n),
    .kq_stream_r_write(Loop_1_proc_wrapper_U0_kq_stream_r_write),
    .ks_stream_r_din(Loop_1_proc_wrapper_U0_ks_stream_r_din),
    .ks_stream_r_full_n(ks_stream_r_full_n),
    .ks_stream_r_write(Loop_1_proc_wrapper_U0_ks_stream_r_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_1_proc_wrapper_U0_ap_start),
    .kq_cache_i_stream_TVALID(kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(Loop_1_proc_wrapper_U0_kq_cache_i_stream_TREADY),
    .kq_cache_o_stream_TVALID(Loop_1_proc_wrapper_U0_kq_cache_o_stream_TVALID),
    .kq_cache_o_stream_TREADY(kq_cache_o_stream_TREADY),
    .ks_cache_i_stream_TVALID(ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(Loop_1_proc_wrapper_U0_ks_cache_i_stream_TREADY),
    .ks_cache_o_stream_TVALID(Loop_1_proc_wrapper_U0_ks_cache_o_stream_TVALID),
    .ks_cache_o_stream_TREADY(ks_cache_o_stream_TREADY),
    .ap_done(Loop_1_proc_wrapper_U0_ap_done),
    .ap_ready(Loop_1_proc_wrapper_U0_ap_ready),
    .ap_idle(Loop_1_proc_wrapper_U0_ap_idle),
    .ap_continue(Loop_1_proc_wrapper_U0_ap_continue)
);

QK_GEMM_do_bmm do_bmm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_bmm_U0_ap_start),
    .ap_done(do_bmm_U0_ap_done),
    .ap_continue(do_bmm_U0_ap_continue),
    .ap_idle(do_bmm_U0_ap_idle),
    .ap_ready(do_bmm_U0_ap_ready),
    .qq_stream_r_dout(qq_stream_r_dout),
    .qq_stream_r_empty_n(qq_stream_r_empty_n),
    .qq_stream_r_read(do_bmm_U0_qq_stream_r_read),
    .qq_stream_r_num_data_valid(qq_stream_r_num_data_valid),
    .qq_stream_r_fifo_cap(qq_stream_r_fifo_cap),
    .qs_stream_r_dout(qs_stream_r_dout),
    .qs_stream_r_empty_n(qs_stream_r_empty_n),
    .qs_stream_r_read(do_bmm_U0_qs_stream_r_read),
    .qs_stream_r_num_data_valid(qs_stream_r_num_data_valid),
    .qs_stream_r_fifo_cap(qs_stream_r_fifo_cap),
    .kq_stream_r_dout(kq_stream_r_dout),
    .kq_stream_r_empty_n(kq_stream_r_empty_n),
    .kq_stream_r_read(do_bmm_U0_kq_stream_r_read),
    .kq_stream_r_num_data_valid(kq_stream_r_num_data_valid),
    .kq_stream_r_fifo_cap(kq_stream_r_fifo_cap),
    .ks_stream_r_dout(ks_stream_r_dout),
    .ks_stream_r_empty_n(ks_stream_r_empty_n),
    .ks_stream_r_read(do_bmm_U0_ks_stream_r_read),
    .ks_stream_r_num_data_valid(ks_stream_r_num_data_valid),
    .ks_stream_r_fifo_cap(ks_stream_r_fifo_cap),
    .r_stream_TREADY(r_stream_TREADY),
    .r_stream_TDATA(do_bmm_U0_r_stream_TDATA),
    .r_stream_TVALID(do_bmm_U0_r_stream_TVALID)
);

QK_GEMM_fifo_w8_d3_S pos_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_pos_c_din),
    .if_full_n(pos_c_full_n),
    .if_write(entry_proc_U0_pos_c_write),
    .if_dout(pos_c_dout),
    .if_empty_n(pos_c_empty_n),
    .if_read(Loop_1_proc_wrapper_U0_pos_r_read),
    .if_num_data_valid(pos_c_num_data_valid),
    .if_fifo_cap(pos_c_fifo_cap)
);

QK_GEMM_fifo_w64_d2_S qq_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qq_stream_din),
    .if_full_n(qq_stream_full_n),
    .if_write(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qq_stream_write),
    .if_dout(qq_stream_dout),
    .if_empty_n(qq_stream_empty_n),
    .if_read(Loop_0_proc_U0_qq_stream_read),
    .if_num_data_valid(qq_stream_num_data_valid),
    .if_fifo_cap(qq_stream_fifo_cap)
);

QK_GEMM_fifo_w64_d2_S kq_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_kq_stream_din),
    .if_full_n(kq_stream_full_n),
    .if_write(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_kq_stream_write),
    .if_dout(kq_stream_dout),
    .if_empty_n(kq_stream_empty_n),
    .if_read(Loop_1_proc_wrapper_U0_kq_stream_read),
    .if_num_data_valid(kq_stream_num_data_valid),
    .if_fifo_cap(kq_stream_fifo_cap)
);

QK_GEMM_fifo_w4_d2_S qs_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qs_stream_din),
    .if_full_n(qs_stream_full_n),
    .if_write(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qs_stream_write),
    .if_dout(qs_stream_dout),
    .if_empty_n(qs_stream_empty_n),
    .if_read(Loop_0_proc_U0_qs_stream_read),
    .if_num_data_valid(qs_stream_num_data_valid),
    .if_fifo_cap(qs_stream_fifo_cap)
);

QK_GEMM_fifo_w4_d2_S ks_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ks_stream_din),
    .if_full_n(ks_stream_full_n),
    .if_write(split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ks_stream_write),
    .if_dout(ks_stream_dout),
    .if_empty_n(ks_stream_empty_n),
    .if_read(Loop_1_proc_wrapper_U0_ks_stream_read),
    .if_num_data_valid(ks_stream_num_data_valid),
    .if_fifo_cap(ks_stream_fifo_cap)
);

QK_GEMM_fifo_w64_d2_S qq_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_0_proc_U0_qq_stream_r_din),
    .if_full_n(qq_stream_r_full_n),
    .if_write(Loop_0_proc_U0_qq_stream_r_write),
    .if_dout(qq_stream_r_dout),
    .if_empty_n(qq_stream_r_empty_n),
    .if_read(do_bmm_U0_qq_stream_r_read),
    .if_num_data_valid(qq_stream_r_num_data_valid),
    .if_fifo_cap(qq_stream_r_fifo_cap)
);

QK_GEMM_fifo_w4_d2_S qs_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_0_proc_U0_qs_stream_r_din),
    .if_full_n(qs_stream_r_full_n),
    .if_write(Loop_0_proc_U0_qs_stream_r_write),
    .if_dout(qs_stream_r_dout),
    .if_empty_n(qs_stream_r_empty_n),
    .if_read(do_bmm_U0_qs_stream_r_read),
    .if_num_data_valid(qs_stream_r_num_data_valid),
    .if_fifo_cap(qs_stream_r_fifo_cap)
);

QK_GEMM_fifo_w512_d2_S kq_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_wrapper_U0_kq_stream_r_din),
    .if_full_n(kq_stream_r_full_n),
    .if_write(Loop_1_proc_wrapper_U0_kq_stream_r_write),
    .if_dout(kq_stream_r_dout),
    .if_empty_n(kq_stream_r_empty_n),
    .if_read(do_bmm_U0_kq_stream_r_read),
    .if_num_data_valid(kq_stream_r_num_data_valid),
    .if_fifo_cap(kq_stream_r_fifo_cap)
);

QK_GEMM_fifo_w32_d2_S ks_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_wrapper_U0_ks_stream_r_din),
    .if_full_n(ks_stream_r_full_n),
    .if_write(Loop_1_proc_wrapper_U0_ks_stream_r_write),
    .if_dout(ks_stream_r_dout),
    .if_empty_n(ks_stream_r_empty_n),
    .if_read(do_bmm_U0_ks_stream_r_read),
    .if_num_data_valid(ks_stream_r_num_data_valid),
    .if_fifo_cap(ks_stream_r_fifo_cap)
);

QK_GEMM_start_for_Loop_1_proc_wrapper_U0 start_for_Loop_1_proc_wrapper_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_1_proc_wrapper_U0_din),
    .if_full_n(start_for_Loop_1_proc_wrapper_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_Loop_1_proc_wrapper_U0_dout),
    .if_empty_n(start_for_Loop_1_proc_wrapper_U0_empty_n),
    .if_read(Loop_1_proc_wrapper_U0_ap_ready)
);

QK_GEMM_start_for_Loop_0_proc_U0 start_for_Loop_0_proc_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_0_proc_U0_din),
    .if_full_n(start_for_Loop_0_proc_U0_full_n),
    .if_write(split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_start_write),
    .if_dout(start_for_Loop_0_proc_U0_dout),
    .if_empty_n(start_for_Loop_0_proc_U0_empty_n),
    .if_read(Loop_0_proc_U0_ap_ready)
);

QK_GEMM_start_for_do_bmm_U0 start_for_do_bmm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_bmm_U0_din),
    .if_full_n(start_for_do_bmm_U0_full_n),
    .if_write(Loop_0_proc_U0_start_write),
    .if_dout(start_for_do_bmm_U0_dout),
    .if_empty_n(start_for_do_bmm_U0_empty_n),
    .if_read(do_bmm_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready <= ap_sync_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready <= ap_sync_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready;
        end
    end
end

assign Loop_0_proc_U0_ap_continue = 1'b1;

assign Loop_0_proc_U0_ap_start = start_for_Loop_0_proc_U0_empty_n;

assign Loop_1_proc_wrapper_U0_ap_continue = ap_sync_continue;

assign Loop_1_proc_wrapper_U0_ap_start = start_for_Loop_1_proc_wrapper_U0_empty_n;

assign ap_done = ap_sync_done;

assign ap_idle = (split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_idle & split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_idle & entry_proc_U0_ap_idle & do_bmm_U0_ap_idle & Loop_1_proc_wrapper_U0_ap_idle & Loop_0_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (do_bmm_U0_ap_done & Loop_1_proc_wrapper_U0_ap_done);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready & ap_sync_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready);

assign ap_sync_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready = (split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready | ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready);

assign ap_sync_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready = (split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready | ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready);

assign do_bmm_U0_ap_continue = ap_sync_continue;

assign do_bmm_U0_ap_start = start_for_do_bmm_U0_empty_n;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign kq_cache_i_stream_TREADY = Loop_1_proc_wrapper_U0_kq_cache_i_stream_TREADY;

assign kq_cache_o_stream_TDATA = Loop_1_proc_wrapper_U0_kq_cache_o_stream_TDATA;

assign kq_cache_o_stream_TVALID = Loop_1_proc_wrapper_U0_kq_cache_o_stream_TVALID;

assign ks_cache_i_stream_TREADY = Loop_1_proc_wrapper_U0_ks_cache_i_stream_TREADY;

assign ks_cache_o_stream_TDATA = Loop_1_proc_wrapper_U0_ks_cache_o_stream_TDATA;

assign ks_cache_o_stream_TVALID = Loop_1_proc_wrapper_U0_ks_cache_o_stream_TVALID;

assign qk_q_stream_TREADY = split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_qk_q_stream_TREADY;

assign qk_s_stream_TREADY = split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_qk_s_stream_TREADY;

assign r_stream_TDATA = do_bmm_U0_r_stream_TDATA;

assign r_stream_TVALID = do_bmm_U0_r_stream_TVALID;

assign split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_continue = 1'b1;

assign split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_start = ((ap_sync_reg_split_interleaved_streams_ap_int_8_14_8_1_64_8_U0_ap_ready ^ 1'b1) & ap_start);

assign split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_continue = 1'b1;

assign split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_start = ((ap_sync_reg_split_interleaved_streams_ap_uint_4_14_8_1_8_1_U0_ap_ready ^ 1'b1) & ap_start);

assign start_for_Loop_0_proc_U0_din = 1'b1;

assign start_for_Loop_1_proc_wrapper_U0_din = 1'b1;

assign start_for_do_bmm_U0_din = 1'b1;

endmodule //QK_GEMM_do_qk_gemm
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        pos_r,
        pos_c_din,
        pos_c_full_n,
        pos_c_write,
        pos_c_num_data_valid,
        pos_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] pos_r;
output  [7:0] pos_c_din;
input   pos_c_full_n;
output   pos_c_write;
input  [2:0] pos_c_num_data_valid;
input  [2:0] pos_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg pos_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    pos_c_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c_blk_n = pos_c_full_n;
    end else begin
        pos_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c_write = 1'b1;
    end else begin
        pos_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (pos_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign pos_c_din = pos_r;

assign start_out = real_start;

endmodule //QK_GEMM_entry_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_entry_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        return_r,
        pos_r_dout,
        pos_r_empty_n,
        pos_r_read,
        pos_r_num_data_valid,
        pos_r_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] return_r;
input  [7:0] pos_r_dout;
input   pos_r_empty_n;
output   pos_r_read;
input  [2:0] pos_r_num_data_valid;
input  [2:0] pos_r_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] return_r;
reg pos_r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pos_r_blk_n;
reg    ap_block_state1;
reg   [7:0] return_r_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 return_r_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        return_r_preg <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            return_r_preg <= pos_r_dout;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_blk_n = pos_r_empty_n;
    end else begin
        pos_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_read = 1'b1;
    end else begin
        pos_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        return_r = pos_r_dout;
    end else begin
        return_r = return_r_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (pos_r_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //QK_GEMM_entry_proc1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_fifo_w32_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_fifo_w32_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_fifo_w32_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_fifo_w32_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_fifo_w4_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 4,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_fifo_w4_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_fifo_w4_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_fifo_w4_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 4,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_fifo_w512_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 512,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_fifo_w512_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_fifo_w512_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_fifo_w512_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 512,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_fifo_w64_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 64,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_fifo_w64_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_fifo_w64_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_fifo_w64_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_fifo_w8_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 8,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_fifo_w8_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_fifo_w8_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_fifo_w8_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 8,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_fifo_w8_d3_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 8,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_fifo_w8_d3_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_fifo_w8_d3_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_fifo_w8_d3_S_ShiftReg
#(parameter
    DATA_WIDTH  = 8,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module QK_GEMM_flow_control_loop_delay_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_ready_delayed,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
reg ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_ready_delayed;
input   ap_loop_exit_done;


//Record the delay between ap_loop_exit_ready
//and ap_loop_exit_ready_delayed
reg    rewind_ap_ready_reg;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
//#0 rewind_ap_ready_reg = 1'b0;
end

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready_delayed;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else if ((ap_ready == 1'b0) & (ap_start == 1'b1) & ap_loop_exit_ready == 1'b1) begin
        rewind_ap_ready_reg <= 1'b1;
    end else if ((ap_ready == 1'b1) & (ap_start == 1'b1)) begin
        rewind_ap_ready_reg <= 1'b0;
    end
end

always @ (*) begin
    if ((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1)) begin
        ap_start_int = 1'b1;
    end else begin
        ap_start_int = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module QK_GEMM_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not QK_GEMM module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not QK_GEMM module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_Loop_0_proc (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_stream_dout,
        qq_stream_empty_n,
        qq_stream_read,
        qs_stream_dout,
        qs_stream_empty_n,
        qs_stream_read,
        qq_stream_r_din,
        qq_stream_r_full_n,
        qq_stream_r_write,
        qs_stream_r_din,
        qs_stream_r_full_n,
        qs_stream_r_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [63:0] qq_stream_dout;
input   qq_stream_empty_n;
output   qq_stream_read;
input  [3:0] qs_stream_dout;
input   qs_stream_empty_n;
output   qs_stream_read;
output  [63:0] qq_stream_r_din;
input   qq_stream_r_full_n;
output   qq_stream_r_write;
output  [3:0] qs_stream_r_din;
input   qs_stream_r_full_n;
output   qs_stream_r_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;
reg ap_done;
reg ap_idle;

reg    real_start;
reg    start_once_reg;
reg    internal_ap_ready;
wire    dataflow_in_loop_x_122_U0_qq_stream_read;
wire    dataflow_in_loop_x_122_U0_qs_stream_read;
wire   [63:0] dataflow_in_loop_x_122_U0_qq_stream_r_din;
wire    dataflow_in_loop_x_122_U0_qq_stream_r_write;
wire   [3:0] dataflow_in_loop_x_122_U0_qs_stream_r_din;
wire    dataflow_in_loop_x_122_U0_qs_stream_r_write;
wire    dataflow_in_loop_x_122_U0_ap_start;
wire    dataflow_in_loop_x_122_U0_ap_done;
wire    dataflow_in_loop_x_122_U0_ap_ready;
wire    dataflow_in_loop_x_122_U0_ap_idle;
reg    dataflow_in_loop_x_122_U0_ap_continue;
reg   [3:0] loop_dataflow_input_count;
reg   [3:0] loop_dataflow_output_count;
wire   [3:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 loop_dataflow_input_count = 4'd0;
//#0 loop_dataflow_output_count = 4'd0;
end

QK_GEMM_dataflow_in_loop_x_122 dataflow_in_loop_x_122_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .qq_stream_dout(qq_stream_dout),
    .qq_stream_empty_n(qq_stream_empty_n),
    .qq_stream_read(dataflow_in_loop_x_122_U0_qq_stream_read),
    .qs_stream_dout(qs_stream_dout),
    .qs_stream_empty_n(qs_stream_empty_n),
    .qs_stream_read(dataflow_in_loop_x_122_U0_qs_stream_read),
    .qq_stream_r_din(dataflow_in_loop_x_122_U0_qq_stream_r_din),
    .qq_stream_r_full_n(qq_stream_r_full_n),
    .qq_stream_r_write(dataflow_in_loop_x_122_U0_qq_stream_r_write),
    .qs_stream_r_din(dataflow_in_loop_x_122_U0_qs_stream_r_din),
    .qs_stream_r_full_n(qs_stream_r_full_n),
    .qs_stream_r_write(dataflow_in_loop_x_122_U0_qs_stream_r_write),
    .ap_start(dataflow_in_loop_x_122_U0_ap_start),
    .ap_done(dataflow_in_loop_x_122_U0_ap_done),
    .ap_ready(dataflow_in_loop_x_122_U0_ap_ready),
    .ap_idle(dataflow_in_loop_x_122_U0_ap_idle),
    .ap_continue(dataflow_in_loop_x_122_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (dataflow_in_loop_x_122_U0_ap_ready == 1'b1) & (real_start == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 4'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (dataflow_in_loop_x_122_U0_ap_ready == 1'b1) & (real_start == 1'b1))) begin
            loop_dataflow_input_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_122_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_122_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 4'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_122_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_122_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_122_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 4'd0) & (dataflow_in_loop_x_122_U0_ap_idle == 1'b1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_x_122_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_x_122_U0_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (dataflow_in_loop_x_122_U0_ap_ready == 1'b1) & (real_start == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_ready = internal_ap_ready;

assign bound_minus_1 = (4'd14 - 4'd1);

assign dataflow_in_loop_x_122_U0_ap_start = real_start;

assign qq_stream_r_din = dataflow_in_loop_x_122_U0_qq_stream_r_din;

assign qq_stream_r_write = dataflow_in_loop_x_122_U0_qq_stream_r_write;

assign qq_stream_read = dataflow_in_loop_x_122_U0_qq_stream_read;

assign qs_stream_r_din = dataflow_in_loop_x_122_U0_qs_stream_r_din;

assign qs_stream_r_write = dataflow_in_loop_x_122_U0_qs_stream_r_write;

assign qs_stream_read = dataflow_in_loop_x_122_U0_qs_stream_read;

assign start_out = real_start;

endmodule //QK_GEMM_Loop_0_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_Loop_1_proc (
        pos_r,
        kq_stream_dout,
        kq_stream_empty_n,
        kq_stream_read,
        kq_cache_i_stream_TDATA,
        kq_cache_o_stream_TDATA,
        ks_stream_dout,
        ks_stream_empty_n,
        ks_stream_read,
        ks_cache_i_stream_TDATA,
        ks_cache_o_stream_TDATA,
        kq_stream_r_din,
        kq_stream_r_full_n,
        kq_stream_r_write,
        ks_stream_r_din,
        ks_stream_r_full_n,
        ks_stream_r_write,
        ap_clk,
        ap_rst,
        pos_r_ap_vld,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] pos_r;
input  [63:0] kq_stream_dout;
input   kq_stream_empty_n;
output   kq_stream_read;
input  [63:0] kq_cache_i_stream_TDATA;
output  [63:0] kq_cache_o_stream_TDATA;
input  [3:0] ks_stream_dout;
input   ks_stream_empty_n;
output   ks_stream_read;
input  [7:0] ks_cache_i_stream_TDATA;
output  [7:0] ks_cache_o_stream_TDATA;
output  [511:0] kq_stream_r_din;
input   kq_stream_r_full_n;
output   kq_stream_r_write;
output  [31:0] ks_stream_r_din;
input   ks_stream_r_full_n;
output   ks_stream_r_write;
input   ap_clk;
input   ap_rst;
input   pos_r_ap_vld;
input   kq_cache_i_stream_TVALID;
output   kq_cache_i_stream_TREADY;
output   kq_cache_o_stream_TVALID;
input   kq_cache_o_stream_TREADY;
input   ks_cache_i_stream_TVALID;
output   ks_cache_i_stream_TREADY;
output   ks_cache_o_stream_TVALID;
input   ks_cache_o_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire    dataflow_in_loop_x_1_U0_kq_stream_read;
wire   [63:0] dataflow_in_loop_x_1_U0_kq_cache_o_stream_TDATA;
wire    dataflow_in_loop_x_1_U0_ks_stream_read;
wire   [7:0] dataflow_in_loop_x_1_U0_ks_cache_o_stream_TDATA;
wire   [511:0] dataflow_in_loop_x_1_U0_kq_stream_r_din;
wire    dataflow_in_loop_x_1_U0_kq_stream_r_write;
wire   [31:0] dataflow_in_loop_x_1_U0_ks_stream_r_din;
wire    dataflow_in_loop_x_1_U0_ks_stream_r_write;
wire    dataflow_in_loop_x_1_U0_kq_cache_i_stream_TREADY;
wire    dataflow_in_loop_x_1_U0_kq_cache_o_stream_TVALID;
wire    dataflow_in_loop_x_1_U0_ap_start;
wire    dataflow_in_loop_x_1_U0_ks_cache_i_stream_TREADY;
wire    dataflow_in_loop_x_1_U0_ks_cache_o_stream_TVALID;
wire    dataflow_in_loop_x_1_U0_ap_done;
wire    dataflow_in_loop_x_1_U0_ap_ready;
wire    dataflow_in_loop_x_1_U0_ap_idle;
reg    dataflow_in_loop_x_1_U0_ap_continue;
reg   [3:0] loop_dataflow_input_count;
reg   [3:0] loop_dataflow_output_count;
wire   [3:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 loop_dataflow_input_count = 4'd0;
//#0 loop_dataflow_output_count = 4'd0;
end

QK_GEMM_dataflow_in_loop_x_1 dataflow_in_loop_x_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .pos_r(pos_r),
    .kq_stream_dout(kq_stream_dout),
    .kq_stream_empty_n(kq_stream_empty_n),
    .kq_stream_read(dataflow_in_loop_x_1_U0_kq_stream_read),
    .kq_cache_i_stream_TDATA(kq_cache_i_stream_TDATA),
    .kq_cache_o_stream_TDATA(dataflow_in_loop_x_1_U0_kq_cache_o_stream_TDATA),
    .ks_stream_dout(ks_stream_dout),
    .ks_stream_empty_n(ks_stream_empty_n),
    .ks_stream_read(dataflow_in_loop_x_1_U0_ks_stream_read),
    .ks_cache_i_stream_TDATA(ks_cache_i_stream_TDATA),
    .ks_cache_o_stream_TDATA(dataflow_in_loop_x_1_U0_ks_cache_o_stream_TDATA),
    .kq_stream_r_din(dataflow_in_loop_x_1_U0_kq_stream_r_din),
    .kq_stream_r_full_n(kq_stream_r_full_n),
    .kq_stream_r_write(dataflow_in_loop_x_1_U0_kq_stream_r_write),
    .ks_stream_r_din(dataflow_in_loop_x_1_U0_ks_stream_r_din),
    .ks_stream_r_full_n(ks_stream_r_full_n),
    .ks_stream_r_write(dataflow_in_loop_x_1_U0_ks_stream_r_write),
    .pos_r_ap_vld(pos_r_ap_vld),
    .kq_cache_i_stream_TVALID(kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(dataflow_in_loop_x_1_U0_kq_cache_i_stream_TREADY),
    .kq_cache_o_stream_TVALID(dataflow_in_loop_x_1_U0_kq_cache_o_stream_TVALID),
    .kq_cache_o_stream_TREADY(kq_cache_o_stream_TREADY),
    .ap_start(dataflow_in_loop_x_1_U0_ap_start),
    .ks_cache_i_stream_TVALID(ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(dataflow_in_loop_x_1_U0_ks_cache_i_stream_TREADY),
    .ks_cache_o_stream_TVALID(dataflow_in_loop_x_1_U0_ks_cache_o_stream_TVALID),
    .ks_cache_o_stream_TREADY(ks_cache_o_stream_TREADY),
    .ap_done(dataflow_in_loop_x_1_U0_ap_done),
    .ap_ready(dataflow_in_loop_x_1_U0_ap_ready),
    .ap_idle(dataflow_in_loop_x_1_U0_ap_idle),
    .ap_continue(dataflow_in_loop_x_1_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_x_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 4'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_x_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 4'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_1_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 4'd0) & (ap_start == 1'b0) & (dataflow_in_loop_x_1_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_x_1_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_x_1_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_x_1_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (4'd14 - 4'd1);

assign dataflow_in_loop_x_1_U0_ap_start = ap_start;

assign kq_cache_i_stream_TREADY = dataflow_in_loop_x_1_U0_kq_cache_i_stream_TREADY;

assign kq_cache_o_stream_TDATA = dataflow_in_loop_x_1_U0_kq_cache_o_stream_TDATA;

assign kq_cache_o_stream_TVALID = dataflow_in_loop_x_1_U0_kq_cache_o_stream_TVALID;

assign kq_stream_r_din = dataflow_in_loop_x_1_U0_kq_stream_r_din;

assign kq_stream_r_write = dataflow_in_loop_x_1_U0_kq_stream_r_write;

assign kq_stream_read = dataflow_in_loop_x_1_U0_kq_stream_read;

assign ks_cache_i_stream_TREADY = dataflow_in_loop_x_1_U0_ks_cache_i_stream_TREADY;

assign ks_cache_o_stream_TDATA = dataflow_in_loop_x_1_U0_ks_cache_o_stream_TDATA;

assign ks_cache_o_stream_TVALID = dataflow_in_loop_x_1_U0_ks_cache_o_stream_TVALID;

assign ks_stream_r_din = dataflow_in_loop_x_1_U0_ks_stream_r_din;

assign ks_stream_r_write = dataflow_in_loop_x_1_U0_ks_stream_r_write;

assign ks_stream_read = dataflow_in_loop_x_1_U0_ks_stream_read;

endmodule //QK_GEMM_Loop_1_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_Loop_1_proc_wrapper (
        pos_r_dout,
        pos_r_empty_n,
        pos_r_read,
        kq_stream_dout,
        kq_stream_empty_n,
        kq_stream_read,
        kq_cache_i_stream_TDATA,
        kq_cache_o_stream_TDATA,
        ks_stream_dout,
        ks_stream_empty_n,
        ks_stream_read,
        ks_cache_i_stream_TDATA,
        ks_cache_o_stream_TDATA,
        kq_stream_r_din,
        kq_stream_r_full_n,
        kq_stream_r_write,
        ks_stream_r_din,
        ks_stream_r_full_n,
        ks_stream_r_write,
        ap_clk,
        ap_rst,
        ap_start,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] pos_r_dout;
input   pos_r_empty_n;
output   pos_r_read;
input  [63:0] kq_stream_dout;
input   kq_stream_empty_n;
output   kq_stream_read;
input  [63:0] kq_cache_i_stream_TDATA;
output  [63:0] kq_cache_o_stream_TDATA;
input  [3:0] ks_stream_dout;
input   ks_stream_empty_n;
output   ks_stream_read;
input  [7:0] ks_cache_i_stream_TDATA;
output  [7:0] ks_cache_o_stream_TDATA;
output  [511:0] kq_stream_r_din;
input   kq_stream_r_full_n;
output   kq_stream_r_write;
output  [31:0] ks_stream_r_din;
input   ks_stream_r_full_n;
output   ks_stream_r_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
input   kq_cache_i_stream_TVALID;
output   kq_cache_i_stream_TREADY;
output   kq_cache_o_stream_TVALID;
input   kq_cache_o_stream_TREADY;
input   ks_cache_i_stream_TVALID;
output   ks_cache_i_stream_TREADY;
output   ks_cache_o_stream_TVALID;
input   ks_cache_o_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    entry_proc1_U0_ap_start;
wire    entry_proc1_U0_ap_done;
wire    entry_proc1_U0_ap_continue;
wire    entry_proc1_U0_ap_idle;
wire    entry_proc1_U0_ap_ready;
wire   [7:0] entry_proc1_U0_return_r;
wire    entry_proc1_U0_pos_r_read;
wire    p_channel_full_n;
wire    Loop_1_proc_U0_kq_stream_read;
wire   [63:0] Loop_1_proc_U0_kq_cache_o_stream_TDATA;
wire    Loop_1_proc_U0_ks_stream_read;
wire   [7:0] Loop_1_proc_U0_ks_cache_o_stream_TDATA;
wire   [511:0] Loop_1_proc_U0_kq_stream_r_din;
wire    Loop_1_proc_U0_kq_stream_r_write;
wire   [31:0] Loop_1_proc_U0_ks_stream_r_din;
wire    Loop_1_proc_U0_ks_stream_r_write;
wire    Loop_1_proc_U0_kq_cache_i_stream_TREADY;
wire    Loop_1_proc_U0_kq_cache_o_stream_TVALID;
wire    Loop_1_proc_U0_ks_cache_i_stream_TREADY;
wire    Loop_1_proc_U0_ks_cache_o_stream_TVALID;
wire    Loop_1_proc_U0_ap_start;
wire    Loop_1_proc_U0_ap_done;
wire    Loop_1_proc_U0_ap_ready;
wire    Loop_1_proc_U0_ap_idle;
wire    Loop_1_proc_U0_ap_continue;
wire   [7:0] p_channel_dout;
wire    p_channel_empty_n;
wire   [2:0] p_channel_num_data_valid;
wire   [2:0] p_channel_fifo_cap;

QK_GEMM_entry_proc1 entry_proc1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc1_U0_ap_start),
    .ap_done(entry_proc1_U0_ap_done),
    .ap_continue(entry_proc1_U0_ap_continue),
    .ap_idle(entry_proc1_U0_ap_idle),
    .ap_ready(entry_proc1_U0_ap_ready),
    .return_r(entry_proc1_U0_return_r),
    .pos_r_dout(pos_r_dout),
    .pos_r_empty_n(pos_r_empty_n),
    .pos_r_read(entry_proc1_U0_pos_r_read),
    .pos_r_num_data_valid(3'd0),
    .pos_r_fifo_cap(3'd0)
);

QK_GEMM_Loop_1_proc Loop_1_proc_U0(
    .pos_r(p_channel_dout),
    .kq_stream_dout(kq_stream_dout),
    .kq_stream_empty_n(kq_stream_empty_n),
    .kq_stream_read(Loop_1_proc_U0_kq_stream_read),
    .kq_cache_i_stream_TDATA(kq_cache_i_stream_TDATA),
    .kq_cache_o_stream_TDATA(Loop_1_proc_U0_kq_cache_o_stream_TDATA),
    .ks_stream_dout(ks_stream_dout),
    .ks_stream_empty_n(ks_stream_empty_n),
    .ks_stream_read(Loop_1_proc_U0_ks_stream_read),
    .ks_cache_i_stream_TDATA(ks_cache_i_stream_TDATA),
    .ks_cache_o_stream_TDATA(Loop_1_proc_U0_ks_cache_o_stream_TDATA),
    .kq_stream_r_din(Loop_1_proc_U0_kq_stream_r_din),
    .kq_stream_r_full_n(kq_stream_r_full_n),
    .kq_stream_r_write(Loop_1_proc_U0_kq_stream_r_write),
    .ks_stream_r_din(Loop_1_proc_U0_ks_stream_r_din),
    .ks_stream_r_full_n(ks_stream_r_full_n),
    .ks_stream_r_write(Loop_1_proc_U0_ks_stream_r_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .pos_r_ap_vld(1'b0),
    .kq_cache_i_stream_TVALID(kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(Loop_1_proc_U0_kq_cache_i_stream_TREADY),
    .kq_cache_o_stream_TVALID(Loop_1_proc_U0_kq_cache_o_stream_TVALID),
    .kq_cache_o_stream_TREADY(kq_cache_o_stream_TREADY),
    .ks_cache_i_stream_TVALID(ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(Loop_1_proc_U0_ks_cache_i_stream_TREADY),
    .ks_cache_o_stream_TVALID(Loop_1_proc_U0_ks_cache_o_stream_TVALID),
    .ks_cache_o_stream_TREADY(ks_cache_o_stream_TREADY),
    .ap_start(Loop_1_proc_U0_ap_start),
    .ap_done(Loop_1_proc_U0_ap_done),
    .ap_ready(Loop_1_proc_U0_ap_ready),
    .ap_idle(Loop_1_proc_U0_ap_idle),
    .ap_continue(Loop_1_proc_U0_ap_continue)
);

QK_GEMM_fifo_w8_d2_S p_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc1_U0_return_r),
    .if_full_n(p_channel_full_n),
    .if_write(entry_proc1_U0_ap_done),
    .if_dout(p_channel_dout),
    .if_empty_n(p_channel_empty_n),
    .if_read(Loop_1_proc_U0_ap_ready),
    .if_num_data_valid(p_channel_num_data_valid),
    .if_fifo_cap(p_channel_fifo_cap)
);

assign Loop_1_proc_U0_ap_continue = ap_continue;

assign Loop_1_proc_U0_ap_start = p_channel_empty_n;

assign ap_done = Loop_1_proc_U0_ap_done;

assign ap_idle = ((p_channel_empty_n ^ 1'b1) & entry_proc1_U0_ap_idle & Loop_1_proc_U0_ap_idle);

assign ap_ready = entry_proc1_U0_ap_ready;

assign entry_proc1_U0_ap_continue = p_channel_full_n;

assign entry_proc1_U0_ap_start = ap_start;

assign kq_cache_i_stream_TREADY = Loop_1_proc_U0_kq_cache_i_stream_TREADY;

assign kq_cache_o_stream_TDATA = Loop_1_proc_U0_kq_cache_o_stream_TDATA;

assign kq_cache_o_stream_TVALID = Loop_1_proc_U0_kq_cache_o_stream_TVALID;

assign kq_stream_r_din = Loop_1_proc_U0_kq_stream_r_din;

assign kq_stream_r_write = Loop_1_proc_U0_kq_stream_r_write;

assign kq_stream_read = Loop_1_proc_U0_kq_stream_read;

assign ks_cache_i_stream_TREADY = Loop_1_proc_U0_ks_cache_i_stream_TREADY;

assign ks_cache_o_stream_TDATA = Loop_1_proc_U0_ks_cache_o_stream_TDATA;

assign ks_cache_o_stream_TVALID = Loop_1_proc_U0_ks_cache_o_stream_TVALID;

assign ks_stream_r_din = Loop_1_proc_U0_ks_stream_r_din;

assign ks_stream_r_write = Loop_1_proc_U0_ks_stream_r_write;

assign ks_stream_read = Loop_1_proc_U0_ks_stream_read;

assign pos_r_read = entry_proc1_U0_pos_r_read;

endmodule //QK_GEMM_Loop_1_proc_wrapper
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module QK_GEMM_mac_muladd_8s_8s_16s_17_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [16 - 1:0] in2,
    output [17 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module QK_GEMM_mac_muladd_8s_8s_16s_17_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


QK_GEMM_mac_muladd_8s_8s_16s_17_4_1_DSP48_0 QK_GEMM_mac_muladd_8s_8s_16s_17_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module QK_GEMM_mac_muladd_8s_8s_17s_17_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [17 - 1:0] in2,
    output [17 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module QK_GEMM_mac_muladd_8s_8s_17s_17_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


QK_GEMM_mac_muladd_8s_8s_17s_17_4_1_DSP48_0 QK_GEMM_mac_muladd_8s_8s_17s_17_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module QK_GEMM_mac_muladd_8s_8s_17s_18_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [17 - 1:0] in2,
    output [18 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module QK_GEMM_mac_muladd_8s_8s_17s_18_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


QK_GEMM_mac_muladd_8s_8s_17s_18_4_1_DSP48_0 QK_GEMM_mac_muladd_8s_8s_17s_18_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module QK_GEMM_mac_muladd_8s_8s_18s_19_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [18 - 1:0] in2,
    output [19 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module QK_GEMM_mac_muladd_8s_8s_18s_19_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


QK_GEMM_mac_muladd_8s_8s_18s_19_4_1_DSP48_0 QK_GEMM_mac_muladd_8s_8s_18s_19_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module QK_GEMM_mul_8s_8s_16_5_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;


reg signed [dout_WIDTH - 1 : 0] buff2;

























assign tmp_product = $signed(din0_reg) * $signed(din1_reg);




always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


        buff2 <= buff1;

















    end
end







assign dout = buff2;

















endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_pack_tokens_ap_int_8_8_64_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_stream_dout,
        qq_stream_empty_n,
        qq_stream_read,
        qq_stream_num_data_valid,
        qq_stream_fifo_cap,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] qq_stream_dout;
input   qq_stream_empty_n;
output   qq_stream_read;
input  [2:0] qq_stream_num_data_valid;
input  [2:0] qq_stream_fifo_cap;
output  [5:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [63:0] buffer_r_d1;

reg ap_idle;
reg qq_stream_read;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln75_fu_123_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    qq_stream_blk_n;
reg   [0:0] icmp_ln75_reg_230;
reg   [0:0] icmp_ln75_reg_230_pp0_iter1_reg;
wire   [2:0] trunc_ln75_fu_154_p1;
reg   [2:0] trunc_ln75_reg_234;
wire   [3:0] ct_fu_158_p3;
reg   [3:0] ct_reg_239;
wire   [0:0] icmp_ln76_fu_172_p2;
reg   [0:0] icmp_ln76_reg_244;
reg   [0:0] ap_phi_mux_icmp_ln766_phi_fu_92_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
wire   [63:0] zext_ln83_2_fu_204_p1;
reg   [5:0] indvar_flatten3_fu_52;
wire   [5:0] add_ln75_2_fu_117_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten3_load;
reg   [3:0] ct4_fu_56;
reg   [3:0] t5_fu_60;
wire   [3:0] t_fu_166_p2;
reg    buffer_r_we1_local;
reg    buffer_r_ce1_local;
wire   [3:0] select_ln75_fu_146_p3;
wire   [3:0] add_ln75_fu_140_p2;
wire   [5:0] tmp_fu_191_p3;
wire   [5:0] zext_ln83_fu_188_p1;
wire   [5:0] add_ln83_fu_198_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_69;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 indvar_flatten3_fu_52 = 6'd0;
//#0 ct4_fu_56 = 4'd0;
//#0 t5_fu_60 = 4'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct4_fu_56 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct4_fu_56 <= ct_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_69)) begin
        indvar_flatten3_fu_52 <= add_ln75_2_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    t5_fu_60 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    t5_fu_60 <= t_fu_166_p2;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln75_reg_230 <= icmp_ln75_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct_reg_239 <= ct_fu_158_p3;
        icmp_ln75_reg_230_pp0_iter1_reg <= icmp_ln75_reg_230;
        icmp_ln76_reg_244 <= icmp_ln76_fu_172_p2;
        trunc_ln75_reg_234 <= trunc_ln75_fu_154_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln75_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_230_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln766_phi_fu_92_p4 = icmp_ln76_reg_244;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln766_phi_fu_92_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln766_phi_fu_92_p4 = icmp_ln76_reg_244;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten3_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten3_load = indvar_flatten3_fu_52;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_we1_local = 1'b1;
    end else begin
        buffer_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        qq_stream_blk_n = qq_stream_empty_n;
    end else begin
        qq_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        qq_stream_read = 1'b1;
    end else begin
        qq_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_230_pp0_iter1_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln75_2_fu_117_p2 = (ap_sig_allocacmp_indvar_flatten3_load + 6'd1);

assign add_ln75_fu_140_p2 = (ct4_fu_56 + 4'd1);

assign add_ln83_fu_198_p2 = (tmp_fu_191_p3 + zext_ln83_fu_188_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (qq_stream_empty_n == 1'b0);
end

always @ (*) begin
    ap_condition_69 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_r_address1 = zext_ln83_2_fu_204_p1;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign buffer_r_d1 = qq_stream_dout;

assign buffer_r_we1 = buffer_r_we1_local;

assign ct_fu_158_p3 = ((ap_phi_mux_icmp_ln766_phi_fu_92_p4[0:0] == 1'b1) ? add_ln75_fu_140_p2 : ct4_fu_56);

assign icmp_ln75_fu_123_p2 = ((ap_sig_allocacmp_indvar_flatten3_load == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_172_p2 = ((t_fu_166_p2 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln75_fu_146_p3 = ((ap_phi_mux_icmp_ln766_phi_fu_92_p4[0:0] == 1'b1) ? 4'd0 : t5_fu_60);

assign t_fu_166_p2 = (select_ln75_fu_146_p3 + 4'd1);

assign tmp_fu_191_p3 = {{trunc_ln75_reg_234}, {3'd0}};

assign trunc_ln75_fu_154_p1 = select_ln75_fu_146_p3[2:0];

assign zext_ln83_2_fu_204_p1 = add_ln83_fu_198_p2;

assign zext_ln83_fu_188_p1 = ct_reg_239;

endmodule //QK_GEMM_pack_tokens_ap_int_8_8_64_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_pack_tokens_ap_uint_4_8_8_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qs_stream_dout,
        qs_stream_empty_n,
        qs_stream_read,
        qs_stream_num_data_valid,
        qs_stream_fifo_cap,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [3:0] qs_stream_dout;
input   qs_stream_empty_n;
output   qs_stream_read;
input  [2:0] qs_stream_num_data_valid;
input  [2:0] qs_stream_fifo_cap;
output  [5:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [3:0] buffer_r_d0;

reg ap_idle;
reg qs_stream_read;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln75_fu_111_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    qs_stream_blk_n;
reg   [0:0] icmp_ln75_reg_218;
reg   [0:0] icmp_ln75_reg_218_pp0_iter1_reg;
wire   [2:0] trunc_ln75_fu_142_p1;
reg   [2:0] trunc_ln75_reg_222;
wire   [3:0] ct_fu_146_p3;
reg   [3:0] ct_reg_227;
wire   [0:0] icmp_ln76_fu_160_p2;
reg   [0:0] icmp_ln76_reg_232;
reg   [0:0] ap_phi_mux_icmp_ln766_phi_fu_80_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
wire   [63:0] zext_ln83_1_fu_192_p1;
reg   [5:0] indvar_flatten3_fu_44;
wire   [5:0] add_ln75_1_fu_105_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten3_load;
reg   [3:0] ct4_fu_48;
reg   [3:0] t5_fu_52;
wire   [3:0] t_fu_154_p2;
reg    buffer_r_we0_local;
reg    buffer_r_ce0_local;
wire   [3:0] select_ln75_fu_134_p3;
wire   [3:0] add_ln75_fu_128_p2;
wire   [5:0] tmp_fu_179_p3;
wire   [5:0] zext_ln83_fu_176_p1;
wire   [5:0] add_ln83_fu_186_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_69;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 indvar_flatten3_fu_44 = 6'd0;
//#0 ct4_fu_48 = 4'd0;
//#0 t5_fu_52 = 4'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct4_fu_48 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct4_fu_48 <= ct_fu_146_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_69)) begin
        indvar_flatten3_fu_44 <= add_ln75_1_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    t5_fu_52 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    t5_fu_52 <= t_fu_154_p2;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln75_reg_218 <= icmp_ln75_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct_reg_227 <= ct_fu_146_p3;
        icmp_ln75_reg_218_pp0_iter1_reg <= icmp_ln75_reg_218;
        icmp_ln76_reg_232 <= icmp_ln76_fu_160_p2;
        trunc_ln75_reg_222 <= trunc_ln75_fu_142_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln75_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_218_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln766_phi_fu_80_p4 = icmp_ln76_reg_232;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln766_phi_fu_80_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln766_phi_fu_80_p4 = icmp_ln76_reg_232;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten3_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten3_load = indvar_flatten3_fu_44;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_we0_local = 1'b1;
    end else begin
        buffer_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        qs_stream_blk_n = qs_stream_empty_n;
    end else begin
        qs_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        qs_stream_read = 1'b1;
    end else begin
        qs_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_218_pp0_iter1_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln75_1_fu_105_p2 = (ap_sig_allocacmp_indvar_flatten3_load + 6'd1);

assign add_ln75_fu_128_p2 = (ct4_fu_48 + 4'd1);

assign add_ln83_fu_186_p2 = (tmp_fu_179_p3 + zext_ln83_fu_176_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (qs_stream_empty_n == 1'b0);
end

always @ (*) begin
    ap_condition_69 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_r_address0 = zext_ln83_1_fu_192_p1;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign buffer_r_d0 = qs_stream_dout;

assign buffer_r_we0 = buffer_r_we0_local;

assign ct_fu_146_p3 = ((ap_phi_mux_icmp_ln766_phi_fu_80_p4[0:0] == 1'b1) ? add_ln75_fu_128_p2 : ct4_fu_48);

assign icmp_ln75_fu_111_p2 = ((ap_sig_allocacmp_indvar_flatten3_load == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_160_p2 = ((t_fu_154_p2 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln75_fu_134_p3 = ((ap_phi_mux_icmp_ln766_phi_fu_80_p4[0:0] == 1'b1) ? 4'd0 : t5_fu_52);

assign t_fu_154_p2 = (select_ln75_fu_134_p3 + 4'd1);

assign tmp_fu_179_p3 = {{trunc_ln75_reg_222}, {3'd0}};

assign trunc_ln75_fu_142_p1 = select_ln75_fu_134_p3[2:0];

assign zext_ln83_1_fu_192_p1 = add_ln83_fu_186_p2;

assign zext_ln83_fu_176_p1 = ct_reg_227;

endmodule //QK_GEMM_pack_tokens_ap_uint_4_8_8_1_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module QK_GEMM_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_repeat_w_tokens_ap_int_8_8_192_8_64_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        kq_stream_r_din,
        kq_stream_r_full_n,
        kq_stream_r_write,
        kq_stream_r_num_data_valid,
        kq_stream_r_fifo_cap,
        src_0_address0,
        src_0_ce0,
        src_0_q0,
        src_0_address1,
        src_0_ce1,
        src_0_q1,
        src_1_address0,
        src_1_ce0,
        src_1_q0,
        src_1_address1,
        src_1_ce1,
        src_1_q1,
        src_2_address0,
        src_2_ce0,
        src_2_q0,
        src_2_address1,
        src_2_ce1,
        src_2_q1,
        src_3_address0,
        src_3_ce0,
        src_3_q0,
        src_3_address1,
        src_3_ce1,
        src_3_q1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [511:0] kq_stream_r_din;
input   kq_stream_r_full_n;
output   kq_stream_r_write;
input  [2:0] kq_stream_r_num_data_valid;
input  [2:0] kq_stream_r_fifo_cap;
output  [8:0] src_0_address0;
output   src_0_ce0;
input  [63:0] src_0_q0;
output  [8:0] src_0_address1;
output   src_0_ce1;
input  [63:0] src_0_q1;
output  [8:0] src_1_address0;
output   src_1_ce0;
input  [63:0] src_1_q0;
output  [8:0] src_1_address1;
output   src_1_ce1;
input  [63:0] src_1_q1;
output  [8:0] src_2_address0;
output   src_2_ce0;
input  [63:0] src_2_q0;
output  [8:0] src_2_address1;
output   src_2_ce1;
input  [63:0] src_2_q1;
output  [8:0] src_3_address0;
output   src_3_ce0;
input  [63:0] src_3_q0;
output  [8:0] src_3_address1;
output   src_3_ce1;
input  [63:0] src_3_q1;

reg ap_idle;
reg kq_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln306_fu_244_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    kq_stream_r_blk_n;
reg   [0:0] icmp_ln306_reg_446;
reg   [0:0] icmp_ln306_reg_446_pp0_iter1_reg;
reg   [0:0] icmp_ln306_reg_446_pp0_iter2_reg;
wire   [3:0] select_ln307_fu_296_p3;
reg   [3:0] select_ln307_reg_450;
wire   [4:0] tt_fu_304_p3;
reg   [4:0] tt_reg_456;
wire   [0:0] icmp_ln308_fu_332_p2;
reg   [0:0] icmp_ln308_reg_462;
wire   [0:0] icmp_ln307_fu_338_p2;
reg   [0:0] icmp_ln307_reg_467;
reg   [0:0] ap_phi_mux_icmp_ln30750_phi_fu_197_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln30849_phi_fu_208_p4;
wire   [63:0] zext_ln316_2_fu_375_p1;
wire   [63:0] zext_ln316_3_fu_389_p1;
reg   [10:0] indvar_flatten1045_fu_70;
wire   [10:0] add_ln306_fu_238_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten1045_load;
reg   [8:0] indvar_flatten46_fu_74;
wire   [8:0] select_ln307_4_fu_324_p3;
reg   [4:0] tt47_fu_78;
reg   [3:0] ct48_fu_82;
wire   [3:0] ct_fu_312_p2;
reg    src_0_ce1_local;
reg    src_0_ce0_local;
reg    src_1_ce1_local;
reg    src_1_ce0_local;
reg    src_2_ce1_local;
reg    src_2_ce0_local;
reg    src_3_ce1_local;
reg    src_3_ce0_local;
wire   [0:0] xor_ln306_fu_272_p2;
wire   [4:0] select_ln306_fu_264_p3;
wire   [0:0] and_ln306_fu_278_p2;
wire   [0:0] or_ln307_fu_290_p2;
wire   [4:0] add_ln307_fu_284_p2;
wire   [8:0] add_ln307_2_fu_318_p2;
wire   [8:0] tmp_8_fu_369_p3;
wire   [8:0] tmp_fu_359_p3;
wire   [8:0] zext_ln316_fu_366_p1;
wire   [8:0] add_ln316_fu_383_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_82;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 indvar_flatten1045_fu_70 = 11'd0;
//#0 indvar_flatten46_fu_74 = 9'd0;
//#0 tt47_fu_78 = 5'd0;
//#0 ct48_fu_82 = 4'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct48_fu_82 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct48_fu_82 <= ct_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_82)) begin
        indvar_flatten1045_fu_70 <= add_ln306_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten46_fu_74 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten46_fu_74 <= select_ln307_4_fu_324_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt47_fu_78 <= 5'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    tt47_fu_78 <= tt_fu_304_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln306_reg_446 <= icmp_ln306_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln306_reg_446_pp0_iter1_reg <= icmp_ln306_reg_446;
        icmp_ln307_reg_467 <= icmp_ln307_fu_338_p2;
        icmp_ln308_reg_462 <= icmp_ln308_fu_332_p2;
        select_ln307_reg_450 <= select_ln307_fu_296_p3;
        tt_reg_456 <= tt_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln306_reg_446_pp0_iter2_reg <= icmp_ln306_reg_446_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln306_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_197_p4 = icmp_ln307_reg_467;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_197_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30750_phi_fu_197_p4 = icmp_ln307_reg_467;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_208_p4 = icmp_ln308_reg_462;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_208_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30849_phi_fu_208_p4 = icmp_ln308_reg_462;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten1045_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1045_load = indvar_flatten1045_fu_70;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        kq_stream_r_blk_n = kq_stream_r_full_n;
    end else begin
        kq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        kq_stream_r_write = 1'b1;
    end else begin
        kq_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce0_local = 1'b1;
    end else begin
        src_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce1_local = 1'b1;
    end else begin
        src_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce0_local = 1'b1;
    end else begin
        src_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce1_local = 1'b1;
    end else begin
        src_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce0_local = 1'b1;
    end else begin
        src_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce1_local = 1'b1;
    end else begin
        src_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce0_local = 1'b1;
    end else begin
        src_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce1_local = 1'b1;
    end else begin
        src_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln306_reg_446_pp0_iter2_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln306_fu_238_p2 = (ap_sig_allocacmp_indvar_flatten1045_load + 11'd1);

assign add_ln307_2_fu_318_p2 = (indvar_flatten46_fu_74 + 9'd1);

assign add_ln307_fu_284_p2 = (select_ln306_fu_264_p3 + 5'd1);

assign add_ln316_fu_383_p2 = (tmp_fu_359_p3 + zext_ln316_fu_366_p1);

assign and_ln306_fu_278_p2 = (xor_ln306_fu_272_p2 & ap_phi_mux_icmp_ln30849_phi_fu_208_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (kq_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_82 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_312_p2 = (select_ln307_fu_296_p3 + 4'd1);

assign icmp_ln306_fu_244_p2 = ((ap_sig_allocacmp_indvar_flatten1045_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_338_p2 = ((select_ln307_4_fu_324_p3 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln308_fu_332_p2 = ((ct_fu_312_p2 == 4'd8) ? 1'b1 : 1'b0);

assign kq_stream_r_din = {{{{{{{{src_3_q0}, {src_2_q0}}, {src_1_q0}}, {src_0_q0}}, {src_3_q1}}, {src_2_q1}}, {src_1_q1}}, {src_0_q1}};

assign or_ln307_fu_290_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_197_p4 | and_ln306_fu_278_p2);

assign select_ln306_fu_264_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_197_p4[0:0] == 1'b1) ? 5'd0 : tt47_fu_78);

assign select_ln307_4_fu_324_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_197_p4[0:0] == 1'b1) ? 9'd1 : add_ln307_2_fu_318_p2);

assign select_ln307_fu_296_p3 = ((or_ln307_fu_290_p2[0:0] == 1'b1) ? 4'd0 : ct48_fu_82);

assign src_0_address0 = zext_ln316_3_fu_389_p1;

assign src_0_address1 = zext_ln316_2_fu_375_p1;

assign src_0_ce0 = src_0_ce0_local;

assign src_0_ce1 = src_0_ce1_local;

assign src_1_address0 = zext_ln316_3_fu_389_p1;

assign src_1_address1 = zext_ln316_2_fu_375_p1;

assign src_1_ce0 = src_1_ce0_local;

assign src_1_ce1 = src_1_ce1_local;

assign src_2_address0 = zext_ln316_3_fu_389_p1;

assign src_2_address1 = zext_ln316_2_fu_375_p1;

assign src_2_ce0 = src_2_ce0_local;

assign src_2_ce1 = src_2_ce1_local;

assign src_3_address0 = zext_ln316_3_fu_389_p1;

assign src_3_address1 = zext_ln316_2_fu_375_p1;

assign src_3_ce0 = src_3_ce0_local;

assign src_3_ce1 = src_3_ce1_local;

assign tmp_8_fu_369_p3 = {{tt_reg_456}, {select_ln307_reg_450}};

assign tmp_fu_359_p3 = {{tt_reg_456}, {4'd8}};

assign tt_fu_304_p3 = ((and_ln306_fu_278_p2[0:0] == 1'b1) ? add_ln307_fu_284_p2 : select_ln306_fu_264_p3);

assign xor_ln306_fu_272_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_197_p4 ^ 1'd1);

assign zext_ln316_2_fu_375_p1 = tmp_8_fu_369_p3;

assign zext_ln316_3_fu_389_p1 = add_ln316_fu_383_p2;

assign zext_ln316_fu_366_p1 = select_ln307_reg_450;

endmodule //QK_GEMM_repeat_w_tokens_ap_int_8_8_192_8_64_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_repeat_w_tokens_ap_uint_4_8_192_8_8_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ks_stream_r_din,
        ks_stream_r_full_n,
        ks_stream_r_write,
        ks_stream_r_num_data_valid,
        ks_stream_r_fifo_cap,
        src_0_address0,
        src_0_ce0,
        src_0_q0,
        src_0_address1,
        src_0_ce1,
        src_0_q1,
        src_1_address0,
        src_1_ce0,
        src_1_q0,
        src_1_address1,
        src_1_ce1,
        src_1_q1,
        src_2_address0,
        src_2_ce0,
        src_2_q0,
        src_2_address1,
        src_2_ce1,
        src_2_q1,
        src_3_address0,
        src_3_ce0,
        src_3_q0,
        src_3_address1,
        src_3_ce1,
        src_3_q1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] ks_stream_r_din;
input   ks_stream_r_full_n;
output   ks_stream_r_write;
input  [2:0] ks_stream_r_num_data_valid;
input  [2:0] ks_stream_r_fifo_cap;
output  [8:0] src_0_address0;
output   src_0_ce0;
input  [3:0] src_0_q0;
output  [8:0] src_0_address1;
output   src_0_ce1;
input  [3:0] src_0_q1;
output  [8:0] src_1_address0;
output   src_1_ce0;
input  [3:0] src_1_q0;
output  [8:0] src_1_address1;
output   src_1_ce1;
input  [3:0] src_1_q1;
output  [8:0] src_2_address0;
output   src_2_ce0;
input  [3:0] src_2_q0;
output  [8:0] src_2_address1;
output   src_2_ce1;
input  [3:0] src_2_q1;
output  [8:0] src_3_address0;
output   src_3_ce0;
input  [3:0] src_3_q0;
output  [8:0] src_3_address1;
output   src_3_ce1;
input  [3:0] src_3_q1;

reg ap_idle;
reg ks_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln306_fu_244_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    ks_stream_r_blk_n;
reg   [0:0] icmp_ln306_reg_446;
reg   [0:0] icmp_ln306_reg_446_pp0_iter1_reg;
reg   [0:0] icmp_ln306_reg_446_pp0_iter2_reg;
wire   [3:0] select_ln307_fu_296_p3;
reg   [3:0] select_ln307_reg_450;
wire   [4:0] tt_fu_304_p3;
reg   [4:0] tt_reg_456;
wire   [0:0] icmp_ln308_fu_332_p2;
reg   [0:0] icmp_ln308_reg_462;
wire   [0:0] icmp_ln307_fu_338_p2;
reg   [0:0] icmp_ln307_reg_467;
reg   [0:0] ap_phi_mux_icmp_ln30750_phi_fu_197_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln30849_phi_fu_208_p4;
wire   [63:0] zext_ln316_1_fu_375_p1;
wire   [63:0] zext_ln316_2_fu_389_p1;
reg   [10:0] indvar_flatten1045_fu_70;
wire   [10:0] add_ln306_fu_238_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten1045_load;
reg   [8:0] indvar_flatten46_fu_74;
wire   [8:0] select_ln307_2_fu_324_p3;
reg   [4:0] tt47_fu_78;
reg   [3:0] ct48_fu_82;
wire   [3:0] ct_fu_312_p2;
reg    src_0_ce1_local;
reg    src_0_ce0_local;
reg    src_1_ce1_local;
reg    src_1_ce0_local;
reg    src_2_ce1_local;
reg    src_2_ce0_local;
reg    src_3_ce1_local;
reg    src_3_ce0_local;
wire   [0:0] xor_ln306_fu_272_p2;
wire   [4:0] select_ln306_fu_264_p3;
wire   [0:0] and_ln306_fu_278_p2;
wire   [0:0] or_ln307_fu_290_p2;
wire   [4:0] add_ln307_fu_284_p2;
wire   [8:0] add_ln307_1_fu_318_p2;
wire   [8:0] tmp_7_fu_369_p3;
wire   [8:0] tmp_fu_359_p3;
wire   [8:0] zext_ln316_fu_366_p1;
wire   [8:0] add_ln316_fu_383_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_82;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 indvar_flatten1045_fu_70 = 11'd0;
//#0 indvar_flatten46_fu_74 = 9'd0;
//#0 tt47_fu_78 = 5'd0;
//#0 ct48_fu_82 = 4'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct48_fu_82 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct48_fu_82 <= ct_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_82)) begin
        indvar_flatten1045_fu_70 <= add_ln306_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten46_fu_74 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten46_fu_74 <= select_ln307_2_fu_324_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt47_fu_78 <= 5'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    tt47_fu_78 <= tt_fu_304_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln306_reg_446 <= icmp_ln306_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln306_reg_446_pp0_iter1_reg <= icmp_ln306_reg_446;
        icmp_ln307_reg_467 <= icmp_ln307_fu_338_p2;
        icmp_ln308_reg_462 <= icmp_ln308_fu_332_p2;
        select_ln307_reg_450 <= select_ln307_fu_296_p3;
        tt_reg_456 <= tt_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln306_reg_446_pp0_iter2_reg <= icmp_ln306_reg_446_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln306_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_197_p4 = icmp_ln307_reg_467;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_197_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30750_phi_fu_197_p4 = icmp_ln307_reg_467;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_208_p4 = icmp_ln308_reg_462;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_208_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30849_phi_fu_208_p4 = icmp_ln308_reg_462;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten1045_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1045_load = indvar_flatten1045_fu_70;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        ks_stream_r_blk_n = ks_stream_r_full_n;
    end else begin
        ks_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ks_stream_r_write = 1'b1;
    end else begin
        ks_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce0_local = 1'b1;
    end else begin
        src_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce1_local = 1'b1;
    end else begin
        src_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce0_local = 1'b1;
    end else begin
        src_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce1_local = 1'b1;
    end else begin
        src_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce0_local = 1'b1;
    end else begin
        src_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce1_local = 1'b1;
    end else begin
        src_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce0_local = 1'b1;
    end else begin
        src_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce1_local = 1'b1;
    end else begin
        src_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln306_reg_446_pp0_iter2_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln306_fu_238_p2 = (ap_sig_allocacmp_indvar_flatten1045_load + 11'd1);

assign add_ln307_1_fu_318_p2 = (indvar_flatten46_fu_74 + 9'd1);

assign add_ln307_fu_284_p2 = (select_ln306_fu_264_p3 + 5'd1);

assign add_ln316_fu_383_p2 = (tmp_fu_359_p3 + zext_ln316_fu_366_p1);

assign and_ln306_fu_278_p2 = (xor_ln306_fu_272_p2 & ap_phi_mux_icmp_ln30849_phi_fu_208_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (ks_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_82 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_312_p2 = (select_ln307_fu_296_p3 + 4'd1);

assign icmp_ln306_fu_244_p2 = ((ap_sig_allocacmp_indvar_flatten1045_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_338_p2 = ((select_ln307_2_fu_324_p3 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln308_fu_332_p2 = ((ct_fu_312_p2 == 4'd8) ? 1'b1 : 1'b0);

assign ks_stream_r_din = {{{{{{{{src_3_q0}, {src_2_q0}}, {src_1_q0}}, {src_0_q0}}, {src_3_q1}}, {src_2_q1}}, {src_1_q1}}, {src_0_q1}};

assign or_ln307_fu_290_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_197_p4 | and_ln306_fu_278_p2);

assign select_ln306_fu_264_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_197_p4[0:0] == 1'b1) ? 5'd0 : tt47_fu_78);

assign select_ln307_2_fu_324_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_197_p4[0:0] == 1'b1) ? 9'd1 : add_ln307_1_fu_318_p2);

assign select_ln307_fu_296_p3 = ((or_ln307_fu_290_p2[0:0] == 1'b1) ? 4'd0 : ct48_fu_82);

assign src_0_address0 = zext_ln316_2_fu_389_p1;

assign src_0_address1 = zext_ln316_1_fu_375_p1;

assign src_0_ce0 = src_0_ce0_local;

assign src_0_ce1 = src_0_ce1_local;

assign src_1_address0 = zext_ln316_2_fu_389_p1;

assign src_1_address1 = zext_ln316_1_fu_375_p1;

assign src_1_ce0 = src_1_ce0_local;

assign src_1_ce1 = src_1_ce1_local;

assign src_2_address0 = zext_ln316_2_fu_389_p1;

assign src_2_address1 = zext_ln316_1_fu_375_p1;

assign src_2_ce0 = src_2_ce0_local;

assign src_2_ce1 = src_2_ce1_local;

assign src_3_address0 = zext_ln316_2_fu_389_p1;

assign src_3_address1 = zext_ln316_1_fu_375_p1;

assign src_3_ce0 = src_3_ce0_local;

assign src_3_ce1 = src_3_ce1_local;

assign tmp_7_fu_369_p3 = {{tt_reg_456}, {select_ln307_reg_450}};

assign tmp_fu_359_p3 = {{tt_reg_456}, {4'd8}};

assign tt_fu_304_p3 = ((and_ln306_fu_278_p2[0:0] == 1'b1) ? add_ln307_fu_284_p2 : select_ln306_fu_264_p3);

assign xor_ln306_fu_272_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_197_p4 ^ 1'd1);

assign zext_ln316_1_fu_375_p1 = tmp_7_fu_369_p3;

assign zext_ln316_2_fu_389_p1 = add_ln316_fu_383_p2;

assign zext_ln316_fu_366_p1 = select_ln307_reg_450;

endmodule //QK_GEMM_repeat_w_tokens_ap_uint_4_8_192_8_8_1_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_repeat_x_tokens_ap_int_8_24_8_1_64_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_stream_r_din,
        qq_stream_r_full_n,
        qq_stream_r_write,
        qq_stream_r_num_data_valid,
        qq_stream_r_fifo_cap,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [63:0] qq_stream_r_din;
input   qq_stream_r_full_n;
output   qq_stream_r_write;
input  [2:0] qq_stream_r_num_data_valid;
input  [2:0] qq_stream_r_fifo_cap;
output  [5:0] src_address0;
output   src_ce0;
input  [63:0] src_q0;

reg ap_idle;
reg qq_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln220_fu_149_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_loop_exit_ready_delayed;
reg    qq_stream_r_blk_n;
reg   [0:0] icmp_ln2219_reg_97;
reg   [0:0] icmp_ln220_reg_308;
reg   [0:0] icmp_ln220_reg_308_pp0_iter1_reg;
reg   [0:0] icmp_ln220_reg_308_pp0_iter2_reg;
reg   [0:0] icmp_ln220_reg_308_pp0_iter3_reg;
wire   [8:0] select_ln221_2_fu_169_p3;
reg   [8:0] select_ln221_2_reg_312;
wire   [2:0] trunc_ln221_fu_214_p1;
reg   [2:0] trunc_ln221_reg_317;
wire   [3:0] select_ln221_fu_224_p3;
reg   [3:0] select_ln221_reg_322;
wire   [0:0] icmp_ln222_fu_238_p2;
reg   [0:0] icmp_ln222_reg_327;
wire   [0:0] icmp_ln221_fu_244_p2;
reg   [0:0] ap_phi_mux_icmp_ln2219_phi_fu_101_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln2228_phi_fu_113_p4;
reg    ap_loop_init_pp0_iter2_reg;
wire   [63:0] zext_ln230_2_fu_275_p1;
reg   [10:0] indvar_flatten114_fu_60;
wire   [10:0] add_ln220_2_fu_143_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten114_load;
reg   [3:0] tt5_fu_64;
wire   [3:0] tt_fu_206_p3;
reg   [8:0] indvar_flatten6_fu_68;
reg   [3:0] ct7_fu_72;
wire   [3:0] ct_fu_232_p2;
reg    src_ce0_local;
wire   [8:0] add_ln221_fu_163_p2;
wire   [0:0] xor_ln220_fu_194_p2;
wire   [3:0] add_ln220_fu_188_p2;
wire   [0:0] and_ln220_fu_200_p2;
wire   [0:0] or_ln221_fu_218_p2;
wire   [5:0] tmp_fu_259_p3;
wire   [5:0] zext_ln230_fu_266_p1;
wire   [5:0] add_ln230_fu_269_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_106;
reg    ap_condition_95;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
//#0 indvar_flatten114_fu_60 = 11'd0;
//#0 tt5_fu_64 = 4'd0;
//#0 indvar_flatten6_fu_68 = 9'd0;
//#0 ct7_fu_72 = 4'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter2_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct7_fu_72 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ct7_fu_72 <= ct_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_308_pp0_iter1_reg == 1'd0))) begin
            icmp_ln2219_reg_97 <= icmp_ln221_fu_244_p2;
        end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
            icmp_ln2219_reg_97 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_95)) begin
        indvar_flatten114_fu_60 <= add_ln220_2_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten6_fu_68 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten6_fu_68 <= select_ln221_2_fu_169_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt5_fu_64 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
    tt5_fu_64 <= tt_fu_206_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln220_reg_308 <= icmp_ln220_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln220_reg_308_pp0_iter1_reg <= icmp_ln220_reg_308;
        select_ln221_2_reg_312 <= select_ln221_2_fu_169_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln220_reg_308_pp0_iter2_reg <= icmp_ln220_reg_308_pp0_iter1_reg;
        icmp_ln222_reg_327 <= icmp_ln222_fu_238_p2;
        select_ln221_reg_322 <= select_ln221_fu_224_p3;
        trunc_ln221_reg_317 <= trunc_ln221_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln220_reg_308_pp0_iter3_reg <= icmp_ln220_reg_308_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln220_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_308_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_101_p4 = icmp_ln221_fu_244_p2;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_101_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2219_phi_fu_101_p4 = icmp_ln221_fu_244_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln220_reg_308_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_113_p4 = icmp_ln222_reg_327;
    end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_113_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2228_phi_fu_113_p4 = icmp_ln222_reg_327;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten114_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten114_load = indvar_flatten114_fu_60;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        qq_stream_r_blk_n = qq_stream_r_full_n;
    end else begin
        qq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        qq_stream_r_write = 1'b1;
    end else begin
        qq_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        src_ce0_local = 1'b1;
    end else begin
        src_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (icmp_ln220_reg_308_pp0_iter3_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln220_2_fu_143_p2 = (ap_sig_allocacmp_indvar_flatten114_load + 11'd1);

assign add_ln220_fu_188_p2 = (tt5_fu_64 + 4'd1);

assign add_ln221_fu_163_p2 = (indvar_flatten6_fu_68 + 9'd1);

assign add_ln230_fu_269_p2 = (tmp_fu_259_p3 + zext_ln230_fu_266_p1);

assign and_ln220_fu_200_p2 = (xor_ln220_fu_194_p2 & ap_phi_mux_icmp_ln2228_phi_fu_113_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (qq_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_106 = ~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_condition_95 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_232_p2 = (select_ln221_fu_224_p3 + 4'd1);

assign icmp_ln220_fu_149_p2 = ((ap_sig_allocacmp_indvar_flatten114_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_244_p2 = ((select_ln221_2_reg_312 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_238_p2 = ((ct_fu_232_p2 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln221_fu_218_p2 = (icmp_ln2219_reg_97 | and_ln220_fu_200_p2);

assign qq_stream_r_din = src_q0;

assign select_ln221_2_fu_169_p3 = ((ap_phi_mux_icmp_ln2219_phi_fu_101_p4[0:0] == 1'b1) ? 9'd1 : add_ln221_fu_163_p2);

assign select_ln221_fu_224_p3 = ((or_ln221_fu_218_p2[0:0] == 1'b1) ? 4'd0 : ct7_fu_72);

assign src_address0 = zext_ln230_2_fu_275_p1;

assign src_ce0 = src_ce0_local;

assign tmp_fu_259_p3 = {{trunc_ln221_reg_317}, {3'd0}};

assign trunc_ln221_fu_214_p1 = tt_fu_206_p3[2:0];

assign tt_fu_206_p3 = ((icmp_ln2219_reg_97[0:0] == 1'b1) ? add_ln220_fu_188_p2 : tt5_fu_64);

assign xor_ln220_fu_194_p2 = (icmp_ln2219_reg_97 ^ 1'd1);

assign zext_ln230_2_fu_275_p1 = add_ln230_fu_269_p2;

assign zext_ln230_fu_266_p1 = select_ln221_reg_322;

endmodule //QK_GEMM_repeat_x_tokens_ap_int_8_24_8_1_64_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_repeat_x_tokens_ap_uint_4_24_8_1_8_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qs_stream_r_din,
        qs_stream_r_full_n,
        qs_stream_r_write,
        qs_stream_r_num_data_valid,
        qs_stream_r_fifo_cap,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] qs_stream_r_din;
input   qs_stream_r_full_n;
output   qs_stream_r_write;
input  [2:0] qs_stream_r_num_data_valid;
input  [2:0] qs_stream_r_fifo_cap;
output  [5:0] src_address0;
output   src_ce0;
input  [3:0] src_q0;

reg ap_idle;
reg qs_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln220_fu_141_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_loop_exit_ready_delayed;
reg    qs_stream_r_blk_n;
reg   [0:0] icmp_ln2219_reg_89;
reg   [0:0] icmp_ln220_reg_300;
reg   [0:0] icmp_ln220_reg_300_pp0_iter1_reg;
reg   [0:0] icmp_ln220_reg_300_pp0_iter2_reg;
reg   [0:0] icmp_ln220_reg_300_pp0_iter3_reg;
wire   [8:0] select_ln221_1_fu_161_p3;
reg   [8:0] select_ln221_1_reg_304;
wire   [2:0] trunc_ln221_fu_206_p1;
reg   [2:0] trunc_ln221_reg_309;
wire   [3:0] select_ln221_fu_216_p3;
reg   [3:0] select_ln221_reg_314;
wire   [0:0] icmp_ln222_fu_230_p2;
reg   [0:0] icmp_ln222_reg_319;
wire   [0:0] icmp_ln221_fu_236_p2;
reg   [0:0] ap_phi_mux_icmp_ln2219_phi_fu_93_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln2228_phi_fu_105_p4;
reg    ap_loop_init_pp0_iter2_reg;
wire   [63:0] zext_ln230_1_fu_267_p1;
reg   [10:0] indvar_flatten114_fu_52;
wire   [10:0] add_ln220_1_fu_135_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten114_load;
reg   [3:0] tt5_fu_56;
wire   [3:0] tt_fu_198_p3;
reg   [8:0] indvar_flatten6_fu_60;
reg   [3:0] ct7_fu_64;
wire   [3:0] ct_fu_224_p2;
reg    src_ce0_local;
wire   [8:0] add_ln221_fu_155_p2;
wire   [0:0] xor_ln220_fu_186_p2;
wire   [3:0] add_ln220_fu_180_p2;
wire   [0:0] and_ln220_fu_192_p2;
wire   [0:0] or_ln221_fu_210_p2;
wire   [5:0] tmp_fu_251_p3;
wire   [5:0] zext_ln230_fu_258_p1;
wire   [5:0] add_ln230_fu_261_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_106;
reg    ap_condition_95;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
//#0 indvar_flatten114_fu_52 = 11'd0;
//#0 tt5_fu_56 = 4'd0;
//#0 indvar_flatten6_fu_60 = 9'd0;
//#0 ct7_fu_64 = 4'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter2_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct7_fu_64 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ct7_fu_64 <= ct_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_300_pp0_iter1_reg == 1'd0))) begin
            icmp_ln2219_reg_89 <= icmp_ln221_fu_236_p2;
        end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
            icmp_ln2219_reg_89 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_95)) begin
        indvar_flatten114_fu_52 <= add_ln220_1_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten6_fu_60 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten6_fu_60 <= select_ln221_1_fu_161_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt5_fu_56 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
    tt5_fu_56 <= tt_fu_198_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln220_reg_300 <= icmp_ln220_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln220_reg_300_pp0_iter1_reg <= icmp_ln220_reg_300;
        select_ln221_1_reg_304 <= select_ln221_1_fu_161_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln220_reg_300_pp0_iter2_reg <= icmp_ln220_reg_300_pp0_iter1_reg;
        icmp_ln222_reg_319 <= icmp_ln222_fu_230_p2;
        select_ln221_reg_314 <= select_ln221_fu_216_p3;
        trunc_ln221_reg_309 <= trunc_ln221_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln220_reg_300_pp0_iter3_reg <= icmp_ln220_reg_300_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln220_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_300_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_93_p4 = icmp_ln221_fu_236_p2;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_93_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2219_phi_fu_93_p4 = icmp_ln221_fu_236_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln220_reg_300_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_105_p4 = icmp_ln222_reg_319;
    end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_105_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2228_phi_fu_105_p4 = icmp_ln222_reg_319;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten114_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten114_load = indvar_flatten114_fu_52;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        qs_stream_r_blk_n = qs_stream_r_full_n;
    end else begin
        qs_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        qs_stream_r_write = 1'b1;
    end else begin
        qs_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        src_ce0_local = 1'b1;
    end else begin
        src_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (icmp_ln220_reg_300_pp0_iter3_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln220_1_fu_135_p2 = (ap_sig_allocacmp_indvar_flatten114_load + 11'd1);

assign add_ln220_fu_180_p2 = (tt5_fu_56 + 4'd1);

assign add_ln221_fu_155_p2 = (indvar_flatten6_fu_60 + 9'd1);

assign add_ln230_fu_261_p2 = (tmp_fu_251_p3 + zext_ln230_fu_258_p1);

assign and_ln220_fu_192_p2 = (xor_ln220_fu_186_p2 & ap_phi_mux_icmp_ln2228_phi_fu_105_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (qs_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_106 = ~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_condition_95 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_224_p2 = (select_ln221_fu_216_p3 + 4'd1);

assign icmp_ln220_fu_141_p2 = ((ap_sig_allocacmp_indvar_flatten114_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_236_p2 = ((select_ln221_1_reg_304 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_230_p2 = ((ct_fu_224_p2 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln221_fu_210_p2 = (icmp_ln2219_reg_89 | and_ln220_fu_192_p2);

assign qs_stream_r_din = src_q0;

assign select_ln221_1_fu_161_p3 = ((ap_phi_mux_icmp_ln2219_phi_fu_93_p4[0:0] == 1'b1) ? 9'd1 : add_ln221_fu_155_p2);

assign select_ln221_fu_216_p3 = ((or_ln221_fu_210_p2[0:0] == 1'b1) ? 4'd0 : ct7_fu_64);

assign src_address0 = zext_ln230_1_fu_267_p1;

assign src_ce0 = src_ce0_local;

assign tmp_fu_251_p3 = {{trunc_ln221_reg_309}, {3'd0}};

assign trunc_ln221_fu_206_p1 = tt_fu_198_p3[2:0];

assign tt_fu_198_p3 = ((icmp_ln2219_reg_89[0:0] == 1'b1) ? add_ln220_fu_180_p2 : tt5_fu_56);

assign xor_ln220_fu_186_p2 = (icmp_ln2219_reg_89 ^ 1'd1);

assign zext_ln230_1_fu_267_p1 = add_ln230_fu_261_p2;

assign zext_ln230_fu_258_p1 = select_ln221_reg_314;

endmodule //QK_GEMM_repeat_x_tokens_ap_uint_4_24_8_1_8_1_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns / 1ps

module QK_GEMM_sparsemux_9_2_4_1_1 (din0,din1,din2,din3,def,sel,dout);

parameter din0_WIDTH = 1;

parameter din1_WIDTH = 1;

parameter din2_WIDTH = 1;

parameter din3_WIDTH = 1;

parameter def_WIDTH = 1;
parameter sel_WIDTH = 1;
parameter dout_WIDTH = 1;

parameter [sel_WIDTH-1:0] CASE0 = 1;

parameter [sel_WIDTH-1:0] CASE1 = 1;

parameter [sel_WIDTH-1:0] CASE2 = 1;

parameter [sel_WIDTH-1:0] CASE3 = 1;

parameter ID = 1;
parameter NUM_STAGE = 1;



input [din0_WIDTH-1:0] din0;

input [din1_WIDTH-1:0] din1;

input [din2_WIDTH-1:0] din2;

input [din3_WIDTH-1:0] din3;

input [def_WIDTH-1:0] def;
input [sel_WIDTH-1:0] sel;

output [dout_WIDTH-1:0] dout;



reg [dout_WIDTH-1:0] dout_tmp;


always @ (*) begin
(* parallel_case *) case (sel)
    
    CASE0 : dout_tmp = din0;
    
    CASE1 : dout_tmp = din1;
    
    CASE2 : dout_tmp = din2;
    
    CASE3 : dout_tmp = din3;
    
    default : dout_tmp = def;
endcase
end


assign dout = dout_tmp;



endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns / 1ps

module QK_GEMM_sparsemux_9_2_64_1_1 (din0,din1,din2,din3,def,sel,dout);

parameter din0_WIDTH = 1;

parameter din1_WIDTH = 1;

parameter din2_WIDTH = 1;

parameter din3_WIDTH = 1;

parameter def_WIDTH = 1;
parameter sel_WIDTH = 1;
parameter dout_WIDTH = 1;

parameter [sel_WIDTH-1:0] CASE0 = 1;

parameter [sel_WIDTH-1:0] CASE1 = 1;

parameter [sel_WIDTH-1:0] CASE2 = 1;

parameter [sel_WIDTH-1:0] CASE3 = 1;

parameter ID = 1;
parameter NUM_STAGE = 1;



input [din0_WIDTH-1:0] din0;

input [din1_WIDTH-1:0] din1;

input [din2_WIDTH-1:0] din2;

input [din3_WIDTH-1:0] din3;

input [def_WIDTH-1:0] def;
input [sel_WIDTH-1:0] sel;

output [dout_WIDTH-1:0] dout;



reg [dout_WIDTH-1:0] dout_tmp;


always @ (*) begin
(* parallel_case *) case (sel)
    
    CASE0 : dout_tmp = din0;
    
    CASE1 : dout_tmp = din1;
    
    CASE2 : dout_tmp = din2;
    
    CASE3 : dout_tmp = din3;
    
    default : dout_tmp = def;
endcase
end


assign dout = dout_tmp;



endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_split_interleaved_streams_ap_int_8_14_8_1_64_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qk_q_stream_TVALID,
        kq_stream_din,
        kq_stream_full_n,
        kq_stream_write,
        kq_stream_num_data_valid,
        kq_stream_fifo_cap,
        qq_stream_din,
        qq_stream_full_n,
        qq_stream_write,
        qq_stream_num_data_valid,
        qq_stream_fifo_cap,
        start_out,
        start_write,
        qk_q_stream_TDATA,
        qk_q_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   qk_q_stream_TVALID;
output  [63:0] kq_stream_din;
input   kq_stream_full_n;
output   kq_stream_write;
input  [2:0] kq_stream_num_data_valid;
input  [2:0] kq_stream_fifo_cap;
output  [63:0] qq_stream_din;
input   qq_stream_full_n;
output   qq_stream_write;
input  [2:0] qq_stream_num_data_valid;
input  [2:0] qq_stream_fifo_cap;
output   start_out;
output   start_write;
input  [63:0] qk_q_stream_TDATA;
output   qk_q_stream_TREADY;

reg ap_idle;
reg kq_stream_write;
reg qq_stream_write;
reg start_write;
reg qk_q_stream_TREADY;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln498_reg_269;
reg   [0:0] icmp_ln498_reg_269_pp0_iter2_reg;
reg   [0:0] cmp13_reg_280;
reg    ap_predicate_op48_write_state4;
reg    ap_predicate_op50_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln498_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    qk_q_stream_TDATA_blk_n;
reg    qq_stream_blk_n;
reg    kq_stream_blk_n;
wire   [0:0] icmp_ln498_reg_269_pp0_iter0_reg;
reg   [0:0] icmp_ln498_reg_269_pp0_iter1_reg;
wire   [0:0] icmp_ln499_fu_137_p2;
reg   [0:0] icmp_ln499_reg_273;
wire   [0:0] cmp13_fu_206_p2;
reg   [7:0] indvar_flatten_fu_56;
wire   [7:0] select_ln500_fu_223_p3;
wire    ap_loop_init;
reg   [1:0] stream_id_fu_60;
wire   [1:0] select_ln499_fu_198_p3;
reg   [8:0] indvar_flatten12_fu_64;
wire   [8:0] select_ln499_2_fu_149_p3;
reg   [10:0] indvar_flatten33_fu_68;
wire   [10:0] add_ln498_fu_123_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten33_load;
wire   [8:0] add_ln499_2_fu_143_p2;
wire   [0:0] icmp_ln500_fu_180_p2;
wire   [0:0] xor_ln498_fu_175_p2;
wire   [1:0] select_ln498_fu_168_p3;
wire   [0:0] and_ln498_fu_186_p2;
wire   [1:0] stream_id_4_fu_192_p2;
wire   [0:0] or_ln500_fu_218_p2;
wire   [7:0] add_ln500_fu_212_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_118;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 indvar_flatten_fu_56 = 8'd0;
//#0 stream_id_fu_60 = 2'd0;
//#0 indvar_flatten12_fu_64 = 9'd0;
//#0 indvar_flatten33_fu_68 = 11'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten12_fu_64 <= 9'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln498_reg_269_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten12_fu_64 <= select_ln499_2_fu_149_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_118)) begin
        if ((icmp_ln498_fu_117_p2 == 1'd0)) begin
            indvar_flatten33_fu_68 <= add_ln498_fu_123_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten33_fu_68 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_56 <= 8'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln498_reg_269_pp0_iter1_reg == 1'd0))) begin
        indvar_flatten_fu_56 <= select_ln500_fu_223_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        stream_id_fu_60 <= 2'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln498_reg_269_pp0_iter1_reg == 1'd0))) begin
        stream_id_fu_60 <= select_ln499_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln498_reg_269 <= icmp_ln498_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln498_reg_269_pp0_iter1_reg <= icmp_ln498_reg_269;
        icmp_ln499_reg_273 <= icmp_ln499_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cmp13_reg_280 <= cmp13_fu_206_p2;
        icmp_ln498_reg_269_pp0_iter2_reg <= icmp_ln498_reg_269_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln498_fu_117_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_68;
    end
end

always @ (*) begin
    if (((ap_predicate_op48_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        kq_stream_blk_n = kq_stream_full_n;
    end else begin
        kq_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_predicate_op48_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        kq_stream_write = 1'b1;
    end else begin
        kq_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln498_reg_269_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        qk_q_stream_TDATA_blk_n = qk_q_stream_TVALID;
    end else begin
        qk_q_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln498_reg_269_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        qk_q_stream_TREADY = 1'b1;
    end else begin
        qk_q_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op50_write_state4 == 1'b1))) begin
        qq_stream_blk_n = qq_stream_full_n;
    end else begin
        qq_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op50_write_state4 == 1'b1))) begin
        qq_stream_write = 1'b1;
    end else begin
        qq_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln498_reg_269_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln498_fu_123_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 11'd1);

assign add_ln499_2_fu_143_p2 = (indvar_flatten12_fu_64 + 9'd1);

assign add_ln500_fu_212_p2 = (indvar_flatten_fu_56 + 8'd1);

assign and_ln498_fu_186_p2 = (xor_ln498_fu_175_p2 & icmp_ln500_fu_180_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((qq_stream_full_n == 1'b0) & (ap_predicate_op50_write_state4 == 1'b1)) | ((ap_predicate_op48_write_state4 == 1'b1) & (kq_stream_full_n == 1'b0)) | ((icmp_ln498_reg_269_pp0_iter2_reg == 1'd0) & (qk_q_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_118 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op48_write_state4 = ((cmp13_reg_280 == 1'd0) & (icmp_ln498_reg_269_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op50_write_state4 = ((cmp13_reg_280 == 1'd1) & (icmp_ln498_reg_269_pp0_iter2_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp13_fu_206_p2 = ((select_ln499_fu_198_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_117_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 11'd1792) ? 1'b1 : 1'b0);

assign icmp_ln498_reg_269_pp0_iter0_reg = icmp_ln498_reg_269;

assign icmp_ln499_fu_137_p2 = ((indvar_flatten12_fu_64 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln500_fu_180_p2 = ((indvar_flatten_fu_56 == 8'd64) ? 1'b1 : 1'b0);

assign kq_stream_din = qk_q_stream_TDATA;

assign or_ln500_fu_218_p2 = (icmp_ln499_reg_273 | and_ln498_fu_186_p2);

assign qq_stream_din = qk_q_stream_TDATA;

assign select_ln498_fu_168_p3 = ((icmp_ln499_reg_273[0:0] == 1'b1) ? 2'd0 : stream_id_fu_60);

assign select_ln499_2_fu_149_p3 = ((icmp_ln499_fu_137_p2[0:0] == 1'b1) ? 9'd1 : add_ln499_2_fu_143_p2);

assign select_ln499_fu_198_p3 = ((and_ln498_fu_186_p2[0:0] == 1'b1) ? stream_id_4_fu_192_p2 : select_ln498_fu_168_p3);

assign select_ln500_fu_223_p3 = ((or_ln500_fu_218_p2[0:0] == 1'b1) ? 8'd1 : add_ln500_fu_212_p2);

assign start_out = real_start;

assign stream_id_4_fu_192_p2 = (select_ln498_fu_168_p3 + 2'd1);

assign xor_ln498_fu_175_p2 = (icmp_ln499_reg_273 ^ 1'd1);

endmodule //QK_GEMM_split_interleaved_streams_ap_int_8_14_8_1_64_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_split_interleaved_streams_ap_uint_4_14_8_1_8_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qk_s_stream_TVALID,
        ks_stream_din,
        ks_stream_full_n,
        ks_stream_write,
        ks_stream_num_data_valid,
        ks_stream_fifo_cap,
        qs_stream_din,
        qs_stream_full_n,
        qs_stream_write,
        qs_stream_num_data_valid,
        qs_stream_fifo_cap,
        qk_s_stream_TDATA,
        qk_s_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   qk_s_stream_TVALID;
output  [3:0] ks_stream_din;
input   ks_stream_full_n;
output   ks_stream_write;
input  [2:0] ks_stream_num_data_valid;
input  [2:0] ks_stream_fifo_cap;
output  [3:0] qs_stream_din;
input   qs_stream_full_n;
output   qs_stream_write;
input  [2:0] qs_stream_num_data_valid;
input  [2:0] qs_stream_fifo_cap;
input  [7:0] qk_s_stream_TDATA;
output   qk_s_stream_TREADY;

reg ap_idle;
reg ks_stream_write;
reg qs_stream_write;
reg qk_s_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln498_reg_273;
reg   [0:0] icmp_ln498_reg_273_pp0_iter2_reg;
reg   [0:0] cmp13_reg_284;
reg    ap_predicate_op49_write_state4;
reg    ap_predicate_op51_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln498_fu_115_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    qk_s_stream_TDATA_blk_n;
reg    qs_stream_blk_n;
reg    ks_stream_blk_n;
wire   [0:0] icmp_ln498_reg_273_pp0_iter0_reg;
reg   [0:0] icmp_ln498_reg_273_pp0_iter1_reg;
wire   [0:0] icmp_ln499_fu_135_p2;
reg   [0:0] icmp_ln499_reg_277;
wire   [0:0] cmp13_fu_204_p2;
reg   [7:0] indvar_flatten_fu_56;
wire   [7:0] select_ln500_fu_221_p3;
wire    ap_loop_init;
reg   [1:0] stream_id_fu_60;
wire   [1:0] select_ln499_fu_196_p3;
reg   [8:0] indvar_flatten12_fu_64;
wire   [8:0] select_ln499_1_fu_147_p3;
reg   [10:0] indvar_flatten33_fu_68;
wire   [10:0] add_ln498_fu_121_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten33_load;
wire   [3:0] trunc_ln504_fu_239_p1;
wire   [8:0] add_ln499_1_fu_141_p2;
wire   [0:0] icmp_ln500_fu_178_p2;
wire   [0:0] xor_ln498_fu_173_p2;
wire   [1:0] select_ln498_fu_166_p3;
wire   [0:0] and_ln498_fu_184_p2;
wire   [1:0] stream_id_2_fu_190_p2;
wire   [0:0] or_ln500_fu_216_p2;
wire   [7:0] add_ln500_fu_210_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_111;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 indvar_flatten_fu_56 = 8'd0;
//#0 stream_id_fu_60 = 2'd0;
//#0 indvar_flatten12_fu_64 = 9'd0;
//#0 indvar_flatten33_fu_68 = 11'd0;
end

QK_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten12_fu_64 <= 9'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln498_reg_273_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten12_fu_64 <= select_ln499_1_fu_147_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_111)) begin
        if ((icmp_ln498_fu_115_p2 == 1'd0)) begin
            indvar_flatten33_fu_68 <= add_ln498_fu_121_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten33_fu_68 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_56 <= 8'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln498_reg_273_pp0_iter1_reg == 1'd0))) begin
        indvar_flatten_fu_56 <= select_ln500_fu_221_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        stream_id_fu_60 <= 2'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln498_reg_273_pp0_iter1_reg == 1'd0))) begin
        stream_id_fu_60 <= select_ln499_fu_196_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln498_reg_273 <= icmp_ln498_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln498_reg_273_pp0_iter1_reg <= icmp_ln498_reg_273;
        icmp_ln499_reg_277 <= icmp_ln499_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cmp13_reg_284 <= cmp13_fu_204_p2;
        icmp_ln498_reg_273_pp0_iter2_reg <= icmp_ln498_reg_273_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln498_fu_115_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_68;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ks_stream_blk_n = ks_stream_full_n;
    end else begin
        ks_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_predicate_op49_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ks_stream_write = 1'b1;
    end else begin
        ks_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln498_reg_273_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        qk_s_stream_TDATA_blk_n = qk_s_stream_TVALID;
    end else begin
        qk_s_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln498_reg_273_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        qk_s_stream_TREADY = 1'b1;
    end else begin
        qk_s_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op51_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        qs_stream_blk_n = qs_stream_full_n;
    end else begin
        qs_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_predicate_op51_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        qs_stream_write = 1'b1;
    end else begin
        qs_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln498_reg_273_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln498_fu_121_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 11'd1);

assign add_ln499_1_fu_141_p2 = (indvar_flatten12_fu_64 + 9'd1);

assign add_ln500_fu_210_p2 = (indvar_flatten_fu_56 + 8'd1);

assign and_ln498_fu_184_p2 = (xor_ln498_fu_173_p2 & icmp_ln500_fu_178_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((ap_predicate_op51_write_state4 == 1'b1) & (qs_stream_full_n == 1'b0)) | ((ap_predicate_op49_write_state4 == 1'b1) & (ks_stream_full_n == 1'b0)) | ((icmp_ln498_reg_273_pp0_iter2_reg == 1'd0) & (qk_s_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_111 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op49_write_state4 = ((cmp13_reg_284 == 1'd0) & (icmp_ln498_reg_273_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op51_write_state4 = ((cmp13_reg_284 == 1'd1) & (icmp_ln498_reg_273_pp0_iter2_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign cmp13_fu_204_p2 = ((select_ln499_fu_196_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_115_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 11'd1792) ? 1'b1 : 1'b0);

assign icmp_ln498_reg_273_pp0_iter0_reg = icmp_ln498_reg_273;

assign icmp_ln499_fu_135_p2 = ((indvar_flatten12_fu_64 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln500_fu_178_p2 = ((indvar_flatten_fu_56 == 8'd64) ? 1'b1 : 1'b0);

assign ks_stream_din = trunc_ln504_fu_239_p1;

assign or_ln500_fu_216_p2 = (icmp_ln499_reg_277 | and_ln498_fu_184_p2);

assign qs_stream_din = trunc_ln504_fu_239_p1;

assign select_ln498_fu_166_p3 = ((icmp_ln499_reg_277[0:0] == 1'b1) ? 2'd0 : stream_id_fu_60);

assign select_ln499_1_fu_147_p3 = ((icmp_ln499_fu_135_p2[0:0] == 1'b1) ? 9'd1 : add_ln499_1_fu_141_p2);

assign select_ln499_fu_196_p3 = ((and_ln498_fu_184_p2[0:0] == 1'b1) ? stream_id_2_fu_190_p2 : select_ln498_fu_166_p3);

assign select_ln500_fu_221_p3 = ((or_ln500_fu_216_p2[0:0] == 1'b1) ? 8'd1 : add_ln500_fu_210_p2);

assign stream_id_2_fu_190_p2 = (select_ln498_fu_166_p3 + 2'd1);

assign trunc_ln504_fu_239_p1 = qk_s_stream_TDATA[3:0];

assign xor_ln498_fu_173_p2 = (icmp_ln499_reg_277 ^ 1'd1);

endmodule //QK_GEMM_split_interleaved_streams_ap_uint_4_14_8_1_8_1_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_start_for_do_bmm_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_start_for_do_bmm_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_start_for_do_bmm_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_start_for_do_bmm_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_start_for_Loop_0_proc_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_start_for_Loop_0_proc_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_start_for_Loop_0_proc_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_start_for_Loop_0_proc_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module QK_GEMM_start_for_Loop_1_proc_wrapper_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    QK_GEMM_start_for_Loop_1_proc_wrapper_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_QK_GEMM_start_for_Loop_1_proc_wrapper_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module QK_GEMM_start_for_Loop_1_proc_wrapper_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_cache_i_stream_TVALID,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1,
        kq_cache_i_stream_TDATA,
        kq_cache_i_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   kq_cache_i_stream_TVALID;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [63:0] cache_0_d1;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [63:0] cache_1_d1;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [63:0] cache_2_d1;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [63:0] cache_3_d1;
input  [63:0] kq_cache_i_stream_TDATA;
output   kq_cache_i_stream_TREADY;

reg ap_idle;
reg kq_cache_i_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln104_reg_308;
reg   [0:0] icmp_ln104_reg_308_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln104_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_cache_i_stream_TDATA_blk_n;
wire   [0:0] icmp_ln104_reg_308_pp0_iter0_reg;
wire   [3:0] select_ln104_fu_217_p3;
reg   [3:0] select_ln104_reg_312;
wire   [1:0] trunc_ln104_fu_233_p1;
reg   [1:0] trunc_ln104_reg_317;
wire   [1:0] trunc_ln104_reg_317_pp0_iter1_reg;
reg   [5:0] lshr_ln_reg_321;
wire   [63:0] zext_ln113_2_fu_279_p1;
reg   [3:0] ct_fu_74;
wire   [3:0] add_ln105_fu_247_p2;
wire    ap_loop_init;
reg   [7:0] tt_fu_78;
wire   [7:0] select_ln104_2_fu_225_p3;
reg   [10:0] indvar_flatten_fu_82;
wire   [10:0] add_ln104_2_fu_188_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    cache_2_we1_local;
reg    cache_2_ce1_local;
reg    cache_1_we1_local;
reg    cache_1_ce1_local;
reg    cache_0_we1_local;
reg    cache_0_ce1_local;
reg    cache_3_we1_local;
reg    cache_3_ce1_local;
wire   [0:0] icmp_ln105_fu_211_p2;
wire   [7:0] add_ln104_fu_205_p2;
wire   [8:0] tmp_4_fu_263_p3;
wire   [8:0] zext_ln113_fu_270_p1;
wire   [8:0] add_ln113_fu_273_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_74 = 4'd0;
//#0 tt_fu_78 = 8'd0;
//#0 indvar_flatten_fu_82 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

QK_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_74 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_308_pp0_iter0_reg == 1'd0))) begin
        ct_fu_74 <= add_ln105_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln104_fu_182_p2 == 1'd0)) begin
            indvar_flatten_fu_82 <= add_ln104_2_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_78 <= 8'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_308_pp0_iter0_reg == 1'd0))) begin
        tt_fu_78 <= select_ln104_2_fu_225_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln104_reg_308 <= icmp_ln104_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln104_reg_308_pp0_iter1_reg <= icmp_ln104_reg_308;
        lshr_ln_reg_321 <= {{select_ln104_2_fu_225_p3[7:2]}};
        select_ln104_reg_312 <= select_ln104_fu_217_p3;
        trunc_ln104_reg_317 <= trunc_ln104_fu_233_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln104_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_0_ce1_local = 1'b1;
    end else begin
        cache_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_317_pp0_iter1_reg == 2'd0))) begin
        cache_0_we1_local = 1'b1;
    end else begin
        cache_0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_1_ce1_local = 1'b1;
    end else begin
        cache_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_317_pp0_iter1_reg == 2'd1))) begin
        cache_1_we1_local = 1'b1;
    end else begin
        cache_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_2_ce1_local = 1'b1;
    end else begin
        cache_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_317_pp0_iter1_reg == 2'd2))) begin
        cache_2_we1_local = 1'b1;
    end else begin
        cache_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_3_ce1_local = 1'b1;
    end else begin
        cache_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_317_pp0_iter1_reg == 2'd3))) begin
        cache_3_we1_local = 1'b1;
    end else begin
        cache_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        kq_cache_i_stream_TDATA_blk_n = kq_cache_i_stream_TVALID;
    end else begin
        kq_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        kq_cache_i_stream_TREADY = 1'b1;
    end else begin
        kq_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln104_reg_308_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln104_2_fu_188_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln104_fu_205_p2 = (tt_fu_78 + 8'd1);

assign add_ln105_fu_247_p2 = (select_ln104_fu_217_p3 + 4'd1);

assign add_ln113_fu_273_p2 = (tmp_4_fu_263_p3 + zext_ln113_fu_270_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln104_reg_308_pp0_iter1_reg == 1'd0) & (kq_cache_i_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_0_address1 = zext_ln113_2_fu_279_p1;

assign cache_0_ce1 = cache_0_ce1_local;

assign cache_0_d1 = kq_cache_i_stream_TDATA;

assign cache_0_we1 = cache_0_we1_local;

assign cache_1_address1 = zext_ln113_2_fu_279_p1;

assign cache_1_ce1 = cache_1_ce1_local;

assign cache_1_d1 = kq_cache_i_stream_TDATA;

assign cache_1_we1 = cache_1_we1_local;

assign cache_2_address1 = zext_ln113_2_fu_279_p1;

assign cache_2_ce1 = cache_2_ce1_local;

assign cache_2_d1 = kq_cache_i_stream_TDATA;

assign cache_2_we1 = cache_2_we1_local;

assign cache_3_address1 = zext_ln113_2_fu_279_p1;

assign cache_3_ce1 = cache_3_ce1_local;

assign cache_3_d1 = kq_cache_i_stream_TDATA;

assign cache_3_we1 = cache_3_we1_local;

assign icmp_ln104_fu_182_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln104_reg_308_pp0_iter0_reg = icmp_ln104_reg_308;

assign icmp_ln105_fu_211_p2 = ((ct_fu_74 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln104_2_fu_225_p3 = ((icmp_ln105_fu_211_p2[0:0] == 1'b1) ? add_ln104_fu_205_p2 : tt_fu_78);

assign select_ln104_fu_217_p3 = ((icmp_ln105_fu_211_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_74);

assign tmp_4_fu_263_p3 = {{lshr_ln_reg_321}, {3'd0}};

assign trunc_ln104_fu_233_p1 = select_ln104_2_fu_225_p3[1:0];

assign trunc_ln104_reg_317_pp0_iter1_reg = trunc_ln104_reg_317;

assign zext_ln113_2_fu_279_p1 = add_ln113_fu_273_p2;

assign zext_ln113_fu_270_p1 = select_ln104_reg_312;

endmodule //QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_cache_o_stream_TREADY,
        pos_r,
        cache_0_address0,
        cache_0_ce0,
        cache_0_q0,
        cache_1_address0,
        cache_1_ce0,
        cache_1_q0,
        cache_2_address0,
        cache_2_ce0,
        cache_2_q0,
        cache_3_address0,
        cache_3_ce0,
        cache_3_q0,
        kq_cache_o_stream_TDATA,
        kq_cache_o_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   kq_cache_o_stream_TREADY;
input  [7:0] pos_r;
output  [8:0] cache_0_address0;
output   cache_0_ce0;
input  [63:0] cache_0_q0;
output  [8:0] cache_1_address0;
output   cache_1_ce0;
input  [63:0] cache_1_q0;
output  [8:0] cache_2_address0;
output   cache_2_ce0;
input  [63:0] cache_2_q0;
output  [8:0] cache_3_address0;
output   cache_3_ce0;
input  [63:0] cache_3_q0;
output  [63:0] kq_cache_o_stream_TDATA;
output   kq_cache_o_stream_TVALID;

reg ap_idle;
reg kq_cache_o_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg   [0:0] icmp_ln432_reg_335;
reg   [0:0] icmp_ln432_reg_335_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln432_fu_175_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_cache_o_stream_TDATA_blk_n;
wire   [0:0] icmp_ln432_reg_335_pp0_iter0_reg;
reg   [0:0] icmp_ln432_reg_335_pp0_iter1_reg;
reg   [0:0] icmp_ln432_reg_335_pp0_iter2_reg;
wire   [3:0] select_ln432_fu_210_p3;
reg   [3:0] select_ln432_reg_339;
wire   [1:0] trunc_ln433_fu_235_p1;
reg   [1:0] trunc_ln433_reg_344;
reg   [1:0] trunc_ln433_reg_344_pp0_iter2_reg;
reg   [1:0] trunc_ln433_reg_344_pp0_iter3_reg;
reg   [5:0] lshr_ln3_reg_349;
reg   [63:0] cache_0_load_reg_374;
reg   [63:0] cache_1_load_reg_379;
reg   [63:0] cache_2_load_reg_384;
reg   [63:0] cache_3_load_reg_389;
wire   [63:0] zext_ln438_2_fu_281_p1;
reg   [3:0] ct_fu_80;
wire   [3:0] add_ln433_fu_249_p2;
wire    ap_loop_init;
reg   [3:0] t_fu_84;
wire   [3:0] select_ln432_2_fu_218_p3;
reg   [6:0] indvar_flatten6_fu_88;
wire   [6:0] add_ln432_2_fu_181_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [63:0] p_0_fu_289_p11;
reg    cache_0_ce0_local;
reg    cache_1_ce0_local;
reg    cache_2_ce0_local;
reg    cache_3_ce0_local;
wire   [0:0] icmp_ln433_fu_204_p2;
wire   [3:0] add_ln432_fu_198_p2;
wire   [7:0] zext_ln432_fu_226_p1;
wire   [7:0] empty_fu_230_p2;
wire   [8:0] tmp_5_fu_265_p3;
wire   [8:0] zext_ln438_fu_272_p1;
wire   [8:0] add_ln438_fu_275_p2;
wire   [63:0] p_0_fu_289_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_93;
wire   [1:0] p_0_fu_289_p1;
wire   [1:0] p_0_fu_289_p3;
wire  signed [1:0] p_0_fu_289_p5;
wire  signed [1:0] p_0_fu_289_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ct_fu_80 = 4'd0;
//#0 t_fu_84 = 4'd0;
//#0 indvar_flatten6_fu_88 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) QK_GEMM_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U34(
    .din0(cache_0_load_reg_374),
    .din1(cache_1_load_reg_379),
    .din2(cache_2_load_reg_384),
    .din3(cache_3_load_reg_389),
    .def(p_0_fu_289_p9),
    .sel(trunc_ln433_reg_344_pp0_iter3_reg),
    .dout(p_0_fu_289_p11)
);

QK_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_80 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln432_reg_335_pp0_iter0_reg == 1'd0))) begin
        ct_fu_80 <= add_ln433_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln432_fu_175_p2 == 1'd0)) begin
            indvar_flatten6_fu_88 <= add_ln432_2_fu_181_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_88 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_84 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln432_reg_335_pp0_iter0_reg == 1'd0))) begin
        t_fu_84 <= select_ln432_2_fu_218_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln432_reg_335 <= icmp_ln432_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln432_reg_335_pp0_iter1_reg <= icmp_ln432_reg_335;
        lshr_ln3_reg_349 <= {{empty_fu_230_p2[7:2]}};
        select_ln432_reg_339 <= select_ln432_fu_210_p3;
        trunc_ln433_reg_344 <= trunc_ln433_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln432_reg_335_pp0_iter2_reg <= icmp_ln432_reg_335_pp0_iter1_reg;
        trunc_ln433_reg_344_pp0_iter2_reg <= trunc_ln433_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        cache_0_load_reg_374 <= cache_0_q0;
        cache_1_load_reg_379 <= cache_1_q0;
        cache_2_load_reg_384 <= cache_2_q0;
        cache_3_load_reg_389 <= cache_3_q0;
        icmp_ln432_reg_335_pp0_iter3_reg <= icmp_ln432_reg_335_pp0_iter2_reg;
        trunc_ln433_reg_344_pp0_iter3_reg <= trunc_ln433_reg_344_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln432_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_88;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_0_ce0_local = 1'b1;
    end else begin
        cache_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_1_ce0_local = 1'b1;
    end else begin
        cache_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_2_ce0_local = 1'b1;
    end else begin
        cache_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_3_ce0_local = 1'b1;
    end else begin
        cache_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln432_reg_335_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        kq_cache_o_stream_TDATA_blk_n = kq_cache_o_stream_TREADY;
    end else begin
        kq_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln432_reg_335_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        kq_cache_o_stream_TVALID = 1'b1;
    end else begin
        kq_cache_o_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if (((1'b0 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if ((((icmp_ln432_reg_335_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln432_2_fu_181_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 7'd1);

assign add_ln432_fu_198_p2 = (t_fu_84 + 4'd1);

assign add_ln433_fu_249_p2 = (select_ln432_fu_210_p3 + 4'd1);

assign add_ln438_fu_275_p2 = (tmp_5_fu_265_p3 + zext_ln438_fu_272_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln432_reg_335_pp0_iter3_reg == 1'd0) & (kq_cache_o_stream_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_93 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_0_address0 = zext_ln438_2_fu_281_p1;

assign cache_0_ce0 = cache_0_ce0_local;

assign cache_1_address0 = zext_ln438_2_fu_281_p1;

assign cache_1_ce0 = cache_1_ce0_local;

assign cache_2_address0 = zext_ln438_2_fu_281_p1;

assign cache_2_ce0 = cache_2_ce0_local;

assign cache_3_address0 = zext_ln438_2_fu_281_p1;

assign cache_3_ce0 = cache_3_ce0_local;

assign empty_fu_230_p2 = (zext_ln432_fu_226_p1 + pos_r);

assign icmp_ln432_fu_175_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln432_reg_335_pp0_iter0_reg = icmp_ln432_reg_335;

assign icmp_ln433_fu_204_p2 = ((ct_fu_80 == 4'd8) ? 1'b1 : 1'b0);

assign kq_cache_o_stream_TDATA = p_0_fu_289_p11;

assign p_0_fu_289_p9 = 'bx;

assign select_ln432_2_fu_218_p3 = ((icmp_ln433_fu_204_p2[0:0] == 1'b1) ? add_ln432_fu_198_p2 : t_fu_84);

assign select_ln432_fu_210_p3 = ((icmp_ln433_fu_204_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_80);

assign tmp_5_fu_265_p3 = {{lshr_ln3_reg_349}, {3'd0}};

assign trunc_ln433_fu_235_p1 = empty_fu_230_p2[1:0];

assign zext_ln432_fu_226_p1 = select_ln432_2_fu_218_p3;

assign zext_ln438_2_fu_281_p1 = add_ln438_fu_275_p2;

assign zext_ln438_fu_272_p1 = select_ln432_reg_339;

endmodule //QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pos_r,
        kq_stream_dout,
        kq_stream_empty_n,
        kq_stream_read,
        kq_stream_num_data_valid,
        kq_stream_fifo_cap,
        kq_cache_i_stream_TDATA,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        kq_cache_o_stream_TDATA,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        cache_0_address0,
        cache_0_ce0,
        cache_0_q0,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address0,
        cache_1_ce0,
        cache_1_q0,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address0,
        cache_2_ce0,
        cache_2_q0,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address0,
        cache_3_ce0,
        cache_3_q0,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] pos_r;
input  [63:0] kq_stream_dout;
input   kq_stream_empty_n;
output   kq_stream_read;
input  [2:0] kq_stream_num_data_valid;
input  [2:0] kq_stream_fifo_cap;
input  [63:0] kq_cache_i_stream_TDATA;
input   kq_cache_i_stream_TVALID;
output   kq_cache_i_stream_TREADY;
output  [63:0] kq_cache_o_stream_TDATA;
output   kq_cache_o_stream_TVALID;
input   kq_cache_o_stream_TREADY;
output  [8:0] cache_0_address0;
output   cache_0_ce0;
input  [63:0] cache_0_q0;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [63:0] cache_0_d1;
output  [8:0] cache_1_address0;
output   cache_1_ce0;
input  [63:0] cache_1_q0;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [63:0] cache_1_d1;
output  [8:0] cache_2_address0;
output   cache_2_ce0;
input  [63:0] cache_2_q0;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [63:0] cache_2_d1;
output  [8:0] cache_3_address0;
output   cache_3_ce0;
input  [63:0] cache_3_q0;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [63:0] cache_3_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kq_stream_read;
reg kq_cache_i_stream_TREADY;
reg[63:0] kq_cache_o_stream_TDATA;
reg cache_0_ce0;
reg[8:0] cache_0_address1;
reg cache_0_ce1;
reg cache_0_we1;
reg[63:0] cache_0_d1;
reg cache_1_ce0;
reg[8:0] cache_1_address1;
reg cache_1_ce1;
reg cache_1_we1;
reg[63:0] cache_1_d1;
reg cache_2_ce0;
reg[8:0] cache_2_address1;
reg cache_2_ce1;
reg cache_2_we1;
reg[63:0] cache_2_d1;
reg cache_3_ce0;
reg[8:0] cache_3_address1;
reg cache_3_ce1;
reg cache_3_we1;
reg[63:0] cache_3_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    kq_stream_blk_n;
wire    ap_CS_fsm_state6;
reg   [7:0] pos_read_reg_314;
wire    ap_CS_fsm_state3;
wire   [3:0] add_ln419_fu_226_p2;
reg   [3:0] add_ln419_reg_323;
wire    ap_CS_fsm_state4;
wire   [8:0] zext_ln419_fu_232_p1;
reg   [8:0] zext_ln419_reg_328;
wire   [3:0] add_ln420_fu_254_p2;
reg   [3:0] add_ln420_reg_336;
wire    ap_CS_fsm_state5;
wire   [1:0] trunc_ln426_fu_269_p1;
reg   [1:0] trunc_ln426_reg_341;
reg   [5:0] lshr_ln4_reg_345;
reg   [63:0] kq_stream_read_reg_350;
reg   [8:0] cache_0_addr_reg_358;
reg   [8:0] cache_1_addr_reg_363;
reg   [8:0] cache_2_addr_reg_368;
reg   [8:0] cache_3_addr_reg_373;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_done;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_idle;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_ready;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_address1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_ce1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_we1;
wire   [63:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_d1;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_address1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_ce1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_we1;
wire   [63:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_d1;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_address1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_ce1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_we1;
wire   [63:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_d1;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_address1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_ce1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_we1;
wire   [63:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_d1;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_kq_cache_i_stream_TREADY;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_idle;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_ready;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TREADY;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_0_address0;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_0_ce0;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_1_address0;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_1_ce0;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_2_address0;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_2_ce0;
wire   [8:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_3_address0;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_3_ce0;
wire   [63:0] grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TDATA;
wire    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TVALID;
reg   [3:0] t_reg_160;
wire   [0:0] icmp_ln419_fu_220_p2;
wire    ap_CS_fsm_state7;
reg    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start_reg;
reg    ap_block_state1_ignore_call9;
wire    ap_CS_fsm_state2;
wire    cache_0_we1_out;
wire    cache_1_we1_out;
wire    cache_2_we1_out;
wire    cache_3_we1_out;
reg    grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start_reg;
wire    ap_CS_fsm_state8;
reg   [63:0] kq_cache_o_stream_TDATA_reg;
wire   [63:0] zext_ln426_fu_299_p1;
reg   [3:0] ct_fu_80;
wire   [0:0] icmp_ln420_fu_248_p2;
reg    ap_block_state1;
reg    cache_2_we1_local;
reg    cache_2_ce1_local;
reg    cache_1_we1_local;
reg    cache_1_ce1_local;
reg    cache_0_we1_local;
reg    cache_0_ce1_local;
reg    cache_3_we1_local;
reg    cache_3_ce1_local;
wire   [7:0] zext_ln420_fu_260_p1;
wire   [7:0] empty_fu_264_p2;
wire   [8:0] tmp_6_fu_287_p3;
wire   [8:0] add_ln426_fu_294_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 8'd1;
//#0 grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start_reg = 1'b0;
//#0 grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start_reg = 1'b0;
//#0 ct_fu_80 = 4'd0;
end

QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1 grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start),
    .ap_done(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_done),
    .ap_idle(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_idle),
    .ap_ready(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_ready),
    .kq_cache_i_stream_TVALID(kq_cache_i_stream_TVALID),
    .cache_0_address1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_address1),
    .cache_0_ce1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_ce1),
    .cache_0_we1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_we1),
    .cache_0_d1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_d1),
    .cache_1_address1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_address1),
    .cache_1_ce1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_ce1),
    .cache_1_we1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_we1),
    .cache_1_d1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_d1),
    .cache_2_address1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_address1),
    .cache_2_ce1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_ce1),
    .cache_2_we1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_we1),
    .cache_2_d1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_d1),
    .cache_3_address1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_address1),
    .cache_3_ce1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_ce1),
    .cache_3_we1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_we1),
    .cache_3_d1(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_d1),
    .kq_cache_i_stream_TDATA(kq_cache_i_stream_TDATA),
    .kq_cache_i_stream_TREADY(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_kq_cache_i_stream_TREADY)
);

QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2 grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start),
    .ap_done(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done),
    .ap_idle(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_idle),
    .ap_ready(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_ready),
    .kq_cache_o_stream_TREADY(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TREADY),
    .pos_r(pos_read_reg_314),
    .cache_0_address0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_0_address0),
    .cache_0_ce0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_0_ce0),
    .cache_0_q0(cache_0_q0),
    .cache_1_address0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_1_address0),
    .cache_1_ce0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_1_ce0),
    .cache_1_q0(cache_1_q0),
    .cache_2_address0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_2_address0),
    .cache_2_ce0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_2_ce0),
    .cache_2_q0(cache_2_q0),
    .cache_3_address0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_3_address0),
    .cache_3_ce0(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_3_ce0),
    .cache_3_q0(cache_3_q0),
    .kq_cache_o_stream_TDATA(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TDATA),
    .kq_cache_o_stream_TVALID(grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TVALID)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call9))) begin
            grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start_reg <= 1'b1;
        end else if ((grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_ready == 1'b1)) begin
            grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln419_fu_220_p2 == 1'd1))) begin
            grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start_reg <= 1'b1;
        end else if ((grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_ready == 1'b1)) begin
            grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        ct_fu_80 <= 4'd0;
    end else if (((icmp_ln420_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ct_fu_80 <= add_ln419_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_reg_160 <= add_ln420_reg_336;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln419_fu_220_p2 == 1'd0))) begin
        t_reg_160 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln419_reg_323 <= add_ln419_fu_226_p2;
        zext_ln419_reg_328[3 : 0] <= zext_ln419_fu_232_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln420_reg_336 <= add_ln420_fu_254_p2;
        lshr_ln4_reg_345 <= {{empty_fu_264_p2[7:2]}};
        trunc_ln426_reg_341 <= trunc_ln426_fu_269_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((kq_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        cache_0_addr_reg_358 <= zext_ln426_fu_299_p1;
        cache_1_addr_reg_363 <= zext_ln426_fu_299_p1;
        cache_2_addr_reg_368 <= zext_ln426_fu_299_p1;
        cache_3_addr_reg_373 <= zext_ln426_fu_299_p1;
        kq_stream_read_reg_350 <= kq_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TVALID == 1'b1))) begin
        kq_cache_o_stream_TDATA_reg <= grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pos_read_reg_314 <= pos_r;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((kq_stream_empty_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_address1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_address1;
    end else begin
        cache_0_address1 = cache_0_addr_reg_358;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cache_0_ce0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_0_ce0;
    end else begin
        cache_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_ce1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_ce1;
    end else begin
        cache_0_ce1 = cache_0_ce1_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_0_ce1_local = 1'b1;
    end else begin
        cache_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_d1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_d1;
    end else begin
        cache_0_d1 = kq_stream_read_reg_350;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_we1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_0_we1;
    end else begin
        cache_0_we1 = (cache_0_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (trunc_ln426_reg_341 == 2'd0))) begin
        cache_0_we1_local = 1'b1;
    end else begin
        cache_0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_address1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_address1;
    end else begin
        cache_1_address1 = cache_1_addr_reg_363;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cache_1_ce0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_1_ce0;
    end else begin
        cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_ce1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_ce1;
    end else begin
        cache_1_ce1 = cache_1_ce1_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_1_ce1_local = 1'b1;
    end else begin
        cache_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_d1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_d1;
    end else begin
        cache_1_d1 = kq_stream_read_reg_350;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_we1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_1_we1;
    end else begin
        cache_1_we1 = (cache_1_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (trunc_ln426_reg_341 == 2'd1))) begin
        cache_1_we1_local = 1'b1;
    end else begin
        cache_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_address1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_address1;
    end else begin
        cache_2_address1 = cache_2_addr_reg_368;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cache_2_ce0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_2_ce0;
    end else begin
        cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_ce1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_ce1;
    end else begin
        cache_2_ce1 = cache_2_ce1_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_2_ce1_local = 1'b1;
    end else begin
        cache_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_d1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_d1;
    end else begin
        cache_2_d1 = kq_stream_read_reg_350;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_we1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_2_we1;
    end else begin
        cache_2_we1 = (cache_2_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (trunc_ln426_reg_341 == 2'd2))) begin
        cache_2_we1_local = 1'b1;
    end else begin
        cache_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_address1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_address1;
    end else begin
        cache_3_address1 = cache_3_addr_reg_373;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cache_3_ce0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_3_ce0;
    end else begin
        cache_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_ce1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_ce1;
    end else begin
        cache_3_ce1 = cache_3_ce1_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_3_ce1_local = 1'b1;
    end else begin
        cache_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_d1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_d1;
    end else begin
        cache_3_d1 = kq_stream_read_reg_350;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_we1 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_cache_3_we1;
    end else begin
        cache_3_we1 = (cache_3_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (trunc_ln426_reg_341 == 2'd3))) begin
        cache_3_we1_local = 1'b1;
    end else begin
        cache_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kq_cache_i_stream_TREADY = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_kq_cache_i_stream_TREADY;
    end else begin
        kq_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TVALID == 1'b1))) begin
        kq_cache_o_stream_TDATA = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TDATA;
    end else begin
        kq_cache_o_stream_TDATA = kq_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kq_stream_blk_n = kq_stream_empty_n;
    end else begin
        kq_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((kq_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        kq_stream_read = 1'b1;
    end else begin
        kq_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln419_fu_220_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln420_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((kq_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln419_fu_226_p2 = (ct_fu_80 + 4'd1);

assign add_ln420_fu_254_p2 = (t_reg_160 + 4'd1);

assign add_ln426_fu_294_p2 = (tmp_6_fu_287_p3 + zext_ln419_reg_328);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call9 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign cache_0_address0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_0_address0;

assign cache_0_we1_out = cache_0_we1_local;

assign cache_1_address0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_1_address0;

assign cache_1_we1_out = cache_1_we1_local;

assign cache_2_address0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_2_address0;

assign cache_2_we1_out = cache_2_we1_local;

assign cache_3_address0 = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_cache_3_address0;

assign cache_3_we1_out = cache_3_we1_local;

assign empty_fu_264_p2 = (zext_ln420_fu_260_p1 + pos_read_reg_314);

assign grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_1_fu_171_ap_start_reg;

assign grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_ap_start_reg;

assign grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TREADY = (kq_cache_o_stream_TREADY & ap_CS_fsm_state8);

assign icmp_ln419_fu_220_p2 = ((ct_fu_80 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln420_fu_248_p2 = ((t_reg_160 == 4'd8) ? 1'b1 : 1'b0);

assign kq_cache_o_stream_TVALID = grp_update_k_cache_ap_int_8_8_192_64_8_Pipeline_2_fu_185_kq_cache_o_stream_TVALID;

assign tmp_6_fu_287_p3 = {{lshr_ln4_reg_345}, {3'd0}};

assign trunc_ln426_fu_269_p1 = empty_fu_264_p2[1:0];

assign zext_ln419_fu_232_p1 = ct_fu_80;

assign zext_ln420_fu_260_p1 = t_reg_160;

assign zext_ln426_fu_299_p1 = add_ln426_fu_294_p2;

always @ (posedge ap_clk) begin
    zext_ln419_reg_328[8:4] <= 5'b00000;
end

endmodule //QK_GEMM_update_k_cache_ap_int_8_8_192_64_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ks_cache_i_stream_TVALID,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1,
        ks_cache_i_stream_TDATA,
        ks_cache_i_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ks_cache_i_stream_TVALID;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [3:0] cache_0_d1;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [3:0] cache_1_d1;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [3:0] cache_2_d1;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [3:0] cache_3_d1;
input  [7:0] ks_cache_i_stream_TDATA;
output   ks_cache_i_stream_TREADY;

reg ap_idle;
reg ks_cache_i_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln104_reg_312;
reg   [0:0] icmp_ln104_reg_312_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln104_fu_178_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ks_cache_i_stream_TDATA_blk_n;
wire   [0:0] icmp_ln104_reg_312_pp0_iter0_reg;
wire   [3:0] select_ln104_fu_213_p3;
reg   [3:0] select_ln104_reg_316;
wire   [1:0] trunc_ln104_fu_229_p1;
reg   [1:0] trunc_ln104_reg_321;
wire   [1:0] trunc_ln104_reg_321_pp0_iter1_reg;
reg   [5:0] lshr_ln_reg_325;
wire   [63:0] zext_ln113_1_fu_275_p1;
reg   [3:0] ct_fu_74;
wire   [3:0] add_ln105_fu_243_p2;
wire    ap_loop_init;
reg   [7:0] tt_fu_78;
wire   [7:0] select_ln104_1_fu_221_p3;
reg   [10:0] indvar_flatten_fu_82;
wire   [10:0] add_ln104_1_fu_184_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    cache_2_we1_local;
wire   [3:0] trunc_ln108_fu_283_p1;
reg    cache_2_ce1_local;
reg    cache_1_we1_local;
reg    cache_1_ce1_local;
reg    cache_0_we1_local;
reg    cache_0_ce1_local;
reg    cache_3_we1_local;
reg    cache_3_ce1_local;
wire   [0:0] icmp_ln105_fu_207_p2;
wire   [7:0] add_ln104_fu_201_p2;
wire   [8:0] tmp_1_fu_259_p3;
wire   [8:0] zext_ln113_fu_266_p1;
wire   [8:0] add_ln113_fu_269_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_74 = 4'd0;
//#0 tt_fu_78 = 8'd0;
//#0 indvar_flatten_fu_82 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

QK_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_74 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_312_pp0_iter0_reg == 1'd0))) begin
        ct_fu_74 <= add_ln105_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln104_fu_178_p2 == 1'd0)) begin
            indvar_flatten_fu_82 <= add_ln104_1_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_78 <= 8'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_312_pp0_iter0_reg == 1'd0))) begin
        tt_fu_78 <= select_ln104_1_fu_221_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln104_reg_312 <= icmp_ln104_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln104_reg_312_pp0_iter1_reg <= icmp_ln104_reg_312;
        lshr_ln_reg_325 <= {{select_ln104_1_fu_221_p3[7:2]}};
        select_ln104_reg_316 <= select_ln104_fu_213_p3;
        trunc_ln104_reg_321 <= trunc_ln104_fu_229_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln104_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_0_ce1_local = 1'b1;
    end else begin
        cache_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_321_pp0_iter1_reg == 2'd0))) begin
        cache_0_we1_local = 1'b1;
    end else begin
        cache_0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_1_ce1_local = 1'b1;
    end else begin
        cache_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_321_pp0_iter1_reg == 2'd1))) begin
        cache_1_we1_local = 1'b1;
    end else begin
        cache_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_2_ce1_local = 1'b1;
    end else begin
        cache_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_321_pp0_iter1_reg == 2'd2))) begin
        cache_2_we1_local = 1'b1;
    end else begin
        cache_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_3_ce1_local = 1'b1;
    end else begin
        cache_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_321_pp0_iter1_reg == 2'd3))) begin
        cache_3_we1_local = 1'b1;
    end else begin
        cache_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ks_cache_i_stream_TDATA_blk_n = ks_cache_i_stream_TVALID;
    end else begin
        ks_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ks_cache_i_stream_TREADY = 1'b1;
    end else begin
        ks_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln104_reg_312_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln104_1_fu_184_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln104_fu_201_p2 = (tt_fu_78 + 8'd1);

assign add_ln105_fu_243_p2 = (select_ln104_fu_213_p3 + 4'd1);

assign add_ln113_fu_269_p2 = (tmp_1_fu_259_p3 + zext_ln113_fu_266_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln104_reg_312_pp0_iter1_reg == 1'd0) & (ks_cache_i_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_0_address1 = zext_ln113_1_fu_275_p1;

assign cache_0_ce1 = cache_0_ce1_local;

assign cache_0_d1 = trunc_ln108_fu_283_p1;

assign cache_0_we1 = cache_0_we1_local;

assign cache_1_address1 = zext_ln113_1_fu_275_p1;

assign cache_1_ce1 = cache_1_ce1_local;

assign cache_1_d1 = trunc_ln108_fu_283_p1;

assign cache_1_we1 = cache_1_we1_local;

assign cache_2_address1 = zext_ln113_1_fu_275_p1;

assign cache_2_ce1 = cache_2_ce1_local;

assign cache_2_d1 = trunc_ln108_fu_283_p1;

assign cache_2_we1 = cache_2_we1_local;

assign cache_3_address1 = zext_ln113_1_fu_275_p1;

assign cache_3_ce1 = cache_3_ce1_local;

assign cache_3_d1 = trunc_ln108_fu_283_p1;

assign cache_3_we1 = cache_3_we1_local;

assign icmp_ln104_fu_178_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln104_reg_312_pp0_iter0_reg = icmp_ln104_reg_312;

assign icmp_ln105_fu_207_p2 = ((ct_fu_74 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln104_1_fu_221_p3 = ((icmp_ln105_fu_207_p2[0:0] == 1'b1) ? add_ln104_fu_201_p2 : tt_fu_78);

assign select_ln104_fu_213_p3 = ((icmp_ln105_fu_207_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_74);

assign tmp_1_fu_259_p3 = {{lshr_ln_reg_325}, {3'd0}};

assign trunc_ln104_fu_229_p1 = select_ln104_1_fu_221_p3[1:0];

assign trunc_ln104_reg_321_pp0_iter1_reg = trunc_ln104_reg_321;

assign trunc_ln108_fu_283_p1 = ks_cache_i_stream_TDATA[3:0];

assign zext_ln113_1_fu_275_p1 = add_ln113_fu_269_p2;

assign zext_ln113_fu_266_p1 = select_ln104_reg_316;

endmodule //QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ks_cache_o_stream_TREADY,
        pos_r,
        cache_0_address0,
        cache_0_ce0,
        cache_0_q0,
        cache_1_address0,
        cache_1_ce0,
        cache_1_q0,
        cache_2_address0,
        cache_2_ce0,
        cache_2_q0,
        cache_3_address0,
        cache_3_ce0,
        cache_3_q0,
        ks_cache_o_stream_TDATA,
        ks_cache_o_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ks_cache_o_stream_TREADY;
input  [7:0] pos_r;
output  [8:0] cache_0_address0;
output   cache_0_ce0;
input  [3:0] cache_0_q0;
output  [8:0] cache_1_address0;
output   cache_1_ce0;
input  [3:0] cache_1_q0;
output  [8:0] cache_2_address0;
output   cache_2_ce0;
input  [3:0] cache_2_q0;
output  [8:0] cache_3_address0;
output   cache_3_ce0;
input  [3:0] cache_3_q0;
output  [7:0] ks_cache_o_stream_TDATA;
output   ks_cache_o_stream_TVALID;

reg ap_idle;
reg ks_cache_o_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln432_reg_343;
reg   [0:0] icmp_ln432_reg_343_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln432_fu_175_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ks_cache_o_stream_TDATA_blk_n;
wire   [0:0] icmp_ln432_reg_343_pp0_iter0_reg;
reg   [0:0] icmp_ln432_reg_343_pp0_iter1_reg;
wire   [3:0] select_ln432_fu_210_p3;
reg   [3:0] select_ln432_reg_347;
wire   [3:0] select_ln432_1_fu_218_p3;
reg   [3:0] select_ln432_1_reg_352;
wire   [1:0] trunc_ln433_fu_250_p1;
reg   [1:0] trunc_ln433_reg_357;
wire   [63:0] zext_ln438_1_fu_281_p1;
reg   [3:0] ct_fu_80;
wire   [3:0] add_ln433_fu_226_p2;
wire    ap_loop_init;
reg   [3:0] t_fu_84;
reg   [6:0] indvar_flatten6_fu_88;
wire   [6:0] add_ln432_1_fu_181_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    cache_0_ce0_local;
reg    cache_1_ce0_local;
reg    cache_2_ce0_local;
reg    cache_3_ce0_local;
wire   [0:0] icmp_ln433_fu_204_p2;
wire   [3:0] add_ln432_fu_198_p2;
wire   [7:0] zext_ln432_fu_242_p1;
wire   [7:0] empty_fu_245_p2;
wire   [5:0] lshr_ln1_fu_254_p4;
wire   [8:0] tmp_2_fu_264_p3;
wire   [8:0] zext_ln438_fu_272_p1;
wire   [8:0] add_ln438_fu_275_p2;
wire   [3:0] tmp_fu_289_p9;
wire   [3:0] tmp_fu_289_p11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_80;
wire   [1:0] tmp_fu_289_p1;
wire   [1:0] tmp_fu_289_p3;
wire  signed [1:0] tmp_fu_289_p5;
wire  signed [1:0] tmp_fu_289_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ct_fu_80 = 4'd0;
//#0 t_fu_84 = 4'd0;
//#0 indvar_flatten6_fu_88 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) QK_GEMM_sparsemux_9_2_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 4 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 4 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 4 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 4 ),
    .def_WIDTH( 4 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
sparsemux_9_2_4_1_1_U55(
    .din0(cache_0_q0),
    .din1(cache_1_q0),
    .din2(cache_2_q0),
    .din3(cache_3_q0),
    .def(tmp_fu_289_p9),
    .sel(trunc_ln433_reg_357),
    .dout(tmp_fu_289_p11)
);

QK_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_80 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln432_reg_343_pp0_iter0_reg == 1'd0))) begin
        ct_fu_80 <= add_ln433_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_80)) begin
        if ((icmp_ln432_fu_175_p2 == 1'd0)) begin
            indvar_flatten6_fu_88 <= add_ln432_1_fu_181_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_88 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_84 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln432_reg_343_pp0_iter0_reg == 1'd0))) begin
        t_fu_84 <= select_ln432_1_fu_218_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln432_reg_343 <= icmp_ln432_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln432_reg_343_pp0_iter1_reg <= icmp_ln432_reg_343;
        select_ln432_1_reg_352 <= select_ln432_1_fu_218_p3;
        select_ln432_reg_347 <= select_ln432_fu_210_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln432_reg_343_pp0_iter2_reg <= icmp_ln432_reg_343_pp0_iter1_reg;
        trunc_ln433_reg_357 <= trunc_ln433_fu_250_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln432_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_88;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_0_ce0_local = 1'b1;
    end else begin
        cache_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_1_ce0_local = 1'b1;
    end else begin
        cache_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_2_ce0_local = 1'b1;
    end else begin
        cache_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cache_3_ce0_local = 1'b1;
    end else begin
        cache_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln432_reg_343_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ks_cache_o_stream_TDATA_blk_n = ks_cache_o_stream_TREADY;
    end else begin
        ks_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln432_reg_343_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ks_cache_o_stream_TVALID = 1'b1;
    end else begin
        ks_cache_o_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((icmp_ln432_reg_343_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln432_1_fu_181_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 7'd1);

assign add_ln432_fu_198_p2 = (t_fu_84 + 4'd1);

assign add_ln433_fu_226_p2 = (select_ln432_fu_210_p3 + 4'd1);

assign add_ln438_fu_275_p2 = (tmp_2_fu_264_p3 + zext_ln438_fu_272_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln432_reg_343_pp0_iter2_reg == 1'd0) & (ks_cache_o_stream_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_80 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_0_address0 = zext_ln438_1_fu_281_p1;

assign cache_0_ce0 = cache_0_ce0_local;

assign cache_1_address0 = zext_ln438_1_fu_281_p1;

assign cache_1_ce0 = cache_1_ce0_local;

assign cache_2_address0 = zext_ln438_1_fu_281_p1;

assign cache_2_ce0 = cache_2_ce0_local;

assign cache_3_address0 = zext_ln438_1_fu_281_p1;

assign cache_3_ce0 = cache_3_ce0_local;

assign empty_fu_245_p2 = (zext_ln432_fu_242_p1 + pos_r);

assign icmp_ln432_fu_175_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln432_reg_343_pp0_iter0_reg = icmp_ln432_reg_343;

assign icmp_ln433_fu_204_p2 = ((ct_fu_80 == 4'd8) ? 1'b1 : 1'b0);

assign ks_cache_o_stream_TDATA = tmp_fu_289_p11;

assign lshr_ln1_fu_254_p4 = {{empty_fu_245_p2[7:2]}};

assign select_ln432_1_fu_218_p3 = ((icmp_ln433_fu_204_p2[0:0] == 1'b1) ? add_ln432_fu_198_p2 : t_fu_84);

assign select_ln432_fu_210_p3 = ((icmp_ln433_fu_204_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_80);

assign tmp_2_fu_264_p3 = {{lshr_ln1_fu_254_p4}, {3'd0}};

assign tmp_fu_289_p9 = 'bx;

assign trunc_ln433_fu_250_p1 = empty_fu_245_p2[1:0];

assign zext_ln432_fu_242_p1 = select_ln432_1_reg_352;

assign zext_ln438_1_fu_281_p1 = add_ln438_fu_275_p2;

assign zext_ln438_fu_272_p1 = select_ln432_reg_347;

endmodule //QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pos_r,
        ks_stream_dout,
        ks_stream_empty_n,
        ks_stream_read,
        ks_stream_num_data_valid,
        ks_stream_fifo_cap,
        ks_cache_i_stream_TDATA,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        ks_cache_o_stream_TDATA,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        cache_0_address0,
        cache_0_ce0,
        cache_0_q0,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address0,
        cache_1_ce0,
        cache_1_q0,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address0,
        cache_2_ce0,
        cache_2_q0,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address0,
        cache_3_ce0,
        cache_3_q0,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] pos_r;
input  [3:0] ks_stream_dout;
input   ks_stream_empty_n;
output   ks_stream_read;
input  [2:0] ks_stream_num_data_valid;
input  [2:0] ks_stream_fifo_cap;
input  [7:0] ks_cache_i_stream_TDATA;
input   ks_cache_i_stream_TVALID;
output   ks_cache_i_stream_TREADY;
output  [7:0] ks_cache_o_stream_TDATA;
output   ks_cache_o_stream_TVALID;
input   ks_cache_o_stream_TREADY;
output  [8:0] cache_0_address0;
output   cache_0_ce0;
input  [3:0] cache_0_q0;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [3:0] cache_0_d1;
output  [8:0] cache_1_address0;
output   cache_1_ce0;
input  [3:0] cache_1_q0;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [3:0] cache_1_d1;
output  [8:0] cache_2_address0;
output   cache_2_ce0;
input  [3:0] cache_2_q0;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [3:0] cache_2_d1;
output  [8:0] cache_3_address0;
output   cache_3_ce0;
input  [3:0] cache_3_q0;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [3:0] cache_3_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ks_stream_read;
reg ks_cache_i_stream_TREADY;
reg[7:0] ks_cache_o_stream_TDATA;
reg cache_0_ce0;
reg[8:0] cache_0_address1;
reg cache_0_ce1;
reg cache_0_we1;
reg[3:0] cache_0_d1;
reg cache_1_ce0;
reg[8:0] cache_1_address1;
reg cache_1_ce1;
reg cache_1_we1;
reg[3:0] cache_1_d1;
reg cache_2_ce0;
reg[8:0] cache_2_address1;
reg cache_2_ce1;
reg cache_2_we1;
reg[3:0] cache_2_d1;
reg cache_3_ce0;
reg[8:0] cache_3_address1;
reg cache_3_ce1;
reg cache_3_we1;
reg[3:0] cache_3_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ks_stream_blk_n;
wire    ap_CS_fsm_state6;
reg   [7:0] pos_read_reg_322;
wire    ap_CS_fsm_state3;
wire   [3:0] add_ln419_fu_234_p2;
reg   [3:0] add_ln419_reg_331;
wire    ap_CS_fsm_state4;
wire   [8:0] zext_ln419_fu_240_p1;
reg   [8:0] zext_ln419_reg_336;
wire   [3:0] add_ln420_fu_262_p2;
reg   [3:0] add_ln420_reg_344;
wire    ap_CS_fsm_state5;
wire   [1:0] trunc_ln426_fu_277_p1;
reg   [1:0] trunc_ln426_reg_349;
reg   [5:0] lshr_ln2_reg_353;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_done;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_idle;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_ready;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_address1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_ce1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_we1;
wire   [3:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_d1;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_address1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_ce1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_we1;
wire   [3:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_d1;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_address1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_ce1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_we1;
wire   [3:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_d1;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_address1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_ce1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_we1;
wire   [3:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_d1;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ks_cache_i_stream_TREADY;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_idle;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_ready;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TREADY;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_0_address0;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_0_ce0;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_1_address0;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_1_ce0;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_2_address0;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_2_ce0;
wire   [8:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_3_address0;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_3_ce0;
wire   [7:0] grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TDATA;
wire    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TVALID;
reg   [3:0] t_reg_168;
wire   [0:0] icmp_ln419_fu_228_p2;
reg    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start_reg;
reg    ap_block_state1_ignore_call9;
wire    ap_CS_fsm_state2;
wire    cache_0_we1_out;
wire    cache_1_we1_out;
wire    cache_2_we1_out;
wire    cache_3_we1_out;
reg    grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start_reg;
wire    ap_CS_fsm_state7;
reg   [7:0] ks_cache_o_stream_TDATA_reg;
wire   [63:0] zext_ln426_fu_307_p1;
reg   [3:0] ct_fu_80;
wire   [0:0] icmp_ln420_fu_256_p2;
reg    ap_block_state1;
reg    cache_2_we1_local;
reg    cache_2_ce1_local;
reg    cache_1_we1_local;
reg    cache_1_ce1_local;
reg    cache_0_we1_local;
reg    cache_0_ce1_local;
reg    cache_3_we1_local;
reg    cache_3_ce1_local;
wire   [7:0] zext_ln420_fu_268_p1;
wire   [7:0] empty_fu_272_p2;
wire   [8:0] tmp_3_fu_295_p3;
wire   [8:0] add_ln426_fu_302_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 7'd1;
//#0 grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start_reg = 1'b0;
//#0 grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start_reg = 1'b0;
//#0 ct_fu_80 = 4'd0;
end

QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1 grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start),
    .ap_done(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_done),
    .ap_idle(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_idle),
    .ap_ready(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_ready),
    .ks_cache_i_stream_TVALID(ks_cache_i_stream_TVALID),
    .cache_0_address1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_address1),
    .cache_0_ce1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_ce1),
    .cache_0_we1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_we1),
    .cache_0_d1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_d1),
    .cache_1_address1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_address1),
    .cache_1_ce1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_ce1),
    .cache_1_we1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_we1),
    .cache_1_d1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_d1),
    .cache_2_address1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_address1),
    .cache_2_ce1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_ce1),
    .cache_2_we1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_we1),
    .cache_2_d1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_d1),
    .cache_3_address1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_address1),
    .cache_3_ce1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_ce1),
    .cache_3_we1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_we1),
    .cache_3_d1(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_d1),
    .ks_cache_i_stream_TDATA(ks_cache_i_stream_TDATA),
    .ks_cache_i_stream_TREADY(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ks_cache_i_stream_TREADY)
);

QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2 grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start),
    .ap_done(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done),
    .ap_idle(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_idle),
    .ap_ready(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_ready),
    .ks_cache_o_stream_TREADY(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TREADY),
    .pos_r(pos_read_reg_322),
    .cache_0_address0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_0_address0),
    .cache_0_ce0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_0_ce0),
    .cache_0_q0(cache_0_q0),
    .cache_1_address0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_1_address0),
    .cache_1_ce0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_1_ce0),
    .cache_1_q0(cache_1_q0),
    .cache_2_address0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_2_address0),
    .cache_2_ce0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_2_ce0),
    .cache_2_q0(cache_2_q0),
    .cache_3_address0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_3_address0),
    .cache_3_ce0(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_3_ce0),
    .cache_3_q0(cache_3_q0),
    .ks_cache_o_stream_TDATA(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TDATA),
    .ks_cache_o_stream_TVALID(grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TVALID)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call9))) begin
            grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start_reg <= 1'b1;
        end else if ((grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_ready == 1'b1)) begin
            grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln419_fu_228_p2 == 1'd1))) begin
            grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start_reg <= 1'b1;
        end else if ((grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_ready == 1'b1)) begin
            grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        ct_fu_80 <= 4'd0;
    end else if (((icmp_ln420_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ct_fu_80 <= add_ln419_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        t_reg_168 <= add_ln420_reg_344;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln419_fu_228_p2 == 1'd0))) begin
        t_reg_168 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln419_reg_331 <= add_ln419_fu_234_p2;
        zext_ln419_reg_336[3 : 0] <= zext_ln419_fu_240_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln420_reg_344 <= add_ln420_fu_262_p2;
        lshr_ln2_reg_353 <= {{empty_fu_272_p2[7:2]}};
        trunc_ln426_reg_349 <= trunc_ln426_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TVALID == 1'b1))) begin
        ks_cache_o_stream_TDATA_reg <= grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pos_read_reg_322 <= pos_r;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((ks_stream_empty_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_address1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_address1;
    end else begin
        cache_0_address1 = zext_ln426_fu_307_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_0_ce0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_0_ce0;
    end else begin
        cache_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_ce1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_ce1;
    end else begin
        cache_0_ce1 = cache_0_ce1_local;
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        cache_0_ce1_local = 1'b1;
    end else begin
        cache_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_d1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_d1;
    end else begin
        cache_0_d1 = ks_stream_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_0_we1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_0_we1;
    end else begin
        cache_0_we1 = (cache_0_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (trunc_ln426_reg_349 == 2'd0))) begin
        cache_0_we1_local = 1'b1;
    end else begin
        cache_0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_address1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_address1;
    end else begin
        cache_1_address1 = zext_ln426_fu_307_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_1_ce0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_1_ce0;
    end else begin
        cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_ce1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_ce1;
    end else begin
        cache_1_ce1 = cache_1_ce1_local;
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        cache_1_ce1_local = 1'b1;
    end else begin
        cache_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_d1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_d1;
    end else begin
        cache_1_d1 = ks_stream_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_1_we1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_1_we1;
    end else begin
        cache_1_we1 = (cache_1_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (trunc_ln426_reg_349 == 2'd1))) begin
        cache_1_we1_local = 1'b1;
    end else begin
        cache_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_address1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_address1;
    end else begin
        cache_2_address1 = zext_ln426_fu_307_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_2_ce0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_2_ce0;
    end else begin
        cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_ce1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_ce1;
    end else begin
        cache_2_ce1 = cache_2_ce1_local;
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        cache_2_ce1_local = 1'b1;
    end else begin
        cache_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_d1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_d1;
    end else begin
        cache_2_d1 = ks_stream_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_2_we1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_2_we1;
    end else begin
        cache_2_we1 = (cache_2_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (trunc_ln426_reg_349 == 2'd2))) begin
        cache_2_we1_local = 1'b1;
    end else begin
        cache_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_address1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_address1;
    end else begin
        cache_3_address1 = zext_ln426_fu_307_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache_3_ce0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_3_ce0;
    end else begin
        cache_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_ce1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_ce1;
    end else begin
        cache_3_ce1 = cache_3_ce1_local;
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        cache_3_ce1_local = 1'b1;
    end else begin
        cache_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_d1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_d1;
    end else begin
        cache_3_d1 = ks_stream_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cache_3_we1 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_cache_3_we1;
    end else begin
        cache_3_we1 = (cache_3_we1_out | 1'b0);
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (trunc_ln426_reg_349 == 2'd3))) begin
        cache_3_we1_local = 1'b1;
    end else begin
        cache_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ks_cache_i_stream_TREADY = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ks_cache_i_stream_TREADY;
    end else begin
        ks_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TVALID == 1'b1))) begin
        ks_cache_o_stream_TDATA = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TDATA;
    end else begin
        ks_cache_o_stream_TDATA = ks_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ks_stream_blk_n = ks_stream_empty_n;
    end else begin
        ks_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ks_stream_read = 1'b1;
    end else begin
        ks_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln419_fu_228_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln420_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ks_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln419_fu_234_p2 = (ct_fu_80 + 4'd1);

assign add_ln420_fu_262_p2 = (t_reg_168 + 4'd1);

assign add_ln426_fu_302_p2 = (tmp_3_fu_295_p3 + zext_ln419_reg_336);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call9 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign cache_0_address0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_0_address0;

assign cache_0_we1_out = cache_0_we1_local;

assign cache_1_address0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_1_address0;

assign cache_1_we1_out = cache_1_we1_local;

assign cache_2_address0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_2_address0;

assign cache_2_we1_out = cache_2_we1_local;

assign cache_3_address0 = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_cache_3_address0;

assign cache_3_we1_out = cache_3_we1_local;

assign empty_fu_272_p2 = (zext_ln420_fu_268_p1 + pos_read_reg_322);

assign grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_1_fu_179_ap_start_reg;

assign grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ap_start_reg;

assign grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TREADY = (ks_cache_o_stream_TREADY & ap_CS_fsm_state7);

assign icmp_ln419_fu_228_p2 = ((ct_fu_80 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln420_fu_256_p2 = ((t_reg_168 == 4'd8) ? 1'b1 : 1'b0);

assign ks_cache_o_stream_TVALID = grp_update_k_cache_ap_uint_4_8_192_8_1_Pipeline_2_fu_193_ks_cache_o_stream_TVALID;

assign tmp_3_fu_295_p3 = {{lshr_ln2_reg_353}, {3'd0}};

assign trunc_ln426_fu_277_p1 = empty_fu_272_p2[1:0];

assign zext_ln419_fu_240_p1 = ct_fu_80;

assign zext_ln420_fu_268_p1 = t_reg_168;

assign zext_ln426_fu_307_p1 = add_ln426_fu_302_p2;

always @ (posedge ap_clk) begin
    zext_ln419_reg_336[8:4] <= 5'b00000;
end

endmodule //QK_GEMM_update_k_cache_ap_uint_4_8_192_8_1_s
