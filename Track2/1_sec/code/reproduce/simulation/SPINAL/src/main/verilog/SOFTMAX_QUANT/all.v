/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SOFTMAX_QUANT_SOFTMAX_QUANT,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.818625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=5851,HLS_SYN_LUT=5031,HLS_VERSION=2024_2}" *)

module SOFTMAX_QUANT (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        pos_id,
        r_stream_TDATA,
        r_stream_TVALID,
        r_stream_TREADY,
        rq_stream_TDATA,
        rq_stream_TVALID,
        rq_stream_TREADY,
        rs_stream_TDATA,
        rs_stream_TVALID,
        rs_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [31:0] pos_id;
input  [135:0] r_stream_TDATA;
input   r_stream_TVALID;
output   r_stream_TREADY;
output  [63:0] rq_stream_TDATA;
output   rq_stream_TVALID;
input   rq_stream_TREADY;
output  [7:0] rs_stream_TDATA;
output   rs_stream_TVALID;
input   rs_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_209;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_214;
wire   [31:0] add_ln58_fu_117_p2;
reg   [31:0] add_ln58_reg_220;
wire   [0:0] empty_fu_123_p2;
reg   [0:0] empty_reg_227;
wire   [0:0] empty_34_fu_129_p2;
reg   [0:0] empty_34_reg_232;
wire   [31:0] sub_ln58_fu_148_p2;
reg   [31:0] sub_ln58_reg_237;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln58_1_fu_164_p2;
reg   [31:0] sub_ln58_1_reg_243;
wire   [0:0] empty_35_fu_169_p2;
reg   [0:0] empty_35_reg_249;
wire    ap_CS_fsm_state3;
reg   [31:0] pos_id_read_reg_254;
wire    ap_CS_fsm_state4;
wire   [31:0] sub_ln58_2_fu_178_p2;
reg   [31:0] sub_ln58_2_reg_259;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TDATA;
wire   [7:0] grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_r_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready;
wire    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_idle;
reg    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_continue;
reg    grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln58_fu_186_p2;
wire    ap_CS_fsm_state6;
reg    ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready;
reg    ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done;
reg    ap_block_state6_on_subcall_done;
wire    ap_sync_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready;
reg   [63:0] rq_stream_TDATA_reg;
reg   [7:0] rs_stream_TDATA_reg;
reg   [31:0] l_fu_66;
wire   [31:0] add_ln58_1_fu_191_p2;
wire   [31:0] smax_fu_143_p3;
wire   [30:0] trunc_ln36_fu_140_p1;
wire   [30:0] smax1_fu_153_p3;
wire   [31:0] zext_ln58_fu_160_p1;
wire   [31:0] umax_fu_173_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_rq_stream_U_apdone_blk;
wire    regslice_both_rs_stream_U_apdone_blk;
reg    ap_block_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_r_stream_U_apdone_blk;
wire   [135:0] r_stream_TDATA_int_regslice;
wire    r_stream_TVALID_int_regslice;
reg    r_stream_TREADY_int_regslice;
wire    regslice_both_r_stream_U_ack_in;
reg   [63:0] rq_stream_TDATA_int_regslice;
wire    rq_stream_TREADY_int_regslice;
wire    regslice_both_rq_stream_U_vld_out;
reg   [7:0] rs_stream_TDATA_int_regslice;
wire    rs_stream_TREADY_int_regslice;
wire    regslice_both_rs_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 7'd1;
//#0 grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done = 1'b0;
//#0 l_fu_66 = 32'd0;
end

SOFTMAX_QUANT_dataflow_in_loop_VITIS_LOOP_58_1_1 grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88(
    .pos_id(pos_id_read_reg_254),
    .r_stream_TDATA(r_stream_TDATA_int_regslice),
    .rq_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TDATA),
    .rs_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .pos_id_ap_vld(1'b1),
    .r_stream_TVALID(r_stream_TVALID_int_regslice),
    .r_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_r_stream_TREADY),
    .ap_start(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start),
    .rq_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TVALID),
    .rq_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TREADY),
    .rs_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TVALID),
    .rs_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TREADY),
    .ap_done(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done),
    .ap_ready(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready),
    .ap_idle(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_idle),
    .ap_continue(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_continue)
);

SOFTMAX_QUANT_regslice_both #(
    .DataWidth( 136 ))
regslice_both_r_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(r_stream_TDATA),
    .vld_in(r_stream_TVALID),
    .ack_in(regslice_both_r_stream_U_ack_in),
    .data_out(r_stream_TDATA_int_regslice),
    .vld_out(r_stream_TVALID_int_regslice),
    .ack_out(r_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_r_stream_U_apdone_blk)
);

SOFTMAX_QUANT_regslice_both #(
    .DataWidth( 64 ))
regslice_both_rq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rq_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TVALID),
    .ack_in(rq_stream_TREADY_int_regslice),
    .data_out(rq_stream_TDATA),
    .vld_out(regslice_both_rq_stream_U_vld_out),
    .ack_out(rq_stream_TREADY),
    .apdone_blk(regslice_both_rq_stream_U_apdone_blk)
);

SOFTMAX_QUANT_regslice_both #(
    .DataWidth( 8 ))
regslice_both_rs_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rs_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TVALID),
    .ack_in(rs_stream_TREADY_int_regslice),
    .data_out(rs_stream_TDATA),
    .vld_out(regslice_both_rs_stream_U_vld_out),
    .ack_out(rs_stream_TREADY),
    .apdone_blk(regslice_both_rs_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done <= 1'b0;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready <= 1'b0;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (ap_sync_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln58_fu_186_p2 == 1'd0)))) begin
            grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready == 1'b1)) begin
            grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_66 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln58_fu_186_p2 == 1'd0))) begin
        l_fu_66 <= add_ln58_1_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln58_reg_220 <= add_ln58_fu_117_p2;
        empty_34_reg_232 <= empty_34_fu_129_p2;
        empty_reg_227 <= empty_fu_123_p2;
        l_begin_read_reg_214 <= l_begin;
        l_close_read_reg_209 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_35_reg_249 <= empty_35_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pos_id_read_reg_254 <= pos_id;
        sub_ln58_2_reg_259 <= sub_ln58_2_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rq_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rs_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln58_1_reg_243 <= sub_ln58_1_fu_164_p2;
        sub_ln58_reg_237 <= sub_ln58_fu_148_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_continue = 1'b1;
    end else begin
        grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_r_stream_TREADY;
    end else begin
        r_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rq_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TDATA;
    end else begin
        rq_stream_TDATA_int_regslice = rq_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rs_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TDATA;
    end else begin
        rs_stream_TDATA_int_regslice = rs_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln58_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_191_p2 = (l_fu_66 + 32'd1);

assign add_ln58_fu_117_p2 = ($signed(l_begin) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready & ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state7 = ((regslice_both_rs_stream_U_apdone_blk == 1'b1) | (regslice_both_rq_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready = (grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready | ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_ready);

assign empty_34_fu_129_p2 = (($signed(l_begin) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_35_fu_169_p2 = ((sub_ln58_reg_237 > sub_ln58_1_reg_243) ? 1'b1 : 1'b0);

assign empty_fu_123_p2 = (($signed(l_close) > $signed(l_begin)) ? 1'b1 : 1'b0);

assign grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start = grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_ap_start_reg;

assign grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rq_stream_TREADY = (rq_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_dataflow_in_loop_VITIS_LOOP_58_1_1_fu_88_rs_stream_TREADY = (rs_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign icmp_ln58_fu_186_p2 = ((l_fu_66 == sub_ln58_2_reg_259) ? 1'b1 : 1'b0);

assign r_stream_TREADY = regslice_both_r_stream_U_ack_in;

assign rq_stream_TVALID = regslice_both_rq_stream_U_vld_out;

assign rs_stream_TVALID = regslice_both_rs_stream_U_vld_out;

assign smax1_fu_153_p3 = ((empty_34_reg_232[0:0] == 1'b1) ? trunc_ln36_fu_140_p1 : 31'd24);

assign smax_fu_143_p3 = ((empty_reg_227[0:0] == 1'b1) ? l_close_read_reg_209 : l_begin_read_reg_214);

assign sub_ln58_1_fu_164_p2 = (add_ln58_reg_220 - zext_ln58_fu_160_p1);

assign sub_ln58_2_fu_178_p2 = (add_ln58_reg_220 - umax_fu_173_p3);

assign sub_ln58_fu_148_p2 = (add_ln58_reg_220 - smax_fu_143_p3);

assign trunc_ln36_fu_140_p1 = l_begin_read_reg_214[30:0];

assign umax_fu_173_p3 = ((empty_35_reg_249[0:0] == 1'b1) ? sub_ln58_reg_237 : sub_ln58_1_reg_243);

assign zext_ln58_fu_160_p1 = smax1_fu_153_p3;

endmodule //SOFTMAX_QUANT
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_dataflow_in_loop_VITIS_LOOP_58_1_1 (
        pos_id,
        r_stream_TDATA,
        rq_stream_TDATA,
        rs_stream_TDATA,
        ap_clk,
        ap_rst,
        pos_id_ap_vld,
        r_stream_TVALID,
        r_stream_TREADY,
        ap_start,
        rq_stream_TVALID,
        rq_stream_TREADY,
        rs_stream_TVALID,
        rs_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] pos_id;
input  [135:0] r_stream_TDATA;
output  [63:0] rq_stream_TDATA;
output  [7:0] rs_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   pos_id_ap_vld;
input   r_stream_TVALID;
output   r_stream_TREADY;
input   ap_start;
output   rq_stream_TVALID;
input   rq_stream_TREADY;
output   rs_stream_TVALID;
input   rs_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_softmax_U0_ap_start;
wire    do_softmax_U0_start_out;
wire    do_softmax_U0_start_write;
wire   [127:0] do_softmax_U0_softmax_stream_din;
wire    do_softmax_U0_softmax_stream_write;
wire    do_softmax_U0_r_stream_TREADY;
wire    do_softmax_U0_ap_done;
wire    do_softmax_U0_ap_ready;
wire    do_softmax_U0_ap_idle;
wire    do_softmax_U0_ap_continue;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_softmax_stream_read;
wire   [63:0] do_quant_U0_rq_stream_TDATA;
wire    do_quant_U0_rq_stream_TVALID;
wire   [7:0] do_quant_U0_rs_stream_TDATA;
wire    do_quant_U0_rs_stream_TVALID;
wire    softmax_stream_full_n;
wire   [127:0] softmax_stream_dout;
wire    softmax_stream_empty_n;
wire   [2:0] softmax_stream_num_data_valid;
wire   [2:0] softmax_stream_fifo_cap;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;

SOFTMAX_QUANT_do_softmax do_softmax_U0(
    .ap_start(do_softmax_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .start_out(do_softmax_U0_start_out),
    .start_write(do_softmax_U0_start_write),
    .pos_r(pos_id),
    .r_stream_TDATA(r_stream_TDATA),
    .softmax_stream_din(do_softmax_U0_softmax_stream_din),
    .softmax_stream_full_n(softmax_stream_full_n),
    .softmax_stream_write(do_softmax_U0_softmax_stream_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .pos_r_ap_vld(pos_id_ap_vld),
    .r_stream_TVALID(r_stream_TVALID),
    .r_stream_TREADY(do_softmax_U0_r_stream_TREADY),
    .ap_done(do_softmax_U0_ap_done),
    .ap_ready(do_softmax_U0_ap_ready),
    .ap_idle(do_softmax_U0_ap_idle),
    .ap_continue(do_softmax_U0_ap_continue)
);

SOFTMAX_QUANT_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .softmax_stream_dout(softmax_stream_dout),
    .softmax_stream_empty_n(softmax_stream_empty_n),
    .softmax_stream_read(do_quant_U0_softmax_stream_read),
    .softmax_stream_num_data_valid(softmax_stream_num_data_valid),
    .softmax_stream_fifo_cap(softmax_stream_fifo_cap),
    .rq_stream_TREADY(rq_stream_TREADY),
    .rs_stream_TREADY(rs_stream_TREADY),
    .rq_stream_TDATA(do_quant_U0_rq_stream_TDATA),
    .rq_stream_TVALID(do_quant_U0_rq_stream_TVALID),
    .rs_stream_TDATA(do_quant_U0_rs_stream_TDATA),
    .rs_stream_TVALID(do_quant_U0_rs_stream_TVALID)
);

SOFTMAX_QUANT_fifo_w128_d2_S softmax_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax_U0_softmax_stream_din),
    .if_full_n(softmax_stream_full_n),
    .if_write(do_softmax_U0_softmax_stream_write),
    .if_dout(softmax_stream_dout),
    .if_empty_n(softmax_stream_empty_n),
    .if_read(do_quant_U0_softmax_stream_read),
    .if_num_data_valid(softmax_stream_num_data_valid),
    .if_fifo_cap(softmax_stream_fifo_cap)
);

SOFTMAX_QUANT_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(do_softmax_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

assign ap_done = do_quant_U0_ap_done;

assign ap_idle = (do_softmax_U0_ap_idle & do_quant_U0_ap_idle);

assign ap_ready = do_softmax_U0_ap_ready;

assign do_quant_U0_ap_continue = ap_continue;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_softmax_U0_ap_continue = 1'b1;

assign do_softmax_U0_ap_start = ap_start;

assign r_stream_TREADY = do_softmax_U0_r_stream_TREADY;

assign rq_stream_TDATA = do_quant_U0_rq_stream_TDATA;

assign rq_stream_TVALID = do_quant_U0_rq_stream_TVALID;

assign rs_stream_TDATA = do_quant_U0_rs_stream_TDATA;

assign rs_stream_TVALID = do_quant_U0_rs_stream_TVALID;

assign start_for_do_quant_U0_din = 1'b1;

endmodule //SOFTMAX_QUANT_dataflow_in_loop_VITIS_LOOP_58_1_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_stream_TDATA,
        r_stream_TVALID,
        r_stream_TREADY,
        i_stream_adapted_din,
        i_stream_adapted_full_n,
        i_stream_adapted_write,
        i_stream_adapted_num_data_valid,
        i_stream_adapted_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [135:0] r_stream_TDATA;
input   r_stream_TVALID;
output   r_stream_TREADY;
output  [33:0] i_stream_adapted_din;
input   i_stream_adapted_full_n;
output   i_stream_adapted_write;
input  [2:0] i_stream_adapted_num_data_valid;
input  [2:0] i_stream_adapted_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_stream_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_unpk_fu_20_ap_start;
wire    grp_unpk_fu_20_ap_done;
wire    grp_unpk_fu_20_ap_idle;
wire    grp_unpk_fu_20_ap_ready;
wire   [33:0] grp_unpk_fu_20_i_stream_adapted_din;
wire    grp_unpk_fu_20_i_stream_adapted_write;
wire    grp_unpk_fu_20_r_stream_TREADY;
reg    grp_unpk_fu_20_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 grp_unpk_fu_20_ap_start_reg = 1'b0;
end

SOFTMAX_QUANT_unpk grp_unpk_fu_20(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_unpk_fu_20_ap_start),
    .ap_done(grp_unpk_fu_20_ap_done),
    .ap_idle(grp_unpk_fu_20_ap_idle),
    .ap_ready(grp_unpk_fu_20_ap_ready),
    .r_stream_TVALID(r_stream_TVALID),
    .i_stream_adapted_din(grp_unpk_fu_20_i_stream_adapted_din),
    .i_stream_adapted_full_n(i_stream_adapted_full_n),
    .i_stream_adapted_write(grp_unpk_fu_20_i_stream_adapted_write),
    .i_stream_adapted_num_data_valid(3'd0),
    .i_stream_adapted_fifo_cap(3'd0),
    .r_stream_TDATA(r_stream_TDATA),
    .r_stream_TREADY(grp_unpk_fu_20_r_stream_TREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_unpk_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_unpk_fu_20_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_unpk_fu_20_ap_start_reg <= 1'b1;
        end else if ((grp_unpk_fu_20_ap_ready == 1'b1)) begin
            grp_unpk_fu_20_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_unpk_fu_20_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_unpk_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_unpk_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_stream_TREADY = grp_unpk_fu_20_r_stream_TREADY;
    end else begin
        r_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_unpk_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_unpk_fu_20_ap_start = grp_unpk_fu_20_ap_start_reg;

assign i_stream_adapted_din = grp_unpk_fu_20_i_stream_adapted_din;

assign i_stream_adapted_write = grp_unpk_fu_20_i_stream_adapted_write;

endmodule //SOFTMAX_QUANT_do_adapt
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        softmax_stream_dout,
        softmax_stream_empty_n,
        softmax_stream_read,
        softmax_stream_num_data_valid,
        softmax_stream_fifo_cap,
        softmax_stream1_din,
        softmax_stream1_full_n,
        softmax_stream1_write,
        softmax_stream1_num_data_valid,
        softmax_stream1_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] softmax_stream_dout;
input   softmax_stream_empty_n;
output   softmax_stream_read;
input  [2:0] softmax_stream_num_data_valid;
input  [2:0] softmax_stream_fifo_cap;
output  [127:0] softmax_stream1_din;
input   softmax_stream1_full_n;
output   softmax_stream1_write;
input  [2:0] softmax_stream1_num_data_valid;
input  [2:0] softmax_stream1_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_pack_fu_16_ap_start;
wire    grp_pack_fu_16_ap_done;
wire    grp_pack_fu_16_ap_idle;
wire    grp_pack_fu_16_ap_ready;
wire    grp_pack_fu_16_softmax_stream_read;
wire   [127:0] grp_pack_fu_16_softmax_stream1_din;
wire    grp_pack_fu_16_softmax_stream1_write;
reg    grp_pack_fu_16_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 grp_pack_fu_16_ap_start_reg = 1'b0;
end

SOFTMAX_QUANT_pack grp_pack_fu_16(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pack_fu_16_ap_start),
    .ap_done(grp_pack_fu_16_ap_done),
    .ap_idle(grp_pack_fu_16_ap_idle),
    .ap_ready(grp_pack_fu_16_ap_ready),
    .softmax_stream_dout(softmax_stream_dout),
    .softmax_stream_empty_n(softmax_stream_empty_n),
    .softmax_stream_read(grp_pack_fu_16_softmax_stream_read),
    .softmax_stream_num_data_valid(3'd0),
    .softmax_stream_fifo_cap(3'd0),
    .softmax_stream1_din(grp_pack_fu_16_softmax_stream1_din),
    .softmax_stream1_full_n(softmax_stream1_full_n),
    .softmax_stream1_write(grp_pack_fu_16_softmax_stream1_write),
    .softmax_stream1_num_data_valid(3'd0),
    .softmax_stream1_fifo_cap(3'd0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pack_fu_16_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pack_fu_16_ap_start_reg <= 1'b1;
        end else if ((grp_pack_fu_16_ap_ready == 1'b1)) begin
            grp_pack_fu_16_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_pack_fu_16_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_pack_fu_16_ap_start = grp_pack_fu_16_ap_start_reg;

assign softmax_stream1_din = grp_pack_fu_16_softmax_stream1_din;

assign softmax_stream1_write = grp_pack_fu_16_softmax_stream1_write;

assign softmax_stream_read = grp_pack_fu_16_softmax_stream_read;

endmodule //SOFTMAX_QUANT_do_adapt_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        softmax_stream_dout,
        softmax_stream_empty_n,
        softmax_stream_read,
        softmax_stream_num_data_valid,
        softmax_stream_fifo_cap,
        rq_stream_TREADY,
        rs_stream_TREADY,
        rq_stream_TDATA,
        rq_stream_TVALID,
        rs_stream_TDATA,
        rs_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] softmax_stream_dout;
input   softmax_stream_empty_n;
output   softmax_stream_read;
input  [2:0] softmax_stream_num_data_valid;
input  [2:0] softmax_stream_fifo_cap;
input   rq_stream_TREADY;
input   rs_stream_TREADY;
output  [63:0] rq_stream_TDATA;
output   rq_stream_TVALID;
output  [7:0] rs_stream_TDATA;
output   rs_stream_TVALID;

reg ap_idle;
reg softmax_stream_read;
reg rq_stream_TVALID;
reg rs_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln61_reg_1318;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_CS_iter13_fsm_state14;
wire    ap_CS_iter14_fsm_state15;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter14_reg;
reg    ap_block_state16_pp0_stage0_iter15;
wire    ap_CS_iter15_fsm_state16;
wire   [0:0] icmp_ln61_fu_311_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    softmax_stream_blk_n;
reg    rq_stream_TDATA_blk_n;
reg    rs_stream_TDATA_blk_n;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter1_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter2_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter3_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter4_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter5_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter6_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter7_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter8_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter9_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter10_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter11_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter12_reg;
reg   [0:0] icmp_ln61_reg_1318_pp0_iter13_reg;
wire   [15:0] trunc_ln67_fu_328_p1;
reg   [15:0] trunc_ln67_reg_1322;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter2_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter3_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter4_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter5_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter6_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter7_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter8_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter9_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter10_reg;
reg   [15:0] trunc_ln67_reg_1322_pp0_iter11_reg;
reg   [15:0] trunc_ln67_1_reg_1329;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter2_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter3_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter4_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter5_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter6_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter7_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter8_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter9_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter10_reg;
reg   [15:0] trunc_ln67_1_reg_1329_pp0_iter11_reg;
reg   [15:0] trunc_ln67_2_reg_1337;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter2_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter3_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter4_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter5_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter6_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter7_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter8_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter9_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter10_reg;
reg   [15:0] trunc_ln67_2_reg_1337_pp0_iter11_reg;
reg   [15:0] trunc_ln67_3_reg_1345;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter2_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter3_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter4_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter5_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter6_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter7_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter8_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter9_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter10_reg;
reg   [15:0] trunc_ln67_3_reg_1345_pp0_iter11_reg;
reg   [15:0] trunc_ln67_4_reg_1353;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter2_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter3_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter4_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter5_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter6_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter7_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter8_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter9_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter10_reg;
reg   [15:0] trunc_ln67_4_reg_1353_pp0_iter11_reg;
reg   [15:0] trunc_ln67_5_reg_1361;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter2_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter3_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter4_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter5_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter6_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter7_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter8_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter9_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter10_reg;
reg   [15:0] trunc_ln67_5_reg_1361_pp0_iter11_reg;
reg   [15:0] trunc_ln67_6_reg_1369;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter2_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter3_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter4_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter5_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter6_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter7_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter8_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter9_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter10_reg;
reg   [15:0] trunc_ln67_6_reg_1369_pp0_iter11_reg;
reg   [15:0] trunc_ln67_7_reg_1377;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter2_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter3_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter4_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter5_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter6_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter7_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter8_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter9_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter10_reg;
reg   [15:0] trunc_ln67_7_reg_1377_pp0_iter11_reg;
wire   [15:0] sub_ln99_fu_402_p2;
reg   [15:0] sub_ln99_reg_1385;
reg   [0:0] tmp_reg_1390;
reg   [0:0] tmp_8_reg_1395;
reg   [0:0] tmp_9_reg_1400;
reg   [0:0] tmp_9_reg_1400_pp0_iter2_reg;
reg   [0:0] tmp_10_reg_1405;
reg   [0:0] tmp_10_reg_1405_pp0_iter2_reg;
reg   [0:0] tmp_10_reg_1405_pp0_iter3_reg;
reg   [0:0] tmp_11_reg_1410;
reg   [0:0] tmp_11_reg_1410_pp0_iter2_reg;
reg   [0:0] tmp_11_reg_1410_pp0_iter3_reg;
reg   [0:0] tmp_11_reg_1410_pp0_iter4_reg;
reg   [0:0] tmp_12_reg_1415;
reg   [0:0] tmp_12_reg_1415_pp0_iter2_reg;
reg   [0:0] tmp_12_reg_1415_pp0_iter3_reg;
reg   [0:0] tmp_12_reg_1415_pp0_iter4_reg;
reg   [0:0] tmp_12_reg_1415_pp0_iter5_reg;
reg   [0:0] tmp_13_reg_1420;
reg   [0:0] tmp_13_reg_1420_pp0_iter2_reg;
reg   [0:0] tmp_13_reg_1420_pp0_iter3_reg;
reg   [0:0] tmp_13_reg_1420_pp0_iter4_reg;
reg   [0:0] tmp_13_reg_1420_pp0_iter5_reg;
reg   [0:0] tmp_13_reg_1420_pp0_iter6_reg;
reg   [0:0] tmp_14_reg_1425;
reg   [0:0] tmp_14_reg_1425_pp0_iter2_reg;
reg   [0:0] tmp_14_reg_1425_pp0_iter3_reg;
reg   [0:0] tmp_14_reg_1425_pp0_iter4_reg;
reg   [0:0] tmp_14_reg_1425_pp0_iter5_reg;
reg   [0:0] tmp_14_reg_1425_pp0_iter6_reg;
reg   [0:0] tmp_14_reg_1425_pp0_iter7_reg;
wire   [14:0] select_ln99_1_fu_487_p3;
reg   [14:0] select_ln99_1_reg_1430;
wire   [15:0] select_ln99_2_fu_500_p3;
reg   [15:0] select_ln99_2_reg_1436;
wire   [14:0] trunc_ln224_1_fu_506_p1;
reg   [14:0] trunc_ln224_1_reg_1441;
wire   [14:0] select_ln99_3_fu_518_p3;
reg   [14:0] select_ln99_3_reg_1446;
wire   [15:0] select_ln99_4_fu_529_p3;
reg   [15:0] select_ln99_4_reg_1452;
wire   [14:0] trunc_ln224_2_fu_535_p1;
reg   [14:0] trunc_ln224_2_reg_1457;
wire   [14:0] select_ln99_5_fu_547_p3;
reg   [14:0] select_ln99_5_reg_1462;
wire   [15:0] select_ln99_6_fu_558_p3;
reg   [15:0] select_ln99_6_reg_1468;
wire   [14:0] trunc_ln224_3_fu_564_p1;
reg   [14:0] trunc_ln224_3_reg_1473;
wire   [14:0] select_ln99_7_fu_576_p3;
reg   [14:0] select_ln99_7_reg_1478;
wire   [15:0] select_ln99_8_fu_587_p3;
reg   [15:0] select_ln99_8_reg_1484;
wire   [14:0] trunc_ln224_4_fu_593_p1;
reg   [14:0] trunc_ln224_4_reg_1489;
wire   [14:0] select_ln99_9_fu_605_p3;
reg   [14:0] select_ln99_9_reg_1494;
wire   [15:0] select_ln99_10_fu_616_p3;
reg   [15:0] select_ln99_10_reg_1500;
wire   [14:0] trunc_ln224_5_fu_622_p1;
reg   [14:0] trunc_ln224_5_reg_1505;
wire   [14:0] select_ln99_11_fu_634_p3;
reg   [14:0] select_ln99_11_reg_1510;
wire   [15:0] select_ln99_12_fu_645_p3;
reg   [15:0] select_ln99_12_reg_1516;
wire   [14:0] trunc_ln224_6_fu_651_p1;
reg   [14:0] trunc_ln224_6_reg_1521;
wire   [14:0] select_ln99_13_fu_663_p3;
reg   [14:0] select_ln99_13_reg_1526;
wire   [15:0] select_ln99_14_fu_674_p3;
reg   [15:0] select_ln99_14_reg_1532;
wire   [14:0] trunc_ln224_7_fu_680_p1;
reg   [14:0] trunc_ln224_7_reg_1537;
wire   [14:0] abs_max_fu_692_p3;
reg   [14:0] abs_max_reg_1542;
reg   [0:0] tmp_15_reg_1548;
wire   [0:0] tmp_15_reg_1548_pp0_iter10_reg;
reg   [0:0] tmp_16_reg_1552;
wire   [0:0] tmp_16_reg_1552_pp0_iter10_reg;
reg   [0:0] tmp_17_reg_1556;
wire   [0:0] tmp_17_reg_1556_pp0_iter10_reg;
reg   [0:0] tmp_18_reg_1560;
wire   [0:0] tmp_18_reg_1560_pp0_iter10_reg;
reg   [0:0] tmp_19_reg_1564;
wire   [0:0] tmp_19_reg_1564_pp0_iter10_reg;
reg   [0:0] tmp_20_reg_1568;
wire   [0:0] tmp_20_reg_1568_pp0_iter10_reg;
reg   [0:0] tmp_21_reg_1572;
wire   [0:0] tmp_21_reg_1572_pp0_iter10_reg;
reg   [0:0] tmp_22_reg_1576;
wire   [0:0] tmp_22_reg_1576_pp0_iter10_reg;
reg   [0:0] tmp_23_reg_1580;
wire   [0:0] tmp_23_reg_1580_pp0_iter10_reg;
reg   [0:0] tmp_24_reg_1584;
wire   [0:0] tmp_24_reg_1584_pp0_iter10_reg;
reg   [0:0] tmp_25_reg_1588;
wire   [0:0] tmp_25_reg_1588_pp0_iter10_reg;
reg   [0:0] tmp_26_reg_1592;
wire   [0:0] tmp_26_reg_1592_pp0_iter10_reg;
reg   [0:0] tmp_27_reg_1596;
wire   [0:0] tmp_27_reg_1596_pp0_iter10_reg;
reg   [0:0] tmp_28_reg_1600;
wire   [0:0] tmp_28_reg_1600_pp0_iter10_reg;
wire   [0:0] trunc_ln16_fu_828_p1;
reg   [0:0] trunc_ln16_reg_1604;
wire   [3:0] s_val_fu_852_p3;
reg   [3:0] s_val_reg_1609;
reg   [3:0] s_val_reg_1609_pp0_iter12_reg;
reg   [3:0] s_val_reg_1609_pp0_iter13_reg;
reg   [3:0] s_val_reg_1609_pp0_iter14_reg;
wire   [2:0] trunc_ln117_fu_860_p1;
reg   [2:0] trunc_ln117_reg_1615;
wire   [0:0] icmp_ln118_fu_864_p2;
reg   [0:0] icmp_ln118_reg_1620;
wire   [0:0] icmp_ln118_reg_1620_pp0_iter12_reg;
wire   [15:0] ashr_ln119_fu_878_p2;
reg   [15:0] ashr_ln119_reg_1624;
wire   [15:0] ashr_ln119_1_fu_883_p2;
reg   [15:0] ashr_ln119_1_reg_1629;
wire   [15:0] ashr_ln119_2_fu_888_p2;
reg   [15:0] ashr_ln119_2_reg_1634;
wire   [15:0] ashr_ln119_3_fu_893_p2;
reg   [15:0] ashr_ln119_3_reg_1639;
wire   [15:0] ashr_ln119_4_fu_898_p2;
reg   [15:0] ashr_ln119_4_reg_1644;
wire   [15:0] ashr_ln119_5_fu_903_p2;
reg   [15:0] ashr_ln119_5_reg_1649;
wire   [15:0] ashr_ln119_6_fu_908_p2;
reg   [15:0] ashr_ln119_6_reg_1654;
wire   [15:0] ashr_ln119_7_fu_913_p2;
reg   [15:0] ashr_ln119_7_reg_1659;
wire  signed [15:0] sext_ln121_fu_933_p1;
wire  signed [15:0] sext_ln121_1_fu_952_p1;
wire  signed [15:0] sext_ln121_2_fu_971_p1;
wire  signed [15:0] sext_ln121_3_fu_990_p1;
wire  signed [15:0] sext_ln121_4_fu_1009_p1;
wire  signed [15:0] sext_ln121_5_fu_1028_p1;
wire  signed [15:0] sext_ln121_6_fu_1047_p1;
wire  signed [15:0] sext_ln121_7_fu_1066_p1;
wire   [7:0] select_ln123_fu_1090_p3;
reg   [7:0] select_ln123_reg_1704;
wire   [7:0] select_ln123_1_fu_1118_p3;
reg   [7:0] select_ln123_1_reg_1709;
wire   [7:0] select_ln123_2_fu_1166_p3;
reg   [7:0] select_ln123_2_reg_1714;
wire   [7:0] select_ln123_3_fu_1214_p3;
reg   [7:0] select_ln123_3_reg_1719;
wire   [7:0] select_ln123_4_fu_1262_p3;
reg   [7:0] select_ln123_4_reg_1724;
wire   [7:0] select_ln123_5_fu_1270_p3;
reg   [7:0] select_ln123_5_reg_1729;
wire   [7:0] select_ln123_6_fu_1278_p3;
reg   [7:0] select_ln123_6_reg_1734;
wire   [7:0] select_ln123_7_fu_1286_p3;
reg   [7:0] select_ln123_7_reg_1739;
reg   [4:0] ap_phi_mux_s_val_1_phi_fu_185_p30;
wire   [4:0] ap_phi_reg_pp0_iter11_s_val_1_reg_182;
wire   [4:0] select_ln16_fu_832_p3;
wire   [15:0] ap_phi_reg_pp0_iter0_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter1_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter2_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter3_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter4_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter5_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter6_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter7_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter8_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter9_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter10_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter11_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter12_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter13_q_val_reg_231;
reg   [15:0] ap_phi_reg_pp0_iter14_q_val_reg_231;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_reg_240;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_reg_240;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_39_reg_249;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_39_reg_249;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_40_reg_258;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_40_reg_258;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_41_reg_267;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_41_reg_267;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_42_reg_276;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_42_reg_276;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_43_reg_285;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_43_reg_285;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter3_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter4_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter5_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter6_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter7_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter8_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter9_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter10_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter11_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter12_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter13_empty_44_reg_294;
reg   [15:0] ap_phi_reg_pp0_iter14_empty_44_reg_294;
reg   [11:0] indvar_flatten10_fu_158;
wire   [11:0] add_ln61_fu_317_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_indvar_flatten10_load;
wire   [15:0] select_ln99_fu_472_p3;
wire   [0:0] icmp_ln224_fu_481_p2;
wire   [14:0] trunc_ln224_fu_477_p1;
wire   [15:0] sub_ln99_1_fu_495_p2;
wire   [15:0] zext_ln99_fu_510_p1;
wire   [0:0] icmp_ln224_2_fu_513_p2;
wire   [15:0] sub_ln99_2_fu_524_p2;
wire   [15:0] zext_ln99_1_fu_539_p1;
wire   [0:0] icmp_ln224_3_fu_542_p2;
wire   [15:0] sub_ln99_3_fu_553_p2;
wire   [15:0] zext_ln99_2_fu_568_p1;
wire   [0:0] icmp_ln224_4_fu_571_p2;
wire   [15:0] sub_ln99_4_fu_582_p2;
wire   [15:0] zext_ln99_3_fu_597_p1;
wire   [0:0] icmp_ln224_5_fu_600_p2;
wire   [15:0] sub_ln99_5_fu_611_p2;
wire   [15:0] zext_ln99_4_fu_626_p1;
wire   [0:0] icmp_ln224_6_fu_629_p2;
wire   [15:0] sub_ln99_6_fu_640_p2;
wire   [15:0] zext_ln99_5_fu_655_p1;
wire   [0:0] icmp_ln224_7_fu_658_p2;
wire   [15:0] sub_ln99_7_fu_669_p2;
wire   [15:0] zext_ln99_6_fu_684_p1;
wire   [0:0] icmp_ln224_8_fu_687_p2;
wire   [0:0] icmp_ln12_fu_698_p2;
wire   [14:0] x_1_fu_703_p2;
wire   [14:0] x_2_fu_708_p3;
wire   [0:0] tmp_29_fu_840_p3;
wire   [3:0] trunc_ln108_fu_848_p1;
wire   [2:0] add_ln119_fu_869_p2;
wire   [15:0] zext_ln119_fu_874_p1;
wire   [15:0] add_ln120_fu_918_p2;
wire   [14:0] trunc_ln8_fu_923_p4;
wire   [15:0] add_ln120_1_fu_937_p2;
wire   [14:0] trunc_ln121_1_fu_942_p4;
wire   [15:0] add_ln120_2_fu_956_p2;
wire   [14:0] trunc_ln121_2_fu_961_p4;
wire   [15:0] add_ln120_3_fu_975_p2;
wire   [14:0] trunc_ln121_3_fu_980_p4;
wire   [15:0] add_ln120_4_fu_994_p2;
wire   [14:0] trunc_ln121_4_fu_999_p4;
wire   [15:0] add_ln120_5_fu_1013_p2;
wire   [14:0] trunc_ln121_5_fu_1018_p4;
wire   [15:0] add_ln120_6_fu_1032_p2;
wire   [14:0] trunc_ln121_6_fu_1037_p4;
wire   [15:0] add_ln120_7_fu_1051_p2;
wire   [14:0] trunc_ln121_7_fu_1056_p4;
wire   [8:0] tmp_30_fu_1070_p4;
wire   [0:0] icmp_ln200_fu_1080_p2;
wire   [7:0] trunc_ln123_fu_1086_p1;
wire   [8:0] tmp_31_fu_1098_p4;
wire   [0:0] icmp_ln200_1_fu_1108_p2;
wire   [7:0] trunc_ln123_1_fu_1114_p1;
wire   [8:0] tmp_32_fu_1126_p4;
wire   [8:0] tmp_33_fu_1146_p4;
wire   [0:0] icmp_ln200_3_fu_1156_p2;
wire   [7:0] trunc_ln123_3_fu_1162_p1;
wire   [8:0] tmp_34_fu_1174_p4;
wire   [8:0] tmp_35_fu_1194_p4;
wire   [0:0] icmp_ln200_5_fu_1204_p2;
wire   [7:0] trunc_ln123_5_fu_1210_p1;
wire   [8:0] tmp_36_fu_1222_p4;
wire   [8:0] tmp_37_fu_1242_p4;
wire   [0:0] icmp_ln200_7_fu_1252_p2;
wire   [7:0] trunc_ln123_7_fu_1258_p1;
wire   [0:0] icmp_ln200_2_fu_1136_p2;
wire   [7:0] trunc_ln123_2_fu_1142_p1;
wire   [0:0] icmp_ln200_4_fu_1184_p2;
wire   [7:0] trunc_ln123_4_fu_1190_p1;
wire   [0:0] icmp_ln200_6_fu_1232_p2;
wire   [7:0] trunc_ln123_6_fu_1238_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
reg    ap_ST_iter15_fsm_state16_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_1825;
reg    ap_condition_1830;
reg    ap_condition_1836;
reg    ap_condition_1843;
reg    ap_condition_1851;
reg    ap_condition_1860;
reg    ap_condition_1870;
reg    ap_condition_1881;
reg    ap_condition_1893;
reg    ap_condition_1906;
reg    ap_condition_1920;
reg    ap_condition_1935;
reg    ap_condition_1950;
reg    ap_condition_322;
reg    ap_condition_324;
reg    ap_condition_259;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten10_fu_158 = 12'd0;
end

SOFTMAX_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter15_fsm_state16) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter15_fsm_state16) & (ap_loop_exit_ready_pp0_iter14_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_39_reg_249 <= trunc_ln67_4_reg_1353_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_39_reg_249 <= ap_phi_reg_pp0_iter12_empty_39_reg_249;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_40_reg_258 <= trunc_ln67_2_reg_1337_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_40_reg_258 <= ap_phi_reg_pp0_iter12_empty_40_reg_258;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_41_reg_267 <= trunc_ln67_reg_1322_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_41_reg_267 <= ap_phi_reg_pp0_iter12_empty_41_reg_267;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_42_reg_276 <= trunc_ln67_1_reg_1329_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_42_reg_276 <= ap_phi_reg_pp0_iter12_empty_42_reg_276;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_43_reg_285 <= trunc_ln67_3_reg_1345_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_43_reg_285 <= ap_phi_reg_pp0_iter12_empty_43_reg_285;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_44_reg_294 <= trunc_ln67_5_reg_1361_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_44_reg_294 <= ap_phi_reg_pp0_iter12_empty_44_reg_294;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_empty_reg_240 <= trunc_ln67_6_reg_1369_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_reg_240 <= ap_phi_reg_pp0_iter12_empty_reg_240;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_322)) begin
        if (((icmp_ln118_fu_864_p2 == 1'd1) & (icmp_ln61_reg_1318_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_q_val_reg_231 <= trunc_ln67_7_reg_1377_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_q_val_reg_231 <= ap_phi_reg_pp0_iter12_q_val_reg_231;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_39_reg_249 <= sext_ln121_4_fu_1009_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_39_reg_249 <= ap_phi_reg_pp0_iter13_empty_39_reg_249;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_40_reg_258 <= sext_ln121_2_fu_971_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_40_reg_258 <= ap_phi_reg_pp0_iter13_empty_40_reg_258;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_41_reg_267 <= sext_ln121_fu_933_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_41_reg_267 <= ap_phi_reg_pp0_iter13_empty_41_reg_267;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_42_reg_276 <= sext_ln121_1_fu_952_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_42_reg_276 <= ap_phi_reg_pp0_iter13_empty_42_reg_276;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_43_reg_285 <= sext_ln121_3_fu_990_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_43_reg_285 <= ap_phi_reg_pp0_iter13_empty_43_reg_285;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_44_reg_294 <= sext_ln121_5_fu_1028_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_44_reg_294 <= ap_phi_reg_pp0_iter13_empty_44_reg_294;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_reg_240 <= sext_ln121_6_fu_1047_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_reg_240 <= ap_phi_reg_pp0_iter13_empty_reg_240;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln118_reg_1620_pp0_iter12_reg == 1'd0) & (icmp_ln61_reg_1318_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_q_val_reg_231 <= sext_ln121_7_fu_1066_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_q_val_reg_231 <= ap_phi_reg_pp0_iter13_q_val_reg_231;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_259)) begin
        if ((icmp_ln61_fu_311_p2 == 1'd0)) begin
            indvar_flatten10_fu_158 <= add_ln61_fu_317_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_158 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        abs_max_reg_1542 <= abs_max_fu_692_p3;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_phi_reg_pp0_iter10_empty_39_reg_249 <= ap_phi_reg_pp0_iter9_empty_39_reg_249;
        ap_phi_reg_pp0_iter10_empty_40_reg_258 <= ap_phi_reg_pp0_iter9_empty_40_reg_258;
        ap_phi_reg_pp0_iter10_empty_41_reg_267 <= ap_phi_reg_pp0_iter9_empty_41_reg_267;
        ap_phi_reg_pp0_iter10_empty_42_reg_276 <= ap_phi_reg_pp0_iter9_empty_42_reg_276;
        ap_phi_reg_pp0_iter10_empty_43_reg_285 <= ap_phi_reg_pp0_iter9_empty_43_reg_285;
        ap_phi_reg_pp0_iter10_empty_44_reg_294 <= ap_phi_reg_pp0_iter9_empty_44_reg_294;
        ap_phi_reg_pp0_iter10_empty_reg_240 <= ap_phi_reg_pp0_iter9_empty_reg_240;
        ap_phi_reg_pp0_iter10_q_val_reg_231 <= ap_phi_reg_pp0_iter9_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter9_reg <= icmp_ln61_reg_1318_pp0_iter8_reg;
        trunc_ln67_1_reg_1329_pp0_iter9_reg <= trunc_ln67_1_reg_1329_pp0_iter8_reg;
        trunc_ln67_2_reg_1337_pp0_iter9_reg <= trunc_ln67_2_reg_1337_pp0_iter8_reg;
        trunc_ln67_3_reg_1345_pp0_iter9_reg <= trunc_ln67_3_reg_1345_pp0_iter8_reg;
        trunc_ln67_4_reg_1353_pp0_iter9_reg <= trunc_ln67_4_reg_1353_pp0_iter8_reg;
        trunc_ln67_5_reg_1361_pp0_iter9_reg <= trunc_ln67_5_reg_1361_pp0_iter8_reg;
        trunc_ln67_6_reg_1369_pp0_iter9_reg <= trunc_ln67_6_reg_1369_pp0_iter8_reg;
        trunc_ln67_7_reg_1377_pp0_iter9_reg <= trunc_ln67_7_reg_1377_pp0_iter8_reg;
        trunc_ln67_reg_1322_pp0_iter9_reg <= trunc_ln67_reg_1322_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_phi_reg_pp0_iter11_empty_39_reg_249 <= ap_phi_reg_pp0_iter10_empty_39_reg_249;
        ap_phi_reg_pp0_iter11_empty_40_reg_258 <= ap_phi_reg_pp0_iter10_empty_40_reg_258;
        ap_phi_reg_pp0_iter11_empty_41_reg_267 <= ap_phi_reg_pp0_iter10_empty_41_reg_267;
        ap_phi_reg_pp0_iter11_empty_42_reg_276 <= ap_phi_reg_pp0_iter10_empty_42_reg_276;
        ap_phi_reg_pp0_iter11_empty_43_reg_285 <= ap_phi_reg_pp0_iter10_empty_43_reg_285;
        ap_phi_reg_pp0_iter11_empty_44_reg_294 <= ap_phi_reg_pp0_iter10_empty_44_reg_294;
        ap_phi_reg_pp0_iter11_empty_reg_240 <= ap_phi_reg_pp0_iter10_empty_reg_240;
        ap_phi_reg_pp0_iter11_q_val_reg_231 <= ap_phi_reg_pp0_iter10_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter10_reg <= icmp_ln61_reg_1318_pp0_iter9_reg;
        tmp_15_reg_1548 <= x_2_fu_708_p3[32'd14];
        tmp_16_reg_1552 <= x_2_fu_708_p3[32'd13];
        tmp_17_reg_1556 <= x_2_fu_708_p3[32'd12];
        tmp_18_reg_1560 <= x_2_fu_708_p3[32'd11];
        tmp_19_reg_1564 <= x_2_fu_708_p3[32'd10];
        tmp_20_reg_1568 <= x_2_fu_708_p3[32'd9];
        tmp_21_reg_1572 <= x_2_fu_708_p3[32'd8];
        tmp_22_reg_1576 <= x_2_fu_708_p3[32'd7];
        tmp_23_reg_1580 <= x_2_fu_708_p3[32'd6];
        tmp_24_reg_1584 <= x_2_fu_708_p3[32'd5];
        tmp_25_reg_1588 <= x_2_fu_708_p3[32'd4];
        tmp_26_reg_1592 <= x_2_fu_708_p3[32'd3];
        tmp_27_reg_1596 <= x_2_fu_708_p3[32'd2];
        tmp_28_reg_1600 <= x_2_fu_708_p3[32'd1];
        trunc_ln16_reg_1604 <= trunc_ln16_fu_828_p1;
        trunc_ln67_1_reg_1329_pp0_iter10_reg <= trunc_ln67_1_reg_1329_pp0_iter9_reg;
        trunc_ln67_2_reg_1337_pp0_iter10_reg <= trunc_ln67_2_reg_1337_pp0_iter9_reg;
        trunc_ln67_3_reg_1345_pp0_iter10_reg <= trunc_ln67_3_reg_1345_pp0_iter9_reg;
        trunc_ln67_4_reg_1353_pp0_iter10_reg <= trunc_ln67_4_reg_1353_pp0_iter9_reg;
        trunc_ln67_5_reg_1361_pp0_iter10_reg <= trunc_ln67_5_reg_1361_pp0_iter9_reg;
        trunc_ln67_6_reg_1369_pp0_iter10_reg <= trunc_ln67_6_reg_1369_pp0_iter9_reg;
        trunc_ln67_7_reg_1377_pp0_iter10_reg <= trunc_ln67_7_reg_1377_pp0_iter9_reg;
        trunc_ln67_reg_1322_pp0_iter10_reg <= trunc_ln67_reg_1322_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_phi_reg_pp0_iter12_empty_39_reg_249 <= ap_phi_reg_pp0_iter11_empty_39_reg_249;
        ap_phi_reg_pp0_iter12_empty_40_reg_258 <= ap_phi_reg_pp0_iter11_empty_40_reg_258;
        ap_phi_reg_pp0_iter12_empty_41_reg_267 <= ap_phi_reg_pp0_iter11_empty_41_reg_267;
        ap_phi_reg_pp0_iter12_empty_42_reg_276 <= ap_phi_reg_pp0_iter11_empty_42_reg_276;
        ap_phi_reg_pp0_iter12_empty_43_reg_285 <= ap_phi_reg_pp0_iter11_empty_43_reg_285;
        ap_phi_reg_pp0_iter12_empty_44_reg_294 <= ap_phi_reg_pp0_iter11_empty_44_reg_294;
        ap_phi_reg_pp0_iter12_empty_reg_240 <= ap_phi_reg_pp0_iter11_empty_reg_240;
        ap_phi_reg_pp0_iter12_q_val_reg_231 <= ap_phi_reg_pp0_iter11_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter11_reg <= icmp_ln61_reg_1318_pp0_iter10_reg;
        s_val_reg_1609 <= s_val_fu_852_p3;
        trunc_ln117_reg_1615 <= trunc_ln117_fu_860_p1;
        trunc_ln67_1_reg_1329_pp0_iter11_reg <= trunc_ln67_1_reg_1329_pp0_iter10_reg;
        trunc_ln67_2_reg_1337_pp0_iter11_reg <= trunc_ln67_2_reg_1337_pp0_iter10_reg;
        trunc_ln67_3_reg_1345_pp0_iter11_reg <= trunc_ln67_3_reg_1345_pp0_iter10_reg;
        trunc_ln67_4_reg_1353_pp0_iter11_reg <= trunc_ln67_4_reg_1353_pp0_iter10_reg;
        trunc_ln67_5_reg_1361_pp0_iter11_reg <= trunc_ln67_5_reg_1361_pp0_iter10_reg;
        trunc_ln67_6_reg_1369_pp0_iter11_reg <= trunc_ln67_6_reg_1369_pp0_iter10_reg;
        trunc_ln67_7_reg_1377_pp0_iter11_reg <= trunc_ln67_7_reg_1377_pp0_iter10_reg;
        trunc_ln67_reg_1322_pp0_iter11_reg <= trunc_ln67_reg_1322_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ashr_ln119_1_reg_1629 <= ashr_ln119_1_fu_883_p2;
        ashr_ln119_2_reg_1634 <= ashr_ln119_2_fu_888_p2;
        ashr_ln119_3_reg_1639 <= ashr_ln119_3_fu_893_p2;
        ashr_ln119_4_reg_1644 <= ashr_ln119_4_fu_898_p2;
        ashr_ln119_5_reg_1649 <= ashr_ln119_5_fu_903_p2;
        ashr_ln119_6_reg_1654 <= ashr_ln119_6_fu_908_p2;
        ashr_ln119_7_reg_1659 <= ashr_ln119_7_fu_913_p2;
        ashr_ln119_reg_1624 <= ashr_ln119_fu_878_p2;
        icmp_ln118_reg_1620 <= icmp_ln118_fu_864_p2;
        icmp_ln61_reg_1318_pp0_iter12_reg <= icmp_ln61_reg_1318_pp0_iter11_reg;
        s_val_reg_1609_pp0_iter12_reg <= s_val_reg_1609;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        icmp_ln61_reg_1318_pp0_iter13_reg <= icmp_ln61_reg_1318_pp0_iter12_reg;
        s_val_reg_1609_pp0_iter13_reg <= s_val_reg_1609_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_empty_39_reg_249 <= ap_phi_reg_pp0_iter0_empty_39_reg_249;
        ap_phi_reg_pp0_iter1_empty_40_reg_258 <= ap_phi_reg_pp0_iter0_empty_40_reg_258;
        ap_phi_reg_pp0_iter1_empty_41_reg_267 <= ap_phi_reg_pp0_iter0_empty_41_reg_267;
        ap_phi_reg_pp0_iter1_empty_42_reg_276 <= ap_phi_reg_pp0_iter0_empty_42_reg_276;
        ap_phi_reg_pp0_iter1_empty_43_reg_285 <= ap_phi_reg_pp0_iter0_empty_43_reg_285;
        ap_phi_reg_pp0_iter1_empty_44_reg_294 <= ap_phi_reg_pp0_iter0_empty_44_reg_294;
        ap_phi_reg_pp0_iter1_empty_reg_240 <= ap_phi_reg_pp0_iter0_empty_reg_240;
        ap_phi_reg_pp0_iter1_q_val_reg_231 <= ap_phi_reg_pp0_iter0_q_val_reg_231;
        icmp_ln61_reg_1318 <= icmp_ln61_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_empty_39_reg_249 <= ap_phi_reg_pp0_iter1_empty_39_reg_249;
        ap_phi_reg_pp0_iter2_empty_40_reg_258 <= ap_phi_reg_pp0_iter1_empty_40_reg_258;
        ap_phi_reg_pp0_iter2_empty_41_reg_267 <= ap_phi_reg_pp0_iter1_empty_41_reg_267;
        ap_phi_reg_pp0_iter2_empty_42_reg_276 <= ap_phi_reg_pp0_iter1_empty_42_reg_276;
        ap_phi_reg_pp0_iter2_empty_43_reg_285 <= ap_phi_reg_pp0_iter1_empty_43_reg_285;
        ap_phi_reg_pp0_iter2_empty_44_reg_294 <= ap_phi_reg_pp0_iter1_empty_44_reg_294;
        ap_phi_reg_pp0_iter2_empty_reg_240 <= ap_phi_reg_pp0_iter1_empty_reg_240;
        ap_phi_reg_pp0_iter2_q_val_reg_231 <= ap_phi_reg_pp0_iter1_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter1_reg <= icmp_ln61_reg_1318;
        sub_ln99_reg_1385 <= sub_ln99_fu_402_p2;
        tmp_10_reg_1405 <= softmax_stream_dout[32'd63];
        tmp_11_reg_1410 <= softmax_stream_dout[32'd79];
        tmp_12_reg_1415 <= softmax_stream_dout[32'd95];
        tmp_13_reg_1420 <= softmax_stream_dout[32'd111];
        tmp_14_reg_1425 <= softmax_stream_dout[32'd127];
        tmp_8_reg_1395 <= softmax_stream_dout[32'd31];
        tmp_9_reg_1400 <= softmax_stream_dout[32'd47];
        tmp_reg_1390 <= softmax_stream_dout[32'd15];
        trunc_ln67_1_reg_1329 <= {{softmax_stream_dout[31:16]}};
        trunc_ln67_2_reg_1337 <= {{softmax_stream_dout[47:32]}};
        trunc_ln67_3_reg_1345 <= {{softmax_stream_dout[63:48]}};
        trunc_ln67_4_reg_1353 <= {{softmax_stream_dout[79:64]}};
        trunc_ln67_5_reg_1361 <= {{softmax_stream_dout[95:80]}};
        trunc_ln67_6_reg_1369 <= {{softmax_stream_dout[111:96]}};
        trunc_ln67_7_reg_1377 <= {{softmax_stream_dout[127:112]}};
        trunc_ln67_reg_1322 <= trunc_ln67_fu_328_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_phi_reg_pp0_iter3_empty_39_reg_249 <= ap_phi_reg_pp0_iter2_empty_39_reg_249;
        ap_phi_reg_pp0_iter3_empty_40_reg_258 <= ap_phi_reg_pp0_iter2_empty_40_reg_258;
        ap_phi_reg_pp0_iter3_empty_41_reg_267 <= ap_phi_reg_pp0_iter2_empty_41_reg_267;
        ap_phi_reg_pp0_iter3_empty_42_reg_276 <= ap_phi_reg_pp0_iter2_empty_42_reg_276;
        ap_phi_reg_pp0_iter3_empty_43_reg_285 <= ap_phi_reg_pp0_iter2_empty_43_reg_285;
        ap_phi_reg_pp0_iter3_empty_44_reg_294 <= ap_phi_reg_pp0_iter2_empty_44_reg_294;
        ap_phi_reg_pp0_iter3_empty_reg_240 <= ap_phi_reg_pp0_iter2_empty_reg_240;
        ap_phi_reg_pp0_iter3_q_val_reg_231 <= ap_phi_reg_pp0_iter2_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter2_reg <= icmp_ln61_reg_1318_pp0_iter1_reg;
        select_ln99_1_reg_1430 <= select_ln99_1_fu_487_p3;
        select_ln99_2_reg_1436 <= select_ln99_2_fu_500_p3;
        tmp_10_reg_1405_pp0_iter2_reg <= tmp_10_reg_1405;
        tmp_11_reg_1410_pp0_iter2_reg <= tmp_11_reg_1410;
        tmp_12_reg_1415_pp0_iter2_reg <= tmp_12_reg_1415;
        tmp_13_reg_1420_pp0_iter2_reg <= tmp_13_reg_1420;
        tmp_14_reg_1425_pp0_iter2_reg <= tmp_14_reg_1425;
        tmp_9_reg_1400_pp0_iter2_reg <= tmp_9_reg_1400;
        trunc_ln224_1_reg_1441 <= trunc_ln224_1_fu_506_p1;
        trunc_ln67_1_reg_1329_pp0_iter2_reg <= trunc_ln67_1_reg_1329;
        trunc_ln67_2_reg_1337_pp0_iter2_reg <= trunc_ln67_2_reg_1337;
        trunc_ln67_3_reg_1345_pp0_iter2_reg <= trunc_ln67_3_reg_1345;
        trunc_ln67_4_reg_1353_pp0_iter2_reg <= trunc_ln67_4_reg_1353;
        trunc_ln67_5_reg_1361_pp0_iter2_reg <= trunc_ln67_5_reg_1361;
        trunc_ln67_6_reg_1369_pp0_iter2_reg <= trunc_ln67_6_reg_1369;
        trunc_ln67_7_reg_1377_pp0_iter2_reg <= trunc_ln67_7_reg_1377;
        trunc_ln67_reg_1322_pp0_iter2_reg <= trunc_ln67_reg_1322;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_phi_reg_pp0_iter4_empty_39_reg_249 <= ap_phi_reg_pp0_iter3_empty_39_reg_249;
        ap_phi_reg_pp0_iter4_empty_40_reg_258 <= ap_phi_reg_pp0_iter3_empty_40_reg_258;
        ap_phi_reg_pp0_iter4_empty_41_reg_267 <= ap_phi_reg_pp0_iter3_empty_41_reg_267;
        ap_phi_reg_pp0_iter4_empty_42_reg_276 <= ap_phi_reg_pp0_iter3_empty_42_reg_276;
        ap_phi_reg_pp0_iter4_empty_43_reg_285 <= ap_phi_reg_pp0_iter3_empty_43_reg_285;
        ap_phi_reg_pp0_iter4_empty_44_reg_294 <= ap_phi_reg_pp0_iter3_empty_44_reg_294;
        ap_phi_reg_pp0_iter4_empty_reg_240 <= ap_phi_reg_pp0_iter3_empty_reg_240;
        ap_phi_reg_pp0_iter4_q_val_reg_231 <= ap_phi_reg_pp0_iter3_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter3_reg <= icmp_ln61_reg_1318_pp0_iter2_reg;
        select_ln99_3_reg_1446 <= select_ln99_3_fu_518_p3;
        select_ln99_4_reg_1452 <= select_ln99_4_fu_529_p3;
        tmp_10_reg_1405_pp0_iter3_reg <= tmp_10_reg_1405_pp0_iter2_reg;
        tmp_11_reg_1410_pp0_iter3_reg <= tmp_11_reg_1410_pp0_iter2_reg;
        tmp_12_reg_1415_pp0_iter3_reg <= tmp_12_reg_1415_pp0_iter2_reg;
        tmp_13_reg_1420_pp0_iter3_reg <= tmp_13_reg_1420_pp0_iter2_reg;
        tmp_14_reg_1425_pp0_iter3_reg <= tmp_14_reg_1425_pp0_iter2_reg;
        trunc_ln224_2_reg_1457 <= trunc_ln224_2_fu_535_p1;
        trunc_ln67_1_reg_1329_pp0_iter3_reg <= trunc_ln67_1_reg_1329_pp0_iter2_reg;
        trunc_ln67_2_reg_1337_pp0_iter3_reg <= trunc_ln67_2_reg_1337_pp0_iter2_reg;
        trunc_ln67_3_reg_1345_pp0_iter3_reg <= trunc_ln67_3_reg_1345_pp0_iter2_reg;
        trunc_ln67_4_reg_1353_pp0_iter3_reg <= trunc_ln67_4_reg_1353_pp0_iter2_reg;
        trunc_ln67_5_reg_1361_pp0_iter3_reg <= trunc_ln67_5_reg_1361_pp0_iter2_reg;
        trunc_ln67_6_reg_1369_pp0_iter3_reg <= trunc_ln67_6_reg_1369_pp0_iter2_reg;
        trunc_ln67_7_reg_1377_pp0_iter3_reg <= trunc_ln67_7_reg_1377_pp0_iter2_reg;
        trunc_ln67_reg_1322_pp0_iter3_reg <= trunc_ln67_reg_1322_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_phi_reg_pp0_iter5_empty_39_reg_249 <= ap_phi_reg_pp0_iter4_empty_39_reg_249;
        ap_phi_reg_pp0_iter5_empty_40_reg_258 <= ap_phi_reg_pp0_iter4_empty_40_reg_258;
        ap_phi_reg_pp0_iter5_empty_41_reg_267 <= ap_phi_reg_pp0_iter4_empty_41_reg_267;
        ap_phi_reg_pp0_iter5_empty_42_reg_276 <= ap_phi_reg_pp0_iter4_empty_42_reg_276;
        ap_phi_reg_pp0_iter5_empty_43_reg_285 <= ap_phi_reg_pp0_iter4_empty_43_reg_285;
        ap_phi_reg_pp0_iter5_empty_44_reg_294 <= ap_phi_reg_pp0_iter4_empty_44_reg_294;
        ap_phi_reg_pp0_iter5_empty_reg_240 <= ap_phi_reg_pp0_iter4_empty_reg_240;
        ap_phi_reg_pp0_iter5_q_val_reg_231 <= ap_phi_reg_pp0_iter4_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter4_reg <= icmp_ln61_reg_1318_pp0_iter3_reg;
        select_ln99_5_reg_1462 <= select_ln99_5_fu_547_p3;
        select_ln99_6_reg_1468 <= select_ln99_6_fu_558_p3;
        tmp_11_reg_1410_pp0_iter4_reg <= tmp_11_reg_1410_pp0_iter3_reg;
        tmp_12_reg_1415_pp0_iter4_reg <= tmp_12_reg_1415_pp0_iter3_reg;
        tmp_13_reg_1420_pp0_iter4_reg <= tmp_13_reg_1420_pp0_iter3_reg;
        tmp_14_reg_1425_pp0_iter4_reg <= tmp_14_reg_1425_pp0_iter3_reg;
        trunc_ln224_3_reg_1473 <= trunc_ln224_3_fu_564_p1;
        trunc_ln67_1_reg_1329_pp0_iter4_reg <= trunc_ln67_1_reg_1329_pp0_iter3_reg;
        trunc_ln67_2_reg_1337_pp0_iter4_reg <= trunc_ln67_2_reg_1337_pp0_iter3_reg;
        trunc_ln67_3_reg_1345_pp0_iter4_reg <= trunc_ln67_3_reg_1345_pp0_iter3_reg;
        trunc_ln67_4_reg_1353_pp0_iter4_reg <= trunc_ln67_4_reg_1353_pp0_iter3_reg;
        trunc_ln67_5_reg_1361_pp0_iter4_reg <= trunc_ln67_5_reg_1361_pp0_iter3_reg;
        trunc_ln67_6_reg_1369_pp0_iter4_reg <= trunc_ln67_6_reg_1369_pp0_iter3_reg;
        trunc_ln67_7_reg_1377_pp0_iter4_reg <= trunc_ln67_7_reg_1377_pp0_iter3_reg;
        trunc_ln67_reg_1322_pp0_iter4_reg <= trunc_ln67_reg_1322_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_phi_reg_pp0_iter6_empty_39_reg_249 <= ap_phi_reg_pp0_iter5_empty_39_reg_249;
        ap_phi_reg_pp0_iter6_empty_40_reg_258 <= ap_phi_reg_pp0_iter5_empty_40_reg_258;
        ap_phi_reg_pp0_iter6_empty_41_reg_267 <= ap_phi_reg_pp0_iter5_empty_41_reg_267;
        ap_phi_reg_pp0_iter6_empty_42_reg_276 <= ap_phi_reg_pp0_iter5_empty_42_reg_276;
        ap_phi_reg_pp0_iter6_empty_43_reg_285 <= ap_phi_reg_pp0_iter5_empty_43_reg_285;
        ap_phi_reg_pp0_iter6_empty_44_reg_294 <= ap_phi_reg_pp0_iter5_empty_44_reg_294;
        ap_phi_reg_pp0_iter6_empty_reg_240 <= ap_phi_reg_pp0_iter5_empty_reg_240;
        ap_phi_reg_pp0_iter6_q_val_reg_231 <= ap_phi_reg_pp0_iter5_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter5_reg <= icmp_ln61_reg_1318_pp0_iter4_reg;
        select_ln99_7_reg_1478 <= select_ln99_7_fu_576_p3;
        select_ln99_8_reg_1484 <= select_ln99_8_fu_587_p3;
        tmp_12_reg_1415_pp0_iter5_reg <= tmp_12_reg_1415_pp0_iter4_reg;
        tmp_13_reg_1420_pp0_iter5_reg <= tmp_13_reg_1420_pp0_iter4_reg;
        tmp_14_reg_1425_pp0_iter5_reg <= tmp_14_reg_1425_pp0_iter4_reg;
        trunc_ln224_4_reg_1489 <= trunc_ln224_4_fu_593_p1;
        trunc_ln67_1_reg_1329_pp0_iter5_reg <= trunc_ln67_1_reg_1329_pp0_iter4_reg;
        trunc_ln67_2_reg_1337_pp0_iter5_reg <= trunc_ln67_2_reg_1337_pp0_iter4_reg;
        trunc_ln67_3_reg_1345_pp0_iter5_reg <= trunc_ln67_3_reg_1345_pp0_iter4_reg;
        trunc_ln67_4_reg_1353_pp0_iter5_reg <= trunc_ln67_4_reg_1353_pp0_iter4_reg;
        trunc_ln67_5_reg_1361_pp0_iter5_reg <= trunc_ln67_5_reg_1361_pp0_iter4_reg;
        trunc_ln67_6_reg_1369_pp0_iter5_reg <= trunc_ln67_6_reg_1369_pp0_iter4_reg;
        trunc_ln67_7_reg_1377_pp0_iter5_reg <= trunc_ln67_7_reg_1377_pp0_iter4_reg;
        trunc_ln67_reg_1322_pp0_iter5_reg <= trunc_ln67_reg_1322_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_phi_reg_pp0_iter7_empty_39_reg_249 <= ap_phi_reg_pp0_iter6_empty_39_reg_249;
        ap_phi_reg_pp0_iter7_empty_40_reg_258 <= ap_phi_reg_pp0_iter6_empty_40_reg_258;
        ap_phi_reg_pp0_iter7_empty_41_reg_267 <= ap_phi_reg_pp0_iter6_empty_41_reg_267;
        ap_phi_reg_pp0_iter7_empty_42_reg_276 <= ap_phi_reg_pp0_iter6_empty_42_reg_276;
        ap_phi_reg_pp0_iter7_empty_43_reg_285 <= ap_phi_reg_pp0_iter6_empty_43_reg_285;
        ap_phi_reg_pp0_iter7_empty_44_reg_294 <= ap_phi_reg_pp0_iter6_empty_44_reg_294;
        ap_phi_reg_pp0_iter7_empty_reg_240 <= ap_phi_reg_pp0_iter6_empty_reg_240;
        ap_phi_reg_pp0_iter7_q_val_reg_231 <= ap_phi_reg_pp0_iter6_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter6_reg <= icmp_ln61_reg_1318_pp0_iter5_reg;
        select_ln99_10_reg_1500 <= select_ln99_10_fu_616_p3;
        select_ln99_9_reg_1494 <= select_ln99_9_fu_605_p3;
        tmp_13_reg_1420_pp0_iter6_reg <= tmp_13_reg_1420_pp0_iter5_reg;
        tmp_14_reg_1425_pp0_iter6_reg <= tmp_14_reg_1425_pp0_iter5_reg;
        trunc_ln224_5_reg_1505 <= trunc_ln224_5_fu_622_p1;
        trunc_ln67_1_reg_1329_pp0_iter6_reg <= trunc_ln67_1_reg_1329_pp0_iter5_reg;
        trunc_ln67_2_reg_1337_pp0_iter6_reg <= trunc_ln67_2_reg_1337_pp0_iter5_reg;
        trunc_ln67_3_reg_1345_pp0_iter6_reg <= trunc_ln67_3_reg_1345_pp0_iter5_reg;
        trunc_ln67_4_reg_1353_pp0_iter6_reg <= trunc_ln67_4_reg_1353_pp0_iter5_reg;
        trunc_ln67_5_reg_1361_pp0_iter6_reg <= trunc_ln67_5_reg_1361_pp0_iter5_reg;
        trunc_ln67_6_reg_1369_pp0_iter6_reg <= trunc_ln67_6_reg_1369_pp0_iter5_reg;
        trunc_ln67_7_reg_1377_pp0_iter6_reg <= trunc_ln67_7_reg_1377_pp0_iter5_reg;
        trunc_ln67_reg_1322_pp0_iter6_reg <= trunc_ln67_reg_1322_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_phi_reg_pp0_iter8_empty_39_reg_249 <= ap_phi_reg_pp0_iter7_empty_39_reg_249;
        ap_phi_reg_pp0_iter8_empty_40_reg_258 <= ap_phi_reg_pp0_iter7_empty_40_reg_258;
        ap_phi_reg_pp0_iter8_empty_41_reg_267 <= ap_phi_reg_pp0_iter7_empty_41_reg_267;
        ap_phi_reg_pp0_iter8_empty_42_reg_276 <= ap_phi_reg_pp0_iter7_empty_42_reg_276;
        ap_phi_reg_pp0_iter8_empty_43_reg_285 <= ap_phi_reg_pp0_iter7_empty_43_reg_285;
        ap_phi_reg_pp0_iter8_empty_44_reg_294 <= ap_phi_reg_pp0_iter7_empty_44_reg_294;
        ap_phi_reg_pp0_iter8_empty_reg_240 <= ap_phi_reg_pp0_iter7_empty_reg_240;
        ap_phi_reg_pp0_iter8_q_val_reg_231 <= ap_phi_reg_pp0_iter7_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter7_reg <= icmp_ln61_reg_1318_pp0_iter6_reg;
        select_ln99_11_reg_1510 <= select_ln99_11_fu_634_p3;
        select_ln99_12_reg_1516 <= select_ln99_12_fu_645_p3;
        tmp_14_reg_1425_pp0_iter7_reg <= tmp_14_reg_1425_pp0_iter6_reg;
        trunc_ln224_6_reg_1521 <= trunc_ln224_6_fu_651_p1;
        trunc_ln67_1_reg_1329_pp0_iter7_reg <= trunc_ln67_1_reg_1329_pp0_iter6_reg;
        trunc_ln67_2_reg_1337_pp0_iter7_reg <= trunc_ln67_2_reg_1337_pp0_iter6_reg;
        trunc_ln67_3_reg_1345_pp0_iter7_reg <= trunc_ln67_3_reg_1345_pp0_iter6_reg;
        trunc_ln67_4_reg_1353_pp0_iter7_reg <= trunc_ln67_4_reg_1353_pp0_iter6_reg;
        trunc_ln67_5_reg_1361_pp0_iter7_reg <= trunc_ln67_5_reg_1361_pp0_iter6_reg;
        trunc_ln67_6_reg_1369_pp0_iter7_reg <= trunc_ln67_6_reg_1369_pp0_iter6_reg;
        trunc_ln67_7_reg_1377_pp0_iter7_reg <= trunc_ln67_7_reg_1377_pp0_iter6_reg;
        trunc_ln67_reg_1322_pp0_iter7_reg <= trunc_ln67_reg_1322_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_phi_reg_pp0_iter9_empty_39_reg_249 <= ap_phi_reg_pp0_iter8_empty_39_reg_249;
        ap_phi_reg_pp0_iter9_empty_40_reg_258 <= ap_phi_reg_pp0_iter8_empty_40_reg_258;
        ap_phi_reg_pp0_iter9_empty_41_reg_267 <= ap_phi_reg_pp0_iter8_empty_41_reg_267;
        ap_phi_reg_pp0_iter9_empty_42_reg_276 <= ap_phi_reg_pp0_iter8_empty_42_reg_276;
        ap_phi_reg_pp0_iter9_empty_43_reg_285 <= ap_phi_reg_pp0_iter8_empty_43_reg_285;
        ap_phi_reg_pp0_iter9_empty_44_reg_294 <= ap_phi_reg_pp0_iter8_empty_44_reg_294;
        ap_phi_reg_pp0_iter9_empty_reg_240 <= ap_phi_reg_pp0_iter8_empty_reg_240;
        ap_phi_reg_pp0_iter9_q_val_reg_231 <= ap_phi_reg_pp0_iter8_q_val_reg_231;
        icmp_ln61_reg_1318_pp0_iter8_reg <= icmp_ln61_reg_1318_pp0_iter7_reg;
        select_ln99_13_reg_1526 <= select_ln99_13_fu_663_p3;
        select_ln99_14_reg_1532 <= select_ln99_14_fu_674_p3;
        trunc_ln224_7_reg_1537 <= trunc_ln224_7_fu_680_p1;
        trunc_ln67_1_reg_1329_pp0_iter8_reg <= trunc_ln67_1_reg_1329_pp0_iter7_reg;
        trunc_ln67_2_reg_1337_pp0_iter8_reg <= trunc_ln67_2_reg_1337_pp0_iter7_reg;
        trunc_ln67_3_reg_1345_pp0_iter8_reg <= trunc_ln67_3_reg_1345_pp0_iter7_reg;
        trunc_ln67_4_reg_1353_pp0_iter8_reg <= trunc_ln67_4_reg_1353_pp0_iter7_reg;
        trunc_ln67_5_reg_1361_pp0_iter8_reg <= trunc_ln67_5_reg_1361_pp0_iter7_reg;
        trunc_ln67_6_reg_1369_pp0_iter8_reg <= trunc_ln67_6_reg_1369_pp0_iter7_reg;
        trunc_ln67_7_reg_1377_pp0_iter8_reg <= trunc_ln67_7_reg_1377_pp0_iter7_reg;
        trunc_ln67_reg_1322_pp0_iter8_reg <= trunc_ln67_reg_1322_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        icmp_ln61_reg_1318_pp0_iter14_reg <= icmp_ln61_reg_1318_pp0_iter13_reg;
        s_val_reg_1609_pp0_iter14_reg <= s_val_reg_1609_pp0_iter13_reg;
        select_ln123_1_reg_1709 <= select_ln123_1_fu_1118_p3;
        select_ln123_2_reg_1714 <= select_ln123_2_fu_1166_p3;
        select_ln123_3_reg_1719 <= select_ln123_3_fu_1214_p3;
        select_ln123_4_reg_1724 <= select_ln123_4_fu_1262_p3;
        select_ln123_5_reg_1729 <= select_ln123_5_fu_1270_p3;
        select_ln123_6_reg_1734 <= select_ln123_6_fu_1278_p3;
        select_ln123_7_reg_1739 <= select_ln123_7_fu_1286_p3;
        select_ln123_reg_1704 <= select_ln123_fu_1090_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state16_pp0_stage0_iter15)) begin
        ap_ST_iter15_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_iter15_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (icmp_ln61_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter15_fsm_state16) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_reg_1318_pp0_iter10_reg == 1'd0)) begin
        if ((1'b1 == ap_condition_1950)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = select_ln16_fu_832_p3;
        end else if ((1'b1 == ap_condition_1935)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd27;
        end else if ((1'b1 == ap_condition_1920)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd28;
        end else if ((1'b1 == ap_condition_1906)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd29;
        end else if ((1'b1 == ap_condition_1893)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd30;
        end else if ((1'b1 == ap_condition_1881)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd31;
        end else if ((1'b1 == ap_condition_1870)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd0;
        end else if ((1'b1 == ap_condition_1860)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd1;
        end else if ((1'b1 == ap_condition_1851)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd2;
        end else if ((1'b1 == ap_condition_1843)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd3;
        end else if ((1'b1 == ap_condition_1836)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd4;
        end else if ((1'b1 == ap_condition_1830)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd5;
        end else if ((1'b1 == ap_condition_1825)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd6;
        end else if (((tmp_16_reg_1552_pp0_iter10_reg == 1'd1) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0))) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd7;
        end else if ((tmp_15_reg_1548_pp0_iter10_reg == 1'd1)) begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = 5'd8;
        end else begin
            ap_phi_mux_s_val_1_phi_fu_185_p30 = ap_phi_reg_pp0_iter11_s_val_1_reg_182;
        end
    end else begin
        ap_phi_mux_s_val_1_phi_fu_185_p30 = ap_phi_reg_pp0_iter11_s_val_1_reg_182;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_158;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1318_pp0_iter14_reg == 1'd0) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        rq_stream_TDATA_blk_n = rq_stream_TREADY;
    end else begin
        rq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1318_pp0_iter14_reg == 1'd0) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        rq_stream_TVALID = 1'b1;
    end else begin
        rq_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1318_pp0_iter14_reg == 1'd0) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        rs_stream_TDATA_blk_n = rs_stream_TREADY;
    end else begin
        rs_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1318_pp0_iter14_reg == 1'd0) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        rs_stream_TVALID = 1'b1;
    end else begin
        rs_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1318 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        softmax_stream_blk_n = softmax_stream_empty_n;
    end else begin
        softmax_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (icmp_ln61_reg_1318 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        softmax_stream_read = 1'b1;
    end else begin
        softmax_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else if (((~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter14_fsm_state15)) | (~((1'b1 == ap_block_state16_pp0_stage0_iter15) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1318_pp0_iter14_reg == 1'd1) & (1'b1 == ap_CS_iter15_fsm_state16)))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

assign abs_max_fu_692_p3 = ((icmp_ln224_8_fu_687_p2[0:0] == 1'b1) ? trunc_ln224_7_reg_1537 : select_ln99_13_reg_1526);

assign add_ln119_fu_869_p2 = ($signed(trunc_ln117_reg_1615) + $signed(3'd7));

assign add_ln120_1_fu_937_p2 = (ashr_ln119_1_reg_1629 + 16'd1);

assign add_ln120_2_fu_956_p2 = (ashr_ln119_2_reg_1634 + 16'd1);

assign add_ln120_3_fu_975_p2 = (ashr_ln119_3_reg_1639 + 16'd1);

assign add_ln120_4_fu_994_p2 = (ashr_ln119_4_reg_1644 + 16'd1);

assign add_ln120_5_fu_1013_p2 = (ashr_ln119_5_reg_1649 + 16'd1);

assign add_ln120_6_fu_1032_p2 = (ashr_ln119_6_reg_1654 + 16'd1);

assign add_ln120_7_fu_1051_p2 = (ashr_ln119_7_reg_1659 + 16'd1);

assign add_ln120_fu_918_p2 = (ashr_ln119_reg_1624 + 16'd1);

assign add_ln61_fu_317_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 12'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state16_pp0_stage0_iter15 = (((rs_stream_TREADY == 1'b0) & (icmp_ln61_reg_1318_pp0_iter14_reg == 1'd0)) | ((icmp_ln61_reg_1318_pp0_iter14_reg == 1'd0) & (rq_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln61_reg_1318 == 1'd0) & (softmax_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_1825 = ((tmp_17_reg_1556_pp0_iter10_reg == 1'd1) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1830 = ((tmp_18_reg_1560_pp0_iter10_reg == 1'd1) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1836 = ((tmp_19_reg_1564_pp0_iter10_reg == 1'd1) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1843 = ((tmp_20_reg_1568_pp0_iter10_reg == 1'd1) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1851 = ((tmp_21_reg_1572_pp0_iter10_reg == 1'd1) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1860 = ((tmp_22_reg_1576_pp0_iter10_reg == 1'd1) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1870 = ((tmp_23_reg_1580_pp0_iter10_reg == 1'd1) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1881 = ((tmp_24_reg_1584_pp0_iter10_reg == 1'd1) & (tmp_23_reg_1580_pp0_iter10_reg == 1'd0) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1893 = ((tmp_25_reg_1588_pp0_iter10_reg == 1'd1) & (tmp_24_reg_1584_pp0_iter10_reg == 1'd0) & (tmp_23_reg_1580_pp0_iter10_reg == 1'd0) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1906 = ((tmp_26_reg_1592_pp0_iter10_reg == 1'd1) & (tmp_25_reg_1588_pp0_iter10_reg == 1'd0) & (tmp_24_reg_1584_pp0_iter10_reg == 1'd0) & (tmp_23_reg_1580_pp0_iter10_reg == 1'd0) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1920 = ((tmp_27_reg_1596_pp0_iter10_reg == 1'd1) & (tmp_26_reg_1592_pp0_iter10_reg == 1'd0) & (tmp_25_reg_1588_pp0_iter10_reg == 1'd0) & (tmp_24_reg_1584_pp0_iter10_reg == 1'd0) & (tmp_23_reg_1580_pp0_iter10_reg == 1'd0) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1935 = ((tmp_28_reg_1600_pp0_iter10_reg == 1'd1) & (tmp_27_reg_1596_pp0_iter10_reg == 1'd0) & (tmp_26_reg_1592_pp0_iter10_reg == 1'd0) & (tmp_25_reg_1588_pp0_iter10_reg == 1'd0) & (tmp_24_reg_1584_pp0_iter10_reg == 1'd0) & (tmp_23_reg_1580_pp0_iter10_reg == 1'd0) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1950 = ((tmp_28_reg_1600_pp0_iter10_reg == 1'd0) & (tmp_27_reg_1596_pp0_iter10_reg == 1'd0) & (tmp_26_reg_1592_pp0_iter10_reg == 1'd0) & (tmp_25_reg_1588_pp0_iter10_reg == 1'd0) & (tmp_24_reg_1584_pp0_iter10_reg == 1'd0) & (tmp_23_reg_1580_pp0_iter10_reg == 1'd0) & (tmp_22_reg_1576_pp0_iter10_reg == 1'd0) & (tmp_21_reg_1572_pp0_iter10_reg == 1'd0) & (tmp_20_reg_1568_pp0_iter10_reg == 1'd0) & (tmp_19_reg_1564_pp0_iter10_reg == 1'd0) & (tmp_18_reg_1560_pp0_iter10_reg == 1'd0) & (tmp_17_reg_1556_pp0_iter10_reg == 1'd0) & (tmp_16_reg_1552_pp0_iter10_reg == 1'd0) & (tmp_15_reg_1548_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_condition_259 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_322 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter12_fsm_state13));
end

always @ (*) begin
    ap_condition_324 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state16_pp0_stage0_iter15) & (1'b1 == ap_CS_iter15_fsm_state16))) & (1'b1 == ap_CS_iter13_fsm_state14));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_39_reg_249 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_40_reg_258 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_41_reg_267 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_42_reg_276 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_43_reg_285 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_44_reg_294 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_240 = 'bx;

assign ap_phi_reg_pp0_iter0_q_val_reg_231 = 'bx;

assign ap_phi_reg_pp0_iter11_s_val_1_reg_182 = 'bx;

assign ap_ready = ap_ready_sig;

assign ashr_ln119_1_fu_883_p2 = $signed(trunc_ln67_1_reg_1329_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_2_fu_888_p2 = $signed(trunc_ln67_2_reg_1337_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_3_fu_893_p2 = $signed(trunc_ln67_3_reg_1345_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_4_fu_898_p2 = $signed(trunc_ln67_4_reg_1353_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_5_fu_903_p2 = $signed(trunc_ln67_5_reg_1361_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_6_fu_908_p2 = $signed(trunc_ln67_6_reg_1369_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_7_fu_913_p2 = $signed(trunc_ln67_7_reg_1377_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign ashr_ln119_fu_878_p2 = $signed(trunc_ln67_reg_1322_pp0_iter11_reg) >>> zext_ln119_fu_874_p1;

assign icmp_ln118_fu_864_p2 = ((s_val_reg_1609 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln118_reg_1620_pp0_iter12_reg = icmp_ln118_reg_1620;

assign icmp_ln12_fu_698_p2 = ((abs_max_reg_1542 != 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_1_fu_1108_p2 = (($signed(tmp_31_fu_1098_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_2_fu_1136_p2 = (($signed(tmp_32_fu_1126_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_3_fu_1156_p2 = (($signed(tmp_33_fu_1146_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_4_fu_1184_p2 = (($signed(tmp_34_fu_1174_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_5_fu_1204_p2 = (($signed(tmp_35_fu_1194_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_6_fu_1232_p2 = (($signed(tmp_36_fu_1222_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_7_fu_1252_p2 = (($signed(tmp_37_fu_1242_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_1080_p2 = (($signed(tmp_30_fu_1070_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_513_p2 = (($signed(zext_ln99_fu_510_p1) < $signed(select_ln99_2_reg_1436)) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_542_p2 = (($signed(zext_ln99_1_fu_539_p1) < $signed(select_ln99_4_reg_1452)) ? 1'b1 : 1'b0);

assign icmp_ln224_4_fu_571_p2 = (($signed(zext_ln99_2_fu_568_p1) < $signed(select_ln99_6_reg_1468)) ? 1'b1 : 1'b0);

assign icmp_ln224_5_fu_600_p2 = (($signed(zext_ln99_3_fu_597_p1) < $signed(select_ln99_8_reg_1484)) ? 1'b1 : 1'b0);

assign icmp_ln224_6_fu_629_p2 = (($signed(zext_ln99_4_fu_626_p1) < $signed(select_ln99_10_reg_1500)) ? 1'b1 : 1'b0);

assign icmp_ln224_7_fu_658_p2 = (($signed(zext_ln99_5_fu_655_p1) < $signed(select_ln99_12_reg_1516)) ? 1'b1 : 1'b0);

assign icmp_ln224_8_fu_687_p2 = (($signed(zext_ln99_6_fu_684_p1) < $signed(select_ln99_14_reg_1532)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_481_p2 = (($signed(select_ln99_fu_472_p3) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_311_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 12'd2688) ? 1'b1 : 1'b0);

assign rq_stream_TDATA = {{{{{{{{select_ln123_4_reg_1724}, {select_ln123_7_reg_1739}}, {select_ln123_3_reg_1719}}, {select_ln123_6_reg_1734}}, {select_ln123_2_reg_1714}}, {select_ln123_5_reg_1729}}, {select_ln123_1_reg_1709}}, {select_ln123_reg_1704}};

assign rs_stream_TDATA = s_val_reg_1609_pp0_iter14_reg;

assign s_val_fu_852_p3 = ((tmp_29_fu_840_p3[0:0] == 1'b1) ? 4'd0 : trunc_ln108_fu_848_p1);

assign select_ln123_1_fu_1118_p3 = ((icmp_ln200_1_fu_1108_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_1_fu_1114_p1);

assign select_ln123_2_fu_1166_p3 = ((icmp_ln200_3_fu_1156_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_3_fu_1162_p1);

assign select_ln123_3_fu_1214_p3 = ((icmp_ln200_5_fu_1204_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_5_fu_1210_p1);

assign select_ln123_4_fu_1262_p3 = ((icmp_ln200_7_fu_1252_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_7_fu_1258_p1);

assign select_ln123_5_fu_1270_p3 = ((icmp_ln200_2_fu_1136_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_2_fu_1142_p1);

assign select_ln123_6_fu_1278_p3 = ((icmp_ln200_4_fu_1184_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_4_fu_1190_p1);

assign select_ln123_7_fu_1286_p3 = ((icmp_ln200_6_fu_1232_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_6_fu_1238_p1);

assign select_ln123_fu_1090_p3 = ((icmp_ln200_fu_1080_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_fu_1086_p1);

assign select_ln16_fu_832_p3 = ((trunc_ln16_reg_1604[0:0] == 1'b1) ? 5'd26 : 5'd25);

assign select_ln99_10_fu_616_p3 = ((tmp_12_reg_1415_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln99_5_fu_611_p2 : trunc_ln67_5_reg_1361_pp0_iter5_reg);

assign select_ln99_11_fu_634_p3 = ((icmp_ln224_6_fu_629_p2[0:0] == 1'b1) ? trunc_ln224_5_reg_1505 : select_ln99_9_reg_1494);

assign select_ln99_12_fu_645_p3 = ((tmp_13_reg_1420_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln99_6_fu_640_p2 : trunc_ln67_6_reg_1369_pp0_iter6_reg);

assign select_ln99_13_fu_663_p3 = ((icmp_ln224_7_fu_658_p2[0:0] == 1'b1) ? trunc_ln224_6_reg_1521 : select_ln99_11_reg_1510);

assign select_ln99_14_fu_674_p3 = ((tmp_14_reg_1425_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln99_7_fu_669_p2 : trunc_ln67_7_reg_1377_pp0_iter7_reg);

assign select_ln99_1_fu_487_p3 = ((icmp_ln224_fu_481_p2[0:0] == 1'b1) ? trunc_ln224_fu_477_p1 : 15'd0);

assign select_ln99_2_fu_500_p3 = ((tmp_8_reg_1395[0:0] == 1'b1) ? sub_ln99_1_fu_495_p2 : trunc_ln67_1_reg_1329);

assign select_ln99_3_fu_518_p3 = ((icmp_ln224_2_fu_513_p2[0:0] == 1'b1) ? trunc_ln224_1_reg_1441 : select_ln99_1_reg_1430);

assign select_ln99_4_fu_529_p3 = ((tmp_9_reg_1400_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln99_2_fu_524_p2 : trunc_ln67_2_reg_1337_pp0_iter2_reg);

assign select_ln99_5_fu_547_p3 = ((icmp_ln224_3_fu_542_p2[0:0] == 1'b1) ? trunc_ln224_2_reg_1457 : select_ln99_3_reg_1446);

assign select_ln99_6_fu_558_p3 = ((tmp_10_reg_1405_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln99_3_fu_553_p2 : trunc_ln67_3_reg_1345_pp0_iter3_reg);

assign select_ln99_7_fu_576_p3 = ((icmp_ln224_4_fu_571_p2[0:0] == 1'b1) ? trunc_ln224_3_reg_1473 : select_ln99_5_reg_1462);

assign select_ln99_8_fu_587_p3 = ((tmp_11_reg_1410_pp0_iter4_reg[0:0] == 1'b1) ? sub_ln99_4_fu_582_p2 : trunc_ln67_4_reg_1353_pp0_iter4_reg);

assign select_ln99_9_fu_605_p3 = ((icmp_ln224_5_fu_600_p2[0:0] == 1'b1) ? trunc_ln224_4_reg_1489 : select_ln99_7_reg_1478);

assign select_ln99_fu_472_p3 = ((tmp_reg_1390[0:0] == 1'b1) ? sub_ln99_reg_1385 : trunc_ln67_reg_1322);

assign sext_ln121_1_fu_952_p1 = $signed(trunc_ln121_1_fu_942_p4);

assign sext_ln121_2_fu_971_p1 = $signed(trunc_ln121_2_fu_961_p4);

assign sext_ln121_3_fu_990_p1 = $signed(trunc_ln121_3_fu_980_p4);

assign sext_ln121_4_fu_1009_p1 = $signed(trunc_ln121_4_fu_999_p4);

assign sext_ln121_5_fu_1028_p1 = $signed(trunc_ln121_5_fu_1018_p4);

assign sext_ln121_6_fu_1047_p1 = $signed(trunc_ln121_6_fu_1037_p4);

assign sext_ln121_7_fu_1066_p1 = $signed(trunc_ln121_7_fu_1056_p4);

assign sext_ln121_fu_933_p1 = $signed(trunc_ln8_fu_923_p4);

assign sub_ln99_1_fu_495_p2 = (16'd0 - trunc_ln67_1_reg_1329);

assign sub_ln99_2_fu_524_p2 = (16'd0 - trunc_ln67_2_reg_1337_pp0_iter2_reg);

assign sub_ln99_3_fu_553_p2 = (16'd0 - trunc_ln67_3_reg_1345_pp0_iter3_reg);

assign sub_ln99_4_fu_582_p2 = (16'd0 - trunc_ln67_4_reg_1353_pp0_iter4_reg);

assign sub_ln99_5_fu_611_p2 = (16'd0 - trunc_ln67_5_reg_1361_pp0_iter5_reg);

assign sub_ln99_6_fu_640_p2 = (16'd0 - trunc_ln67_6_reg_1369_pp0_iter6_reg);

assign sub_ln99_7_fu_669_p2 = (16'd0 - trunc_ln67_7_reg_1377_pp0_iter7_reg);

assign sub_ln99_fu_402_p2 = (16'd0 - trunc_ln67_fu_328_p1);

assign tmp_15_reg_1548_pp0_iter10_reg = tmp_15_reg_1548;

assign tmp_16_reg_1552_pp0_iter10_reg = tmp_16_reg_1552;

assign tmp_17_reg_1556_pp0_iter10_reg = tmp_17_reg_1556;

assign tmp_18_reg_1560_pp0_iter10_reg = tmp_18_reg_1560;

assign tmp_19_reg_1564_pp0_iter10_reg = tmp_19_reg_1564;

assign tmp_20_reg_1568_pp0_iter10_reg = tmp_20_reg_1568;

assign tmp_21_reg_1572_pp0_iter10_reg = tmp_21_reg_1572;

assign tmp_22_reg_1576_pp0_iter10_reg = tmp_22_reg_1576;

assign tmp_23_reg_1580_pp0_iter10_reg = tmp_23_reg_1580;

assign tmp_24_reg_1584_pp0_iter10_reg = tmp_24_reg_1584;

assign tmp_25_reg_1588_pp0_iter10_reg = tmp_25_reg_1588;

assign tmp_26_reg_1592_pp0_iter10_reg = tmp_26_reg_1592;

assign tmp_27_reg_1596_pp0_iter10_reg = tmp_27_reg_1596;

assign tmp_28_reg_1600_pp0_iter10_reg = tmp_28_reg_1600;

assign tmp_29_fu_840_p3 = ap_phi_mux_s_val_1_phi_fu_185_p30[32'd4];

assign tmp_30_fu_1070_p4 = {{ap_phi_reg_pp0_iter14_empty_41_reg_267[15:7]}};

assign tmp_31_fu_1098_p4 = {{ap_phi_reg_pp0_iter14_empty_42_reg_276[15:7]}};

assign tmp_32_fu_1126_p4 = {{ap_phi_reg_pp0_iter14_empty_40_reg_258[15:7]}};

assign tmp_33_fu_1146_p4 = {{ap_phi_reg_pp0_iter14_empty_43_reg_285[15:7]}};

assign tmp_34_fu_1174_p4 = {{ap_phi_reg_pp0_iter14_empty_39_reg_249[15:7]}};

assign tmp_35_fu_1194_p4 = {{ap_phi_reg_pp0_iter14_empty_44_reg_294[15:7]}};

assign tmp_36_fu_1222_p4 = {{ap_phi_reg_pp0_iter14_empty_reg_240[15:7]}};

assign tmp_37_fu_1242_p4 = {{ap_phi_reg_pp0_iter14_q_val_reg_231[15:7]}};

assign trunc_ln108_fu_848_p1 = ap_phi_mux_s_val_1_phi_fu_185_p30[3:0];

assign trunc_ln117_fu_860_p1 = s_val_fu_852_p3[2:0];

assign trunc_ln121_1_fu_942_p4 = {{add_ln120_1_fu_937_p2[15:1]}};

assign trunc_ln121_2_fu_961_p4 = {{add_ln120_2_fu_956_p2[15:1]}};

assign trunc_ln121_3_fu_980_p4 = {{add_ln120_3_fu_975_p2[15:1]}};

assign trunc_ln121_4_fu_999_p4 = {{add_ln120_4_fu_994_p2[15:1]}};

assign trunc_ln121_5_fu_1018_p4 = {{add_ln120_5_fu_1013_p2[15:1]}};

assign trunc_ln121_6_fu_1037_p4 = {{add_ln120_6_fu_1032_p2[15:1]}};

assign trunc_ln121_7_fu_1056_p4 = {{add_ln120_7_fu_1051_p2[15:1]}};

assign trunc_ln123_1_fu_1114_p1 = ap_phi_reg_pp0_iter14_empty_42_reg_276[7:0];

assign trunc_ln123_2_fu_1142_p1 = ap_phi_reg_pp0_iter14_empty_40_reg_258[7:0];

assign trunc_ln123_3_fu_1162_p1 = ap_phi_reg_pp0_iter14_empty_43_reg_285[7:0];

assign trunc_ln123_4_fu_1190_p1 = ap_phi_reg_pp0_iter14_empty_39_reg_249[7:0];

assign trunc_ln123_5_fu_1210_p1 = ap_phi_reg_pp0_iter14_empty_44_reg_294[7:0];

assign trunc_ln123_6_fu_1238_p1 = ap_phi_reg_pp0_iter14_empty_reg_240[7:0];

assign trunc_ln123_7_fu_1258_p1 = ap_phi_reg_pp0_iter14_q_val_reg_231[7:0];

assign trunc_ln123_fu_1086_p1 = ap_phi_reg_pp0_iter14_empty_41_reg_267[7:0];

assign trunc_ln16_fu_828_p1 = x_2_fu_708_p3[0:0];

assign trunc_ln224_1_fu_506_p1 = select_ln99_2_fu_500_p3[14:0];

assign trunc_ln224_2_fu_535_p1 = select_ln99_4_fu_529_p3[14:0];

assign trunc_ln224_3_fu_564_p1 = select_ln99_6_fu_558_p3[14:0];

assign trunc_ln224_4_fu_593_p1 = select_ln99_8_fu_587_p3[14:0];

assign trunc_ln224_5_fu_622_p1 = select_ln99_10_fu_616_p3[14:0];

assign trunc_ln224_6_fu_651_p1 = select_ln99_12_fu_645_p3[14:0];

assign trunc_ln224_7_fu_680_p1 = select_ln99_14_fu_674_p3[14:0];

assign trunc_ln224_fu_477_p1 = select_ln99_fu_472_p3[14:0];

assign trunc_ln67_fu_328_p1 = softmax_stream_dout[15:0];

assign trunc_ln8_fu_923_p4 = {{add_ln120_fu_918_p2[15:1]}};

assign x_1_fu_703_p2 = ($signed(abs_max_reg_1542) + $signed(15'd32767));

assign x_2_fu_708_p3 = ((icmp_ln12_fu_698_p2[0:0] == 1'b1) ? x_1_fu_703_p2 : 15'd0);

assign zext_ln119_fu_874_p1 = add_ln119_fu_869_p2;

assign zext_ln99_1_fu_539_p1 = select_ln99_3_reg_1446;

assign zext_ln99_2_fu_568_p1 = select_ln99_5_reg_1462;

assign zext_ln99_3_fu_597_p1 = select_ln99_7_reg_1478;

assign zext_ln99_4_fu_626_p1 = select_ln99_9_reg_1494;

assign zext_ln99_5_fu_655_p1 = select_ln99_11_reg_1510;

assign zext_ln99_6_fu_684_p1 = select_ln99_13_reg_1526;

assign zext_ln99_fu_510_p1 = select_ln99_1_reg_1430;

endmodule //SOFTMAX_QUANT_do_quant
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_softmax (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        pos_r,
        r_stream_TDATA,
        softmax_stream_din,
        softmax_stream_full_n,
        softmax_stream_write,
        ap_clk,
        ap_rst,
        pos_r_ap_vld,
        r_stream_TVALID,
        r_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [31:0] pos_r;
input  [135:0] r_stream_TDATA;
output  [127:0] softmax_stream_din;
input   softmax_stream_full_n;
output   softmax_stream_write;
input   ap_clk;
input   ap_rst;
input   pos_r_ap_vld;
input   r_stream_TVALID;
output   r_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire    entry_proc_U0_start_out;
wire    entry_proc_U0_start_write;
wire   [31:0] entry_proc_U0_pos_c_din;
wire    entry_proc_U0_pos_c_write;
wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire    do_adapt_U0_r_stream_TREADY;
wire   [33:0] do_adapt_U0_i_stream_adapted_din;
wire    do_adapt_U0_i_stream_adapted_write;
wire    do_softmax_func_U0_ap_start;
wire    do_softmax_func_U0_ap_done;
wire    do_softmax_func_U0_ap_continue;
wire    do_softmax_func_U0_ap_idle;
wire    do_softmax_func_U0_ap_ready;
wire    do_softmax_func_U0_start_out;
wire    do_softmax_func_U0_start_write;
wire    do_softmax_func_U0_pos_r_read;
wire    do_softmax_func_U0_i_stream_adapted_read;
wire   [31:0] do_softmax_func_U0_softmax_stream_din;
wire    do_softmax_func_U0_softmax_stream_write;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_softmax_stream_read;
wire   [127:0] do_adapt_1_U0_softmax_stream1_din;
wire    do_adapt_1_U0_softmax_stream1_write;
wire    pos_c_full_n;
wire   [31:0] pos_c_dout;
wire    pos_c_empty_n;
wire   [2:0] pos_c_num_data_valid;
wire   [2:0] pos_c_fifo_cap;
wire    i_stream_adapted_full_n;
wire   [33:0] i_stream_adapted_dout;
wire    i_stream_adapted_empty_n;
wire   [2:0] i_stream_adapted_num_data_valid;
wire   [2:0] i_stream_adapted_fifo_cap;
wire    softmax_stream1_full_n;
wire   [31:0] softmax_stream1_dout;
wire    softmax_stream1_empty_n;
wire   [2:0] softmax_stream1_num_data_valid;
wire   [2:0] softmax_stream1_fifo_cap;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_do_adapt_U0_ap_ready;
wire    ap_sync_do_adapt_U0_ap_ready;
wire   [0:0] start_for_do_softmax_func_U0_din;
wire    start_for_do_softmax_func_U0_full_n;
wire   [0:0] start_for_do_softmax_func_U0_dout;
wire    start_for_do_softmax_func_U0_empty_n;
wire   [0:0] start_for_do_adapt_1_U0_din;
wire    start_for_do_adapt_1_U0_full_n;
wire   [0:0] start_for_do_adapt_1_U0_dout;
wire    start_for_do_adapt_1_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_do_adapt_U0_ap_ready = 1'b0;
end

SOFTMAX_QUANT_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .start_full_n(start_for_do_softmax_func_U0_full_n),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .start_out(entry_proc_U0_start_out),
    .start_write(entry_proc_U0_start_write),
    .pos_r(pos_r),
    .pos_c_din(entry_proc_U0_pos_c_din),
    .pos_c_full_n(pos_c_full_n),
    .pos_c_write(entry_proc_U0_pos_c_write),
    .pos_c_num_data_valid(pos_c_num_data_valid),
    .pos_c_fifo_cap(pos_c_fifo_cap)
);

SOFTMAX_QUANT_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .r_stream_TDATA(r_stream_TDATA),
    .r_stream_TVALID(r_stream_TVALID),
    .r_stream_TREADY(do_adapt_U0_r_stream_TREADY),
    .i_stream_adapted_din(do_adapt_U0_i_stream_adapted_din),
    .i_stream_adapted_full_n(i_stream_adapted_full_n),
    .i_stream_adapted_write(do_adapt_U0_i_stream_adapted_write),
    .i_stream_adapted_num_data_valid(i_stream_adapted_num_data_valid),
    .i_stream_adapted_fifo_cap(i_stream_adapted_fifo_cap)
);

SOFTMAX_QUANT_do_softmax_func do_softmax_func_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax_func_U0_ap_start),
    .start_full_n(start_for_do_adapt_1_U0_full_n),
    .ap_done(do_softmax_func_U0_ap_done),
    .ap_continue(do_softmax_func_U0_ap_continue),
    .ap_idle(do_softmax_func_U0_ap_idle),
    .ap_ready(do_softmax_func_U0_ap_ready),
    .start_out(do_softmax_func_U0_start_out),
    .start_write(do_softmax_func_U0_start_write),
    .pos_r_dout(pos_c_dout),
    .pos_r_empty_n(pos_c_empty_n),
    .pos_r_read(do_softmax_func_U0_pos_r_read),
    .pos_r_num_data_valid(pos_c_num_data_valid),
    .pos_r_fifo_cap(pos_c_fifo_cap),
    .i_stream_adapted_dout(i_stream_adapted_dout),
    .i_stream_adapted_empty_n(i_stream_adapted_empty_n),
    .i_stream_adapted_read(do_softmax_func_U0_i_stream_adapted_read),
    .i_stream_adapted_num_data_valid(i_stream_adapted_num_data_valid),
    .i_stream_adapted_fifo_cap(i_stream_adapted_fifo_cap),
    .softmax_stream_din(do_softmax_func_U0_softmax_stream_din),
    .softmax_stream_full_n(softmax_stream1_full_n),
    .softmax_stream_write(do_softmax_func_U0_softmax_stream_write),
    .softmax_stream_num_data_valid(softmax_stream1_num_data_valid),
    .softmax_stream_fifo_cap(softmax_stream1_fifo_cap)
);

SOFTMAX_QUANT_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .softmax_stream_dout(softmax_stream1_dout),
    .softmax_stream_empty_n(softmax_stream1_empty_n),
    .softmax_stream_read(do_adapt_1_U0_softmax_stream_read),
    .softmax_stream_num_data_valid(softmax_stream1_num_data_valid),
    .softmax_stream_fifo_cap(softmax_stream1_fifo_cap),
    .softmax_stream1_din(do_adapt_1_U0_softmax_stream1_din),
    .softmax_stream1_full_n(softmax_stream_full_n),
    .softmax_stream1_write(do_adapt_1_U0_softmax_stream1_write),
    .softmax_stream1_num_data_valid(3'd0),
    .softmax_stream1_fifo_cap(3'd0)
);

SOFTMAX_QUANT_fifo_w32_d3_S pos_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_pos_c_din),
    .if_full_n(pos_c_full_n),
    .if_write(entry_proc_U0_pos_c_write),
    .if_dout(pos_c_dout),
    .if_empty_n(pos_c_empty_n),
    .if_read(do_softmax_func_U0_pos_r_read),
    .if_num_data_valid(pos_c_num_data_valid),
    .if_fifo_cap(pos_c_fifo_cap)
);

SOFTMAX_QUANT_fifo_w34_d2_S i_stream_adapted_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_U0_i_stream_adapted_din),
    .if_full_n(i_stream_adapted_full_n),
    .if_write(do_adapt_U0_i_stream_adapted_write),
    .if_dout(i_stream_adapted_dout),
    .if_empty_n(i_stream_adapted_empty_n),
    .if_read(do_softmax_func_U0_i_stream_adapted_read),
    .if_num_data_valid(i_stream_adapted_num_data_valid),
    .if_fifo_cap(i_stream_adapted_fifo_cap)
);

SOFTMAX_QUANT_fifo_w32_d2_S softmax_stream1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax_func_U0_softmax_stream_din),
    .if_full_n(softmax_stream1_full_n),
    .if_write(do_softmax_func_U0_softmax_stream_write),
    .if_dout(softmax_stream1_dout),
    .if_empty_n(softmax_stream1_empty_n),
    .if_read(do_adapt_1_U0_softmax_stream_read),
    .if_num_data_valid(softmax_stream1_num_data_valid),
    .if_fifo_cap(softmax_stream1_fifo_cap)
);

SOFTMAX_QUANT_start_for_do_softmax_func_U0 start_for_do_softmax_func_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax_func_U0_din),
    .if_full_n(start_for_do_softmax_func_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_do_softmax_func_U0_dout),
    .if_empty_n(start_for_do_softmax_func_U0_empty_n),
    .if_read(do_softmax_func_U0_ap_ready)
);

SOFTMAX_QUANT_start_for_do_adapt_1_U0 start_for_do_adapt_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_1_U0_din),
    .if_full_n(start_for_do_adapt_1_U0_full_n),
    .if_write(do_softmax_func_U0_start_write),
    .if_dout(start_for_do_adapt_1_U0_dout),
    .if_empty_n(start_for_do_adapt_1_U0_empty_n),
    .if_read(do_adapt_1_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_U0_ap_ready <= ap_sync_do_adapt_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_1_U0_ap_done;

assign ap_idle = (entry_proc_U0_ap_idle & do_softmax_func_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_U0_ap_ready = (do_adapt_U0_ap_ready | ap_sync_reg_do_adapt_U0_ap_ready);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_entry_proc_U0_ap_ready & ap_sync_do_adapt_U0_ap_ready);

assign do_adapt_1_U0_ap_continue = ap_continue;

assign do_adapt_1_U0_ap_start = start_for_do_adapt_1_U0_empty_n;

assign do_adapt_U0_ap_continue = 1'b1;

assign do_adapt_U0_ap_start = (real_start & (ap_sync_reg_do_adapt_U0_ap_ready ^ 1'b1));

assign do_softmax_func_U0_ap_continue = 1'b1;

assign do_softmax_func_U0_ap_start = start_for_do_softmax_func_U0_empty_n;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = (real_start & (ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1));

assign internal_ap_ready = ap_sync_ready;

assign r_stream_TREADY = do_adapt_U0_r_stream_TREADY;

assign softmax_stream_din = do_adapt_1_U0_softmax_stream1_din;

assign softmax_stream_write = do_adapt_1_U0_softmax_stream1_write;

assign start_for_do_adapt_1_U0_din = 1'b1;

assign start_for_do_softmax_func_U0_din = 1'b1;

assign start_out = real_start;

endmodule //SOFTMAX_QUANT_do_softmax
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_softmax_func (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        pos_r_dout,
        pos_r_empty_n,
        pos_r_read,
        pos_r_num_data_valid,
        pos_r_fifo_cap,
        i_stream_adapted_dout,
        i_stream_adapted_empty_n,
        i_stream_adapted_read,
        i_stream_adapted_num_data_valid,
        i_stream_adapted_fifo_cap,
        softmax_stream_din,
        softmax_stream_full_n,
        softmax_stream_write,
        softmax_stream_num_data_valid,
        softmax_stream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] pos_r_dout;
input   pos_r_empty_n;
output   pos_r_read;
input  [2:0] pos_r_num_data_valid;
input  [2:0] pos_r_fifo_cap;
input  [33:0] i_stream_adapted_dout;
input   i_stream_adapted_empty_n;
output   i_stream_adapted_read;
input  [2:0] i_stream_adapted_num_data_valid;
input  [2:0] i_stream_adapted_fifo_cap;
output  [31:0] softmax_stream_din;
input   softmax_stream_full_n;
output   softmax_stream_write;
input  [2:0] softmax_stream_num_data_valid;
input  [2:0] softmax_stream_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg pos_r_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [15:0] softmax_inst_R_EXP_SUM_74;
reg   [16:0] softmax_inst_R_MAXVAL_71;
reg   [6:0] softmax_inst_R_BUF_72_address0;
reg    softmax_inst_R_BUF_72_ce0;
reg    softmax_inst_R_BUF_72_we0;
wire   [33:0] softmax_inst_R_BUF_72_q0;
reg   [6:0] softmax_inst_R_EXP_73_address0;
reg    softmax_inst_R_EXP_73_ce0;
reg    softmax_inst_R_EXP_73_we0;
wire   [18:0] softmax_inst_R_EXP_73_q0;
wire   [1:0] RECIP_ALPHAS_address0;
wire   [17:0] RECIP_ALPHAS_q0;
wire   [1:0] RECIP_LOG2DENOMS_address0;
wire   [3:0] RECIP_LOG2DENOMS_q0;
wire   [1:0] RECIP_OFFSETS_DIFF_address0;
wire   [3:0] RECIP_OFFSETS_DIFF_q0;
wire   [9:0] RECIP_TABLES_address0;
wire   [7:0] RECIP_TABLES_q0;
reg    pos_r_blk_n;
wire  signed [32:0] sext_ln133_fu_249_p1;
reg  signed [32:0] sext_ln133_reg_572;
reg    ap_block_state1;
wire   [3:0] h_2_fu_285_p2;
reg   [3:0] h_2_reg_580;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln83_fu_309_p2;
reg   [3:0] add_ln83_reg_588;
wire    ap_CS_fsm_state3;
wire   [32:0] empty_fu_319_p2;
reg   [32:0] empty_reg_593;
reg   [15:0] add_i_1_lcssa_lcssa94_load_1_reg_598;
wire    ap_CS_fsm_state4;
reg   [16:0] p_lcssa_lcssa17_load_1_reg_603;
wire   [0:0] LUT_IDX_fu_384_p2;
reg   [0:0] LUT_IDX_reg_617;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln145_fu_400_p2;
reg   [0:0] icmp_ln145_reg_622;
wire   [1:0] LUT_IDX_1_fu_414_p3;
reg   [1:0] LUT_IDX_1_reg_627;
wire    ap_CS_fsm_state9;
reg   [17:0] ALPHA_reg_647;
wire    ap_CS_fsm_state10;
reg   [3:0] LOG2DENOM_reg_652;
reg   [3:0] OFFSET_DIFF_reg_657;
wire   [18:0] sub_ln152_fu_434_p2;
reg   [18:0] sub_ln152_reg_662;
wire    ap_CS_fsm_state11;
wire   [18:0] val_fu_443_p2;
reg   [18:0] val_reg_667;
wire    ap_CS_fsm_state12;
reg   [7:0] tmp_6_reg_674;
wire   [7:0] INDEX_fu_500_p3;
reg   [7:0] INDEX_reg_679;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [7:0] RECIP_TABLES_load_reg_689;
wire    ap_CS_fsm_state15;
wire   [16:0] shl_ln154_fu_525_p2;
reg   [16:0] shl_ln154_reg_694;
wire    ap_CS_fsm_state16;
wire    grp_do_softmax_func_Pipeline_1_fu_205_ap_start;
wire    grp_do_softmax_func_Pipeline_1_fu_205_ap_done;
wire    grp_do_softmax_func_Pipeline_1_fu_205_ap_idle;
wire    grp_do_softmax_func_Pipeline_1_fu_205_ap_ready;
wire    grp_do_softmax_func_Pipeline_1_fu_205_i_stream_adapted_read;
wire   [16:0] grp_do_softmax_func_Pipeline_1_fu_205_p_out;
wire    grp_do_softmax_func_Pipeline_1_fu_205_p_out_ap_vld;
wire   [15:0] grp_do_softmax_func_Pipeline_1_fu_205_add_i_1_lcssa91_out;
wire    grp_do_softmax_func_Pipeline_1_fu_205_add_i_1_lcssa91_out_ap_vld;
wire   [6:0] grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_address0;
wire    grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_ce0;
wire    grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_we0;
wire   [33:0] grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_d0;
wire    grp_do_softmax_func_Pipeline_2_fu_218_ap_start;
wire    grp_do_softmax_func_Pipeline_2_fu_218_ap_done;
wire    grp_do_softmax_func_Pipeline_2_fu_218_ap_idle;
wire    grp_do_softmax_func_Pipeline_2_fu_218_ap_ready;
wire   [15:0] grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out;
wire    grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out_ap_vld;
wire   [6:0] grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_BUF_72_address0;
wire    grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_BUF_72_ce0;
wire   [6:0] grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_address0;
wire    grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_ce0;
wire    grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_we0;
wire   [18:0] grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_d0;
wire    grp_do_softmax_func_Pipeline_3_fu_231_ap_start;
wire    grp_do_softmax_func_Pipeline_3_fu_231_ap_done;
wire    grp_do_softmax_func_Pipeline_3_fu_231_ap_idle;
wire    grp_do_softmax_func_Pipeline_3_fu_231_ap_ready;
wire   [31:0] grp_do_softmax_func_Pipeline_3_fu_231_softmax_stream_din;
wire    grp_do_softmax_func_Pipeline_3_fu_231_softmax_stream_write;
wire   [6:0] grp_do_softmax_func_Pipeline_3_fu_231_softmax_inst_R_EXP_73_address0;
wire    grp_do_softmax_func_Pipeline_3_fu_231_softmax_inst_R_EXP_73_ce0;
reg   [3:0] tt_reg_194;
wire   [0:0] icmp_ln82_fu_279_p2;
wire    ap_CS_fsm_state17;
reg    grp_do_softmax_func_Pipeline_1_fu_205_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    grp_do_softmax_func_Pipeline_2_fu_218_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_do_softmax_func_Pipeline_3_fu_231_ap_start_reg;
wire   [63:0] zext_ln149_fu_421_p1;
wire   [63:0] zext_ln154_fu_514_p1;
reg   [3:0] h_fu_112;
wire   [0:0] icmp_ln83_fu_303_p2;
reg   [15:0] add_i_1_lcssa_lcssa94_fu_116;
reg   [16:0] p_lcssa_lcssa17_fu_120;
reg    RECIP_ALPHAS_ce0_local;
reg    RECIP_LOG2DENOMS_ce0_local;
reg    RECIP_OFFSETS_DIFF_ce0_local;
reg    RECIP_TABLES_ce0_local;
wire   [32:0] zext_ln83_fu_315_p1;
wire  signed [15:0] tmp_fu_374_p1;
wire   [4:0] tmp_fu_374_p4;
wire  signed [15:0] tmp_4_fu_390_p1;
wire   [1:0] tmp_4_fu_390_p4;
wire   [1:0] zext_ln142_fu_411_p1;
wire  signed [15:0] sext_ln152_fu_428_p0;
wire  signed [18:0] sext_ln152_fu_428_p1;
wire   [18:0] zext_ln152_fu_431_p1;
wire   [18:0] zext_ln152_1_fu_440_p1;
wire   [0:0] tmp_7_fu_473_p3;
wire   [0:0] xor_ln42_fu_480_p2;
wire   [0:0] tmp_5_fu_461_p3;
wire   [0:0] icmp_ln43_fu_468_p2;
wire   [0:0] or_ln42_fu_494_p2;
wire   [7:0] select_ln42_fu_486_p3;
wire   [7:0] trunc_ln41_fu_458_p1;
wire   [9:0] or_ln_fu_508_p3;
wire   [16:0] RECIP_TABLES_load_cast_fu_522_p1;
wire   [16:0] OFFSET_DIFF_cast_fu_519_p1;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 17'd1;
//#0 softmax_inst_R_EXP_SUM_74 = 16'd0;
//#0 softmax_inst_R_MAXVAL_71 = 17'd0;
//#0 grp_do_softmax_func_Pipeline_1_fu_205_ap_start_reg = 1'b0;
//#0 grp_do_softmax_func_Pipeline_2_fu_218_ap_start_reg = 1'b0;
//#0 grp_do_softmax_func_Pipeline_3_fu_231_ap_start_reg = 1'b0;
//#0 h_fu_112 = 4'd0;
//#0 add_i_1_lcssa_lcssa94_fu_116 = 16'd0;
//#0 p_lcssa_lcssa17_fu_120 = 17'd0;
end

SOFTMAX_QUANT_do_softmax_func_softmax_inst_R_BUF_72_RAM_AUTO_1R1W #(
    .DataWidth( 34 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
softmax_inst_R_BUF_72_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(softmax_inst_R_BUF_72_address0),
    .ce0(softmax_inst_R_BUF_72_ce0),
    .we0(softmax_inst_R_BUF_72_we0),
    .d0(grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_d0),
    .q0(softmax_inst_R_BUF_72_q0)
);

SOFTMAX_QUANT_do_softmax_func_softmax_inst_R_EXP_73_RAM_AUTO_1R1W #(
    .DataWidth( 19 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
softmax_inst_R_EXP_73_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(softmax_inst_R_EXP_73_address0),
    .ce0(softmax_inst_R_EXP_73_ce0),
    .we0(softmax_inst_R_EXP_73_we0),
    .d0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_d0),
    .q0(softmax_inst_R_EXP_73_q0)
);

SOFTMAX_QUANT_do_softmax_func_RECIP_ALPHAS_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
RECIP_ALPHAS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RECIP_ALPHAS_address0),
    .ce0(RECIP_ALPHAS_ce0_local),
    .q0(RECIP_ALPHAS_q0)
);

SOFTMAX_QUANT_do_softmax_func_RECIP_LOG2DENOMS_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
RECIP_LOG2DENOMS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RECIP_LOG2DENOMS_address0),
    .ce0(RECIP_LOG2DENOMS_ce0_local),
    .q0(RECIP_LOG2DENOMS_q0)
);

SOFTMAX_QUANT_do_softmax_func_RECIP_OFFSETS_DIFF_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
RECIP_OFFSETS_DIFF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RECIP_OFFSETS_DIFF_address0),
    .ce0(RECIP_OFFSETS_DIFF_ce0_local),
    .q0(RECIP_OFFSETS_DIFF_q0)
);

SOFTMAX_QUANT_do_softmax_func_RECIP_TABLES_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
RECIP_TABLES_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RECIP_TABLES_address0),
    .ce0(RECIP_TABLES_ce0_local),
    .q0(RECIP_TABLES_q0)
);

SOFTMAX_QUANT_do_softmax_func_Pipeline_1 grp_do_softmax_func_Pipeline_1_fu_205(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_softmax_func_Pipeline_1_fu_205_ap_start),
    .ap_done(grp_do_softmax_func_Pipeline_1_fu_205_ap_done),
    .ap_idle(grp_do_softmax_func_Pipeline_1_fu_205_ap_idle),
    .ap_ready(grp_do_softmax_func_Pipeline_1_fu_205_ap_ready),
    .i_stream_adapted_dout(i_stream_adapted_dout),
    .i_stream_adapted_empty_n(i_stream_adapted_empty_n),
    .i_stream_adapted_read(grp_do_softmax_func_Pipeline_1_fu_205_i_stream_adapted_read),
    .i_stream_adapted_num_data_valid(3'd0),
    .i_stream_adapted_fifo_cap(3'd0),
    .p_lcssa16(p_lcssa_lcssa17_load_1_reg_603),
    .add_i_1_lcssa93(add_i_1_lcssa_lcssa94_load_1_reg_598),
    .empty(empty_reg_593),
    .p_out(grp_do_softmax_func_Pipeline_1_fu_205_p_out),
    .p_out_ap_vld(grp_do_softmax_func_Pipeline_1_fu_205_p_out_ap_vld),
    .add_i_1_lcssa91_out(grp_do_softmax_func_Pipeline_1_fu_205_add_i_1_lcssa91_out),
    .add_i_1_lcssa91_out_ap_vld(grp_do_softmax_func_Pipeline_1_fu_205_add_i_1_lcssa91_out_ap_vld),
    .softmax_inst_R_BUF_72_address0(grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_address0),
    .softmax_inst_R_BUF_72_ce0(grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_ce0),
    .softmax_inst_R_BUF_72_we0(grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_we0),
    .softmax_inst_R_BUF_72_d0(grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_d0)
);

SOFTMAX_QUANT_do_softmax_func_Pipeline_2 grp_do_softmax_func_Pipeline_2_fu_218(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_softmax_func_Pipeline_2_fu_218_ap_start),
    .ap_done(grp_do_softmax_func_Pipeline_2_fu_218_ap_done),
    .ap_idle(grp_do_softmax_func_Pipeline_2_fu_218_ap_idle),
    .ap_ready(grp_do_softmax_func_Pipeline_2_fu_218_ap_ready),
    .add_i_1_lcssa91_reload(grp_do_softmax_func_Pipeline_1_fu_205_add_i_1_lcssa91_out),
    .conv3_i_i158(grp_do_softmax_func_Pipeline_1_fu_205_p_out),
    .V22_i_i126214_promoted24_out(grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out),
    .V22_i_i126214_promoted24_out_ap_vld(grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out_ap_vld),
    .softmax_inst_R_BUF_72_address0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_BUF_72_address0),
    .softmax_inst_R_BUF_72_ce0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_BUF_72_ce0),
    .softmax_inst_R_BUF_72_q0(softmax_inst_R_BUF_72_q0),
    .softmax_inst_R_EXP_73_address0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_address0),
    .softmax_inst_R_EXP_73_ce0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_ce0),
    .softmax_inst_R_EXP_73_we0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_we0),
    .softmax_inst_R_EXP_73_d0(grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_d0)
);

SOFTMAX_QUANT_do_softmax_func_Pipeline_3 grp_do_softmax_func_Pipeline_3_fu_231(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_softmax_func_Pipeline_3_fu_231_ap_start),
    .ap_done(grp_do_softmax_func_Pipeline_3_fu_231_ap_done),
    .ap_idle(grp_do_softmax_func_Pipeline_3_fu_231_ap_idle),
    .ap_ready(grp_do_softmax_func_Pipeline_3_fu_231_ap_ready),
    .softmax_stream_din(grp_do_softmax_func_Pipeline_3_fu_231_softmax_stream_din),
    .softmax_stream_full_n(softmax_stream_full_n),
    .softmax_stream_write(grp_do_softmax_func_Pipeline_3_fu_231_softmax_stream_write),
    .softmax_stream_num_data_valid(3'd0),
    .softmax_stream_fifo_cap(3'd0),
    .zext_ln158(shl_ln154_reg_694),
    .zext_ln158_1(shl_ln154_reg_694),
    .softmax_inst_R_EXP_73_address0(grp_do_softmax_func_Pipeline_3_fu_231_softmax_inst_R_EXP_73_address0),
    .softmax_inst_R_EXP_73_ce0(grp_do_softmax_func_Pipeline_3_fu_231_softmax_inst_R_EXP_73_ce0),
    .softmax_inst_R_EXP_73_q0(softmax_inst_R_EXP_73_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln82_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_softmax_func_Pipeline_1_fu_205_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_softmax_func_Pipeline_1_fu_205_ap_start_reg <= 1'b1;
        end else if ((grp_do_softmax_func_Pipeline_1_fu_205_ap_ready == 1'b1)) begin
            grp_do_softmax_func_Pipeline_1_fu_205_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_softmax_func_Pipeline_2_fu_218_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_do_softmax_func_Pipeline_2_fu_218_ap_start_reg <= 1'b1;
        end else if ((grp_do_softmax_func_Pipeline_2_fu_218_ap_ready == 1'b1)) begin
            grp_do_softmax_func_Pipeline_2_fu_218_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_softmax_func_Pipeline_3_fu_231_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_do_softmax_func_Pipeline_3_fu_231_ap_start_reg <= 1'b1;
        end else if ((grp_do_softmax_func_Pipeline_3_fu_231_ap_ready == 1'b1)) begin
            grp_do_softmax_func_Pipeline_3_fu_231_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        add_i_1_lcssa_lcssa94_fu_116 <= softmax_inst_R_EXP_SUM_74;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        add_i_1_lcssa_lcssa94_fu_116 <= grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        h_fu_112 <= 4'd0;
    end else if (((icmp_ln83_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_fu_112 <= h_2_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        p_lcssa_lcssa17_fu_120 <= softmax_inst_R_MAXVAL_71;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_lcssa_lcssa17_fu_120 <= grp_do_softmax_func_Pipeline_1_fu_205_p_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_do_softmax_func_Pipeline_3_fu_231_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        tt_reg_194 <= add_ln83_reg_588;
    end else if (((icmp_ln82_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_reg_194 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ALPHA_reg_647 <= RECIP_ALPHAS_q0;
        LOG2DENOM_reg_652 <= RECIP_LOG2DENOMS_q0;
        OFFSET_DIFF_reg_657 <= RECIP_OFFSETS_DIFF_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        INDEX_reg_679 <= INDEX_fu_500_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        LUT_IDX_1_reg_627 <= LUT_IDX_1_fu_414_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LUT_IDX_reg_617 <= LUT_IDX_fu_384_p2;
        icmp_ln145_reg_622 <= icmp_ln145_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        RECIP_TABLES_load_reg_689 <= RECIP_TABLES_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_i_1_lcssa_lcssa94_load_1_reg_598 <= add_i_1_lcssa_lcssa94_fu_116;
        p_lcssa_lcssa17_load_1_reg_603 <= p_lcssa_lcssa17_fu_120;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln83_reg_588 <= add_ln83_fu_309_p2;
        empty_reg_593 <= empty_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h_2_reg_580 <= h_2_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        sext_ln133_reg_572 <= sext_ln133_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        shl_ln154_reg_694 <= shl_ln154_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        softmax_inst_R_EXP_SUM_74 <= add_i_1_lcssa_lcssa94_fu_116;
        softmax_inst_R_MAXVAL_71 <= p_lcssa_lcssa17_fu_120;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_ln152_reg_662 <= sub_ln152_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_6_reg_674 <= {{val_fu_443_p2[15:8]}};
        val_reg_667 <= val_fu_443_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        RECIP_ALPHAS_ce0_local = 1'b1;
    end else begin
        RECIP_ALPHAS_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        RECIP_LOG2DENOMS_ce0_local = 1'b1;
    end else begin
        RECIP_LOG2DENOMS_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        RECIP_OFFSETS_DIFF_ce0_local = 1'b1;
    end else begin
        RECIP_OFFSETS_DIFF_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        RECIP_TABLES_ce0_local = 1'b1;
    end else begin
        RECIP_TABLES_ce0_local = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_do_softmax_func_Pipeline_3_fu_231_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_do_softmax_func_Pipeline_1_fu_205_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_do_softmax_func_Pipeline_2_fu_218_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln82_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_blk_n = pos_r_empty_n;
    end else begin
        pos_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        pos_r_read = 1'b1;
    end else begin
        pos_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        softmax_inst_R_BUF_72_address0 = grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_BUF_72_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        softmax_inst_R_BUF_72_address0 = grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_address0;
    end else begin
        softmax_inst_R_BUF_72_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        softmax_inst_R_BUF_72_ce0 = grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_BUF_72_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        softmax_inst_R_BUF_72_ce0 = grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_ce0;
    end else begin
        softmax_inst_R_BUF_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        softmax_inst_R_BUF_72_we0 = grp_do_softmax_func_Pipeline_1_fu_205_softmax_inst_R_BUF_72_we0;
    end else begin
        softmax_inst_R_BUF_72_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        softmax_inst_R_EXP_73_address0 = grp_do_softmax_func_Pipeline_3_fu_231_softmax_inst_R_EXP_73_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        softmax_inst_R_EXP_73_address0 = grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_address0;
    end else begin
        softmax_inst_R_EXP_73_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        softmax_inst_R_EXP_73_ce0 = grp_do_softmax_func_Pipeline_3_fu_231_softmax_inst_R_EXP_73_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        softmax_inst_R_EXP_73_ce0 = grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_ce0;
    end else begin
        softmax_inst_R_EXP_73_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        softmax_inst_R_EXP_73_we0 = grp_do_softmax_func_Pipeline_2_fu_218_softmax_inst_R_EXP_73_we0;
    end else begin
        softmax_inst_R_EXP_73_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln82_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln83_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_do_softmax_func_Pipeline_1_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_do_softmax_func_Pipeline_2_fu_218_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_do_softmax_func_Pipeline_3_fu_231_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INDEX_fu_500_p3 = ((or_ln42_fu_494_p2[0:0] == 1'b1) ? select_ln42_fu_486_p3 : trunc_ln41_fu_458_p1);

assign LUT_IDX_1_fu_414_p3 = ((icmp_ln145_reg_622[0:0] == 1'b1) ? 2'd2 : zext_ln142_fu_411_p1);

assign LUT_IDX_fu_384_p2 = (($signed(tmp_fu_374_p4) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign OFFSET_DIFF_cast_fu_519_p1 = OFFSET_DIFF_reg_657;

assign RECIP_ALPHAS_address0 = zext_ln149_fu_421_p1;

assign RECIP_LOG2DENOMS_address0 = zext_ln149_fu_421_p1;

assign RECIP_OFFSETS_DIFF_address0 = zext_ln149_fu_421_p1;

assign RECIP_TABLES_address0 = zext_ln154_fu_514_p1;

assign RECIP_TABLES_load_cast_fu_522_p1 = RECIP_TABLES_load_reg_689;

assign add_ln83_fu_309_p2 = (tt_reg_194 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((pos_r_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign empty_fu_319_p2 = ($signed(sext_ln133_reg_572) + $signed(zext_ln83_fu_315_p1));

assign grp_do_softmax_func_Pipeline_1_fu_205_ap_start = grp_do_softmax_func_Pipeline_1_fu_205_ap_start_reg;

assign grp_do_softmax_func_Pipeline_2_fu_218_ap_start = grp_do_softmax_func_Pipeline_2_fu_218_ap_start_reg;

assign grp_do_softmax_func_Pipeline_3_fu_231_ap_start = grp_do_softmax_func_Pipeline_3_fu_231_ap_start_reg;

assign h_2_fu_285_p2 = (h_fu_112 + 4'd1);

assign i_stream_adapted_read = grp_do_softmax_func_Pipeline_1_fu_205_i_stream_adapted_read;

assign icmp_ln145_fu_400_p2 = ((tmp_4_fu_390_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_468_p2 = (($signed(tmp_6_reg_674) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_279_p2 = ((h_fu_112 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_303_p2 = ((tt_reg_194 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln42_fu_494_p2 = (tmp_5_fu_461_p3 | icmp_ln43_fu_468_p2);

assign or_ln_fu_508_p3 = {{LUT_IDX_1_reg_627}, {INDEX_reg_679}};

assign select_ln42_fu_486_p3 = ((xor_ln42_fu_480_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign sext_ln133_fu_249_p1 = $signed(pos_r_dout);

assign sext_ln152_fu_428_p0 = grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out;

assign sext_ln152_fu_428_p1 = sext_ln152_fu_428_p0;

assign shl_ln154_fu_525_p2 = RECIP_TABLES_load_cast_fu_522_p1 << OFFSET_DIFF_cast_fu_519_p1;

assign softmax_stream_din = grp_do_softmax_func_Pipeline_3_fu_231_softmax_stream_din;

assign softmax_stream_write = grp_do_softmax_func_Pipeline_3_fu_231_softmax_stream_write;

assign start_out = real_start;

assign sub_ln152_fu_434_p2 = ($signed(sext_ln152_fu_428_p1) - $signed(zext_ln152_fu_431_p1));

assign tmp_4_fu_390_p1 = grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out;

assign tmp_4_fu_390_p4 = {{tmp_4_fu_390_p1[15:14]}};

assign tmp_5_fu_461_p3 = val_reg_667[32'd15];

assign tmp_7_fu_473_p3 = val_reg_667[32'd18];

assign tmp_fu_374_p1 = grp_do_softmax_func_Pipeline_2_fu_218_V22_i_i126214_promoted24_out;

assign tmp_fu_374_p4 = {{tmp_fu_374_p1[15:11]}};

assign trunc_ln41_fu_458_p1 = val_reg_667[7:0];

assign val_fu_443_p2 = $signed(sub_ln152_reg_662) >>> zext_ln152_1_fu_440_p1;

assign xor_ln42_fu_480_p2 = (tmp_7_fu_473_p3 ^ 1'd1);

assign zext_ln142_fu_411_p1 = LUT_IDX_reg_617;

assign zext_ln149_fu_421_p1 = LUT_IDX_1_fu_414_p3;

assign zext_ln152_1_fu_440_p1 = LOG2DENOM_reg_652;

assign zext_ln152_fu_431_p1 = ALPHA_reg_647;

assign zext_ln154_fu_514_p1 = or_ln_fu_508_p3;

assign zext_ln83_fu_315_p1 = tt_reg_194;

endmodule //SOFTMAX_QUANT_do_softmax_func
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_softmax_func_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_stream_adapted_dout,
        i_stream_adapted_empty_n,
        i_stream_adapted_read,
        i_stream_adapted_num_data_valid,
        i_stream_adapted_fifo_cap,
        p_lcssa16,
        add_i_1_lcssa93,
        empty,
        p_out,
        p_out_ap_vld,
        add_i_1_lcssa91_out,
        add_i_1_lcssa91_out_ap_vld,
        softmax_inst_R_BUF_72_address0,
        softmax_inst_R_BUF_72_ce0,
        softmax_inst_R_BUF_72_we0,
        softmax_inst_R_BUF_72_d0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [33:0] i_stream_adapted_dout;
input   i_stream_adapted_empty_n;
output   i_stream_adapted_read;
input  [2:0] i_stream_adapted_num_data_valid;
input  [2:0] i_stream_adapted_fifo_cap;
input  [16:0] p_lcssa16;
input  [15:0] add_i_1_lcssa93;
input  [32:0] empty;
output  [16:0] p_out;
output   p_out_ap_vld;
output  [15:0] add_i_1_lcssa91_out;
output   add_i_1_lcssa91_out_ap_vld;
output  [6:0] softmax_inst_R_BUF_72_address0;
output   softmax_inst_R_BUF_72_ce0;
output   softmax_inst_R_BUF_72_we0;
output  [33:0] softmax_inst_R_BUF_72_d0;

reg ap_idle;
reg i_stream_adapted_read;
reg p_out_ap_vld;
reg add_i_1_lcssa91_out_ap_vld;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln86_reg_366;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln86_fu_151_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i_stream_adapted_blk_n;
reg   [6:0] st_2_reg_360;
reg   [0:0] icmp_ln86_reg_366_pp0_iter1_reg;
wire   [0:0] icmp_ln98_fu_175_p2;
reg   [0:0] icmp_ln98_reg_370;
wire   [0:0] icmp_ln98_1_fu_193_p2;
reg   [0:0] icmp_ln98_1_reg_375;
wire   [16:0] select_ln98_fu_236_p3;
reg   [16:0] select_ln98_reg_380;
wire   [16:0] select_ln98_1_fu_255_p3;
reg   [16:0] select_ln98_1_reg_386;
wire   [0:0] icmp_ln102_fu_263_p2;
reg   [0:0] icmp_ln102_reg_392;
wire   [63:0] zext_ln86_fu_207_p1;
reg   [6:0] st_fu_70;
wire   [6:0] add_ln86_fu_157_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_st_2;
reg   [15:0] add_i_1_lcssa91_fu_74;
wire   [15:0] select_ln102_1_fu_268_p3;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [16:0] empty_36_fu_78;
wire   [16:0] select_ln116_1_fu_317_p3;
reg    softmax_inst_R_BUF_72_we0_local;
wire   [33:0] tmp_2_fu_276_p3;
reg    softmax_inst_R_BUF_72_ce0_local;
wire   [7:0] tmp_1_fu_163_p3;
wire   [32:0] zext_ln96_fu_171_p1;
wire   [7:0] or_ln1_fu_181_p3;
wire   [32:0] zext_ln98_fu_189_p1;
wire   [16:0] trunc_ln89_fu_211_p1;
wire   [0:0] xor_ln98_fu_225_p2;
wire   [16:0] add_ln98_fu_230_p2;
wire   [16:0] trunc_ln89_1_fu_215_p4;
wire   [0:0] xor_ln98_1_fu_244_p2;
wire   [16:0] add_ln98_1_fu_249_p2;
wire   [16:0] select_ln102_fu_293_p3;
wire   [0:0] icmp_ln224_fu_300_p2;
wire   [16:0] select_ln116_fu_305_p3;
wire   [0:0] icmp_ln224_1_fu_312_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 st_fu_70 = 7'd0;
//#0 add_i_1_lcssa91_fu_74 = 16'd0;
//#0 empty_36_fu_78 = 17'd0;
//#0 ap_done_reg = 1'b0;
end

SOFTMAX_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        add_i_1_lcssa91_fu_74 <= add_i_1_lcssa93;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln86_reg_366 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        add_i_1_lcssa91_fu_74 <= select_ln102_1_fu_268_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        empty_36_fu_78 <= p_lcssa16;
    end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln86_reg_366_pp0_iter1_reg == 1'd0))) begin
        empty_36_fu_78 <= select_ln116_1_fu_317_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln86_fu_151_p2 == 1'd0)) begin
            st_fu_70 <= add_ln86_fu_157_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            st_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln86_reg_366 <= icmp_ln86_fu_151_p2;
        icmp_ln98_1_reg_375 <= icmp_ln98_1_fu_193_p2;
        icmp_ln98_reg_370 <= icmp_ln98_fu_175_p2;
        st_2_reg_360 <= ap_sig_allocacmp_st_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln102_reg_392 <= icmp_ln102_fu_263_p2;
        icmp_ln86_reg_366_pp0_iter1_reg <= icmp_ln86_reg_366;
        select_ln98_1_reg_386 <= select_ln98_1_fu_255_p3;
        select_ln98_reg_380 <= select_ln98_fu_236_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln86_reg_366_pp0_iter1_reg == 1'd1))) begin
        add_i_1_lcssa91_out_ap_vld = 1'b1;
    end else begin
        add_i_1_lcssa91_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln86_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_st_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_st_2 = st_fu_70;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_366 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        i_stream_adapted_blk_n = i_stream_adapted_empty_n;
    end else begin
        i_stream_adapted_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln86_reg_366 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        i_stream_adapted_read = 1'b1;
    end else begin
        i_stream_adapted_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln86_reg_366_pp0_iter1_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        softmax_inst_R_BUF_72_ce0_local = 1'b1;
    end else begin
        softmax_inst_R_BUF_72_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln86_reg_366 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        softmax_inst_R_BUF_72_we0_local = 1'b1;
    end else begin
        softmax_inst_R_BUF_72_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln86_reg_366_pp0_iter1_reg == 1'd1)) | ((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_i_1_lcssa91_out = add_i_1_lcssa91_fu_74;

assign add_ln86_fu_157_p2 = (ap_sig_allocacmp_st_2 + 7'd1);

assign add_ln98_1_fu_249_p2 = ($signed(trunc_ln89_1_fu_215_p4) + $signed(17'd126976));

assign add_ln98_fu_230_p2 = ($signed(trunc_ln89_fu_211_p1) + $signed(17'd126976));

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln86_reg_366 == 1'd0) & (i_stream_adapted_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln102_fu_263_p2 = ((st_2_reg_360 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_312_p2 = (($signed(select_ln116_fu_305_p3) < $signed(select_ln98_1_reg_386)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_300_p2 = (($signed(select_ln102_fu_293_p3) < $signed(select_ln98_reg_380)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_151_p2 = ((ap_sig_allocacmp_st_2 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_193_p2 = (($signed(empty) < $signed(zext_ln98_fu_189_p1)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_175_p2 = (($signed(empty) < $signed(zext_ln96_fu_171_p1)) ? 1'b1 : 1'b0);

assign or_ln1_fu_181_p3 = {{ap_sig_allocacmp_st_2}, {1'd1}};

assign p_out = empty_36_fu_78;

assign select_ln102_1_fu_268_p3 = ((icmp_ln102_fu_263_p2[0:0] == 1'b1) ? 16'd0 : add_i_1_lcssa91_fu_74);

assign select_ln102_fu_293_p3 = ((icmp_ln102_reg_392[0:0] == 1'b1) ? 17'd126976 : empty_36_fu_78);

assign select_ln116_1_fu_317_p3 = ((icmp_ln224_1_fu_312_p2[0:0] == 1'b1) ? select_ln98_1_reg_386 : select_ln116_fu_305_p3);

assign select_ln116_fu_305_p3 = ((icmp_ln224_fu_300_p2[0:0] == 1'b1) ? select_ln98_reg_380 : select_ln102_fu_293_p3);

assign select_ln98_1_fu_255_p3 = ((xor_ln98_1_fu_244_p2[0:0] == 1'b1) ? trunc_ln89_1_fu_215_p4 : add_ln98_1_fu_249_p2);

assign select_ln98_fu_236_p3 = ((xor_ln98_fu_225_p2[0:0] == 1'b1) ? trunc_ln89_fu_211_p1 : add_ln98_fu_230_p2);

assign softmax_inst_R_BUF_72_address0 = zext_ln86_fu_207_p1;

assign softmax_inst_R_BUF_72_ce0 = softmax_inst_R_BUF_72_ce0_local;

assign softmax_inst_R_BUF_72_d0 = tmp_2_fu_276_p3;

assign softmax_inst_R_BUF_72_we0 = softmax_inst_R_BUF_72_we0_local;

assign tmp_1_fu_163_p3 = {{ap_sig_allocacmp_st_2}, {1'd0}};

assign tmp_2_fu_276_p3 = {{select_ln98_1_fu_255_p3}, {select_ln98_fu_236_p3}};

assign trunc_ln89_1_fu_215_p4 = {{i_stream_adapted_dout[33:17]}};

assign trunc_ln89_fu_211_p1 = i_stream_adapted_dout[16:0];

assign xor_ln98_1_fu_244_p2 = (icmp_ln98_1_reg_375 ^ 1'd1);

assign xor_ln98_fu_225_p2 = (icmp_ln98_reg_370 ^ 1'd1);

assign zext_ln86_fu_207_p1 = st_2_reg_360;

assign zext_ln96_fu_171_p1 = tmp_1_fu_163_p3;

assign zext_ln98_fu_189_p1 = or_ln1_fu_181_p3;

endmodule //SOFTMAX_QUANT_do_softmax_func_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_softmax_func_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_i_1_lcssa91_reload,
        conv3_i_i158,
        V22_i_i126214_promoted24_out,
        V22_i_i126214_promoted24_out_ap_vld,
        softmax_inst_R_BUF_72_address0,
        softmax_inst_R_BUF_72_ce0,
        softmax_inst_R_BUF_72_q0,
        softmax_inst_R_EXP_73_address0,
        softmax_inst_R_EXP_73_ce0,
        softmax_inst_R_EXP_73_we0,
        softmax_inst_R_EXP_73_d0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] add_i_1_lcssa91_reload;
input  [16:0] conv3_i_i158;
output  [15:0] V22_i_i126214_promoted24_out;
output   V22_i_i126214_promoted24_out_ap_vld;
output  [6:0] softmax_inst_R_BUF_72_address0;
output   softmax_inst_R_BUF_72_ce0;
input  [33:0] softmax_inst_R_BUF_72_q0;
output  [6:0] softmax_inst_R_EXP_73_address0;
output   softmax_inst_R_EXP_73_ce0;
output   softmax_inst_R_EXP_73_we0;
output  [18:0] softmax_inst_R_EXP_73_d0;

reg ap_idle;
reg V22_i_i126214_promoted24_out_ap_vld;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire   [0:0] icmp_ln122_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] EXP_TABLE_address0;
wire   [7:0] EXP_TABLE_q0;
wire   [7:0] EXP_TABLE_address1;
wire   [7:0] EXP_TABLE_q1;
wire  signed [17:0] conv3_i_i158_cast_fu_138_p1;
reg  signed [17:0] conv3_i_i158_cast_reg_376;
reg   [0:0] icmp_ln122_reg_382;
reg   [0:0] icmp_ln122_reg_382_pp0_iter1_reg;
reg   [0:0] icmp_ln122_reg_382_pp0_iter2_reg;
reg   [0:0] icmp_ln122_reg_382_pp0_iter3_reg;
reg   [0:0] icmp_ln122_reg_382_pp0_iter4_reg;
reg   [0:0] icmp_ln122_reg_382_pp0_iter5_reg;
reg   [0:0] icmp_ln122_reg_382_pp0_iter6_reg;
wire   [63:0] zext_ln122_fu_167_p1;
reg   [63:0] zext_ln122_reg_386;
reg   [63:0] zext_ln122_reg_386_pp0_iter1_reg;
reg   [63:0] zext_ln122_reg_386_pp0_iter2_reg;
reg   [63:0] zext_ln122_reg_386_pp0_iter3_reg;
reg   [63:0] zext_ln122_reg_386_pp0_iter4_reg;
reg   [63:0] zext_ln122_reg_386_pp0_iter5_reg;
wire   [16:0] trunc_ln129_fu_177_p1;
reg   [16:0] trunc_ln129_reg_396;
reg   [16:0] tmp_4_reg_401;
wire   [17:0] val_fu_192_p2;
reg   [17:0] val_reg_406;
reg   [0:0] tmp_reg_411;
reg   [9:0] tmp_1_reg_417;
wire   [17:0] val_1_fu_218_p2;
reg   [17:0] val_1_reg_422;
reg   [0:0] tmp_2_reg_427;
reg   [9:0] tmp_3_reg_433;
wire   [7:0] select_ln42_fu_267_p3;
reg   [7:0] select_ln42_reg_438;
wire   [7:0] select_ln42_1_fu_301_p3;
reg   [7:0] select_ln42_1_reg_443;
reg   [7:0] EXP_VAL_reg_458;
reg   [7:0] EXP_VAL_1_reg_464;
wire   [8:0] add_ln133_fu_334_p2;
reg   [8:0] add_ln133_reg_470;
wire   [63:0] zext_ln130_fu_309_p1;
wire   [63:0] zext_ln130_1_fu_313_p1;
reg   [15:0] V22_i_i126214_promoted24_fu_60;
wire   [15:0] add_ln133_1_fu_346_p2;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [6:0] st_1_fu_64;
wire   [6:0] add_ln122_fu_161_p2;
reg   [6:0] ap_sig_allocacmp_st;
reg    softmax_inst_R_BUF_72_ce0_local;
reg    EXP_TABLE_ce1_local;
reg    EXP_TABLE_ce0_local;
reg    softmax_inst_R_EXP_73_we0_local;
wire   [18:0] tmp_5_fu_323_p3;
reg    softmax_inst_R_EXP_73_ce0_local;
wire  signed [17:0] sext_ln129_fu_189_p1;
wire  signed [17:0] sext_ln129_1_fu_215_p1;
wire   [0:0] xor_ln42_fu_249_p2;
wire   [0:0] icmp_ln43_fu_244_p2;
wire   [0:0] or_ln42_fu_262_p2;
wire   [7:0] select_ln42_2_fu_254_p3;
wire   [7:0] trunc_ln41_fu_241_p1;
wire   [0:0] xor_ln42_1_fu_283_p2;
wire   [0:0] icmp_ln43_1_fu_278_p2;
wire   [0:0] or_ln42_1_fu_296_p2;
wire   [7:0] select_ln42_3_fu_288_p3;
wire   [7:0] trunc_ln41_1_fu_275_p1;
wire   [10:0] zext_ln130_2_fu_317_p1;
wire   [8:0] zext_ln133_fu_331_p1;
wire   [8:0] zext_ln129_fu_320_p1;
wire   [15:0] zext_ln133_1_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 V22_i_i126214_promoted24_fu_60 = 16'd0;
//#0 st_1_fu_64 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

SOFTMAX_QUANT_do_softmax_func_Pipeline_2_EXP_TABLE_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
EXP_TABLE_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(EXP_TABLE_address0),
    .ce0(EXP_TABLE_ce0_local),
    .q0(EXP_TABLE_q0),
    .address1(EXP_TABLE_address1),
    .ce1(EXP_TABLE_ce1_local),
    .q1(EXP_TABLE_q1)
);

SOFTMAX_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter7_fsm_state8) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
        V22_i_i126214_promoted24_fu_60 <= add_i_1_lcssa91_reload;
    end else if (((1'b1 == ap_CS_iter7_fsm_state8) & (icmp_ln122_reg_382_pp0_iter6_reg == 1'd0))) begin
        V22_i_i126214_promoted24_fu_60 <= add_ln133_1_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter7_fsm_state8) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_iter6_fsm_state7)) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
        if ((icmp_ln122_fu_155_p2 == 1'd0)) begin
            st_1_fu_64 <= add_ln122_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            st_1_fu_64 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter5_fsm_state6)) begin
        EXP_VAL_1_reg_464 <= EXP_TABLE_q0;
        EXP_VAL_reg_458 <= EXP_TABLE_q1;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln122_reg_382_pp0_iter5_reg <= icmp_ln122_reg_382_pp0_iter4_reg;
        zext_ln122_reg_386_pp0_iter5_reg[6 : 0] <= zext_ln122_reg_386_pp0_iter4_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter6_fsm_state7)) begin
        add_ln133_reg_470 <= add_ln133_fu_334_p2;
        icmp_ln122_reg_382_pp0_iter6_reg <= icmp_ln122_reg_382_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        conv3_i_i158_cast_reg_376 <= conv3_i_i158_cast_fu_138_p1;
        icmp_ln122_reg_382 <= icmp_ln122_fu_155_p2;
        zext_ln122_reg_386[6 : 0] <= zext_ln122_fu_167_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln122_reg_382_pp0_iter1_reg <= icmp_ln122_reg_382;
        tmp_4_reg_401 <= {{softmax_inst_R_BUF_72_q0[33:17]}};
        trunc_ln129_reg_396 <= trunc_ln129_fu_177_p1;
        zext_ln122_reg_386_pp0_iter1_reg[6 : 0] <= zext_ln122_reg_386[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln122_reg_382_pp0_iter2_reg <= icmp_ln122_reg_382_pp0_iter1_reg;
        tmp_1_reg_417 <= {{val_fu_192_p2[17:8]}};
        tmp_2_reg_427 <= val_1_fu_218_p2[32'd17];
        tmp_3_reg_433 <= {{val_1_fu_218_p2[17:8]}};
        tmp_reg_411 <= val_fu_192_p2[32'd17];
        val_1_reg_422 <= val_1_fu_218_p2;
        val_reg_406 <= val_fu_192_p2;
        zext_ln122_reg_386_pp0_iter2_reg[6 : 0] <= zext_ln122_reg_386_pp0_iter1_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln122_reg_382_pp0_iter3_reg <= icmp_ln122_reg_382_pp0_iter2_reg;
        select_ln42_1_reg_443 <= select_ln42_1_fu_301_p3;
        select_ln42_reg_438 <= select_ln42_fu_267_p3;
        zext_ln122_reg_386_pp0_iter3_reg[6 : 0] <= zext_ln122_reg_386_pp0_iter2_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln122_reg_382_pp0_iter4_reg <= icmp_ln122_reg_382_pp0_iter3_reg;
        zext_ln122_reg_386_pp0_iter4_reg[6 : 0] <= zext_ln122_reg_386_pp0_iter3_reg[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        EXP_TABLE_ce0_local = 1'b1;
    end else begin
        EXP_TABLE_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        EXP_TABLE_ce1_local = 1'b1;
    end else begin
        EXP_TABLE_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter7_fsm_state8) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (icmp_ln122_reg_382_pp0_iter6_reg == 1'd1))) begin
        V22_i_i126214_promoted24_out_ap_vld = 1'b1;
    end else begin
        V22_i_i126214_promoted24_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln122_fu_155_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter7_fsm_state8) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_st = 7'd0;
    end else begin
        ap_sig_allocacmp_st = st_1_fu_64;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
        softmax_inst_R_BUF_72_ce0_local = 1'b1;
    end else begin
        softmax_inst_R_BUF_72_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter6_fsm_state7)) begin
        softmax_inst_R_EXP_73_ce0_local = 1'b1;
    end else begin
        softmax_inst_R_EXP_73_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter6_fsm_state7) & (icmp_ln122_reg_382_pp0_iter5_reg == 1'd0))) begin
        softmax_inst_R_EXP_73_we0_local = 1'b1;
    end else begin
        softmax_inst_R_EXP_73_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((1'b1 == ap_CS_iter5_fsm_state6)) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter5_fsm_state6)) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((1'b0 == ap_CS_iter6_fsm_state7)) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else if (((1'b1 == ap_CS_iter6_fsm_state7) | ((1'b1 == ap_CS_iter7_fsm_state8) & (icmp_ln122_reg_382_pp0_iter6_reg == 1'd1)))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter6_fsm_state7)) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

assign EXP_TABLE_address0 = zext_ln130_1_fu_313_p1;

assign EXP_TABLE_address1 = zext_ln130_fu_309_p1;

assign V22_i_i126214_promoted24_out = V22_i_i126214_promoted24_fu_60;

assign add_ln122_fu_161_p2 = (ap_sig_allocacmp_st + 7'd1);

assign add_ln133_1_fu_346_p2 = (V22_i_i126214_promoted24_fu_60 + zext_ln133_1_fu_343_p1);

assign add_ln133_fu_334_p2 = (zext_ln133_fu_331_p1 + zext_ln129_fu_320_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign conv3_i_i158_cast_fu_138_p1 = $signed(conv3_i_i158);

assign icmp_ln122_fu_155_p2 = ((ap_sig_allocacmp_st == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_278_p2 = (($signed(tmp_3_reg_433) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_244_p2 = (($signed(tmp_1_reg_417) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign or_ln42_1_fu_296_p2 = (tmp_2_reg_427 | icmp_ln43_1_fu_278_p2);

assign or_ln42_fu_262_p2 = (tmp_reg_411 | icmp_ln43_fu_244_p2);

assign select_ln42_1_fu_301_p3 = ((or_ln42_1_fu_296_p2[0:0] == 1'b1) ? select_ln42_3_fu_288_p3 : trunc_ln41_1_fu_275_p1);

assign select_ln42_2_fu_254_p3 = ((xor_ln42_fu_249_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln42_3_fu_288_p3 = ((xor_ln42_1_fu_283_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln42_fu_267_p3 = ((or_ln42_fu_262_p2[0:0] == 1'b1) ? select_ln42_2_fu_254_p3 : trunc_ln41_fu_241_p1);

assign sext_ln129_1_fu_215_p1 = $signed(tmp_4_reg_401);

assign sext_ln129_fu_189_p1 = $signed(trunc_ln129_reg_396);

assign softmax_inst_R_BUF_72_address0 = zext_ln122_fu_167_p1;

assign softmax_inst_R_BUF_72_ce0 = softmax_inst_R_BUF_72_ce0_local;

assign softmax_inst_R_EXP_73_address0 = zext_ln122_reg_386_pp0_iter5_reg;

assign softmax_inst_R_EXP_73_ce0 = softmax_inst_R_EXP_73_ce0_local;

assign softmax_inst_R_EXP_73_d0 = tmp_5_fu_323_p3;

assign softmax_inst_R_EXP_73_we0 = softmax_inst_R_EXP_73_we0_local;

assign tmp_5_fu_323_p3 = {{EXP_VAL_1_reg_464}, {zext_ln130_2_fu_317_p1}};

assign trunc_ln129_fu_177_p1 = softmax_inst_R_BUF_72_q0[16:0];

assign trunc_ln41_1_fu_275_p1 = val_1_reg_422[7:0];

assign trunc_ln41_fu_241_p1 = val_reg_406[7:0];

assign val_1_fu_218_p2 = ($signed(conv3_i_i158_cast_reg_376) - $signed(sext_ln129_1_fu_215_p1));

assign val_fu_192_p2 = ($signed(conv3_i_i158_cast_reg_376) - $signed(sext_ln129_fu_189_p1));

assign xor_ln42_1_fu_283_p2 = (tmp_2_reg_427 ^ 1'd1);

assign xor_ln42_fu_249_p2 = (tmp_reg_411 ^ 1'd1);

assign zext_ln122_fu_167_p1 = ap_sig_allocacmp_st;

assign zext_ln129_fu_320_p1 = EXP_VAL_reg_458;

assign zext_ln130_1_fu_313_p1 = select_ln42_1_reg_443;

assign zext_ln130_2_fu_317_p1 = EXP_VAL_reg_458;

assign zext_ln130_fu_309_p1 = select_ln42_reg_438;

assign zext_ln133_1_fu_343_p1 = add_ln133_reg_470;

assign zext_ln133_fu_331_p1 = EXP_VAL_1_reg_464;

always @ (posedge ap_clk) begin
    zext_ln122_reg_386[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln122_reg_386_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln122_reg_386_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln122_reg_386_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln122_reg_386_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln122_reg_386_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //SOFTMAX_QUANT_do_softmax_func_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_Pipeline_2_EXP_TABLE_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 8;
parameter AddressWidth = 8;
parameter AddressRange = 256;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_Pipeline_2_EXP_TABLE_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_do_softmax_func_Pipeline_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        softmax_stream_din,
        softmax_stream_full_n,
        softmax_stream_write,
        softmax_stream_num_data_valid,
        softmax_stream_fifo_cap,
        zext_ln158,
        zext_ln158_1,
        softmax_inst_R_EXP_73_address0,
        softmax_inst_R_EXP_73_ce0,
        softmax_inst_R_EXP_73_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] softmax_stream_din;
input   softmax_stream_full_n;
output   softmax_stream_write;
input  [2:0] softmax_stream_num_data_valid;
input  [2:0] softmax_stream_fifo_cap;
input  [16:0] zext_ln158;
input  [16:0] zext_ln158_1;
output  [6:0] softmax_inst_R_EXP_73_address0;
output   softmax_inst_R_EXP_73_ce0;
input  [18:0] softmax_inst_R_EXP_73_q0;

reg ap_idle;
reg softmax_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg   [0:0] icmp_ln158_reg_208;
reg   [0:0] icmp_ln158_reg_208_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln158_fu_108_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    softmax_stream_blk_n;
wire   [24:0] zext_ln158_1_cast_fu_92_p1;
reg   [24:0] zext_ln158_1_cast_reg_198;
wire   [27:0] zext_ln158_cast_fu_96_p1;
reg   [27:0] zext_ln158_cast_reg_203;
reg   [0:0] icmp_ln158_reg_208_pp0_iter1_reg;
reg   [0:0] icmp_ln158_reg_208_pp0_iter2_reg;
wire   [10:0] trunc_ln164_fu_130_p1;
reg  signed [10:0] trunc_ln164_reg_217;
reg   [7:0] tmp_reg_222;
reg   [15:0] trunc_ln3_reg_237;
reg   [12:0] trunc_ln4_reg_242;
wire   [63:0] zext_ln158_2_fu_120_p1;
reg   [6:0] st_fu_56;
wire   [6:0] add_ln158_fu_114_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_st_1;
reg    softmax_inst_R_EXP_73_ce0_local;
wire   [16:0] grp_fu_147_p0;
wire   [16:0] grp_fu_155_p0;
wire   [7:0] grp_fu_155_p1;
wire   [27:0] grp_fu_147_p2;
wire   [24:0] grp_fu_155_p2;
wire   [28:0] tmp_s_fu_180_p3;
reg    grp_fu_147_ce;
reg    grp_fu_155_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [24:0] grp_fu_155_p10;
reg    ap_condition_98;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 st_fu_56 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

SOFTMAX_QUANT_mul_17ns_11s_28_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 28 ))
mul_17ns_11s_28_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_147_p0),
    .din1(trunc_ln164_reg_217),
    .ce(grp_fu_147_ce),
    .dout(grp_fu_147_p2)
);

SOFTMAX_QUANT_mul_17ns_8ns_25_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
mul_17ns_8ns_25_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .din1(grp_fu_155_p1),
    .ce(grp_fu_155_ce),
    .dout(grp_fu_155_p2)
);

SOFTMAX_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_98)) begin
        if ((icmp_ln158_fu_108_p2 == 1'd0)) begin
            st_fu_56 <= add_ln158_fu_114_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            st_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln158_reg_208 <= icmp_ln158_fu_108_p2;
        zext_ln158_1_cast_reg_198[16 : 0] <= zext_ln158_1_cast_fu_92_p1[16 : 0];
        zext_ln158_cast_reg_203[16 : 0] <= zext_ln158_cast_fu_96_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln158_reg_208_pp0_iter1_reg <= icmp_ln158_reg_208;
        tmp_reg_222 <= {{softmax_inst_R_EXP_73_q0[18:11]}};
        trunc_ln164_reg_217 <= trunc_ln164_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln158_reg_208_pp0_iter2_reg <= icmp_ln158_reg_208_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln158_reg_208_pp0_iter3_reg <= icmp_ln158_reg_208_pp0_iter2_reg;
        trunc_ln3_reg_237 <= {{grp_fu_147_p2[27:12]}};
        trunc_ln4_reg_242 <= {{grp_fu_155_p2[24:12]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln158_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_st_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_st_1 = st_fu_56;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_147_ce = 1'b1;
    end else begin
        grp_fu_147_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_155_ce = 1'b1;
    end else begin
        grp_fu_155_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        softmax_inst_R_EXP_73_ce0_local = 1'b1;
    end else begin
        softmax_inst_R_EXP_73_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln158_reg_208_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        softmax_stream_blk_n = softmax_stream_full_n;
    end else begin
        softmax_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln158_reg_208_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        softmax_stream_write = 1'b1;
    end else begin
        softmax_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if (((1'b0 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if ((((icmp_ln158_reg_208_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln158_fu_114_p2 = (ap_sig_allocacmp_st_1 + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln158_reg_208_pp0_iter3_reg == 1'd0) & (softmax_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_98 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign grp_fu_147_p0 = zext_ln158_cast_reg_203;

assign grp_fu_155_p0 = zext_ln158_1_cast_reg_198;

assign grp_fu_155_p1 = grp_fu_155_p10;

assign grp_fu_155_p10 = tmp_reg_222;

assign icmp_ln158_fu_108_p2 = ((ap_sig_allocacmp_st_1 == 7'd96) ? 1'b1 : 1'b0);

assign softmax_inst_R_EXP_73_address0 = zext_ln158_2_fu_120_p1;

assign softmax_inst_R_EXP_73_ce0 = softmax_inst_R_EXP_73_ce0_local;

assign softmax_stream_din = tmp_s_fu_180_p3;

assign tmp_s_fu_180_p3 = {{trunc_ln4_reg_242}, {trunc_ln3_reg_237}};

assign trunc_ln164_fu_130_p1 = softmax_inst_R_EXP_73_q0[10:0];

assign zext_ln158_1_cast_fu_92_p1 = zext_ln158_1;

assign zext_ln158_2_fu_120_p1 = ap_sig_allocacmp_st_1;

assign zext_ln158_cast_fu_96_p1 = zext_ln158;

always @ (posedge ap_clk) begin
    zext_ln158_1_cast_reg_198[24:17] <= 8'b00000000;
    zext_ln158_cast_reg_203[27:17] <= 11'b00000000000;
end

endmodule //SOFTMAX_QUANT_do_softmax_func_Pipeline_3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_RECIP_ALPHAS_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 18;
parameter AddressWidth = 2;
parameter AddressRange = 4;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_RECIP_ALPHAS_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_RECIP_LOG2DENOMS_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 2;
parameter AddressRange = 4;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_RECIP_LOG2DENOMS_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_RECIP_OFFSETS_DIFF_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 2;
parameter AddressRange = 4;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_RECIP_OFFSETS_DIFF_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_RECIP_TABLES_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 8;
parameter AddressWidth = 10;
parameter AddressRange = 1024;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_RECIP_TABLES_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_softmax_inst_R_BUF_72_RAM_AUTO_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 34;
parameter AddressWidth = 7;
parameter AddressRange = 96;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "auto"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_softmax_inst_R_BUF_72_RAM_AUTO_1R1W.dat", ram);
end 

 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SOFTMAX_QUANT_do_softmax_func_softmax_inst_R_EXP_73_RAM_AUTO_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 19;
parameter AddressWidth = 7;
parameter AddressRange = 96;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "auto"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SOFTMAX_QUANT/SOFTMAX_QUANT_do_softmax_func_softmax_inst_R_EXP_73_RAM_AUTO_1R1W.dat", ram);
end 

 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        pos_r,
        pos_c_din,
        pos_c_full_n,
        pos_c_write,
        pos_c_num_data_valid,
        pos_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] pos_r;
output  [31:0] pos_c_din;
input   pos_c_full_n;
output   pos_c_write;
input  [2:0] pos_c_num_data_valid;
input  [2:0] pos_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg pos_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    pos_c_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c_blk_n = pos_c_full_n;
    end else begin
        pos_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c_write = 1'b1;
    end else begin
        pos_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (pos_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign pos_c_din = pos_r;

assign start_out = real_start;

endmodule //SOFTMAX_QUANT_entry_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_fifo_w128_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 128,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_fifo_w128_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_fifo_w128_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_fifo_w128_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 128,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_fifo_w32_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_fifo_w32_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_fifo_w32_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_fifo_w32_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_fifo_w32_d3_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_fifo_w32_d3_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_fifo_w32_d3_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_fifo_w32_d3_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_fifo_w34_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 34,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_fifo_w34_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_fifo_w34_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_fifo_w34_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 34,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module SOFTMAX_QUANT_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module SOFTMAX_QUANT_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not SOFTMAX_QUANT module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not SOFTMAX_QUANT module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module SOFTMAX_QUANT_mul_17ns_11s_28_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;
























assign tmp_product = $signed({1'b0, din0}) * $signed(din1);








always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;



















    end
end




assign dout = buff0;




















endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module SOFTMAX_QUANT_mul_17ns_8ns_25_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;























assign tmp_product = $signed({1'b0, din0}) * $signed({1'b0, din1});









always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;



















    end
end




assign dout = buff0;




















endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_pack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        softmax_stream_dout,
        softmax_stream_empty_n,
        softmax_stream_read,
        softmax_stream_num_data_valid,
        softmax_stream_fifo_cap,
        softmax_stream1_din,
        softmax_stream1_full_n,
        softmax_stream1_write,
        softmax_stream1_num_data_valid,
        softmax_stream1_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] softmax_stream_dout;
input   softmax_stream_empty_n;
output   softmax_stream_read;
input  [2:0] softmax_stream_num_data_valid;
input  [2:0] softmax_stream_fifo_cap;
output  [127:0] softmax_stream1_din;
input   softmax_stream1_full_n;
output   softmax_stream1_write;
input  [2:0] softmax_stream1_num_data_valid;
input  [2:0] softmax_stream1_fifo_cap;

reg ap_idle;
reg softmax_stream_read;
reg softmax_stream1_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg   [0:0] icmp_ln83_reg_437;
reg   [0:0] icmp_ln83_reg_437_pp0_iter3_reg;
reg   [0:0] icmp_ln88_1_reg_462;
reg    ap_predicate_op68_write_state5;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln83_fu_157_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    softmax_stream_blk_n;
reg    softmax_stream1_blk_n;
wire   [0:0] icmp_ln83_reg_437_pp0_iter0_reg;
reg   [0:0] icmp_ln83_reg_437_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_437_pp0_iter2_reg;
wire   [0:0] icmp_ln84_fu_177_p2;
reg   [0:0] icmp_ln84_reg_441;
wire   [0:0] or_ln84_fu_222_p2;
reg   [0:0] or_ln84_reg_447;
reg   [0:0] or_ln84_reg_447_pp0_iter3_reg;
wire   [2:0] t_2_fu_233_p3;
reg   [2:0] t_2_reg_457;
wire   [0:0] icmp_ln88_1_fu_246_p2;
reg   [2:0] t_fu_60;
wire    ap_loop_init;
reg   [15:0] p_0_0_08_259_fu_64;
wire   [15:0] select_ln84_3_fu_290_p3;
reg   [15:0] p_0_0_08_361_fu_68;
wire   [15:0] select_ln84_2_fu_283_p3;
reg   [15:0] p_0_0_08_463_fu_72;
wire   [15:0] select_ln84_1_fu_276_p3;
reg   [15:0] p_0_0_08_565_fu_76;
wire   [15:0] select_ln84_fu_269_p3;
reg   [15:0] p_0_0_0_0_0_067_fu_80;
wire   [15:0] trunc_ln91_fu_311_p1;
reg   [15:0] p_0_0_1_0_0_069_fu_84;
reg   [7:0] indvar_flatten_fu_88;
wire   [7:0] select_ln84_6_fu_189_p3;
reg   [13:0] indvar_flatten18_fu_92;
wire   [13:0] add_ln83_fu_163_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten18_load;
wire   [7:0] add_ln84_fu_183_p2;
wire   [0:0] icmp_ln88_fu_210_p2;
wire   [0:0] xor_ln83_fu_205_p2;
wire   [0:0] and_ln83_fu_216_p2;
wire   [2:0] add_ln88_fu_227_p2;
wire   [15:0] select_ln84_4_fu_297_p3;
wire   [15:0] select_ln84_5_fu_304_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_111;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 t_fu_60 = 3'd0;
//#0 p_0_0_08_259_fu_64 = 16'd0;
//#0 p_0_0_08_361_fu_68 = 16'd0;
//#0 p_0_0_08_463_fu_72 = 16'd0;
//#0 p_0_0_08_565_fu_76 = 16'd0;
//#0 p_0_0_0_0_0_067_fu_80 = 16'd0;
//#0 p_0_0_1_0_0_069_fu_84 = 16'd0;
//#0 indvar_flatten_fu_88 = 8'd0;
//#0 indvar_flatten18_fu_92 = 14'd0;
//#0 ap_done_reg = 1'b0;
end

SOFTMAX_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_111)) begin
        if ((icmp_ln83_fu_157_p2 == 1'd0)) begin
            indvar_flatten18_fu_92 <= add_ln83_fu_163_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_92 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_88 <= 8'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln83_reg_437_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_88 <= select_ln84_6_fu_189_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_259_fu_64 <= 16'd0;
    end else if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_259_fu_64 <= select_ln84_3_fu_290_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_361_fu_68 <= 16'd0;
    end else if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_361_fu_68 <= select_ln84_2_fu_283_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_463_fu_72 <= 16'd0;
    end else if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_463_fu_72 <= select_ln84_1_fu_276_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_565_fu_76 <= 16'd0;
    end else if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_565_fu_76 <= select_ln84_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_0_0_0_067_fu_80 <= 16'd0;
    end else if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_0_0_0_067_fu_80 <= trunc_ln91_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_1_0_0_069_fu_84 <= 16'd0;
    end else if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_1_0_0_069_fu_84 <= {{softmax_stream_dout[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_60 <= 3'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln83_reg_437_pp0_iter1_reg == 1'd0))) begin
        t_fu_60 <= t_2_fu_233_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln83_reg_437 <= icmp_ln83_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln83_reg_437_pp0_iter1_reg <= icmp_ln83_reg_437;
        icmp_ln84_reg_441 <= icmp_ln84_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln83_reg_437_pp0_iter2_reg <= icmp_ln83_reg_437_pp0_iter1_reg;
        or_ln84_reg_447 <= or_ln84_fu_222_p2;
        t_2_reg_457 <= t_2_fu_233_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln83_reg_437_pp0_iter3_reg <= icmp_ln83_reg_437_pp0_iter2_reg;
        icmp_ln88_1_reg_462 <= icmp_ln88_1_fu_246_p2;
        or_ln84_reg_447_pp0_iter3_reg <= or_ln84_reg_447;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln83_fu_157_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_92;
    end
end

always @ (*) begin
    if (((ap_predicate_op68_write_state5 == 1'b1) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        softmax_stream1_blk_n = softmax_stream1_full_n;
    end else begin
        softmax_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op68_write_state5 == 1'b1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        softmax_stream1_write = 1'b1;
    end else begin
        softmax_stream1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        softmax_stream_blk_n = softmax_stream_empty_n;
    end else begin
        softmax_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        softmax_stream_read = 1'b1;
    end else begin
        softmax_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if (((1'b0 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4)) | ((icmp_ln83_reg_437_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_163_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 14'd1);

assign add_ln84_fu_183_p2 = (indvar_flatten_fu_88 + 8'd1);

assign add_ln88_fu_227_p2 = (t_fu_60 + 3'd1);

assign and_ln83_fu_216_p2 = (xor_ln83_fu_205_p2 & icmp_ln88_fu_210_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (((ap_predicate_op68_write_state5 == 1'b1) & (softmax_stream1_full_n == 1'b0)) | ((icmp_ln83_reg_437_pp0_iter3_reg == 1'd0) & (softmax_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_111 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op68_write_state5 = ((icmp_ln88_1_reg_462 == 1'd1) & (icmp_ln83_reg_437_pp0_iter3_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln83_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 14'd10752) ? 1'b1 : 1'b0);

assign icmp_ln83_reg_437_pp0_iter0_reg = icmp_ln83_reg_437;

assign icmp_ln84_fu_177_p2 = ((indvar_flatten_fu_88 == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln88_1_fu_246_p2 = ((t_2_reg_457 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_210_p2 = ((t_fu_60 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln84_fu_222_p2 = (icmp_ln84_reg_441 | and_ln83_fu_216_p2);

assign select_ln84_1_fu_276_p3 = ((or_ln84_reg_447_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : p_0_0_0_0_0_067_fu_80);

assign select_ln84_2_fu_283_p3 = ((or_ln84_reg_447_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : p_0_0_08_565_fu_76);

assign select_ln84_3_fu_290_p3 = ((or_ln84_reg_447_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : p_0_0_08_463_fu_72);

assign select_ln84_4_fu_297_p3 = ((or_ln84_reg_447_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : p_0_0_08_361_fu_68);

assign select_ln84_5_fu_304_p3 = ((or_ln84_reg_447_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : p_0_0_08_259_fu_64);

assign select_ln84_6_fu_189_p3 = ((icmp_ln84_fu_177_p2[0:0] == 1'b1) ? 8'd1 : add_ln84_fu_183_p2);

assign select_ln84_fu_269_p3 = ((or_ln84_reg_447_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : p_0_0_1_0_0_069_fu_84);

assign softmax_stream1_din = {{{{{{{softmax_stream_dout}, {select_ln84_fu_269_p3}}, {select_ln84_1_fu_276_p3}}, {select_ln84_2_fu_283_p3}}, {select_ln84_3_fu_290_p3}}, {select_ln84_4_fu_297_p3}}, {select_ln84_5_fu_304_p3}};

assign t_2_fu_233_p3 = ((or_ln84_fu_222_p2[0:0] == 1'b1) ? 3'd1 : add_ln88_fu_227_p2);

assign trunc_ln91_fu_311_p1 = softmax_stream_dout[15:0];

assign xor_ln83_fu_205_p2 = (icmp_ln84_reg_441 ^ 1'd1);

endmodule //SOFTMAX_QUANT_pack
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module SOFTMAX_QUANT_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_start_for_do_adapt_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_start_for_do_adapt_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_start_for_do_adapt_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_start_for_do_adapt_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_start_for_do_quant_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_start_for_do_quant_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_start_for_do_quant_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_start_for_do_quant_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SOFTMAX_QUANT_start_for_do_softmax_func_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SOFTMAX_QUANT_start_for_do_softmax_func_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SOFTMAX_QUANT_start_for_do_softmax_func_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SOFTMAX_QUANT_start_for_do_softmax_func_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SOFTMAX_QUANT_unpk (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_stream_TVALID,
        i_stream_adapted_din,
        i_stream_adapted_full_n,
        i_stream_adapted_write,
        i_stream_adapted_num_data_valid,
        i_stream_adapted_fifo_cap,
        r_stream_TDATA,
        r_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   r_stream_TVALID;
output  [33:0] i_stream_adapted_din;
input   i_stream_adapted_full_n;
output   i_stream_adapted_write;
input  [2:0] i_stream_adapted_num_data_valid;
input  [2:0] i_stream_adapted_fifo_cap;
input  [135:0] r_stream_TDATA;
output   r_stream_TREADY;

reg ap_idle;
reg i_stream_adapted_write;
reg r_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln50_reg_572;
reg   [0:0] icmp_ln50_reg_572_pp0_iter2_reg;
reg   [0:0] icmp_ln55_reg_582;
wire   [0:0] icmp_ln55_reg_582_pp0_iter2_reg;
reg    ap_predicate_op58_read_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln50_fu_269_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    r_stream_TDATA_blk_n;
reg    i_stream_adapted_blk_n;
wire   [0:0] icmp_ln50_reg_572_pp0_iter0_reg;
reg   [0:0] icmp_ln50_reg_572_pp0_iter1_reg;
wire   [0:0] icmp_ln51_fu_289_p2;
reg   [0:0] icmp_ln51_reg_576;
wire   [0:0] icmp_ln55_fu_347_p2;
reg   [16:0] ap_phi_mux_p_0_0_7_0_0_087_phi_fu_150_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_7_0_0_087_reg_147;
reg   [16:0] ap_phi_mux_p_0_0_6_0_0_085_phi_fu_160_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_6_0_0_085_reg_157;
reg   [16:0] ap_phi_mux_p_0_0_5_0_0_083_phi_fu_170_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_5_0_0_083_reg_167;
reg   [16:0] ap_phi_mux_p_0_0_4_0_0_081_phi_fu_179_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_4_0_0_081_reg_176;
reg   [16:0] ap_phi_mux_p_0_0_3_0_0_079_phi_fu_188_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_3_0_0_079_reg_185;
reg   [16:0] ap_phi_mux_p_0_0_2_0_0_077_phi_fu_197_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_2_0_0_077_reg_194;
reg   [16:0] ap_phi_mux_p_0_0_1_0_0_075_phi_fu_206_p4;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_1_0_0_075_reg_203;
reg   [16:0] ap_phi_mux_p_0_0_0_0_0_073_phi_fu_215_p4;
wire   [16:0] trunc_ln55_fu_388_p1;
wire   [16:0] ap_phi_reg_pp0_iter3_p_0_0_0_0_0_073_reg_212;
reg   [2:0] t_fu_98;
wire   [2:0] t_1_fu_353_p2;
wire    ap_loop_init;
reg   [7:0] indvar_flatten_fu_102;
wire   [7:0] select_ln51_1_fu_301_p3;
reg   [13:0] indvar_flatten22_fu_106;
wire   [13:0] add_ln50_fu_275_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten22_load;
reg   [16:0] p_0_0_0_0_0_072_fu_110;
reg   [16:0] p_0_0_1_0_0_074_fu_114;
reg   [16:0] p_0_0_2_0_0_076_fu_118;
reg   [16:0] p_0_0_3_0_0_078_fu_122;
reg   [16:0] p_0_0_4_0_0_080_fu_126;
reg   [16:0] p_0_0_5_0_0_082_fu_130;
wire   [7:0] add_ln51_fu_295_p2;
wire   [0:0] icmp_ln52_fu_322_p2;
wire   [0:0] xor_ln50_fu_317_p2;
wire   [0:0] and_ln50_fu_328_p2;
wire   [0:0] or_ln51_fu_334_p2;
wire   [2:0] select_ln51_fu_339_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_93;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 t_fu_98 = 3'd0;
//#0 indvar_flatten_fu_102 = 8'd0;
//#0 indvar_flatten22_fu_106 = 14'd0;
//#0 p_0_0_0_0_0_072_fu_110 = 17'd0;
//#0 p_0_0_1_0_0_074_fu_114 = 17'd0;
//#0 p_0_0_2_0_0_076_fu_118 = 17'd0;
//#0 p_0_0_3_0_0_078_fu_122 = 17'd0;
//#0 p_0_0_4_0_0_080_fu_126 = 17'd0;
//#0 p_0_0_5_0_0_082_fu_130 = 17'd0;
//#0 ap_done_reg = 1'b0;
end

SOFTMAX_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln50_fu_269_p2 == 1'd0)) begin
            indvar_flatten22_fu_106 <= add_ln50_fu_275_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_106 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_102 <= 8'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln50_reg_572_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_102 <= select_ln51_1_fu_301_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_0_0_0_072_fu_110 <= 17'd0;
    end else if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        p_0_0_0_0_0_072_fu_110 <= ap_phi_mux_p_0_0_2_0_0_077_phi_fu_197_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_1_0_0_074_fu_114 <= 17'd0;
    end else if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        p_0_0_1_0_0_074_fu_114 <= ap_phi_mux_p_0_0_3_0_0_079_phi_fu_188_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_2_0_0_076_fu_118 <= 17'd0;
    end else if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        p_0_0_2_0_0_076_fu_118 <= ap_phi_mux_p_0_0_4_0_0_081_phi_fu_179_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_3_0_0_078_fu_122 <= 17'd0;
    end else if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        p_0_0_3_0_0_078_fu_122 <= ap_phi_mux_p_0_0_5_0_0_083_phi_fu_170_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_4_0_0_080_fu_126 <= 17'd0;
    end else if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        p_0_0_4_0_0_080_fu_126 <= ap_phi_mux_p_0_0_6_0_0_085_phi_fu_160_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_5_0_0_082_fu_130 <= 17'd0;
    end else if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        p_0_0_5_0_0_082_fu_130 <= ap_phi_mux_p_0_0_7_0_0_087_phi_fu_150_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_98 <= 3'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln50_reg_572_pp0_iter1_reg == 1'd0))) begin
        t_fu_98 <= t_1_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln50_reg_572 <= icmp_ln50_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln50_reg_572_pp0_iter1_reg <= icmp_ln50_reg_572;
        icmp_ln51_reg_576 <= icmp_ln51_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln50_reg_572_pp0_iter2_reg <= icmp_ln50_reg_572_pp0_iter1_reg;
        icmp_ln55_reg_582 <= icmp_ln55_fu_347_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln50_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_0_0_0_073_phi_fu_215_p4 = p_0_0_0_0_0_072_fu_110;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_0_0_073_phi_fu_215_p4 = trunc_ln55_fu_388_p1;
        end else begin
            ap_phi_mux_p_0_0_0_0_0_073_phi_fu_215_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_0_0_073_reg_212;
        end
    end else begin
        ap_phi_mux_p_0_0_0_0_0_073_phi_fu_215_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_0_0_073_reg_212;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_1_0_0_075_phi_fu_206_p4 = p_0_0_1_0_0_074_fu_114;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_1_0_0_075_phi_fu_206_p4 = {{r_stream_TDATA[33:17]}};
        end else begin
            ap_phi_mux_p_0_0_1_0_0_075_phi_fu_206_p4 = ap_phi_reg_pp0_iter3_p_0_0_1_0_0_075_reg_203;
        end
    end else begin
        ap_phi_mux_p_0_0_1_0_0_075_phi_fu_206_p4 = ap_phi_reg_pp0_iter3_p_0_0_1_0_0_075_reg_203;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_2_0_0_077_phi_fu_197_p4 = p_0_0_2_0_0_076_fu_118;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_2_0_0_077_phi_fu_197_p4 = {{r_stream_TDATA[50:34]}};
        end else begin
            ap_phi_mux_p_0_0_2_0_0_077_phi_fu_197_p4 = ap_phi_reg_pp0_iter3_p_0_0_2_0_0_077_reg_194;
        end
    end else begin
        ap_phi_mux_p_0_0_2_0_0_077_phi_fu_197_p4 = ap_phi_reg_pp0_iter3_p_0_0_2_0_0_077_reg_194;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_3_0_0_079_phi_fu_188_p4 = p_0_0_3_0_0_078_fu_122;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_3_0_0_079_phi_fu_188_p4 = {{r_stream_TDATA[67:51]}};
        end else begin
            ap_phi_mux_p_0_0_3_0_0_079_phi_fu_188_p4 = ap_phi_reg_pp0_iter3_p_0_0_3_0_0_079_reg_185;
        end
    end else begin
        ap_phi_mux_p_0_0_3_0_0_079_phi_fu_188_p4 = ap_phi_reg_pp0_iter3_p_0_0_3_0_0_079_reg_185;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_4_0_0_081_phi_fu_179_p4 = p_0_0_4_0_0_080_fu_126;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_4_0_0_081_phi_fu_179_p4 = {{r_stream_TDATA[84:68]}};
        end else begin
            ap_phi_mux_p_0_0_4_0_0_081_phi_fu_179_p4 = ap_phi_reg_pp0_iter3_p_0_0_4_0_0_081_reg_176;
        end
    end else begin
        ap_phi_mux_p_0_0_4_0_0_081_phi_fu_179_p4 = ap_phi_reg_pp0_iter3_p_0_0_4_0_0_081_reg_176;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_5_0_0_083_phi_fu_170_p4 = p_0_0_5_0_0_082_fu_130;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_5_0_0_083_phi_fu_170_p4 = {{r_stream_TDATA[101:85]}};
        end else begin
            ap_phi_mux_p_0_0_5_0_0_083_phi_fu_170_p4 = ap_phi_reg_pp0_iter3_p_0_0_5_0_0_083_reg_167;
        end
    end else begin
        ap_phi_mux_p_0_0_5_0_0_083_phi_fu_170_p4 = ap_phi_reg_pp0_iter3_p_0_0_5_0_0_083_reg_167;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_6_0_0_085_phi_fu_160_p4 = 17'd0;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_6_0_0_085_phi_fu_160_p4 = {{r_stream_TDATA[118:102]}};
        end else begin
            ap_phi_mux_p_0_0_6_0_0_085_phi_fu_160_p4 = ap_phi_reg_pp0_iter3_p_0_0_6_0_0_085_reg_157;
        end
    end else begin
        ap_phi_mux_p_0_0_6_0_0_085_phi_fu_160_p4 = ap_phi_reg_pp0_iter3_p_0_0_6_0_0_085_reg_157;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln55_reg_582_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_7_0_0_087_phi_fu_150_p4 = 17'd0;
        end else if ((icmp_ln55_reg_582 == 1'd1)) begin
            ap_phi_mux_p_0_0_7_0_0_087_phi_fu_150_p4 = {{r_stream_TDATA[135:119]}};
        end else begin
            ap_phi_mux_p_0_0_7_0_0_087_phi_fu_150_p4 = ap_phi_reg_pp0_iter3_p_0_0_7_0_0_087_reg_147;
        end
    end else begin
        ap_phi_mux_p_0_0_7_0_0_087_phi_fu_150_p4 = ap_phi_reg_pp0_iter3_p_0_0_7_0_0_087_reg_147;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_106;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        i_stream_adapted_blk_n = i_stream_adapted_full_n;
    end else begin
        i_stream_adapted_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_572_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        i_stream_adapted_write = 1'b1;
    end else begin
        i_stream_adapted_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op58_read_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        r_stream_TDATA_blk_n = r_stream_TVALID;
    end else begin
        r_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op58_read_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        r_stream_TREADY = 1'b1;
    end else begin
        r_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((icmp_ln50_reg_572_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_275_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 14'd1);

assign add_ln51_fu_295_p2 = (indvar_flatten_fu_102 + 8'd1);

assign and_ln50_fu_328_p2 = (xor_ln50_fu_317_p2 & icmp_ln52_fu_322_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((i_stream_adapted_full_n == 1'b0) & (icmp_ln50_reg_572_pp0_iter2_reg == 1'd0)) | ((ap_predicate_op58_read_state4 == 1'b1) & (r_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_93 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter3_p_0_0_0_0_0_073_reg_212 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_1_0_0_075_reg_203 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_2_0_0_077_reg_194 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_3_0_0_079_reg_185 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_4_0_0_081_reg_176 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_5_0_0_083_reg_167 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_6_0_0_085_reg_157 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_7_0_0_087_reg_147 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state4 = ((icmp_ln55_reg_582 == 1'd1) & (icmp_ln50_reg_572_pp0_iter2_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign i_stream_adapted_din = {{ap_phi_mux_p_0_0_1_0_0_075_phi_fu_206_p4}, {ap_phi_mux_p_0_0_0_0_0_073_phi_fu_215_p4}};

assign icmp_ln50_fu_269_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 14'd10752) ? 1'b1 : 1'b0);

assign icmp_ln50_reg_572_pp0_iter0_reg = icmp_ln50_reg_572;

assign icmp_ln51_fu_289_p2 = ((indvar_flatten_fu_102 == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_322_p2 = ((t_fu_98 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_347_p2 = ((select_ln51_fu_339_p3 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_reg_582_pp0_iter2_reg = icmp_ln55_reg_582;

assign or_ln51_fu_334_p2 = (icmp_ln51_reg_576 | and_ln50_fu_328_p2);

assign select_ln51_1_fu_301_p3 = ((icmp_ln51_fu_289_p2[0:0] == 1'b1) ? 8'd1 : add_ln51_fu_295_p2);

assign select_ln51_fu_339_p3 = ((or_ln51_fu_334_p2[0:0] == 1'b1) ? 3'd0 : t_fu_98);

assign t_1_fu_353_p2 = (select_ln51_fu_339_p3 + 3'd1);

assign trunc_ln55_fu_388_p1 = r_stream_TDATA[16:0];

assign xor_ln50_fu_317_p2 = (icmp_ln51_reg_576 ^ 1'd1);

endmodule //SOFTMAX_QUANT_unpk
