/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SILU_EM_QUANT_SILU_EM_QUANT,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.292500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=10164,HLS_SYN_LUT=6156,HLS_VERSION=2024_2}" *)

module SILU_EM_QUANT (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        ug_stream_TDATA,
        ug_stream_TVALID,
        ug_stream_TREADY,
        q_stream_TDATA,
        q_stream_TVALID,
        q_stream_TREADY,
        s_stream_TDATA,
        s_stream_TVALID,
        s_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [167:0] ug_stream_TDATA;
input   ug_stream_TVALID;
output   ug_stream_TREADY;
output  [63:0] q_stream_TDATA;
output   q_stream_TVALID;
input   q_stream_TREADY;
output  [7:0] s_stream_TDATA;
output   s_stream_TVALID;
input   s_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_168;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_173;
wire   [31:0] add_ln50_fu_76_p2;
reg   [31:0] add_ln50_reg_179;
wire   [0:0] empty_fu_82_p2;
reg   [0:0] empty_reg_186;
wire   [0:0] empty_32_fu_88_p2;
reg   [0:0] empty_32_reg_191;
wire   [31:0] sub_ln50_fu_107_p2;
reg   [31:0] sub_ln50_reg_196;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln50_1_fu_123_p2;
reg   [31:0] sub_ln50_1_reg_202;
wire   [0:0] empty_33_fu_128_p2;
reg   [0:0] empty_33_reg_208;
wire    ap_CS_fsm_state3;
wire   [31:0] sub_ln50_2_fu_137_p2;
reg   [31:0] sub_ln50_2_reg_213;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_do_silu_em_quant_fu_64_q_stream_TDATA;
wire   [7:0] grp_do_silu_em_quant_fu_64_s_stream_TDATA;
wire    grp_do_silu_em_quant_fu_64_ug_stream_TREADY;
wire    grp_do_silu_em_quant_fu_64_ap_start;
wire    grp_do_silu_em_quant_fu_64_q_stream_TVALID;
wire    grp_do_silu_em_quant_fu_64_q_stream_TREADY;
wire    grp_do_silu_em_quant_fu_64_s_stream_TVALID;
wire    grp_do_silu_em_quant_fu_64_s_stream_TREADY;
wire    grp_do_silu_em_quant_fu_64_ap_done;
wire    grp_do_silu_em_quant_fu_64_ap_ready;
wire    grp_do_silu_em_quant_fu_64_ap_idle;
reg    grp_do_silu_em_quant_fu_64_ap_continue;
reg    grp_do_silu_em_quant_fu_64_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln50_fu_145_p2;
wire    ap_CS_fsm_state6;
reg    ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready;
reg    ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_done;
reg    ap_block_state6_on_subcall_done;
wire    ap_sync_grp_do_silu_em_quant_fu_64_ap_ready;
reg   [63:0] q_stream_TDATA_reg;
reg   [7:0] s_stream_TDATA_reg;
reg   [31:0] l_fu_48;
wire   [31:0] l_3_fu_150_p2;
wire   [31:0] smax_fu_102_p3;
wire   [30:0] trunc_ln32_fu_99_p1;
wire   [30:0] smax1_fu_112_p3;
wire   [31:0] zext_ln50_fu_119_p1;
wire   [31:0] umax_fu_132_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_q_stream_U_apdone_blk;
wire    regslice_both_s_stream_U_apdone_blk;
reg    ap_block_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_ug_stream_U_apdone_blk;
wire   [167:0] ug_stream_TDATA_int_regslice;
wire    ug_stream_TVALID_int_regslice;
reg    ug_stream_TREADY_int_regslice;
wire    regslice_both_ug_stream_U_ack_in;
reg   [63:0] q_stream_TDATA_int_regslice;
wire    q_stream_TREADY_int_regslice;
wire    regslice_both_q_stream_U_vld_out;
reg   [7:0] s_stream_TDATA_int_regslice;
wire    s_stream_TREADY_int_regslice;
wire    regslice_both_s_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 7'd1;
//#0 grp_do_silu_em_quant_fu_64_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_done = 1'b0;
//#0 l_fu_48 = 32'd0;
end

SILU_EM_QUANT_do_silu_em_quant grp_do_silu_em_quant_fu_64(
    .ug_stream_TDATA(ug_stream_TDATA_int_regslice),
    .q_stream_TDATA(grp_do_silu_em_quant_fu_64_q_stream_TDATA),
    .s_stream_TDATA(grp_do_silu_em_quant_fu_64_s_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ug_stream_TVALID(ug_stream_TVALID_int_regslice),
    .ug_stream_TREADY(grp_do_silu_em_quant_fu_64_ug_stream_TREADY),
    .ap_start(grp_do_silu_em_quant_fu_64_ap_start),
    .q_stream_TVALID(grp_do_silu_em_quant_fu_64_q_stream_TVALID),
    .q_stream_TREADY(grp_do_silu_em_quant_fu_64_q_stream_TREADY),
    .s_stream_TVALID(grp_do_silu_em_quant_fu_64_s_stream_TVALID),
    .s_stream_TREADY(grp_do_silu_em_quant_fu_64_s_stream_TREADY),
    .ap_done(grp_do_silu_em_quant_fu_64_ap_done),
    .ap_ready(grp_do_silu_em_quant_fu_64_ap_ready),
    .ap_idle(grp_do_silu_em_quant_fu_64_ap_idle),
    .ap_continue(grp_do_silu_em_quant_fu_64_ap_continue)
);

SILU_EM_QUANT_regslice_both #(
    .DataWidth( 168 ))
regslice_both_ug_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ug_stream_TDATA),
    .vld_in(ug_stream_TVALID),
    .ack_in(regslice_both_ug_stream_U_ack_in),
    .data_out(ug_stream_TDATA_int_regslice),
    .vld_out(ug_stream_TVALID_int_regslice),
    .ack_out(ug_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_ug_stream_U_apdone_blk)
);

SILU_EM_QUANT_regslice_both #(
    .DataWidth( 64 ))
regslice_both_q_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_stream_TDATA_int_regslice),
    .vld_in(grp_do_silu_em_quant_fu_64_q_stream_TVALID),
    .ack_in(q_stream_TREADY_int_regslice),
    .data_out(q_stream_TDATA),
    .vld_out(regslice_both_q_stream_U_vld_out),
    .ack_out(q_stream_TREADY),
    .apdone_blk(regslice_both_q_stream_U_apdone_blk)
);

SILU_EM_QUANT_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_stream_TDATA_int_regslice),
    .vld_in(grp_do_silu_em_quant_fu_64_s_stream_TVALID),
    .ack_in(s_stream_TREADY_int_regslice),
    .data_out(s_stream_TDATA),
    .vld_out(regslice_both_s_stream_U_vld_out),
    .ack_out(s_stream_TREADY),
    .apdone_blk(regslice_both_s_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_done <= 1'b0;
        end else if ((grp_do_silu_em_quant_fu_64_ap_done == 1'b1)) begin
            ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready <= 1'b0;
        end else if ((grp_do_silu_em_quant_fu_64_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_do_silu_em_quant_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (ap_sync_grp_do_silu_em_quant_fu_64_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln50_fu_145_p2 == 1'd0)))) begin
            grp_do_silu_em_quant_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_do_silu_em_quant_fu_64_ap_ready == 1'b1)) begin
            grp_do_silu_em_quant_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_48 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln50_fu_145_p2 == 1'd0))) begin
        l_fu_48 <= l_3_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln50_reg_179 <= add_ln50_fu_76_p2;
        empty_32_reg_191 <= empty_32_fu_88_p2;
        empty_reg_186 <= empty_fu_82_p2;
        l_begin_read_reg_173 <= l_begin;
        l_close_read_reg_168 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_33_reg_208 <= empty_33_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_do_silu_em_quant_fu_64_q_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        q_stream_TDATA_reg <= grp_do_silu_em_quant_fu_64_q_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_do_silu_em_quant_fu_64_s_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        s_stream_TDATA_reg <= grp_do_silu_em_quant_fu_64_s_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln50_1_reg_202 <= sub_ln50_1_fu_123_p2;
        sub_ln50_reg_196 <= sub_ln50_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_ln50_2_reg_213 <= sub_ln50_2_fu_137_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_do_silu_em_quant_fu_64_ap_continue = 1'b1;
    end else begin
        grp_do_silu_em_quant_fu_64_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((grp_do_silu_em_quant_fu_64_q_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        q_stream_TDATA_int_regslice = grp_do_silu_em_quant_fu_64_q_stream_TDATA;
    end else begin
        q_stream_TDATA_int_regslice = q_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_do_silu_em_quant_fu_64_s_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        s_stream_TDATA_int_regslice = grp_do_silu_em_quant_fu_64_s_stream_TDATA;
    end else begin
        s_stream_TDATA_int_regslice = s_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ug_stream_TREADY_int_regslice = grp_do_silu_em_quant_fu_64_ug_stream_TREADY;
    end else begin
        ug_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln50_fu_145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_76_p2 = ($signed(l_begin) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready & ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state7 = ((regslice_both_s_stream_U_apdone_blk == 1'b1) | (regslice_both_q_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_do_silu_em_quant_fu_64_ap_ready = (grp_do_silu_em_quant_fu_64_ap_ready | ap_sync_reg_grp_do_silu_em_quant_fu_64_ap_ready);

assign empty_32_fu_88_p2 = (($signed(l_begin) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_33_fu_128_p2 = ((sub_ln50_reg_196 > sub_ln50_1_reg_202) ? 1'b1 : 1'b0);

assign empty_fu_82_p2 = (($signed(l_close) > $signed(l_begin)) ? 1'b1 : 1'b0);

assign grp_do_silu_em_quant_fu_64_ap_start = grp_do_silu_em_quant_fu_64_ap_start_reg;

assign grp_do_silu_em_quant_fu_64_q_stream_TREADY = (q_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_do_silu_em_quant_fu_64_s_stream_TREADY = (s_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign icmp_ln50_fu_145_p2 = ((l_fu_48 == sub_ln50_2_reg_213) ? 1'b1 : 1'b0);

assign l_3_fu_150_p2 = (l_fu_48 + 32'd1);

assign q_stream_TVALID = regslice_both_q_stream_U_vld_out;

assign s_stream_TVALID = regslice_both_s_stream_U_vld_out;

assign smax1_fu_112_p3 = ((empty_32_reg_191[0:0] == 1'b1) ? trunc_ln32_fu_99_p1 : 31'd24);

assign smax_fu_102_p3 = ((empty_reg_186[0:0] == 1'b1) ? l_close_read_reg_168 : l_begin_read_reg_173);

assign sub_ln50_1_fu_123_p2 = (add_ln50_reg_179 - zext_ln50_fu_119_p1);

assign sub_ln50_2_fu_137_p2 = (add_ln50_reg_179 - umax_fu_132_p3);

assign sub_ln50_fu_107_p2 = (add_ln50_reg_179 - smax_fu_102_p3);

assign trunc_ln32_fu_99_p1 = l_begin_read_reg_173[30:0];

assign ug_stream_TREADY = regslice_both_ug_stream_U_ack_in;

assign umax_fu_132_p3 = ((empty_33_reg_208[0:0] == 1'b1) ? sub_ln50_reg_196 : sub_ln50_1_reg_202);

assign zext_ln50_fu_119_p1 = smax1_fu_112_p3;

endmodule //SILU_EM_QUANT
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        g_stream_dout,
        g_stream_empty_n,
        g_stream_read,
        g_stream_num_data_valid,
        g_stream_fifo_cap,
        adpt_stream_din,
        adpt_stream_full_n,
        adpt_stream_write,
        adpt_stream_num_data_valid,
        adpt_stream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [167:0] g_stream_dout;
input   g_stream_empty_n;
output   g_stream_read;
input  [2:0] g_stream_num_data_valid;
input  [2:0] g_stream_fifo_cap;
output  [20:0] adpt_stream_din;
input   adpt_stream_full_n;
output   adpt_stream_write;
input  [2:0] adpt_stream_num_data_valid;
input  [2:0] adpt_stream_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    grp_unpk_fu_16_ap_start;
wire    grp_unpk_fu_16_ap_done;
wire    grp_unpk_fu_16_ap_idle;
wire    grp_unpk_fu_16_ap_ready;
wire    grp_unpk_fu_16_g_stream_read;
wire   [20:0] grp_unpk_fu_16_adpt_stream_din;
wire    grp_unpk_fu_16_adpt_stream_write;
reg    grp_unpk_fu_16_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 grp_unpk_fu_16_ap_start_reg = 1'b0;
end

SILU_EM_QUANT_unpk grp_unpk_fu_16(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_unpk_fu_16_ap_start),
    .ap_done(grp_unpk_fu_16_ap_done),
    .ap_idle(grp_unpk_fu_16_ap_idle),
    .ap_ready(grp_unpk_fu_16_ap_ready),
    .g_stream_dout(g_stream_dout),
    .g_stream_empty_n(g_stream_empty_n),
    .g_stream_read(grp_unpk_fu_16_g_stream_read),
    .g_stream_num_data_valid(3'd0),
    .g_stream_fifo_cap(3'd0),
    .adpt_stream_din(grp_unpk_fu_16_adpt_stream_din),
    .adpt_stream_full_n(adpt_stream_full_n),
    .adpt_stream_write(grp_unpk_fu_16_adpt_stream_write),
    .adpt_stream_num_data_valid(3'd0),
    .adpt_stream_fifo_cap(3'd0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_unpk_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_unpk_fu_16_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_unpk_fu_16_ap_start_reg <= 1'b1;
        end else if ((grp_unpk_fu_16_ap_ready == 1'b1)) begin
            grp_unpk_fu_16_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_unpk_fu_16_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_unpk_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_unpk_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_unpk_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign adpt_stream_din = grp_unpk_fu_16_adpt_stream_din;

assign adpt_stream_write = grp_unpk_fu_16_adpt_stream_write;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign g_stream_read = grp_unpk_fu_16_g_stream_read;

assign grp_unpk_fu_16_ap_start = grp_unpk_fu_16_ap_start_reg;

assign start_out = real_start;

endmodule //SILU_EM_QUANT_do_adapt
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        silu_stream_dout,
        silu_stream_empty_n,
        silu_stream_read,
        silu_stream_num_data_valid,
        silu_stream_fifo_cap,
        silu_stream1_din,
        silu_stream1_full_n,
        silu_stream1_write,
        silu_stream1_num_data_valid,
        silu_stream1_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] silu_stream_dout;
input   silu_stream_empty_n;
output   silu_stream_read;
input  [2:0] silu_stream_num_data_valid;
input  [2:0] silu_stream_fifo_cap;
output  [159:0] silu_stream1_din;
input   silu_stream1_full_n;
output   silu_stream1_write;
input  [2:0] silu_stream1_num_data_valid;
input  [2:0] silu_stream1_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_pack_fu_16_ap_start;
wire    grp_pack_fu_16_ap_done;
wire    grp_pack_fu_16_ap_idle;
wire    grp_pack_fu_16_ap_ready;
wire    grp_pack_fu_16_silu_stream_read;
wire   [159:0] grp_pack_fu_16_silu_stream1_din;
wire    grp_pack_fu_16_silu_stream1_write;
reg    grp_pack_fu_16_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 grp_pack_fu_16_ap_start_reg = 1'b0;
end

SILU_EM_QUANT_pack grp_pack_fu_16(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pack_fu_16_ap_start),
    .ap_done(grp_pack_fu_16_ap_done),
    .ap_idle(grp_pack_fu_16_ap_idle),
    .ap_ready(grp_pack_fu_16_ap_ready),
    .silu_stream_dout(silu_stream_dout),
    .silu_stream_empty_n(silu_stream_empty_n),
    .silu_stream_read(grp_pack_fu_16_silu_stream_read),
    .silu_stream_num_data_valid(3'd0),
    .silu_stream_fifo_cap(3'd0),
    .silu_stream1_din(grp_pack_fu_16_silu_stream1_din),
    .silu_stream1_full_n(silu_stream1_full_n),
    .silu_stream1_write(grp_pack_fu_16_silu_stream1_write),
    .silu_stream1_num_data_valid(3'd0),
    .silu_stream1_fifo_cap(3'd0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pack_fu_16_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pack_fu_16_ap_start_reg <= 1'b1;
        end else if ((grp_pack_fu_16_ap_ready == 1'b1)) begin
            grp_pack_fu_16_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_pack_fu_16_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pack_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_pack_fu_16_ap_start = grp_pack_fu_16_ap_start_reg;

assign silu_stream1_din = grp_pack_fu_16_silu_stream1_din;

assign silu_stream1_write = grp_pack_fu_16_silu_stream1_write;

assign silu_stream_read = grp_pack_fu_16_silu_stream_read;

endmodule //SILU_EM_QUANT_do_adapt_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mul_stream_dout,
        mul_stream_empty_n,
        mul_stream_read,
        mul_stream_num_data_valid,
        mul_stream_fifo_cap,
        q_stream_TREADY,
        s_stream_TREADY,
        q_stream_TDATA,
        q_stream_TVALID,
        s_stream_TDATA,
        s_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter16_fsm_state17 = 2'd2;
parameter    ap_ST_iter17_fsm_state18 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;
parameter    ap_ST_iter16_fsm_state0 = 2'd1;
parameter    ap_ST_iter17_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [191:0] mul_stream_dout;
input   mul_stream_empty_n;
output   mul_stream_read;
input  [2:0] mul_stream_num_data_valid;
input  [2:0] mul_stream_fifo_cap;
input   q_stream_TREADY;
input   s_stream_TREADY;
output  [63:0] q_stream_TDATA;
output   q_stream_TVALID;
output  [7:0] s_stream_TDATA;
output   s_stream_TVALID;

reg ap_idle;
reg mul_stream_read;
reg q_stream_TVALID;
reg s_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg   [1:0] ap_CS_iter16_fsm;
wire    ap_CS_iter16_fsm_state0;
reg   [1:0] ap_CS_iter17_fsm;
wire    ap_CS_iter17_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln62_reg_1496;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_CS_iter13_fsm_state14;
wire    ap_CS_iter14_fsm_state15;
wire    ap_CS_iter15_fsm_state16;
wire    ap_CS_iter16_fsm_state17;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter16_reg;
reg    ap_block_state18_pp0_stage0_iter17;
wire    ap_CS_iter17_fsm_state18;
wire   [0:0] icmp_ln62_fu_395_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mul_stream_blk_n;
reg    q_stream_TDATA_blk_n;
reg    s_stream_TDATA_blk_n;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter1_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter2_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter3_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter4_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter5_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter6_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter7_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter8_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter9_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter10_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter11_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter12_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter13_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter14_reg;
reg   [0:0] icmp_ln62_reg_1496_pp0_iter15_reg;
wire   [23:0] trunc_ln67_fu_412_p1;
reg   [23:0] trunc_ln67_reg_1500;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter2_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter3_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter4_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter5_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter6_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter7_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter8_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter9_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter10_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter11_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter12_reg;
reg   [23:0] trunc_ln67_reg_1500_pp0_iter13_reg;
reg   [23:0] trunc_ln67_1_reg_1508;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter2_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter3_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter4_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter5_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter6_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter7_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter8_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter9_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter10_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter11_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter12_reg;
reg   [23:0] trunc_ln67_1_reg_1508_pp0_iter13_reg;
reg   [23:0] trunc_ln67_2_reg_1516;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter2_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter3_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter4_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter5_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter6_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter7_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter8_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter9_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter10_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter11_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter12_reg;
reg   [23:0] trunc_ln67_2_reg_1516_pp0_iter13_reg;
reg   [23:0] trunc_ln67_3_reg_1524;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter2_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter3_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter4_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter5_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter6_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter7_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter8_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter9_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter10_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter11_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter12_reg;
reg   [23:0] trunc_ln67_3_reg_1524_pp0_iter13_reg;
reg   [23:0] trunc_ln67_4_reg_1532;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter2_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter3_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter4_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter5_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter6_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter7_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter8_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter9_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter10_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter11_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter12_reg;
reg   [23:0] trunc_ln67_4_reg_1532_pp0_iter13_reg;
reg   [23:0] trunc_ln67_5_reg_1540;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter2_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter3_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter4_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter5_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter6_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter7_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter8_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter9_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter10_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter11_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter12_reg;
reg   [23:0] trunc_ln67_5_reg_1540_pp0_iter13_reg;
reg   [23:0] trunc_ln67_6_reg_1548;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter2_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter3_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter4_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter5_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter6_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter7_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter8_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter9_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter10_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter11_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter12_reg;
reg   [23:0] trunc_ln67_6_reg_1548_pp0_iter13_reg;
reg   [23:0] trunc_ln67_7_reg_1556;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter2_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter3_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter4_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter5_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter6_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter7_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter8_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter9_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter10_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter11_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter12_reg;
reg   [23:0] trunc_ln67_7_reg_1556_pp0_iter13_reg;
reg   [0:0] tmp_reg_1564;
reg   [0:0] tmp_reg_1564_pp0_iter2_reg;
reg   [0:0] tmp_4_reg_1569;
reg   [0:0] tmp_4_reg_1569_pp0_iter2_reg;
reg   [0:0] tmp_4_reg_1569_pp0_iter3_reg;
reg   [0:0] tmp_5_reg_1574;
reg   [0:0] tmp_5_reg_1574_pp0_iter2_reg;
reg   [0:0] tmp_5_reg_1574_pp0_iter3_reg;
reg   [0:0] tmp_5_reg_1574_pp0_iter4_reg;
reg   [0:0] tmp_6_reg_1579;
reg   [0:0] tmp_6_reg_1579_pp0_iter2_reg;
reg   [0:0] tmp_6_reg_1579_pp0_iter3_reg;
reg   [0:0] tmp_6_reg_1579_pp0_iter4_reg;
reg   [0:0] tmp_6_reg_1579_pp0_iter5_reg;
reg   [0:0] tmp_7_reg_1584;
reg   [0:0] tmp_7_reg_1584_pp0_iter2_reg;
reg   [0:0] tmp_7_reg_1584_pp0_iter3_reg;
reg   [0:0] tmp_7_reg_1584_pp0_iter4_reg;
reg   [0:0] tmp_7_reg_1584_pp0_iter5_reg;
reg   [0:0] tmp_7_reg_1584_pp0_iter6_reg;
reg   [0:0] tmp_8_reg_1589;
reg   [0:0] tmp_8_reg_1589_pp0_iter2_reg;
reg   [0:0] tmp_8_reg_1589_pp0_iter3_reg;
reg   [0:0] tmp_8_reg_1589_pp0_iter4_reg;
reg   [0:0] tmp_8_reg_1589_pp0_iter5_reg;
reg   [0:0] tmp_8_reg_1589_pp0_iter6_reg;
reg   [0:0] tmp_8_reg_1589_pp0_iter7_reg;
reg   [0:0] tmp_9_reg_1594;
reg   [0:0] tmp_9_reg_1594_pp0_iter2_reg;
reg   [0:0] tmp_9_reg_1594_pp0_iter3_reg;
reg   [0:0] tmp_9_reg_1594_pp0_iter4_reg;
reg   [0:0] tmp_9_reg_1594_pp0_iter5_reg;
reg   [0:0] tmp_9_reg_1594_pp0_iter6_reg;
reg   [0:0] tmp_9_reg_1594_pp0_iter7_reg;
reg   [0:0] tmp_9_reg_1594_pp0_iter8_reg;
reg   [0:0] tmp_10_reg_1599;
reg   [0:0] tmp_10_reg_1599_pp0_iter2_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter3_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter4_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter5_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter6_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter7_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter8_reg;
reg   [0:0] tmp_10_reg_1599_pp0_iter9_reg;
wire   [23:0] sub_ln99_fu_550_p2;
reg   [23:0] sub_ln99_reg_1604;
wire   [22:0] trunc_ln224_fu_560_p1;
reg   [22:0] trunc_ln224_reg_1609;
wire   [0:0] icmp_ln224_fu_564_p2;
reg   [0:0] icmp_ln224_reg_1614;
wire   [23:0] sub_ln99_1_fu_570_p2;
reg   [23:0] sub_ln99_1_reg_1619;
wire   [22:0] select_ln99_1_fu_575_p3;
reg   [22:0] select_ln99_1_reg_1624;
wire   [22:0] trunc_ln224_1_fu_590_p1;
reg   [22:0] trunc_ln224_1_reg_1629;
wire   [0:0] icmp_ln224_1_fu_594_p2;
reg   [0:0] icmp_ln224_1_reg_1634;
wire   [23:0] sub_ln99_2_fu_600_p2;
reg   [23:0] sub_ln99_2_reg_1639;
wire   [22:0] select_ln99_3_fu_605_p3;
reg   [22:0] select_ln99_3_reg_1644;
wire   [22:0] trunc_ln224_2_fu_619_p1;
reg   [22:0] trunc_ln224_2_reg_1649;
wire   [0:0] icmp_ln224_2_fu_623_p2;
reg   [0:0] icmp_ln224_2_reg_1654;
wire   [23:0] sub_ln99_3_fu_629_p2;
reg   [23:0] sub_ln99_3_reg_1659;
wire   [22:0] select_ln99_5_fu_634_p3;
reg   [22:0] select_ln99_5_reg_1664;
wire   [22:0] trunc_ln224_3_fu_648_p1;
reg   [22:0] trunc_ln224_3_reg_1669;
wire   [0:0] icmp_ln224_3_fu_652_p2;
reg   [0:0] icmp_ln224_3_reg_1674;
wire   [23:0] sub_ln99_4_fu_658_p2;
reg   [23:0] sub_ln99_4_reg_1679;
wire   [22:0] select_ln99_7_fu_663_p3;
reg   [22:0] select_ln99_7_reg_1684;
wire   [22:0] trunc_ln224_4_fu_677_p1;
reg   [22:0] trunc_ln224_4_reg_1689;
wire   [0:0] icmp_ln224_4_fu_681_p2;
reg   [0:0] icmp_ln224_4_reg_1694;
wire   [23:0] sub_ln99_5_fu_687_p2;
reg   [23:0] sub_ln99_5_reg_1699;
wire   [22:0] select_ln99_9_fu_692_p3;
reg   [22:0] select_ln99_9_reg_1704;
wire   [22:0] trunc_ln224_5_fu_706_p1;
reg   [22:0] trunc_ln224_5_reg_1709;
wire   [0:0] icmp_ln224_5_fu_710_p2;
reg   [0:0] icmp_ln224_5_reg_1714;
wire   [23:0] sub_ln99_6_fu_716_p2;
reg   [23:0] sub_ln99_6_reg_1719;
wire   [22:0] select_ln99_11_fu_721_p3;
reg   [22:0] select_ln99_11_reg_1724;
wire   [22:0] trunc_ln224_6_fu_735_p1;
reg   [22:0] trunc_ln224_6_reg_1729;
wire   [0:0] icmp_ln224_6_fu_739_p2;
reg   [0:0] icmp_ln224_6_reg_1734;
wire   [23:0] sub_ln99_7_fu_745_p2;
reg   [23:0] sub_ln99_7_reg_1739;
wire   [22:0] select_ln99_13_fu_750_p3;
reg   [22:0] select_ln99_13_reg_1744;
wire   [22:0] trunc_ln224_7_fu_764_p1;
reg   [22:0] trunc_ln224_7_reg_1749;
wire   [0:0] icmp_ln224_7_fu_768_p2;
reg   [0:0] icmp_ln224_7_reg_1754;
wire   [0:0] icmp_ln12_fu_779_p2;
reg   [0:0] icmp_ln12_reg_1759;
wire   [22:0] x_1_fu_785_p2;
reg   [22:0] x_1_reg_1764;
wire   [0:0] tmp_11_fu_797_p3;
wire   [0:0] tmp_12_fu_805_p3;
wire   [0:0] tmp_13_fu_813_p3;
wire   [0:0] tmp_14_fu_821_p3;
wire   [0:0] tmp_15_fu_829_p3;
wire   [0:0] tmp_16_fu_837_p3;
wire   [0:0] tmp_17_fu_845_p3;
wire   [0:0] tmp_18_fu_853_p3;
wire   [0:0] tmp_19_fu_861_p3;
wire   [0:0] tmp_20_fu_869_p3;
wire   [0:0] tmp_21_fu_877_p3;
wire   [0:0] tmp_22_fu_885_p3;
wire   [0:0] tmp_23_fu_893_p3;
wire   [0:0] tmp_24_fu_901_p3;
wire   [0:0] tmp_25_fu_909_p3;
wire   [0:0] tmp_26_fu_917_p3;
wire   [0:0] tmp_27_fu_925_p3;
wire   [0:0] tmp_28_fu_933_p3;
wire   [0:0] tmp_29_fu_941_p3;
wire   [0:0] tmp_30_fu_949_p3;
wire   [0:0] tmp_31_fu_957_p3;
wire   [0:0] tmp_32_fu_965_p3;
wire   [5:0] select_ln16_fu_977_p3;
wire   [3:0] s_val_fu_1033_p3;
reg   [3:0] s_val_reg_1862;
reg   [3:0] s_val_reg_1862_pp0_iter14_reg;
reg   [3:0] s_val_reg_1862_pp0_iter15_reg;
reg   [3:0] s_val_reg_1862_pp0_iter16_reg;
wire   [0:0] icmp_ln118_fu_1041_p2;
reg   [0:0] icmp_ln118_reg_1867;
wire   [0:0] icmp_ln118_reg_1867_pp0_iter13_reg;
reg   [0:0] icmp_ln118_reg_1867_pp0_iter14_reg;
wire   [3:0] add_ln119_fu_1047_p2;
reg   [3:0] add_ln119_reg_1871;
wire   [23:0] ashr_ln119_fu_1056_p2;
reg   [23:0] ashr_ln119_reg_1876;
wire   [23:0] ashr_ln119_1_fu_1061_p2;
reg   [23:0] ashr_ln119_1_reg_1881;
wire   [23:0] ashr_ln119_2_fu_1066_p2;
reg   [23:0] ashr_ln119_2_reg_1886;
wire   [23:0] ashr_ln119_3_fu_1071_p2;
reg   [23:0] ashr_ln119_3_reg_1891;
wire   [23:0] ashr_ln119_4_fu_1076_p2;
reg   [23:0] ashr_ln119_4_reg_1896;
wire   [23:0] ashr_ln119_5_fu_1081_p2;
reg   [23:0] ashr_ln119_5_reg_1901;
wire   [23:0] ashr_ln119_6_fu_1086_p2;
reg   [23:0] ashr_ln119_6_reg_1906;
wire   [23:0] ashr_ln119_7_fu_1091_p2;
reg   [23:0] ashr_ln119_7_reg_1911;
wire  signed [23:0] sext_ln121_fu_1111_p1;
wire  signed [23:0] sext_ln121_1_fu_1130_p1;
wire  signed [23:0] sext_ln121_2_fu_1149_p1;
wire  signed [23:0] sext_ln121_3_fu_1168_p1;
wire  signed [23:0] sext_ln121_4_fu_1187_p1;
wire  signed [23:0] sext_ln121_5_fu_1206_p1;
wire  signed [23:0] sext_ln121_6_fu_1225_p1;
wire  signed [23:0] sext_ln121_7_fu_1244_p1;
wire   [7:0] select_ln123_fu_1268_p3;
reg   [7:0] select_ln123_reg_1956;
wire   [7:0] select_ln123_1_fu_1296_p3;
reg   [7:0] select_ln123_1_reg_1961;
wire   [7:0] select_ln123_2_fu_1344_p3;
reg   [7:0] select_ln123_2_reg_1966;
wire   [7:0] select_ln123_3_fu_1392_p3;
reg   [7:0] select_ln123_3_reg_1971;
wire   [7:0] select_ln123_4_fu_1440_p3;
reg   [7:0] select_ln123_4_reg_1976;
wire   [7:0] select_ln123_5_fu_1448_p3;
reg   [7:0] select_ln123_5_reg_1981;
wire   [7:0] select_ln123_6_fu_1456_p3;
reg   [7:0] select_ln123_6_reg_1986;
wire   [7:0] select_ln123_7_fu_1464_p3;
reg   [7:0] select_ln123_7_reg_1991;
wire   [5:0] ap_phi_reg_pp0_iter0_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter1_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter2_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter3_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter4_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter5_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter6_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter7_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter8_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter9_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter10_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter11_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter12_s_val_1_reg_220;
reg   [5:0] ap_phi_reg_pp0_iter13_s_val_1_reg_220;
wire   [23:0] ap_phi_reg_pp0_iter0_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter1_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter2_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter3_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter4_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter5_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter6_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter7_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter8_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter9_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter10_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter11_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter12_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter13_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter14_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter15_q_val_reg_315;
reg   [23:0] ap_phi_reg_pp0_iter16_q_val_reg_315;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_reg_324;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_reg_324;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_38_reg_333;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_38_reg_333;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_39_reg_342;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_39_reg_342;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_40_reg_351;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_40_reg_351;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_41_reg_360;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_41_reg_360;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_42_reg_369;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_42_reg_369;
wire   [23:0] ap_phi_reg_pp0_iter0_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter1_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter2_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter3_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter4_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter5_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter6_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter7_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter8_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter9_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter10_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter11_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter12_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter13_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter14_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter15_empty_43_reg_378;
reg   [23:0] ap_phi_reg_pp0_iter16_empty_43_reg_378;
reg   [12:0] indvar_flatten_fu_196;
wire   [12:0] add_ln62_fu_401_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [23:0] select_ln99_fu_555_p3;
wire   [23:0] select_ln99_2_fu_585_p3;
wire   [23:0] zext_ln99_fu_581_p1;
wire   [23:0] select_ln99_4_fu_614_p3;
wire   [23:0] zext_ln99_1_fu_610_p1;
wire   [23:0] select_ln99_6_fu_643_p3;
wire   [23:0] zext_ln99_2_fu_639_p1;
wire   [23:0] select_ln99_8_fu_672_p3;
wire   [23:0] zext_ln99_3_fu_668_p1;
wire   [23:0] select_ln99_10_fu_701_p3;
wire   [23:0] zext_ln99_4_fu_697_p1;
wire   [23:0] select_ln99_12_fu_730_p3;
wire   [23:0] zext_ln99_5_fu_726_p1;
wire   [23:0] select_ln99_14_fu_759_p3;
wire   [23:0] zext_ln99_6_fu_755_p1;
wire   [22:0] abs_max_fu_774_p3;
wire   [22:0] x_2_fu_791_p3;
wire   [0:0] trunc_ln16_fu_973_p1;
wire   [1:0] tmp_34_fu_993_p4;
wire   [0:0] tmp_33_fu_985_p3;
wire   [0:0] xor_ln108_fu_1013_p2;
wire   [0:0] icmp_ln43_fu_1003_p2;
wire   [0:0] or_ln108_fu_1027_p2;
wire   [3:0] select_ln108_fu_1019_p3;
wire   [3:0] trunc_ln108_fu_1009_p1;
wire   [23:0] zext_ln119_fu_1053_p1;
wire   [23:0] add_ln120_fu_1096_p2;
wire   [22:0] trunc_ln121_1_fu_1101_p4;
wire   [23:0] add_ln120_1_fu_1115_p2;
wire   [22:0] trunc_ln6_fu_1120_p4;
wire   [23:0] add_ln120_2_fu_1134_p2;
wire   [22:0] trunc_ln121_2_fu_1139_p4;
wire   [23:0] add_ln120_3_fu_1153_p2;
wire   [22:0] trunc_ln121_3_fu_1158_p4;
wire   [23:0] add_ln120_4_fu_1172_p2;
wire   [22:0] trunc_ln121_4_fu_1177_p4;
wire   [23:0] add_ln120_5_fu_1191_p2;
wire   [22:0] trunc_ln121_5_fu_1196_p4;
wire   [23:0] add_ln120_6_fu_1210_p2;
wire   [22:0] trunc_ln121_6_fu_1215_p4;
wire   [23:0] add_ln120_7_fu_1229_p2;
wire   [22:0] trunc_ln121_7_fu_1234_p4;
wire   [16:0] tmp_35_fu_1248_p4;
wire   [0:0] icmp_ln200_fu_1258_p2;
wire   [7:0] trunc_ln123_fu_1264_p1;
wire   [16:0] tmp_36_fu_1276_p4;
wire   [0:0] icmp_ln200_1_fu_1286_p2;
wire   [7:0] trunc_ln123_1_fu_1292_p1;
wire   [16:0] tmp_37_fu_1304_p4;
wire   [16:0] tmp_38_fu_1324_p4;
wire   [0:0] icmp_ln200_3_fu_1334_p2;
wire   [7:0] trunc_ln123_3_fu_1340_p1;
wire   [16:0] tmp_39_fu_1352_p4;
wire   [16:0] tmp_40_fu_1372_p4;
wire   [0:0] icmp_ln200_5_fu_1382_p2;
wire   [7:0] trunc_ln123_5_fu_1388_p1;
wire   [16:0] tmp_41_fu_1400_p4;
wire   [16:0] tmp_42_fu_1420_p4;
wire   [0:0] icmp_ln200_7_fu_1430_p2;
wire   [7:0] trunc_ln123_7_fu_1436_p1;
wire   [0:0] icmp_ln200_2_fu_1314_p2;
wire   [7:0] trunc_ln123_2_fu_1320_p1;
wire   [0:0] icmp_ln200_4_fu_1362_p2;
wire   [7:0] trunc_ln123_4_fu_1368_p1;
wire   [0:0] icmp_ln200_6_fu_1410_p2;
wire   [7:0] trunc_ln123_6_fu_1416_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg   [1:0] ap_NS_iter16_fsm;
reg   [1:0] ap_NS_iter17_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
wire    ap_ST_iter15_fsm_state16_blk;
wire    ap_ST_iter16_fsm_state17_blk;
reg    ap_ST_iter17_fsm_state18_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_984;
reg    ap_condition_990;
reg    ap_condition_997;
reg    ap_condition_1003;
reg    ap_condition_1009;
reg    ap_condition_1015;
reg    ap_condition_1021;
reg    ap_condition_1027;
reg    ap_condition_1033;
reg    ap_condition_1039;
reg    ap_condition_1045;
reg    ap_condition_1051;
reg    ap_condition_1057;
reg    ap_condition_1063;
reg    ap_condition_1069;
reg    ap_condition_1075;
reg    ap_condition_1081;
reg    ap_condition_1087;
reg    ap_condition_1093;
reg    ap_condition_1099;
reg    ap_condition_1105;
reg    ap_condition_1108;
reg    ap_condition_348;
reg    ap_condition_352;
reg    ap_condition_354;
reg    ap_condition_285;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_CS_iter16_fsm = 2'd1;
//#0 ap_CS_iter17_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_196 = 13'd0;
end

SILU_EM_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter16_fsm <= ap_ST_iter16_fsm_state0;
    end else begin
        ap_CS_iter16_fsm <= ap_NS_iter16_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter17_fsm <= ap_ST_iter17_fsm_state0;
    end else begin
        ap_CS_iter17_fsm <= ap_NS_iter17_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        ap_loop_exit_ready_pp0_iter17_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if ((1'b1 == ap_condition_1108)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= select_ln16_fu_977_p3;
        end else if ((1'b1 == ap_condition_1105)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd59;
        end else if ((1'b1 == ap_condition_1099)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd60;
        end else if ((1'b1 == ap_condition_1093)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd61;
        end else if ((1'b1 == ap_condition_1087)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd62;
        end else if ((1'b1 == ap_condition_1081)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd63;
        end else if ((1'b1 == ap_condition_1075)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd0;
        end else if ((1'b1 == ap_condition_1069)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd1;
        end else if ((1'b1 == ap_condition_1063)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd2;
        end else if ((1'b1 == ap_condition_1057)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd3;
        end else if ((1'b1 == ap_condition_1051)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd4;
        end else if ((1'b1 == ap_condition_1045)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd5;
        end else if ((1'b1 == ap_condition_1039)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd6;
        end else if ((1'b1 == ap_condition_1033)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd7;
        end else if ((1'b1 == ap_condition_1027)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd8;
        end else if ((1'b1 == ap_condition_1021)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd9;
        end else if ((1'b1 == ap_condition_1015)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd10;
        end else if ((1'b1 == ap_condition_1009)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd11;
        end else if ((1'b1 == ap_condition_1003)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd12;
        end else if ((1'b1 == ap_condition_997)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd13;
        end else if ((1'b1 == ap_condition_990)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd14;
        end else if ((1'b1 == ap_condition_984)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd15;
        end else if (((tmp_11_fu_797_p3 == 1'd1) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= 6'd16;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_s_val_1_reg_220 <= ap_phi_reg_pp0_iter12_s_val_1_reg_220;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_38_reg_333 <= trunc_ln67_4_reg_1532_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_38_reg_333 <= ap_phi_reg_pp0_iter14_empty_38_reg_333;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_39_reg_342 <= trunc_ln67_2_reg_1516_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_39_reg_342 <= ap_phi_reg_pp0_iter14_empty_39_reg_342;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_40_reg_351 <= trunc_ln67_reg_1500_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_40_reg_351 <= ap_phi_reg_pp0_iter14_empty_40_reg_351;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_41_reg_360 <= trunc_ln67_1_reg_1508_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_41_reg_360 <= ap_phi_reg_pp0_iter14_empty_41_reg_360;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_42_reg_369 <= trunc_ln67_3_reg_1524_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_42_reg_369 <= ap_phi_reg_pp0_iter14_empty_42_reg_369;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_43_reg_378 <= trunc_ln67_5_reg_1540_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_43_reg_378 <= ap_phi_reg_pp0_iter14_empty_43_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_reg_324 <= trunc_ln67_6_reg_1548_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_reg_324 <= ap_phi_reg_pp0_iter14_empty_reg_324;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_352)) begin
        if (((icmp_ln118_reg_1867_pp0_iter13_reg == 1'd1) & (icmp_ln62_reg_1496_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_q_val_reg_315 <= trunc_ln67_7_reg_1556_pp0_iter13_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_q_val_reg_315 <= ap_phi_reg_pp0_iter14_q_val_reg_315;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_38_reg_333 <= sext_ln121_4_fu_1187_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_38_reg_333 <= ap_phi_reg_pp0_iter15_empty_38_reg_333;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_39_reg_342 <= sext_ln121_2_fu_1149_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_39_reg_342 <= ap_phi_reg_pp0_iter15_empty_39_reg_342;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_40_reg_351 <= sext_ln121_fu_1111_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_40_reg_351 <= ap_phi_reg_pp0_iter15_empty_40_reg_351;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_41_reg_360 <= sext_ln121_1_fu_1130_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_41_reg_360 <= ap_phi_reg_pp0_iter15_empty_41_reg_360;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_42_reg_369 <= sext_ln121_3_fu_1168_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_42_reg_369 <= ap_phi_reg_pp0_iter15_empty_42_reg_369;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_43_reg_378 <= sext_ln121_5_fu_1206_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_43_reg_378 <= ap_phi_reg_pp0_iter15_empty_43_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_reg_324 <= sext_ln121_6_fu_1225_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_reg_324 <= ap_phi_reg_pp0_iter15_empty_reg_324;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_354)) begin
        if (((icmp_ln118_reg_1867_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1496_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_q_val_reg_315 <= sext_ln121_7_fu_1244_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_q_val_reg_315 <= ap_phi_reg_pp0_iter15_q_val_reg_315;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_285)) begin
        if ((icmp_ln62_fu_395_p2 == 1'd0)) begin
            indvar_flatten_fu_196 <= add_ln62_fu_401_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_196 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        add_ln119_reg_1871 <= add_ln119_fu_1047_p2;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_phi_reg_pp0_iter14_empty_38_reg_333 <= ap_phi_reg_pp0_iter13_empty_38_reg_333;
        ap_phi_reg_pp0_iter14_empty_39_reg_342 <= ap_phi_reg_pp0_iter13_empty_39_reg_342;
        ap_phi_reg_pp0_iter14_empty_40_reg_351 <= ap_phi_reg_pp0_iter13_empty_40_reg_351;
        ap_phi_reg_pp0_iter14_empty_41_reg_360 <= ap_phi_reg_pp0_iter13_empty_41_reg_360;
        ap_phi_reg_pp0_iter14_empty_42_reg_369 <= ap_phi_reg_pp0_iter13_empty_42_reg_369;
        ap_phi_reg_pp0_iter14_empty_43_reg_378 <= ap_phi_reg_pp0_iter13_empty_43_reg_378;
        ap_phi_reg_pp0_iter14_empty_reg_324 <= ap_phi_reg_pp0_iter13_empty_reg_324;
        ap_phi_reg_pp0_iter14_q_val_reg_315 <= ap_phi_reg_pp0_iter13_q_val_reg_315;
        icmp_ln118_reg_1867 <= icmp_ln118_fu_1041_p2;
        icmp_ln62_reg_1496_pp0_iter13_reg <= icmp_ln62_reg_1496_pp0_iter12_reg;
        s_val_reg_1862 <= s_val_fu_1033_p3;
        trunc_ln67_1_reg_1508_pp0_iter13_reg <= trunc_ln67_1_reg_1508_pp0_iter12_reg;
        trunc_ln67_2_reg_1516_pp0_iter13_reg <= trunc_ln67_2_reg_1516_pp0_iter12_reg;
        trunc_ln67_3_reg_1524_pp0_iter13_reg <= trunc_ln67_3_reg_1524_pp0_iter12_reg;
        trunc_ln67_4_reg_1532_pp0_iter13_reg <= trunc_ln67_4_reg_1532_pp0_iter12_reg;
        trunc_ln67_5_reg_1540_pp0_iter13_reg <= trunc_ln67_5_reg_1540_pp0_iter12_reg;
        trunc_ln67_6_reg_1548_pp0_iter13_reg <= trunc_ln67_6_reg_1548_pp0_iter12_reg;
        trunc_ln67_7_reg_1556_pp0_iter13_reg <= trunc_ln67_7_reg_1556_pp0_iter12_reg;
        trunc_ln67_reg_1500_pp0_iter13_reg <= trunc_ln67_reg_1500_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_phi_reg_pp0_iter10_empty_38_reg_333 <= ap_phi_reg_pp0_iter9_empty_38_reg_333;
        ap_phi_reg_pp0_iter10_empty_39_reg_342 <= ap_phi_reg_pp0_iter9_empty_39_reg_342;
        ap_phi_reg_pp0_iter10_empty_40_reg_351 <= ap_phi_reg_pp0_iter9_empty_40_reg_351;
        ap_phi_reg_pp0_iter10_empty_41_reg_360 <= ap_phi_reg_pp0_iter9_empty_41_reg_360;
        ap_phi_reg_pp0_iter10_empty_42_reg_369 <= ap_phi_reg_pp0_iter9_empty_42_reg_369;
        ap_phi_reg_pp0_iter10_empty_43_reg_378 <= ap_phi_reg_pp0_iter9_empty_43_reg_378;
        ap_phi_reg_pp0_iter10_empty_reg_324 <= ap_phi_reg_pp0_iter9_empty_reg_324;
        ap_phi_reg_pp0_iter10_q_val_reg_315 <= ap_phi_reg_pp0_iter9_q_val_reg_315;
        ap_phi_reg_pp0_iter10_s_val_1_reg_220 <= ap_phi_reg_pp0_iter9_s_val_1_reg_220;
        icmp_ln224_6_reg_1734 <= icmp_ln224_6_fu_739_p2;
        icmp_ln62_reg_1496_pp0_iter9_reg <= icmp_ln62_reg_1496_pp0_iter8_reg;
        select_ln99_11_reg_1724 <= select_ln99_11_fu_721_p3;
        sub_ln99_7_reg_1739 <= sub_ln99_7_fu_745_p2;
        tmp_10_reg_1599_pp0_iter9_reg <= tmp_10_reg_1599_pp0_iter8_reg;
        trunc_ln224_6_reg_1729 <= trunc_ln224_6_fu_735_p1;
        trunc_ln67_1_reg_1508_pp0_iter9_reg <= trunc_ln67_1_reg_1508_pp0_iter8_reg;
        trunc_ln67_2_reg_1516_pp0_iter9_reg <= trunc_ln67_2_reg_1516_pp0_iter8_reg;
        trunc_ln67_3_reg_1524_pp0_iter9_reg <= trunc_ln67_3_reg_1524_pp0_iter8_reg;
        trunc_ln67_4_reg_1532_pp0_iter9_reg <= trunc_ln67_4_reg_1532_pp0_iter8_reg;
        trunc_ln67_5_reg_1540_pp0_iter9_reg <= trunc_ln67_5_reg_1540_pp0_iter8_reg;
        trunc_ln67_6_reg_1548_pp0_iter9_reg <= trunc_ln67_6_reg_1548_pp0_iter8_reg;
        trunc_ln67_7_reg_1556_pp0_iter9_reg <= trunc_ln67_7_reg_1556_pp0_iter8_reg;
        trunc_ln67_reg_1500_pp0_iter9_reg <= trunc_ln67_reg_1500_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_phi_reg_pp0_iter11_empty_38_reg_333 <= ap_phi_reg_pp0_iter10_empty_38_reg_333;
        ap_phi_reg_pp0_iter11_empty_39_reg_342 <= ap_phi_reg_pp0_iter10_empty_39_reg_342;
        ap_phi_reg_pp0_iter11_empty_40_reg_351 <= ap_phi_reg_pp0_iter10_empty_40_reg_351;
        ap_phi_reg_pp0_iter11_empty_41_reg_360 <= ap_phi_reg_pp0_iter10_empty_41_reg_360;
        ap_phi_reg_pp0_iter11_empty_42_reg_369 <= ap_phi_reg_pp0_iter10_empty_42_reg_369;
        ap_phi_reg_pp0_iter11_empty_43_reg_378 <= ap_phi_reg_pp0_iter10_empty_43_reg_378;
        ap_phi_reg_pp0_iter11_empty_reg_324 <= ap_phi_reg_pp0_iter10_empty_reg_324;
        ap_phi_reg_pp0_iter11_q_val_reg_315 <= ap_phi_reg_pp0_iter10_q_val_reg_315;
        ap_phi_reg_pp0_iter11_s_val_1_reg_220 <= ap_phi_reg_pp0_iter10_s_val_1_reg_220;
        icmp_ln224_7_reg_1754 <= icmp_ln224_7_fu_768_p2;
        icmp_ln62_reg_1496_pp0_iter10_reg <= icmp_ln62_reg_1496_pp0_iter9_reg;
        select_ln99_13_reg_1744 <= select_ln99_13_fu_750_p3;
        trunc_ln224_7_reg_1749 <= trunc_ln224_7_fu_764_p1;
        trunc_ln67_1_reg_1508_pp0_iter10_reg <= trunc_ln67_1_reg_1508_pp0_iter9_reg;
        trunc_ln67_2_reg_1516_pp0_iter10_reg <= trunc_ln67_2_reg_1516_pp0_iter9_reg;
        trunc_ln67_3_reg_1524_pp0_iter10_reg <= trunc_ln67_3_reg_1524_pp0_iter9_reg;
        trunc_ln67_4_reg_1532_pp0_iter10_reg <= trunc_ln67_4_reg_1532_pp0_iter9_reg;
        trunc_ln67_5_reg_1540_pp0_iter10_reg <= trunc_ln67_5_reg_1540_pp0_iter9_reg;
        trunc_ln67_6_reg_1548_pp0_iter10_reg <= trunc_ln67_6_reg_1548_pp0_iter9_reg;
        trunc_ln67_7_reg_1556_pp0_iter10_reg <= trunc_ln67_7_reg_1556_pp0_iter9_reg;
        trunc_ln67_reg_1500_pp0_iter10_reg <= trunc_ln67_reg_1500_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_phi_reg_pp0_iter12_empty_38_reg_333 <= ap_phi_reg_pp0_iter11_empty_38_reg_333;
        ap_phi_reg_pp0_iter12_empty_39_reg_342 <= ap_phi_reg_pp0_iter11_empty_39_reg_342;
        ap_phi_reg_pp0_iter12_empty_40_reg_351 <= ap_phi_reg_pp0_iter11_empty_40_reg_351;
        ap_phi_reg_pp0_iter12_empty_41_reg_360 <= ap_phi_reg_pp0_iter11_empty_41_reg_360;
        ap_phi_reg_pp0_iter12_empty_42_reg_369 <= ap_phi_reg_pp0_iter11_empty_42_reg_369;
        ap_phi_reg_pp0_iter12_empty_43_reg_378 <= ap_phi_reg_pp0_iter11_empty_43_reg_378;
        ap_phi_reg_pp0_iter12_empty_reg_324 <= ap_phi_reg_pp0_iter11_empty_reg_324;
        ap_phi_reg_pp0_iter12_q_val_reg_315 <= ap_phi_reg_pp0_iter11_q_val_reg_315;
        ap_phi_reg_pp0_iter12_s_val_1_reg_220 <= ap_phi_reg_pp0_iter11_s_val_1_reg_220;
        icmp_ln12_reg_1759 <= icmp_ln12_fu_779_p2;
        icmp_ln62_reg_1496_pp0_iter11_reg <= icmp_ln62_reg_1496_pp0_iter10_reg;
        trunc_ln67_1_reg_1508_pp0_iter11_reg <= trunc_ln67_1_reg_1508_pp0_iter10_reg;
        trunc_ln67_2_reg_1516_pp0_iter11_reg <= trunc_ln67_2_reg_1516_pp0_iter10_reg;
        trunc_ln67_3_reg_1524_pp0_iter11_reg <= trunc_ln67_3_reg_1524_pp0_iter10_reg;
        trunc_ln67_4_reg_1532_pp0_iter11_reg <= trunc_ln67_4_reg_1532_pp0_iter10_reg;
        trunc_ln67_5_reg_1540_pp0_iter11_reg <= trunc_ln67_5_reg_1540_pp0_iter10_reg;
        trunc_ln67_6_reg_1548_pp0_iter11_reg <= trunc_ln67_6_reg_1548_pp0_iter10_reg;
        trunc_ln67_7_reg_1556_pp0_iter11_reg <= trunc_ln67_7_reg_1556_pp0_iter10_reg;
        trunc_ln67_reg_1500_pp0_iter11_reg <= trunc_ln67_reg_1500_pp0_iter10_reg;
        x_1_reg_1764 <= x_1_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_phi_reg_pp0_iter13_empty_38_reg_333 <= ap_phi_reg_pp0_iter12_empty_38_reg_333;
        ap_phi_reg_pp0_iter13_empty_39_reg_342 <= ap_phi_reg_pp0_iter12_empty_39_reg_342;
        ap_phi_reg_pp0_iter13_empty_40_reg_351 <= ap_phi_reg_pp0_iter12_empty_40_reg_351;
        ap_phi_reg_pp0_iter13_empty_41_reg_360 <= ap_phi_reg_pp0_iter12_empty_41_reg_360;
        ap_phi_reg_pp0_iter13_empty_42_reg_369 <= ap_phi_reg_pp0_iter12_empty_42_reg_369;
        ap_phi_reg_pp0_iter13_empty_43_reg_378 <= ap_phi_reg_pp0_iter12_empty_43_reg_378;
        ap_phi_reg_pp0_iter13_empty_reg_324 <= ap_phi_reg_pp0_iter12_empty_reg_324;
        ap_phi_reg_pp0_iter13_q_val_reg_315 <= ap_phi_reg_pp0_iter12_q_val_reg_315;
        icmp_ln62_reg_1496_pp0_iter12_reg <= icmp_ln62_reg_1496_pp0_iter11_reg;
        trunc_ln67_1_reg_1508_pp0_iter12_reg <= trunc_ln67_1_reg_1508_pp0_iter11_reg;
        trunc_ln67_2_reg_1516_pp0_iter12_reg <= trunc_ln67_2_reg_1516_pp0_iter11_reg;
        trunc_ln67_3_reg_1524_pp0_iter12_reg <= trunc_ln67_3_reg_1524_pp0_iter11_reg;
        trunc_ln67_4_reg_1532_pp0_iter12_reg <= trunc_ln67_4_reg_1532_pp0_iter11_reg;
        trunc_ln67_5_reg_1540_pp0_iter12_reg <= trunc_ln67_5_reg_1540_pp0_iter11_reg;
        trunc_ln67_6_reg_1548_pp0_iter12_reg <= trunc_ln67_6_reg_1548_pp0_iter11_reg;
        trunc_ln67_7_reg_1556_pp0_iter12_reg <= trunc_ln67_7_reg_1556_pp0_iter11_reg;
        trunc_ln67_reg_1500_pp0_iter12_reg <= trunc_ln67_reg_1500_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ashr_ln119_1_reg_1881 <= ashr_ln119_1_fu_1061_p2;
        ashr_ln119_2_reg_1886 <= ashr_ln119_2_fu_1066_p2;
        ashr_ln119_3_reg_1891 <= ashr_ln119_3_fu_1071_p2;
        ashr_ln119_4_reg_1896 <= ashr_ln119_4_fu_1076_p2;
        ashr_ln119_5_reg_1901 <= ashr_ln119_5_fu_1081_p2;
        ashr_ln119_6_reg_1906 <= ashr_ln119_6_fu_1086_p2;
        ashr_ln119_7_reg_1911 <= ashr_ln119_7_fu_1091_p2;
        ashr_ln119_reg_1876 <= ashr_ln119_fu_1056_p2;
        icmp_ln118_reg_1867_pp0_iter14_reg <= icmp_ln118_reg_1867;
        icmp_ln62_reg_1496_pp0_iter14_reg <= icmp_ln62_reg_1496_pp0_iter13_reg;
        s_val_reg_1862_pp0_iter14_reg <= s_val_reg_1862;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        icmp_ln62_reg_1496_pp0_iter15_reg <= icmp_ln62_reg_1496_pp0_iter14_reg;
        s_val_reg_1862_pp0_iter15_reg <= s_val_reg_1862_pp0_iter14_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_empty_38_reg_333 <= ap_phi_reg_pp0_iter0_empty_38_reg_333;
        ap_phi_reg_pp0_iter1_empty_39_reg_342 <= ap_phi_reg_pp0_iter0_empty_39_reg_342;
        ap_phi_reg_pp0_iter1_empty_40_reg_351 <= ap_phi_reg_pp0_iter0_empty_40_reg_351;
        ap_phi_reg_pp0_iter1_empty_41_reg_360 <= ap_phi_reg_pp0_iter0_empty_41_reg_360;
        ap_phi_reg_pp0_iter1_empty_42_reg_369 <= ap_phi_reg_pp0_iter0_empty_42_reg_369;
        ap_phi_reg_pp0_iter1_empty_43_reg_378 <= ap_phi_reg_pp0_iter0_empty_43_reg_378;
        ap_phi_reg_pp0_iter1_empty_reg_324 <= ap_phi_reg_pp0_iter0_empty_reg_324;
        ap_phi_reg_pp0_iter1_q_val_reg_315 <= ap_phi_reg_pp0_iter0_q_val_reg_315;
        ap_phi_reg_pp0_iter1_s_val_1_reg_220 <= ap_phi_reg_pp0_iter0_s_val_1_reg_220;
        icmp_ln62_reg_1496 <= icmp_ln62_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_empty_38_reg_333 <= ap_phi_reg_pp0_iter1_empty_38_reg_333;
        ap_phi_reg_pp0_iter2_empty_39_reg_342 <= ap_phi_reg_pp0_iter1_empty_39_reg_342;
        ap_phi_reg_pp0_iter2_empty_40_reg_351 <= ap_phi_reg_pp0_iter1_empty_40_reg_351;
        ap_phi_reg_pp0_iter2_empty_41_reg_360 <= ap_phi_reg_pp0_iter1_empty_41_reg_360;
        ap_phi_reg_pp0_iter2_empty_42_reg_369 <= ap_phi_reg_pp0_iter1_empty_42_reg_369;
        ap_phi_reg_pp0_iter2_empty_43_reg_378 <= ap_phi_reg_pp0_iter1_empty_43_reg_378;
        ap_phi_reg_pp0_iter2_empty_reg_324 <= ap_phi_reg_pp0_iter1_empty_reg_324;
        ap_phi_reg_pp0_iter2_q_val_reg_315 <= ap_phi_reg_pp0_iter1_q_val_reg_315;
        ap_phi_reg_pp0_iter2_s_val_1_reg_220 <= ap_phi_reg_pp0_iter1_s_val_1_reg_220;
        icmp_ln62_reg_1496_pp0_iter1_reg <= icmp_ln62_reg_1496;
        tmp_10_reg_1599 <= mul_stream_dout[32'd191];
        tmp_4_reg_1569 <= mul_stream_dout[32'd47];
        tmp_5_reg_1574 <= mul_stream_dout[32'd71];
        tmp_6_reg_1579 <= mul_stream_dout[32'd95];
        tmp_7_reg_1584 <= mul_stream_dout[32'd119];
        tmp_8_reg_1589 <= mul_stream_dout[32'd143];
        tmp_9_reg_1594 <= mul_stream_dout[32'd167];
        tmp_reg_1564 <= mul_stream_dout[32'd23];
        trunc_ln67_1_reg_1508 <= {{mul_stream_dout[47:24]}};
        trunc_ln67_2_reg_1516 <= {{mul_stream_dout[71:48]}};
        trunc_ln67_3_reg_1524 <= {{mul_stream_dout[95:72]}};
        trunc_ln67_4_reg_1532 <= {{mul_stream_dout[119:96]}};
        trunc_ln67_5_reg_1540 <= {{mul_stream_dout[143:120]}};
        trunc_ln67_6_reg_1548 <= {{mul_stream_dout[167:144]}};
        trunc_ln67_7_reg_1556 <= {{mul_stream_dout[191:168]}};
        trunc_ln67_reg_1500 <= trunc_ln67_fu_412_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_phi_reg_pp0_iter3_empty_38_reg_333 <= ap_phi_reg_pp0_iter2_empty_38_reg_333;
        ap_phi_reg_pp0_iter3_empty_39_reg_342 <= ap_phi_reg_pp0_iter2_empty_39_reg_342;
        ap_phi_reg_pp0_iter3_empty_40_reg_351 <= ap_phi_reg_pp0_iter2_empty_40_reg_351;
        ap_phi_reg_pp0_iter3_empty_41_reg_360 <= ap_phi_reg_pp0_iter2_empty_41_reg_360;
        ap_phi_reg_pp0_iter3_empty_42_reg_369 <= ap_phi_reg_pp0_iter2_empty_42_reg_369;
        ap_phi_reg_pp0_iter3_empty_43_reg_378 <= ap_phi_reg_pp0_iter2_empty_43_reg_378;
        ap_phi_reg_pp0_iter3_empty_reg_324 <= ap_phi_reg_pp0_iter2_empty_reg_324;
        ap_phi_reg_pp0_iter3_q_val_reg_315 <= ap_phi_reg_pp0_iter2_q_val_reg_315;
        ap_phi_reg_pp0_iter3_s_val_1_reg_220 <= ap_phi_reg_pp0_iter2_s_val_1_reg_220;
        icmp_ln62_reg_1496_pp0_iter2_reg <= icmp_ln62_reg_1496_pp0_iter1_reg;
        sub_ln99_reg_1604 <= sub_ln99_fu_550_p2;
        tmp_10_reg_1599_pp0_iter2_reg <= tmp_10_reg_1599;
        tmp_4_reg_1569_pp0_iter2_reg <= tmp_4_reg_1569;
        tmp_5_reg_1574_pp0_iter2_reg <= tmp_5_reg_1574;
        tmp_6_reg_1579_pp0_iter2_reg <= tmp_6_reg_1579;
        tmp_7_reg_1584_pp0_iter2_reg <= tmp_7_reg_1584;
        tmp_8_reg_1589_pp0_iter2_reg <= tmp_8_reg_1589;
        tmp_9_reg_1594_pp0_iter2_reg <= tmp_9_reg_1594;
        tmp_reg_1564_pp0_iter2_reg <= tmp_reg_1564;
        trunc_ln67_1_reg_1508_pp0_iter2_reg <= trunc_ln67_1_reg_1508;
        trunc_ln67_2_reg_1516_pp0_iter2_reg <= trunc_ln67_2_reg_1516;
        trunc_ln67_3_reg_1524_pp0_iter2_reg <= trunc_ln67_3_reg_1524;
        trunc_ln67_4_reg_1532_pp0_iter2_reg <= trunc_ln67_4_reg_1532;
        trunc_ln67_5_reg_1540_pp0_iter2_reg <= trunc_ln67_5_reg_1540;
        trunc_ln67_6_reg_1548_pp0_iter2_reg <= trunc_ln67_6_reg_1548;
        trunc_ln67_7_reg_1556_pp0_iter2_reg <= trunc_ln67_7_reg_1556;
        trunc_ln67_reg_1500_pp0_iter2_reg <= trunc_ln67_reg_1500;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_phi_reg_pp0_iter4_empty_38_reg_333 <= ap_phi_reg_pp0_iter3_empty_38_reg_333;
        ap_phi_reg_pp0_iter4_empty_39_reg_342 <= ap_phi_reg_pp0_iter3_empty_39_reg_342;
        ap_phi_reg_pp0_iter4_empty_40_reg_351 <= ap_phi_reg_pp0_iter3_empty_40_reg_351;
        ap_phi_reg_pp0_iter4_empty_41_reg_360 <= ap_phi_reg_pp0_iter3_empty_41_reg_360;
        ap_phi_reg_pp0_iter4_empty_42_reg_369 <= ap_phi_reg_pp0_iter3_empty_42_reg_369;
        ap_phi_reg_pp0_iter4_empty_43_reg_378 <= ap_phi_reg_pp0_iter3_empty_43_reg_378;
        ap_phi_reg_pp0_iter4_empty_reg_324 <= ap_phi_reg_pp0_iter3_empty_reg_324;
        ap_phi_reg_pp0_iter4_q_val_reg_315 <= ap_phi_reg_pp0_iter3_q_val_reg_315;
        ap_phi_reg_pp0_iter4_s_val_1_reg_220 <= ap_phi_reg_pp0_iter3_s_val_1_reg_220;
        icmp_ln224_reg_1614 <= icmp_ln224_fu_564_p2;
        icmp_ln62_reg_1496_pp0_iter3_reg <= icmp_ln62_reg_1496_pp0_iter2_reg;
        sub_ln99_1_reg_1619 <= sub_ln99_1_fu_570_p2;
        tmp_10_reg_1599_pp0_iter3_reg <= tmp_10_reg_1599_pp0_iter2_reg;
        tmp_4_reg_1569_pp0_iter3_reg <= tmp_4_reg_1569_pp0_iter2_reg;
        tmp_5_reg_1574_pp0_iter3_reg <= tmp_5_reg_1574_pp0_iter2_reg;
        tmp_6_reg_1579_pp0_iter3_reg <= tmp_6_reg_1579_pp0_iter2_reg;
        tmp_7_reg_1584_pp0_iter3_reg <= tmp_7_reg_1584_pp0_iter2_reg;
        tmp_8_reg_1589_pp0_iter3_reg <= tmp_8_reg_1589_pp0_iter2_reg;
        tmp_9_reg_1594_pp0_iter3_reg <= tmp_9_reg_1594_pp0_iter2_reg;
        trunc_ln224_reg_1609 <= trunc_ln224_fu_560_p1;
        trunc_ln67_1_reg_1508_pp0_iter3_reg <= trunc_ln67_1_reg_1508_pp0_iter2_reg;
        trunc_ln67_2_reg_1516_pp0_iter3_reg <= trunc_ln67_2_reg_1516_pp0_iter2_reg;
        trunc_ln67_3_reg_1524_pp0_iter3_reg <= trunc_ln67_3_reg_1524_pp0_iter2_reg;
        trunc_ln67_4_reg_1532_pp0_iter3_reg <= trunc_ln67_4_reg_1532_pp0_iter2_reg;
        trunc_ln67_5_reg_1540_pp0_iter3_reg <= trunc_ln67_5_reg_1540_pp0_iter2_reg;
        trunc_ln67_6_reg_1548_pp0_iter3_reg <= trunc_ln67_6_reg_1548_pp0_iter2_reg;
        trunc_ln67_7_reg_1556_pp0_iter3_reg <= trunc_ln67_7_reg_1556_pp0_iter2_reg;
        trunc_ln67_reg_1500_pp0_iter3_reg <= trunc_ln67_reg_1500_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_phi_reg_pp0_iter5_empty_38_reg_333 <= ap_phi_reg_pp0_iter4_empty_38_reg_333;
        ap_phi_reg_pp0_iter5_empty_39_reg_342 <= ap_phi_reg_pp0_iter4_empty_39_reg_342;
        ap_phi_reg_pp0_iter5_empty_40_reg_351 <= ap_phi_reg_pp0_iter4_empty_40_reg_351;
        ap_phi_reg_pp0_iter5_empty_41_reg_360 <= ap_phi_reg_pp0_iter4_empty_41_reg_360;
        ap_phi_reg_pp0_iter5_empty_42_reg_369 <= ap_phi_reg_pp0_iter4_empty_42_reg_369;
        ap_phi_reg_pp0_iter5_empty_43_reg_378 <= ap_phi_reg_pp0_iter4_empty_43_reg_378;
        ap_phi_reg_pp0_iter5_empty_reg_324 <= ap_phi_reg_pp0_iter4_empty_reg_324;
        ap_phi_reg_pp0_iter5_q_val_reg_315 <= ap_phi_reg_pp0_iter4_q_val_reg_315;
        ap_phi_reg_pp0_iter5_s_val_1_reg_220 <= ap_phi_reg_pp0_iter4_s_val_1_reg_220;
        icmp_ln224_1_reg_1634 <= icmp_ln224_1_fu_594_p2;
        icmp_ln62_reg_1496_pp0_iter4_reg <= icmp_ln62_reg_1496_pp0_iter3_reg;
        select_ln99_1_reg_1624 <= select_ln99_1_fu_575_p3;
        sub_ln99_2_reg_1639 <= sub_ln99_2_fu_600_p2;
        tmp_10_reg_1599_pp0_iter4_reg <= tmp_10_reg_1599_pp0_iter3_reg;
        tmp_5_reg_1574_pp0_iter4_reg <= tmp_5_reg_1574_pp0_iter3_reg;
        tmp_6_reg_1579_pp0_iter4_reg <= tmp_6_reg_1579_pp0_iter3_reg;
        tmp_7_reg_1584_pp0_iter4_reg <= tmp_7_reg_1584_pp0_iter3_reg;
        tmp_8_reg_1589_pp0_iter4_reg <= tmp_8_reg_1589_pp0_iter3_reg;
        tmp_9_reg_1594_pp0_iter4_reg <= tmp_9_reg_1594_pp0_iter3_reg;
        trunc_ln224_1_reg_1629 <= trunc_ln224_1_fu_590_p1;
        trunc_ln67_1_reg_1508_pp0_iter4_reg <= trunc_ln67_1_reg_1508_pp0_iter3_reg;
        trunc_ln67_2_reg_1516_pp0_iter4_reg <= trunc_ln67_2_reg_1516_pp0_iter3_reg;
        trunc_ln67_3_reg_1524_pp0_iter4_reg <= trunc_ln67_3_reg_1524_pp0_iter3_reg;
        trunc_ln67_4_reg_1532_pp0_iter4_reg <= trunc_ln67_4_reg_1532_pp0_iter3_reg;
        trunc_ln67_5_reg_1540_pp0_iter4_reg <= trunc_ln67_5_reg_1540_pp0_iter3_reg;
        trunc_ln67_6_reg_1548_pp0_iter4_reg <= trunc_ln67_6_reg_1548_pp0_iter3_reg;
        trunc_ln67_7_reg_1556_pp0_iter4_reg <= trunc_ln67_7_reg_1556_pp0_iter3_reg;
        trunc_ln67_reg_1500_pp0_iter4_reg <= trunc_ln67_reg_1500_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_phi_reg_pp0_iter6_empty_38_reg_333 <= ap_phi_reg_pp0_iter5_empty_38_reg_333;
        ap_phi_reg_pp0_iter6_empty_39_reg_342 <= ap_phi_reg_pp0_iter5_empty_39_reg_342;
        ap_phi_reg_pp0_iter6_empty_40_reg_351 <= ap_phi_reg_pp0_iter5_empty_40_reg_351;
        ap_phi_reg_pp0_iter6_empty_41_reg_360 <= ap_phi_reg_pp0_iter5_empty_41_reg_360;
        ap_phi_reg_pp0_iter6_empty_42_reg_369 <= ap_phi_reg_pp0_iter5_empty_42_reg_369;
        ap_phi_reg_pp0_iter6_empty_43_reg_378 <= ap_phi_reg_pp0_iter5_empty_43_reg_378;
        ap_phi_reg_pp0_iter6_empty_reg_324 <= ap_phi_reg_pp0_iter5_empty_reg_324;
        ap_phi_reg_pp0_iter6_q_val_reg_315 <= ap_phi_reg_pp0_iter5_q_val_reg_315;
        ap_phi_reg_pp0_iter6_s_val_1_reg_220 <= ap_phi_reg_pp0_iter5_s_val_1_reg_220;
        icmp_ln224_2_reg_1654 <= icmp_ln224_2_fu_623_p2;
        icmp_ln62_reg_1496_pp0_iter5_reg <= icmp_ln62_reg_1496_pp0_iter4_reg;
        select_ln99_3_reg_1644 <= select_ln99_3_fu_605_p3;
        sub_ln99_3_reg_1659 <= sub_ln99_3_fu_629_p2;
        tmp_10_reg_1599_pp0_iter5_reg <= tmp_10_reg_1599_pp0_iter4_reg;
        tmp_6_reg_1579_pp0_iter5_reg <= tmp_6_reg_1579_pp0_iter4_reg;
        tmp_7_reg_1584_pp0_iter5_reg <= tmp_7_reg_1584_pp0_iter4_reg;
        tmp_8_reg_1589_pp0_iter5_reg <= tmp_8_reg_1589_pp0_iter4_reg;
        tmp_9_reg_1594_pp0_iter5_reg <= tmp_9_reg_1594_pp0_iter4_reg;
        trunc_ln224_2_reg_1649 <= trunc_ln224_2_fu_619_p1;
        trunc_ln67_1_reg_1508_pp0_iter5_reg <= trunc_ln67_1_reg_1508_pp0_iter4_reg;
        trunc_ln67_2_reg_1516_pp0_iter5_reg <= trunc_ln67_2_reg_1516_pp0_iter4_reg;
        trunc_ln67_3_reg_1524_pp0_iter5_reg <= trunc_ln67_3_reg_1524_pp0_iter4_reg;
        trunc_ln67_4_reg_1532_pp0_iter5_reg <= trunc_ln67_4_reg_1532_pp0_iter4_reg;
        trunc_ln67_5_reg_1540_pp0_iter5_reg <= trunc_ln67_5_reg_1540_pp0_iter4_reg;
        trunc_ln67_6_reg_1548_pp0_iter5_reg <= trunc_ln67_6_reg_1548_pp0_iter4_reg;
        trunc_ln67_7_reg_1556_pp0_iter5_reg <= trunc_ln67_7_reg_1556_pp0_iter4_reg;
        trunc_ln67_reg_1500_pp0_iter5_reg <= trunc_ln67_reg_1500_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_phi_reg_pp0_iter7_empty_38_reg_333 <= ap_phi_reg_pp0_iter6_empty_38_reg_333;
        ap_phi_reg_pp0_iter7_empty_39_reg_342 <= ap_phi_reg_pp0_iter6_empty_39_reg_342;
        ap_phi_reg_pp0_iter7_empty_40_reg_351 <= ap_phi_reg_pp0_iter6_empty_40_reg_351;
        ap_phi_reg_pp0_iter7_empty_41_reg_360 <= ap_phi_reg_pp0_iter6_empty_41_reg_360;
        ap_phi_reg_pp0_iter7_empty_42_reg_369 <= ap_phi_reg_pp0_iter6_empty_42_reg_369;
        ap_phi_reg_pp0_iter7_empty_43_reg_378 <= ap_phi_reg_pp0_iter6_empty_43_reg_378;
        ap_phi_reg_pp0_iter7_empty_reg_324 <= ap_phi_reg_pp0_iter6_empty_reg_324;
        ap_phi_reg_pp0_iter7_q_val_reg_315 <= ap_phi_reg_pp0_iter6_q_val_reg_315;
        ap_phi_reg_pp0_iter7_s_val_1_reg_220 <= ap_phi_reg_pp0_iter6_s_val_1_reg_220;
        icmp_ln224_3_reg_1674 <= icmp_ln224_3_fu_652_p2;
        icmp_ln62_reg_1496_pp0_iter6_reg <= icmp_ln62_reg_1496_pp0_iter5_reg;
        select_ln99_5_reg_1664 <= select_ln99_5_fu_634_p3;
        sub_ln99_4_reg_1679 <= sub_ln99_4_fu_658_p2;
        tmp_10_reg_1599_pp0_iter6_reg <= tmp_10_reg_1599_pp0_iter5_reg;
        tmp_7_reg_1584_pp0_iter6_reg <= tmp_7_reg_1584_pp0_iter5_reg;
        tmp_8_reg_1589_pp0_iter6_reg <= tmp_8_reg_1589_pp0_iter5_reg;
        tmp_9_reg_1594_pp0_iter6_reg <= tmp_9_reg_1594_pp0_iter5_reg;
        trunc_ln224_3_reg_1669 <= trunc_ln224_3_fu_648_p1;
        trunc_ln67_1_reg_1508_pp0_iter6_reg <= trunc_ln67_1_reg_1508_pp0_iter5_reg;
        trunc_ln67_2_reg_1516_pp0_iter6_reg <= trunc_ln67_2_reg_1516_pp0_iter5_reg;
        trunc_ln67_3_reg_1524_pp0_iter6_reg <= trunc_ln67_3_reg_1524_pp0_iter5_reg;
        trunc_ln67_4_reg_1532_pp0_iter6_reg <= trunc_ln67_4_reg_1532_pp0_iter5_reg;
        trunc_ln67_5_reg_1540_pp0_iter6_reg <= trunc_ln67_5_reg_1540_pp0_iter5_reg;
        trunc_ln67_6_reg_1548_pp0_iter6_reg <= trunc_ln67_6_reg_1548_pp0_iter5_reg;
        trunc_ln67_7_reg_1556_pp0_iter6_reg <= trunc_ln67_7_reg_1556_pp0_iter5_reg;
        trunc_ln67_reg_1500_pp0_iter6_reg <= trunc_ln67_reg_1500_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_phi_reg_pp0_iter8_empty_38_reg_333 <= ap_phi_reg_pp0_iter7_empty_38_reg_333;
        ap_phi_reg_pp0_iter8_empty_39_reg_342 <= ap_phi_reg_pp0_iter7_empty_39_reg_342;
        ap_phi_reg_pp0_iter8_empty_40_reg_351 <= ap_phi_reg_pp0_iter7_empty_40_reg_351;
        ap_phi_reg_pp0_iter8_empty_41_reg_360 <= ap_phi_reg_pp0_iter7_empty_41_reg_360;
        ap_phi_reg_pp0_iter8_empty_42_reg_369 <= ap_phi_reg_pp0_iter7_empty_42_reg_369;
        ap_phi_reg_pp0_iter8_empty_43_reg_378 <= ap_phi_reg_pp0_iter7_empty_43_reg_378;
        ap_phi_reg_pp0_iter8_empty_reg_324 <= ap_phi_reg_pp0_iter7_empty_reg_324;
        ap_phi_reg_pp0_iter8_q_val_reg_315 <= ap_phi_reg_pp0_iter7_q_val_reg_315;
        ap_phi_reg_pp0_iter8_s_val_1_reg_220 <= ap_phi_reg_pp0_iter7_s_val_1_reg_220;
        icmp_ln224_4_reg_1694 <= icmp_ln224_4_fu_681_p2;
        icmp_ln62_reg_1496_pp0_iter7_reg <= icmp_ln62_reg_1496_pp0_iter6_reg;
        select_ln99_7_reg_1684 <= select_ln99_7_fu_663_p3;
        sub_ln99_5_reg_1699 <= sub_ln99_5_fu_687_p2;
        tmp_10_reg_1599_pp0_iter7_reg <= tmp_10_reg_1599_pp0_iter6_reg;
        tmp_8_reg_1589_pp0_iter7_reg <= tmp_8_reg_1589_pp0_iter6_reg;
        tmp_9_reg_1594_pp0_iter7_reg <= tmp_9_reg_1594_pp0_iter6_reg;
        trunc_ln224_4_reg_1689 <= trunc_ln224_4_fu_677_p1;
        trunc_ln67_1_reg_1508_pp0_iter7_reg <= trunc_ln67_1_reg_1508_pp0_iter6_reg;
        trunc_ln67_2_reg_1516_pp0_iter7_reg <= trunc_ln67_2_reg_1516_pp0_iter6_reg;
        trunc_ln67_3_reg_1524_pp0_iter7_reg <= trunc_ln67_3_reg_1524_pp0_iter6_reg;
        trunc_ln67_4_reg_1532_pp0_iter7_reg <= trunc_ln67_4_reg_1532_pp0_iter6_reg;
        trunc_ln67_5_reg_1540_pp0_iter7_reg <= trunc_ln67_5_reg_1540_pp0_iter6_reg;
        trunc_ln67_6_reg_1548_pp0_iter7_reg <= trunc_ln67_6_reg_1548_pp0_iter6_reg;
        trunc_ln67_7_reg_1556_pp0_iter7_reg <= trunc_ln67_7_reg_1556_pp0_iter6_reg;
        trunc_ln67_reg_1500_pp0_iter7_reg <= trunc_ln67_reg_1500_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_phi_reg_pp0_iter9_empty_38_reg_333 <= ap_phi_reg_pp0_iter8_empty_38_reg_333;
        ap_phi_reg_pp0_iter9_empty_39_reg_342 <= ap_phi_reg_pp0_iter8_empty_39_reg_342;
        ap_phi_reg_pp0_iter9_empty_40_reg_351 <= ap_phi_reg_pp0_iter8_empty_40_reg_351;
        ap_phi_reg_pp0_iter9_empty_41_reg_360 <= ap_phi_reg_pp0_iter8_empty_41_reg_360;
        ap_phi_reg_pp0_iter9_empty_42_reg_369 <= ap_phi_reg_pp0_iter8_empty_42_reg_369;
        ap_phi_reg_pp0_iter9_empty_43_reg_378 <= ap_phi_reg_pp0_iter8_empty_43_reg_378;
        ap_phi_reg_pp0_iter9_empty_reg_324 <= ap_phi_reg_pp0_iter8_empty_reg_324;
        ap_phi_reg_pp0_iter9_q_val_reg_315 <= ap_phi_reg_pp0_iter8_q_val_reg_315;
        ap_phi_reg_pp0_iter9_s_val_1_reg_220 <= ap_phi_reg_pp0_iter8_s_val_1_reg_220;
        icmp_ln224_5_reg_1714 <= icmp_ln224_5_fu_710_p2;
        icmp_ln62_reg_1496_pp0_iter8_reg <= icmp_ln62_reg_1496_pp0_iter7_reg;
        select_ln99_9_reg_1704 <= select_ln99_9_fu_692_p3;
        sub_ln99_6_reg_1719 <= sub_ln99_6_fu_716_p2;
        tmp_10_reg_1599_pp0_iter8_reg <= tmp_10_reg_1599_pp0_iter7_reg;
        tmp_9_reg_1594_pp0_iter8_reg <= tmp_9_reg_1594_pp0_iter7_reg;
        trunc_ln224_5_reg_1709 <= trunc_ln224_5_fu_706_p1;
        trunc_ln67_1_reg_1508_pp0_iter8_reg <= trunc_ln67_1_reg_1508_pp0_iter7_reg;
        trunc_ln67_2_reg_1516_pp0_iter8_reg <= trunc_ln67_2_reg_1516_pp0_iter7_reg;
        trunc_ln67_3_reg_1524_pp0_iter8_reg <= trunc_ln67_3_reg_1524_pp0_iter7_reg;
        trunc_ln67_4_reg_1532_pp0_iter8_reg <= trunc_ln67_4_reg_1532_pp0_iter7_reg;
        trunc_ln67_5_reg_1540_pp0_iter8_reg <= trunc_ln67_5_reg_1540_pp0_iter7_reg;
        trunc_ln67_6_reg_1548_pp0_iter8_reg <= trunc_ln67_6_reg_1548_pp0_iter7_reg;
        trunc_ln67_7_reg_1556_pp0_iter8_reg <= trunc_ln67_7_reg_1556_pp0_iter7_reg;
        trunc_ln67_reg_1500_pp0_iter8_reg <= trunc_ln67_reg_1500_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        icmp_ln62_reg_1496_pp0_iter16_reg <= icmp_ln62_reg_1496_pp0_iter15_reg;
        s_val_reg_1862_pp0_iter16_reg <= s_val_reg_1862_pp0_iter15_reg;
        select_ln123_1_reg_1961 <= select_ln123_1_fu_1296_p3;
        select_ln123_2_reg_1966 <= select_ln123_2_fu_1344_p3;
        select_ln123_3_reg_1971 <= select_ln123_3_fu_1392_p3;
        select_ln123_4_reg_1976 <= select_ln123_4_fu_1440_p3;
        select_ln123_5_reg_1981 <= select_ln123_5_fu_1448_p3;
        select_ln123_6_reg_1986 <= select_ln123_6_fu_1456_p3;
        select_ln123_7_reg_1991 <= select_ln123_7_fu_1464_p3;
        select_ln123_reg_1956 <= select_ln123_fu_1268_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

assign ap_ST_iter15_fsm_state16_blk = 1'b0;

assign ap_ST_iter16_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state18_pp0_stage0_iter17)) begin
        ap_ST_iter17_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_iter17_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (icmp_ln62_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter17_fsm_state0) & (1'b1 == ap_CS_iter16_fsm_state0) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_196;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1496 == 1'd0))) begin
        mul_stream_blk_n = mul_stream_empty_n;
    end else begin
        mul_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1496 == 1'd0))) begin
        mul_stream_read = 1'b1;
    end else begin
        mul_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_1496_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        q_stream_TDATA_blk_n = q_stream_TREADY;
    end else begin
        q_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (icmp_ln62_reg_1496_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        q_stream_TVALID = 1'b1;
    end else begin
        q_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_1496_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        s_stream_TDATA_blk_n = s_stream_TREADY;
    end else begin
        s_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (icmp_ln62_reg_1496_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        s_stream_TVALID = 1'b1;
    end else begin
        s_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter16_fsm)
        ap_ST_iter16_fsm_state17 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end
        end
        ap_ST_iter16_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter16_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter17_fsm)
        ap_ST_iter17_fsm_state18 : begin
            if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter16_fsm_state17))) begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state0;
            end else if (((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17)) | (~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (icmp_ln62_reg_1496_pp0_iter16_reg == 1'd1) & (1'b1 == ap_CS_iter17_fsm_state18)))) begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state18;
            end else begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state18;
            end
        end
        ap_ST_iter17_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state18;
            end else begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter17_fsm = 'bx;
        end
    endcase
end

assign abs_max_fu_774_p3 = ((icmp_ln224_7_reg_1754[0:0] == 1'b1) ? trunc_ln224_7_reg_1749 : select_ln99_13_reg_1744);

assign add_ln119_fu_1047_p2 = ($signed(s_val_fu_1033_p3) + $signed(4'd15));

assign add_ln120_1_fu_1115_p2 = (ashr_ln119_1_reg_1881 + 24'd1);

assign add_ln120_2_fu_1134_p2 = (ashr_ln119_2_reg_1886 + 24'd1);

assign add_ln120_3_fu_1153_p2 = (ashr_ln119_3_reg_1891 + 24'd1);

assign add_ln120_4_fu_1172_p2 = (ashr_ln119_4_reg_1896 + 24'd1);

assign add_ln120_5_fu_1191_p2 = (ashr_ln119_5_reg_1901 + 24'd1);

assign add_ln120_6_fu_1210_p2 = (ashr_ln119_6_reg_1906 + 24'd1);

assign add_ln120_7_fu_1229_p2 = (ashr_ln119_7_reg_1911 + 24'd1);

assign add_ln120_fu_1096_p2 = (ashr_ln119_reg_1876 + 24'd1);

assign add_ln62_fu_401_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter16_fsm_state0 = ap_CS_iter16_fsm[32'd0];

assign ap_CS_iter16_fsm_state17 = ap_CS_iter16_fsm[32'd1];

assign ap_CS_iter17_fsm_state0 = ap_CS_iter17_fsm[32'd0];

assign ap_CS_iter17_fsm_state18 = ap_CS_iter17_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17 = (((s_stream_TREADY == 1'b0) & (icmp_ln62_reg_1496_pp0_iter16_reg == 1'd0)) | ((icmp_ln62_reg_1496_pp0_iter16_reg == 1'd0) & (q_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln62_reg_1496 == 1'd0) & (mul_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_1003 = ((tmp_15_fu_829_p3 == 1'd1) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1009 = ((tmp_16_fu_837_p3 == 1'd1) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1015 = ((tmp_17_fu_845_p3 == 1'd1) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1021 = ((tmp_18_fu_853_p3 == 1'd1) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1027 = ((tmp_19_fu_861_p3 == 1'd1) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1033 = ((tmp_20_fu_869_p3 == 1'd1) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1039 = ((tmp_21_fu_877_p3 == 1'd1) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1045 = ((tmp_22_fu_885_p3 == 1'd1) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1051 = ((tmp_23_fu_893_p3 == 1'd1) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1057 = ((tmp_24_fu_901_p3 == 1'd1) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1063 = ((tmp_25_fu_909_p3 == 1'd1) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1069 = ((tmp_26_fu_917_p3 == 1'd1) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1075 = ((tmp_27_fu_925_p3 == 1'd1) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1081 = ((tmp_28_fu_933_p3 == 1'd1) & (tmp_27_fu_925_p3 == 1'd0) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1087 = ((tmp_29_fu_941_p3 == 1'd1) & (tmp_28_fu_933_p3 == 1'd0) & (tmp_27_fu_925_p3 == 1'd0) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1093 = ((tmp_30_fu_949_p3 == 1'd1) & (tmp_29_fu_941_p3 == 1'd0) & (tmp_28_fu_933_p3 == 1'd0) & (tmp_27_fu_925_p3 == 1'd0) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1099 = ((tmp_31_fu_957_p3 == 1'd1) & (tmp_30_fu_949_p3 == 1'd0) & (tmp_29_fu_941_p3 == 1'd0) & (tmp_28_fu_933_p3 == 1'd0) & (tmp_27_fu_925_p3 == 1'd0) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1105 = ((tmp_32_fu_965_p3 == 1'd1) & (tmp_31_fu_957_p3 == 1'd0) & (tmp_30_fu_949_p3 == 1'd0) & (tmp_29_fu_941_p3 == 1'd0) & (tmp_28_fu_933_p3 == 1'd0) & (tmp_27_fu_925_p3 == 1'd0) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1108 = ((tmp_32_fu_965_p3 == 1'd0) & (tmp_31_fu_957_p3 == 1'd0) & (tmp_30_fu_949_p3 == 1'd0) & (tmp_29_fu_941_p3 == 1'd0) & (tmp_28_fu_933_p3 == 1'd0) & (tmp_27_fu_925_p3 == 1'd0) & (tmp_26_fu_917_p3 == 1'd0) & (tmp_25_fu_909_p3 == 1'd0) & (tmp_24_fu_901_p3 == 1'd0) & (tmp_23_fu_893_p3 == 1'd0) & (tmp_22_fu_885_p3 == 1'd0) & (tmp_21_fu_877_p3 == 1'd0) & (tmp_20_fu_869_p3 == 1'd0) & (tmp_19_fu_861_p3 == 1'd0) & (tmp_18_fu_853_p3 == 1'd0) & (tmp_17_fu_845_p3 == 1'd0) & (tmp_16_fu_837_p3 == 1'd0) & (tmp_15_fu_829_p3 == 1'd0) & (tmp_14_fu_821_p3 == 1'd0) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_285 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_348 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13));
end

always @ (*) begin
    ap_condition_352 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15));
end

always @ (*) begin
    ap_condition_354 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16));
end

always @ (*) begin
    ap_condition_984 = ((tmp_12_fu_805_p3 == 1'd1) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_990 = ((tmp_13_fu_813_p3 == 1'd1) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_997 = ((tmp_14_fu_821_p3 == 1'd1) & (tmp_13_fu_813_p3 == 1'd0) & (tmp_12_fu_805_p3 == 1'd0) & (tmp_11_fu_797_p3 == 1'd0) & (icmp_ln62_reg_1496_pp0_iter11_reg == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_38_reg_333 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_39_reg_342 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_40_reg_351 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_41_reg_360 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_42_reg_369 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_43_reg_378 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_324 = 'bx;

assign ap_phi_reg_pp0_iter0_q_val_reg_315 = 'bx;

assign ap_phi_reg_pp0_iter0_s_val_1_reg_220 = 'bx;

assign ap_ready = ap_ready_sig;

assign ashr_ln119_1_fu_1061_p2 = $signed(trunc_ln67_1_reg_1508_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_2_fu_1066_p2 = $signed(trunc_ln67_2_reg_1516_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_3_fu_1071_p2 = $signed(trunc_ln67_3_reg_1524_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_4_fu_1076_p2 = $signed(trunc_ln67_4_reg_1532_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_5_fu_1081_p2 = $signed(trunc_ln67_5_reg_1540_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_6_fu_1086_p2 = $signed(trunc_ln67_6_reg_1548_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_7_fu_1091_p2 = $signed(trunc_ln67_7_reg_1556_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign ashr_ln119_fu_1056_p2 = $signed(trunc_ln67_reg_1500_pp0_iter13_reg) >>> zext_ln119_fu_1053_p1;

assign icmp_ln118_fu_1041_p2 = ((s_val_fu_1033_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln118_reg_1867_pp0_iter13_reg = icmp_ln118_reg_1867;

assign icmp_ln12_fu_779_p2 = ((abs_max_fu_774_p3 != 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_1_fu_1286_p2 = (($signed(tmp_36_fu_1276_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_2_fu_1314_p2 = (($signed(tmp_37_fu_1304_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_3_fu_1334_p2 = (($signed(tmp_38_fu_1324_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_4_fu_1362_p2 = (($signed(tmp_39_fu_1352_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_5_fu_1382_p2 = (($signed(tmp_40_fu_1372_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_6_fu_1410_p2 = (($signed(tmp_41_fu_1400_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_7_fu_1430_p2 = (($signed(tmp_42_fu_1420_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_1258_p2 = (($signed(tmp_35_fu_1248_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_594_p2 = (($signed(zext_ln99_fu_581_p1) < $signed(select_ln99_2_fu_585_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_623_p2 = (($signed(zext_ln99_1_fu_610_p1) < $signed(select_ln99_4_fu_614_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_652_p2 = (($signed(zext_ln99_2_fu_639_p1) < $signed(select_ln99_6_fu_643_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_4_fu_681_p2 = (($signed(zext_ln99_3_fu_668_p1) < $signed(select_ln99_8_fu_672_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_5_fu_710_p2 = (($signed(zext_ln99_4_fu_697_p1) < $signed(select_ln99_10_fu_701_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_6_fu_739_p2 = (($signed(zext_ln99_5_fu_726_p1) < $signed(select_ln99_12_fu_730_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_7_fu_768_p2 = (($signed(zext_ln99_6_fu_755_p1) < $signed(select_ln99_14_fu_759_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_564_p2 = (($signed(select_ln99_fu_555_p3) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_1003_p2 = ((tmp_34_fu_993_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_395_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd4864) ? 1'b1 : 1'b0);

assign or_ln108_fu_1027_p2 = (tmp_33_fu_985_p3 | icmp_ln43_fu_1003_p2);

assign q_stream_TDATA = {{{{{{{{select_ln123_4_reg_1976}, {select_ln123_7_reg_1991}}, {select_ln123_3_reg_1971}}, {select_ln123_6_reg_1986}}, {select_ln123_2_reg_1966}}, {select_ln123_5_reg_1981}}, {select_ln123_1_reg_1961}}, {select_ln123_reg_1956}};

assign s_stream_TDATA = s_val_reg_1862_pp0_iter16_reg;

assign s_val_fu_1033_p3 = ((or_ln108_fu_1027_p2[0:0] == 1'b1) ? select_ln108_fu_1019_p3 : trunc_ln108_fu_1009_p1);

assign select_ln108_fu_1019_p3 = ((xor_ln108_fu_1013_p2[0:0] == 1'b1) ? 4'd15 : 4'd0);

assign select_ln123_1_fu_1296_p3 = ((icmp_ln200_1_fu_1286_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_1_fu_1292_p1);

assign select_ln123_2_fu_1344_p3 = ((icmp_ln200_3_fu_1334_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_3_fu_1340_p1);

assign select_ln123_3_fu_1392_p3 = ((icmp_ln200_5_fu_1382_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_5_fu_1388_p1);

assign select_ln123_4_fu_1440_p3 = ((icmp_ln200_7_fu_1430_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_7_fu_1436_p1);

assign select_ln123_5_fu_1448_p3 = ((icmp_ln200_2_fu_1314_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_2_fu_1320_p1);

assign select_ln123_6_fu_1456_p3 = ((icmp_ln200_4_fu_1362_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_4_fu_1368_p1);

assign select_ln123_7_fu_1464_p3 = ((icmp_ln200_6_fu_1410_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_6_fu_1416_p1);

assign select_ln123_fu_1268_p3 = ((icmp_ln200_fu_1258_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_fu_1264_p1);

assign select_ln16_fu_977_p3 = ((trunc_ln16_fu_973_p1[0:0] == 1'b1) ? 6'd58 : 6'd57);

assign select_ln99_10_fu_701_p3 = ((tmp_8_reg_1589_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln99_5_reg_1699 : trunc_ln67_5_reg_1540_pp0_iter7_reg);

assign select_ln99_11_fu_721_p3 = ((icmp_ln224_5_reg_1714[0:0] == 1'b1) ? trunc_ln224_5_reg_1709 : select_ln99_9_reg_1704);

assign select_ln99_12_fu_730_p3 = ((tmp_9_reg_1594_pp0_iter8_reg[0:0] == 1'b1) ? sub_ln99_6_reg_1719 : trunc_ln67_6_reg_1548_pp0_iter8_reg);

assign select_ln99_13_fu_750_p3 = ((icmp_ln224_6_reg_1734[0:0] == 1'b1) ? trunc_ln224_6_reg_1729 : select_ln99_11_reg_1724);

assign select_ln99_14_fu_759_p3 = ((tmp_10_reg_1599_pp0_iter9_reg[0:0] == 1'b1) ? sub_ln99_7_reg_1739 : trunc_ln67_7_reg_1556_pp0_iter9_reg);

assign select_ln99_1_fu_575_p3 = ((icmp_ln224_reg_1614[0:0] == 1'b1) ? trunc_ln224_reg_1609 : 23'd0);

assign select_ln99_2_fu_585_p3 = ((tmp_4_reg_1569_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln99_1_reg_1619 : trunc_ln67_1_reg_1508_pp0_iter3_reg);

assign select_ln99_3_fu_605_p3 = ((icmp_ln224_1_reg_1634[0:0] == 1'b1) ? trunc_ln224_1_reg_1629 : select_ln99_1_reg_1624);

assign select_ln99_4_fu_614_p3 = ((tmp_5_reg_1574_pp0_iter4_reg[0:0] == 1'b1) ? sub_ln99_2_reg_1639 : trunc_ln67_2_reg_1516_pp0_iter4_reg);

assign select_ln99_5_fu_634_p3 = ((icmp_ln224_2_reg_1654[0:0] == 1'b1) ? trunc_ln224_2_reg_1649 : select_ln99_3_reg_1644);

assign select_ln99_6_fu_643_p3 = ((tmp_6_reg_1579_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln99_3_reg_1659 : trunc_ln67_3_reg_1524_pp0_iter5_reg);

assign select_ln99_7_fu_663_p3 = ((icmp_ln224_3_reg_1674[0:0] == 1'b1) ? trunc_ln224_3_reg_1669 : select_ln99_5_reg_1664);

assign select_ln99_8_fu_672_p3 = ((tmp_7_reg_1584_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln99_4_reg_1679 : trunc_ln67_4_reg_1532_pp0_iter6_reg);

assign select_ln99_9_fu_692_p3 = ((icmp_ln224_4_reg_1694[0:0] == 1'b1) ? trunc_ln224_4_reg_1689 : select_ln99_7_reg_1684);

assign select_ln99_fu_555_p3 = ((tmp_reg_1564_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln99_reg_1604 : trunc_ln67_reg_1500_pp0_iter2_reg);

assign sext_ln121_1_fu_1130_p1 = $signed(trunc_ln6_fu_1120_p4);

assign sext_ln121_2_fu_1149_p1 = $signed(trunc_ln121_2_fu_1139_p4);

assign sext_ln121_3_fu_1168_p1 = $signed(trunc_ln121_3_fu_1158_p4);

assign sext_ln121_4_fu_1187_p1 = $signed(trunc_ln121_4_fu_1177_p4);

assign sext_ln121_5_fu_1206_p1 = $signed(trunc_ln121_5_fu_1196_p4);

assign sext_ln121_6_fu_1225_p1 = $signed(trunc_ln121_6_fu_1215_p4);

assign sext_ln121_7_fu_1244_p1 = $signed(trunc_ln121_7_fu_1234_p4);

assign sext_ln121_fu_1111_p1 = $signed(trunc_ln121_1_fu_1101_p4);

assign sub_ln99_1_fu_570_p2 = (24'd0 - trunc_ln67_1_reg_1508_pp0_iter2_reg);

assign sub_ln99_2_fu_600_p2 = (24'd0 - trunc_ln67_2_reg_1516_pp0_iter3_reg);

assign sub_ln99_3_fu_629_p2 = (24'd0 - trunc_ln67_3_reg_1524_pp0_iter4_reg);

assign sub_ln99_4_fu_658_p2 = (24'd0 - trunc_ln67_4_reg_1532_pp0_iter5_reg);

assign sub_ln99_5_fu_687_p2 = (24'd0 - trunc_ln67_5_reg_1540_pp0_iter6_reg);

assign sub_ln99_6_fu_716_p2 = (24'd0 - trunc_ln67_6_reg_1548_pp0_iter7_reg);

assign sub_ln99_7_fu_745_p2 = (24'd0 - trunc_ln67_7_reg_1556_pp0_iter8_reg);

assign sub_ln99_fu_550_p2 = (24'd0 - trunc_ln67_reg_1500);

assign tmp_11_fu_797_p3 = x_2_fu_791_p3[32'd22];

assign tmp_12_fu_805_p3 = x_2_fu_791_p3[32'd21];

assign tmp_13_fu_813_p3 = x_2_fu_791_p3[32'd20];

assign tmp_14_fu_821_p3 = x_2_fu_791_p3[32'd19];

assign tmp_15_fu_829_p3 = x_2_fu_791_p3[32'd18];

assign tmp_16_fu_837_p3 = x_2_fu_791_p3[32'd17];

assign tmp_17_fu_845_p3 = x_2_fu_791_p3[32'd16];

assign tmp_18_fu_853_p3 = x_2_fu_791_p3[32'd15];

assign tmp_19_fu_861_p3 = x_2_fu_791_p3[32'd14];

assign tmp_20_fu_869_p3 = x_2_fu_791_p3[32'd13];

assign tmp_21_fu_877_p3 = x_2_fu_791_p3[32'd12];

assign tmp_22_fu_885_p3 = x_2_fu_791_p3[32'd11];

assign tmp_23_fu_893_p3 = x_2_fu_791_p3[32'd10];

assign tmp_24_fu_901_p3 = x_2_fu_791_p3[32'd9];

assign tmp_25_fu_909_p3 = x_2_fu_791_p3[32'd8];

assign tmp_26_fu_917_p3 = x_2_fu_791_p3[32'd7];

assign tmp_27_fu_925_p3 = x_2_fu_791_p3[32'd6];

assign tmp_28_fu_933_p3 = x_2_fu_791_p3[32'd5];

assign tmp_29_fu_941_p3 = x_2_fu_791_p3[32'd4];

assign tmp_30_fu_949_p3 = x_2_fu_791_p3[32'd3];

assign tmp_31_fu_957_p3 = x_2_fu_791_p3[32'd2];

assign tmp_32_fu_965_p3 = x_2_fu_791_p3[32'd1];

assign tmp_33_fu_985_p3 = ap_phi_reg_pp0_iter13_s_val_1_reg_220[32'd5];

assign tmp_34_fu_993_p4 = {{ap_phi_reg_pp0_iter13_s_val_1_reg_220[5:4]}};

assign tmp_35_fu_1248_p4 = {{ap_phi_reg_pp0_iter16_empty_40_reg_351[23:7]}};

assign tmp_36_fu_1276_p4 = {{ap_phi_reg_pp0_iter16_empty_41_reg_360[23:7]}};

assign tmp_37_fu_1304_p4 = {{ap_phi_reg_pp0_iter16_empty_39_reg_342[23:7]}};

assign tmp_38_fu_1324_p4 = {{ap_phi_reg_pp0_iter16_empty_42_reg_369[23:7]}};

assign tmp_39_fu_1352_p4 = {{ap_phi_reg_pp0_iter16_empty_38_reg_333[23:7]}};

assign tmp_40_fu_1372_p4 = {{ap_phi_reg_pp0_iter16_empty_43_reg_378[23:7]}};

assign tmp_41_fu_1400_p4 = {{ap_phi_reg_pp0_iter16_empty_reg_324[23:7]}};

assign tmp_42_fu_1420_p4 = {{ap_phi_reg_pp0_iter16_q_val_reg_315[23:7]}};

assign trunc_ln108_fu_1009_p1 = ap_phi_reg_pp0_iter13_s_val_1_reg_220[3:0];

assign trunc_ln121_1_fu_1101_p4 = {{add_ln120_fu_1096_p2[23:1]}};

assign trunc_ln121_2_fu_1139_p4 = {{add_ln120_2_fu_1134_p2[23:1]}};

assign trunc_ln121_3_fu_1158_p4 = {{add_ln120_3_fu_1153_p2[23:1]}};

assign trunc_ln121_4_fu_1177_p4 = {{add_ln120_4_fu_1172_p2[23:1]}};

assign trunc_ln121_5_fu_1196_p4 = {{add_ln120_5_fu_1191_p2[23:1]}};

assign trunc_ln121_6_fu_1215_p4 = {{add_ln120_6_fu_1210_p2[23:1]}};

assign trunc_ln121_7_fu_1234_p4 = {{add_ln120_7_fu_1229_p2[23:1]}};

assign trunc_ln123_1_fu_1292_p1 = ap_phi_reg_pp0_iter16_empty_41_reg_360[7:0];

assign trunc_ln123_2_fu_1320_p1 = ap_phi_reg_pp0_iter16_empty_39_reg_342[7:0];

assign trunc_ln123_3_fu_1340_p1 = ap_phi_reg_pp0_iter16_empty_42_reg_369[7:0];

assign trunc_ln123_4_fu_1368_p1 = ap_phi_reg_pp0_iter16_empty_38_reg_333[7:0];

assign trunc_ln123_5_fu_1388_p1 = ap_phi_reg_pp0_iter16_empty_43_reg_378[7:0];

assign trunc_ln123_6_fu_1416_p1 = ap_phi_reg_pp0_iter16_empty_reg_324[7:0];

assign trunc_ln123_7_fu_1436_p1 = ap_phi_reg_pp0_iter16_q_val_reg_315[7:0];

assign trunc_ln123_fu_1264_p1 = ap_phi_reg_pp0_iter16_empty_40_reg_351[7:0];

assign trunc_ln16_fu_973_p1 = x_2_fu_791_p3[0:0];

assign trunc_ln224_1_fu_590_p1 = select_ln99_2_fu_585_p3[22:0];

assign trunc_ln224_2_fu_619_p1 = select_ln99_4_fu_614_p3[22:0];

assign trunc_ln224_3_fu_648_p1 = select_ln99_6_fu_643_p3[22:0];

assign trunc_ln224_4_fu_677_p1 = select_ln99_8_fu_672_p3[22:0];

assign trunc_ln224_5_fu_706_p1 = select_ln99_10_fu_701_p3[22:0];

assign trunc_ln224_6_fu_735_p1 = select_ln99_12_fu_730_p3[22:0];

assign trunc_ln224_7_fu_764_p1 = select_ln99_14_fu_759_p3[22:0];

assign trunc_ln224_fu_560_p1 = select_ln99_fu_555_p3[22:0];

assign trunc_ln67_fu_412_p1 = mul_stream_dout[23:0];

assign trunc_ln6_fu_1120_p4 = {{add_ln120_1_fu_1115_p2[23:1]}};

assign x_1_fu_785_p2 = ($signed(abs_max_fu_774_p3) + $signed(23'd8388607));

assign x_2_fu_791_p3 = ((icmp_ln12_reg_1759[0:0] == 1'b1) ? x_1_reg_1764 : 23'd0);

assign xor_ln108_fu_1013_p2 = (tmp_33_fu_985_p3 ^ 1'd1);

assign zext_ln119_fu_1053_p1 = add_ln119_reg_1871;

assign zext_ln99_1_fu_610_p1 = select_ln99_3_fu_605_p3;

assign zext_ln99_2_fu_639_p1 = select_ln99_5_fu_634_p3;

assign zext_ln99_3_fu_668_p1 = select_ln99_7_fu_663_p3;

assign zext_ln99_4_fu_697_p1 = select_ln99_9_fu_692_p3;

assign zext_ln99_5_fu_726_p1 = select_ln99_11_fu_721_p3;

assign zext_ln99_6_fu_755_p1 = select_ln99_13_fu_750_p3;

assign zext_ln99_fu_581_p1 = select_ln99_1_fu_575_p3;

endmodule //SILU_EM_QUANT_do_quant
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_do_silu (
        g_stream_dout,
        g_stream_empty_n,
        g_stream_read,
        silu_stream_din,
        silu_stream_full_n,
        silu_stream_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [167:0] g_stream_dout;
input   g_stream_empty_n;
output   g_stream_read;
output  [159:0] silu_stream_din;
input   silu_stream_full_n;
output   silu_stream_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire    do_adapt_U0_start_out;
wire    do_adapt_U0_start_write;
wire    do_adapt_U0_g_stream_read;
wire   [20:0] do_adapt_U0_adpt_stream_din;
wire    do_adapt_U0_adpt_stream_write;
wire    do_silu_parallel_U0_ap_start;
wire    do_silu_parallel_U0_ap_done;
wire    do_silu_parallel_U0_ap_continue;
wire    do_silu_parallel_U0_ap_idle;
wire    do_silu_parallel_U0_ap_ready;
wire    do_silu_parallel_U0_adpt_stream_read;
wire   [19:0] do_silu_parallel_U0_silu_stream_din;
wire    do_silu_parallel_U0_silu_stream_write;
wire    do_silu_parallel_U0_start_out;
wire    do_silu_parallel_U0_start_write;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_silu_stream_read;
wire   [159:0] do_adapt_1_U0_silu_stream1_din;
wire    do_adapt_1_U0_silu_stream1_write;
wire    adpt_stream_full_n;
wire   [20:0] adpt_stream_dout;
wire    adpt_stream_empty_n;
wire   [2:0] adpt_stream_num_data_valid;
wire   [2:0] adpt_stream_fifo_cap;
wire    silu_stream1_full_n;
wire   [19:0] silu_stream1_dout;
wire    silu_stream1_empty_n;
wire   [2:0] silu_stream1_num_data_valid;
wire   [2:0] silu_stream1_fifo_cap;
wire   [0:0] start_for_do_silu_parallel_U0_din;
wire    start_for_do_silu_parallel_U0_full_n;
wire   [0:0] start_for_do_silu_parallel_U0_dout;
wire    start_for_do_silu_parallel_U0_empty_n;
wire   [0:0] start_for_do_adapt_1_U0_din;
wire    start_for_do_adapt_1_U0_full_n;
wire   [0:0] start_for_do_adapt_1_U0_dout;
wire    start_for_do_adapt_1_U0_empty_n;

SILU_EM_QUANT_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .start_full_n(start_for_do_silu_parallel_U0_full_n),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .start_out(do_adapt_U0_start_out),
    .start_write(do_adapt_U0_start_write),
    .g_stream_dout(g_stream_dout),
    .g_stream_empty_n(g_stream_empty_n),
    .g_stream_read(do_adapt_U0_g_stream_read),
    .g_stream_num_data_valid(3'd0),
    .g_stream_fifo_cap(3'd0),
    .adpt_stream_din(do_adapt_U0_adpt_stream_din),
    .adpt_stream_full_n(adpt_stream_full_n),
    .adpt_stream_write(do_adapt_U0_adpt_stream_write),
    .adpt_stream_num_data_valid(adpt_stream_num_data_valid),
    .adpt_stream_fifo_cap(adpt_stream_fifo_cap)
);

SILU_EM_QUANT_do_silu_parallel do_silu_parallel_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_silu_parallel_U0_ap_start),
    .start_full_n(start_for_do_adapt_1_U0_full_n),
    .ap_done(do_silu_parallel_U0_ap_done),
    .ap_continue(do_silu_parallel_U0_ap_continue),
    .ap_idle(do_silu_parallel_U0_ap_idle),
    .ap_ready(do_silu_parallel_U0_ap_ready),
    .adpt_stream_dout(adpt_stream_dout),
    .adpt_stream_empty_n(adpt_stream_empty_n),
    .adpt_stream_read(do_silu_parallel_U0_adpt_stream_read),
    .adpt_stream_num_data_valid(adpt_stream_num_data_valid),
    .adpt_stream_fifo_cap(adpt_stream_fifo_cap),
    .silu_stream_din(do_silu_parallel_U0_silu_stream_din),
    .silu_stream_full_n(silu_stream1_full_n),
    .silu_stream_write(do_silu_parallel_U0_silu_stream_write),
    .silu_stream_num_data_valid(silu_stream1_num_data_valid),
    .silu_stream_fifo_cap(silu_stream1_fifo_cap),
    .start_out(do_silu_parallel_U0_start_out),
    .start_write(do_silu_parallel_U0_start_write)
);

SILU_EM_QUANT_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .silu_stream_dout(silu_stream1_dout),
    .silu_stream_empty_n(silu_stream1_empty_n),
    .silu_stream_read(do_adapt_1_U0_silu_stream_read),
    .silu_stream_num_data_valid(silu_stream1_num_data_valid),
    .silu_stream_fifo_cap(silu_stream1_fifo_cap),
    .silu_stream1_din(do_adapt_1_U0_silu_stream1_din),
    .silu_stream1_full_n(silu_stream_full_n),
    .silu_stream1_write(do_adapt_1_U0_silu_stream1_write),
    .silu_stream1_num_data_valid(3'd0),
    .silu_stream1_fifo_cap(3'd0)
);

SILU_EM_QUANT_fifo_w21_d2_S adpt_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_U0_adpt_stream_din),
    .if_full_n(adpt_stream_full_n),
    .if_write(do_adapt_U0_adpt_stream_write),
    .if_dout(adpt_stream_dout),
    .if_empty_n(adpt_stream_empty_n),
    .if_read(do_silu_parallel_U0_adpt_stream_read),
    .if_num_data_valid(adpt_stream_num_data_valid),
    .if_fifo_cap(adpt_stream_fifo_cap)
);

SILU_EM_QUANT_fifo_w20_d2_S silu_stream1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_silu_parallel_U0_silu_stream_din),
    .if_full_n(silu_stream1_full_n),
    .if_write(do_silu_parallel_U0_silu_stream_write),
    .if_dout(silu_stream1_dout),
    .if_empty_n(silu_stream1_empty_n),
    .if_read(do_adapt_1_U0_silu_stream_read),
    .if_num_data_valid(silu_stream1_num_data_valid),
    .if_fifo_cap(silu_stream1_fifo_cap)
);

SILU_EM_QUANT_start_for_do_silu_parallel_U0 start_for_do_silu_parallel_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_silu_parallel_U0_din),
    .if_full_n(start_for_do_silu_parallel_U0_full_n),
    .if_write(do_adapt_U0_start_write),
    .if_dout(start_for_do_silu_parallel_U0_dout),
    .if_empty_n(start_for_do_silu_parallel_U0_empty_n),
    .if_read(do_silu_parallel_U0_ap_ready)
);

SILU_EM_QUANT_start_for_do_adapt_1_U0 start_for_do_adapt_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_1_U0_din),
    .if_full_n(start_for_do_adapt_1_U0_full_n),
    .if_write(do_silu_parallel_U0_start_write),
    .if_dout(start_for_do_adapt_1_U0_dout),
    .if_empty_n(start_for_do_adapt_1_U0_empty_n),
    .if_read(do_adapt_1_U0_ap_ready)
);

assign ap_done = do_adapt_1_U0_ap_done;

assign ap_idle = (do_silu_parallel_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = do_adapt_U0_ap_ready;

assign do_adapt_1_U0_ap_continue = ap_continue;

assign do_adapt_1_U0_ap_start = start_for_do_adapt_1_U0_empty_n;

assign do_adapt_U0_ap_continue = 1'b1;

assign do_adapt_U0_ap_start = ap_start;

assign do_silu_parallel_U0_ap_continue = 1'b1;

assign do_silu_parallel_U0_ap_start = start_for_do_silu_parallel_U0_empty_n;

assign g_stream_read = do_adapt_U0_g_stream_read;

assign silu_stream_din = do_adapt_1_U0_silu_stream1_din;

assign silu_stream_write = do_adapt_1_U0_silu_stream1_write;

assign start_for_do_adapt_1_U0_din = 1'b1;

assign start_for_do_silu_parallel_U0_din = 1'b1;

endmodule //SILU_EM_QUANT_do_silu
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_do_silu_em_quant (
        ug_stream_TDATA,
        q_stream_TDATA,
        s_stream_TDATA,
        ap_clk,
        ap_rst,
        ug_stream_TVALID,
        ug_stream_TREADY,
        ap_start,
        q_stream_TVALID,
        q_stream_TREADY,
        s_stream_TVALID,
        s_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [167:0] ug_stream_TDATA;
output  [63:0] q_stream_TDATA;
output  [7:0] s_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   ug_stream_TVALID;
output   ug_stream_TREADY;
input   ap_start;
output   q_stream_TVALID;
input   q_stream_TREADY;
output   s_stream_TVALID;
input   s_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    stream_split_U0_ap_start;
wire    stream_split_U0_start_full_n;
wire    stream_split_U0_ap_done;
wire    stream_split_U0_ap_continue;
wire    stream_split_U0_ap_idle;
wire    stream_split_U0_ap_ready;
wire   [167:0] stream_split_U0_g_stream_din;
wire    stream_split_U0_g_stream_write;
wire   [167:0] stream_split_U0_u_stream_din;
wire    stream_split_U0_u_stream_write;
wire    stream_split_U0_start_out;
wire    stream_split_U0_start_write;
wire    stream_split_U0_ug_stream_TREADY;
wire    do_silu_U0_g_stream_read;
wire   [159:0] do_silu_U0_silu_stream_din;
wire    do_silu_U0_silu_stream_write;
wire    do_silu_U0_ap_start;
wire    do_silu_U0_ap_done;
wire    do_silu_U0_ap_ready;
wire    do_silu_U0_ap_idle;
wire    do_silu_U0_ap_continue;
wire    stream_merge_U0_ap_start;
wire    stream_merge_U0_ap_done;
wire    stream_merge_U0_ap_continue;
wire    stream_merge_U0_ap_idle;
wire    stream_merge_U0_ap_ready;
wire    stream_merge_U0_u_stream_read;
wire    stream_merge_U0_silu_stream_read;
wire   [191:0] stream_merge_U0_mul_stream_din;
wire    stream_merge_U0_mul_stream_write;
wire    stream_merge_U0_start_out;
wire    stream_merge_U0_start_write;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_mul_stream_read;
wire   [63:0] do_quant_U0_q_stream_TDATA;
wire    do_quant_U0_q_stream_TVALID;
wire   [7:0] do_quant_U0_s_stream_TDATA;
wire    do_quant_U0_s_stream_TVALID;
wire    u_stream_full_n;
wire   [167:0] u_stream_dout;
wire    u_stream_empty_n;
wire   [4:0] u_stream_num_data_valid;
wire   [4:0] u_stream_fifo_cap;
wire    g_stream_full_n;
wire   [167:0] g_stream_dout;
wire    g_stream_empty_n;
wire   [2:0] g_stream_num_data_valid;
wire   [2:0] g_stream_fifo_cap;
wire    silu_stream_full_n;
wire   [159:0] silu_stream_dout;
wire    silu_stream_empty_n;
wire   [2:0] silu_stream_num_data_valid;
wire   [2:0] silu_stream_fifo_cap;
wire    mul_stream_full_n;
wire   [191:0] mul_stream_dout;
wire    mul_stream_empty_n;
wire   [2:0] mul_stream_num_data_valid;
wire   [2:0] mul_stream_fifo_cap;
wire   [0:0] start_for_do_silu_U0_din;
wire    start_for_do_silu_U0_full_n;
wire   [0:0] start_for_do_silu_U0_dout;
wire    start_for_do_silu_U0_empty_n;
wire   [0:0] start_for_stream_merge_U0_din;
wire    start_for_stream_merge_U0_full_n;
wire   [0:0] start_for_stream_merge_U0_dout;
wire    start_for_stream_merge_U0_empty_n;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;

SILU_EM_QUANT_stream_split stream_split_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_split_U0_ap_start),
    .start_full_n(stream_split_U0_start_full_n),
    .ap_done(stream_split_U0_ap_done),
    .ap_continue(stream_split_U0_ap_continue),
    .ap_idle(stream_split_U0_ap_idle),
    .ap_ready(stream_split_U0_ap_ready),
    .ug_stream_TVALID(ug_stream_TVALID),
    .g_stream_din(stream_split_U0_g_stream_din),
    .g_stream_full_n(g_stream_full_n),
    .g_stream_write(stream_split_U0_g_stream_write),
    .g_stream_num_data_valid(g_stream_num_data_valid),
    .g_stream_fifo_cap(g_stream_fifo_cap),
    .u_stream_din(stream_split_U0_u_stream_din),
    .u_stream_full_n(u_stream_full_n),
    .u_stream_write(stream_split_U0_u_stream_write),
    .u_stream_num_data_valid(u_stream_num_data_valid),
    .u_stream_fifo_cap(u_stream_fifo_cap),
    .start_out(stream_split_U0_start_out),
    .start_write(stream_split_U0_start_write),
    .ug_stream_TDATA(ug_stream_TDATA),
    .ug_stream_TREADY(stream_split_U0_ug_stream_TREADY)
);

SILU_EM_QUANT_do_silu do_silu_U0(
    .g_stream_dout(g_stream_dout),
    .g_stream_empty_n(g_stream_empty_n),
    .g_stream_read(do_silu_U0_g_stream_read),
    .silu_stream_din(do_silu_U0_silu_stream_din),
    .silu_stream_full_n(silu_stream_full_n),
    .silu_stream_write(do_silu_U0_silu_stream_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_silu_U0_ap_start),
    .ap_done(do_silu_U0_ap_done),
    .ap_ready(do_silu_U0_ap_ready),
    .ap_idle(do_silu_U0_ap_idle),
    .ap_continue(do_silu_U0_ap_continue)
);

SILU_EM_QUANT_stream_merge stream_merge_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_merge_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .ap_done(stream_merge_U0_ap_done),
    .ap_continue(stream_merge_U0_ap_continue),
    .ap_idle(stream_merge_U0_ap_idle),
    .ap_ready(stream_merge_U0_ap_ready),
    .u_stream_dout(u_stream_dout),
    .u_stream_empty_n(u_stream_empty_n),
    .u_stream_read(stream_merge_U0_u_stream_read),
    .u_stream_num_data_valid(u_stream_num_data_valid),
    .u_stream_fifo_cap(u_stream_fifo_cap),
    .silu_stream_dout(silu_stream_dout),
    .silu_stream_empty_n(silu_stream_empty_n),
    .silu_stream_read(stream_merge_U0_silu_stream_read),
    .silu_stream_num_data_valid(silu_stream_num_data_valid),
    .silu_stream_fifo_cap(silu_stream_fifo_cap),
    .mul_stream_din(stream_merge_U0_mul_stream_din),
    .mul_stream_full_n(mul_stream_full_n),
    .mul_stream_write(stream_merge_U0_mul_stream_write),
    .mul_stream_num_data_valid(mul_stream_num_data_valid),
    .mul_stream_fifo_cap(mul_stream_fifo_cap),
    .start_out(stream_merge_U0_start_out),
    .start_write(stream_merge_U0_start_write)
);

SILU_EM_QUANT_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .mul_stream_dout(mul_stream_dout),
    .mul_stream_empty_n(mul_stream_empty_n),
    .mul_stream_read(do_quant_U0_mul_stream_read),
    .mul_stream_num_data_valid(mul_stream_num_data_valid),
    .mul_stream_fifo_cap(mul_stream_fifo_cap),
    .q_stream_TREADY(q_stream_TREADY),
    .s_stream_TREADY(s_stream_TREADY),
    .q_stream_TDATA(do_quant_U0_q_stream_TDATA),
    .q_stream_TVALID(do_quant_U0_q_stream_TVALID),
    .s_stream_TDATA(do_quant_U0_s_stream_TDATA),
    .s_stream_TVALID(do_quant_U0_s_stream_TVALID)
);

SILU_EM_QUANT_fifo_w168_d16_A u_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_split_U0_u_stream_din),
    .if_full_n(u_stream_full_n),
    .if_write(stream_split_U0_u_stream_write),
    .if_dout(u_stream_dout),
    .if_empty_n(u_stream_empty_n),
    .if_read(stream_merge_U0_u_stream_read),
    .if_num_data_valid(u_stream_num_data_valid),
    .if_fifo_cap(u_stream_fifo_cap)
);

SILU_EM_QUANT_fifo_w168_d2_S g_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_split_U0_g_stream_din),
    .if_full_n(g_stream_full_n),
    .if_write(stream_split_U0_g_stream_write),
    .if_dout(g_stream_dout),
    .if_empty_n(g_stream_empty_n),
    .if_read(do_silu_U0_g_stream_read),
    .if_num_data_valid(g_stream_num_data_valid),
    .if_fifo_cap(g_stream_fifo_cap)
);

SILU_EM_QUANT_fifo_w160_d2_S silu_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_silu_U0_silu_stream_din),
    .if_full_n(silu_stream_full_n),
    .if_write(do_silu_U0_silu_stream_write),
    .if_dout(silu_stream_dout),
    .if_empty_n(silu_stream_empty_n),
    .if_read(stream_merge_U0_silu_stream_read),
    .if_num_data_valid(silu_stream_num_data_valid),
    .if_fifo_cap(silu_stream_fifo_cap)
);

SILU_EM_QUANT_fifo_w192_d2_S mul_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_merge_U0_mul_stream_din),
    .if_full_n(mul_stream_full_n),
    .if_write(stream_merge_U0_mul_stream_write),
    .if_dout(mul_stream_dout),
    .if_empty_n(mul_stream_empty_n),
    .if_read(do_quant_U0_mul_stream_read),
    .if_num_data_valid(mul_stream_num_data_valid),
    .if_fifo_cap(mul_stream_fifo_cap)
);

SILU_EM_QUANT_start_for_do_silu_U0 start_for_do_silu_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_silu_U0_din),
    .if_full_n(start_for_do_silu_U0_full_n),
    .if_write(stream_split_U0_start_write),
    .if_dout(start_for_do_silu_U0_dout),
    .if_empty_n(start_for_do_silu_U0_empty_n),
    .if_read(do_silu_U0_ap_ready)
);

SILU_EM_QUANT_start_for_stream_merge_U0 start_for_stream_merge_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stream_merge_U0_din),
    .if_full_n(start_for_stream_merge_U0_full_n),
    .if_write(stream_split_U0_start_write),
    .if_dout(start_for_stream_merge_U0_dout),
    .if_empty_n(start_for_stream_merge_U0_empty_n),
    .if_read(stream_merge_U0_ap_ready)
);

SILU_EM_QUANT_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(stream_merge_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

assign ap_done = do_quant_U0_ap_done;

assign ap_idle = (stream_split_U0_ap_idle & stream_merge_U0_ap_idle & do_silu_U0_ap_idle & do_quant_U0_ap_idle);

assign ap_ready = stream_split_U0_ap_ready;

assign do_quant_U0_ap_continue = ap_continue;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_silu_U0_ap_continue = 1'b1;

assign do_silu_U0_ap_start = start_for_do_silu_U0_empty_n;

assign q_stream_TDATA = do_quant_U0_q_stream_TDATA;

assign q_stream_TVALID = do_quant_U0_q_stream_TVALID;

assign s_stream_TDATA = do_quant_U0_s_stream_TDATA;

assign s_stream_TVALID = do_quant_U0_s_stream_TVALID;

assign start_for_do_quant_U0_din = 1'b1;

assign start_for_do_silu_U0_din = 1'b1;

assign start_for_stream_merge_U0_din = 1'b1;

assign stream_merge_U0_ap_continue = 1'b1;

assign stream_merge_U0_ap_start = start_for_stream_merge_U0_empty_n;

assign stream_split_U0_ap_continue = 1'b1;

assign stream_split_U0_ap_start = ap_start;

assign stream_split_U0_start_full_n = (start_for_stream_merge_U0_full_n & start_for_do_silu_U0_full_n);

assign ug_stream_TREADY = stream_split_U0_ug_stream_TREADY;

endmodule //SILU_EM_QUANT_do_silu_em_quant
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_do_silu_parallel (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_stream_dout,
        adpt_stream_empty_n,
        adpt_stream_read,
        adpt_stream_num_data_valid,
        adpt_stream_fifo_cap,
        silu_stream_din,
        silu_stream_full_n,
        silu_stream_write,
        silu_stream_num_data_valid,
        silu_stream_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [20:0] adpt_stream_dout;
input   adpt_stream_empty_n;
output   adpt_stream_read;
input  [2:0] adpt_stream_num_data_valid;
input  [2:0] adpt_stream_fifo_cap;
output  [19:0] silu_stream_din;
input   silu_stream_full_n;
output   silu_stream_write;
input  [2:0] silu_stream_num_data_valid;
input  [2:0] silu_stream_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg adpt_stream_read;
reg silu_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln42_fu_100_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln42_reg_225;
reg   [0:0] icmp_ln42_reg_225_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] SILU_TABLE_address0;
wire   [7:0] SILU_TABLE_q0;
reg    adpt_stream_blk_n;
reg    silu_stream_blk_n;
wire   [0:0] icmp_ln42_reg_225_pp0_iter0_reg;
reg   [0:0] icmp_ln42_reg_225_pp0_iter1_reg;
reg   [20:0] adpt_stream_read_reg_229;
reg   [20:0] adpt_stream_read_reg_229_pp0_iter1_reg;
reg   [20:0] adpt_stream_read_reg_229_pp0_iter2_reg;
wire   [0:0] tmp_2_fu_118_p3;
reg   [0:0] tmp_2_reg_234;
reg   [0:0] tmp_2_reg_234_pp0_iter1_reg;
reg   [0:0] tmp_2_reg_234_pp0_iter2_reg;
wire   [8:0] trunc_ln54_fu_154_p1;
reg   [8:0] trunc_ln54_reg_239;
reg   [6:0] tmp_3_reg_244;
reg   [7:0] DIFF_reg_254;
wire   [63:0] zext_ln56_fu_185_p1;
reg   [15:0] indvar_flatten_fu_62;
wire   [15:0] add_ln42_fu_106_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
reg    SILU_TABLE_ce0_local;
wire   [20:0] sub_ln61_fu_112_p2;
wire   [15:0] tmp_1_fu_136_p4;
wire   [15:0] tmp_fu_126_p4;
wire   [15:0] select_ln61_fu_146_p3;
wire   [0:0] icmp_ln43_fu_173_p2;
wire   [8:0] LUT_IDX_fu_178_p3;
wire   [19:0] trunc_ln58_fu_190_p1;
wire   [9:0] shl_ln_fu_200_p3;
wire   [19:0] select_ln58_fu_193_p3;
wire   [19:0] zext_ln58_fu_207_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_108;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_62 = 16'd0;
end

SILU_EM_QUANT_do_silu_parallel_SILU_TABLE_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
SILU_TABLE_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SILU_TABLE_address0),
    .ce0(SILU_TABLE_ce0_local),
    .q0(SILU_TABLE_q0)
);

SILU_EM_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_108)) begin
        if ((icmp_ln42_fu_100_p2 == 1'd0)) begin
            indvar_flatten_fu_62 <= add_ln42_fu_106_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        DIFF_reg_254 <= SILU_TABLE_q0;
        adpt_stream_read_reg_229_pp0_iter2_reg <= adpt_stream_read_reg_229_pp0_iter1_reg;
        icmp_ln42_reg_225_pp0_iter2_reg <= icmp_ln42_reg_225_pp0_iter1_reg;
        tmp_2_reg_234_pp0_iter2_reg <= tmp_2_reg_234_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        adpt_stream_read_reg_229 <= adpt_stream_dout;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln42_reg_225 <= icmp_ln42_fu_100_p2;
        tmp_2_reg_234 <= adpt_stream_dout[32'd20];
        tmp_3_reg_244 <= {{select_ln61_fu_146_p3[15:9]}};
        trunc_ln54_reg_239 <= trunc_ln54_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        adpt_stream_read_reg_229_pp0_iter1_reg <= adpt_stream_read_reg_229;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln42_reg_225_pp0_iter1_reg <= icmp_ln42_reg_225;
        tmp_2_reg_234_pp0_iter1_reg <= tmp_2_reg_234;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        SILU_TABLE_ce0_local = 1'b1;
    end else begin
        SILU_TABLE_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln42_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        adpt_stream_blk_n = adpt_stream_empty_n;
    end else begin
        adpt_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln42_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        adpt_stream_read = 1'b1;
    end else begin
        adpt_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln42_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_225_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        silu_stream_blk_n = silu_stream_full_n;
    end else begin
        silu_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln42_reg_225_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        silu_stream_write = 1'b1;
    end else begin
        silu_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln42_reg_225_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign LUT_IDX_fu_178_p3 = ((icmp_ln43_fu_173_p2[0:0] == 1'b1) ? 9'd511 : trunc_ln54_reg_239);

assign SILU_TABLE_address0 = zext_ln56_fu_185_p1;

assign add_ln42_fu_106_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln42_fu_100_p2 == 1'd0) & (1'b0 == adpt_stream_empty_n)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln42_reg_225_pp0_iter2_reg == 1'd0) & (silu_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_108 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln42_fu_100_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 16'd38912) ? 1'b1 : 1'b0);

assign icmp_ln42_reg_225_pp0_iter0_reg = icmp_ln42_reg_225;

assign icmp_ln43_fu_173_p2 = ((tmp_3_reg_244 != 7'd0) ? 1'b1 : 1'b0);

assign select_ln58_fu_193_p3 = ((tmp_2_reg_234_pp0_iter2_reg[0:0] == 1'b1) ? 20'd0 : trunc_ln58_fu_190_p1);

assign select_ln61_fu_146_p3 = ((tmp_2_fu_118_p3[0:0] == 1'b1) ? tmp_1_fu_136_p4 : tmp_fu_126_p4);

assign shl_ln_fu_200_p3 = {{DIFF_reg_254}, {2'd0}};

assign silu_stream_din = (select_ln58_fu_193_p3 - zext_ln58_fu_207_p1);

assign start_out = real_start;

assign sub_ln61_fu_112_p2 = (21'd0 - adpt_stream_dout);

assign tmp_1_fu_136_p4 = {{sub_ln61_fu_112_p2[20:5]}};

assign tmp_2_fu_118_p3 = adpt_stream_dout[32'd20];

assign tmp_fu_126_p4 = {{adpt_stream_dout[20:5]}};

assign trunc_ln54_fu_154_p1 = select_ln61_fu_146_p3[8:0];

assign trunc_ln58_fu_190_p1 = adpt_stream_read_reg_229_pp0_iter2_reg[19:0];

assign zext_ln56_fu_185_p1 = LUT_IDX_fu_178_p3;

assign zext_ln58_fu_207_p1 = shl_ln_fu_200_p3;

endmodule //SILU_EM_QUANT_do_silu_parallel
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module SILU_EM_QUANT_do_silu_parallel_SILU_TABLE_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 8;
parameter AddressWidth = 9;
parameter AddressRange = 512;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/SILU_EM_QUANT/SILU_EM_QUANT_do_silu_parallel_SILU_TABLE_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_fifo_w160_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 160,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_fifo_w160_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_fifo_w160_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_fifo_w160_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 160,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module SILU_EM_QUANT_fifo_w168_d16_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 168,
    ADDR_WIDTH   = 4,
    DEPTH        = 16)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    MEM_DEPTH    = DEPTH - 1,
    MEM_AWIDTH   = clog2(MEM_DEPTH);
//------------------------Local signal-------------------
    reg  [MEM_AWIDTH-1:0] waddr;
    reg  [MEM_AWIDTH-1:0] raddr;
    wire [MEM_AWIDTH-1:0] wnext;
    wire [MEM_AWIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [MEM_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    SILU_EM_QUANT_fifo_w168_d16_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (MEM_AWIDTH),
        .DEPTH      (MEM_DEPTH)
    ) U_SILU_EM_QUANT_fifo_w168_d16_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------
    function integer clog2;
        input integer x;
        integer n, m;
    begin
        n = 1;
        m = 2;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        clog2 = n;
    end
    endfunction
//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                    ? waddr :
                        (waddr == MEM_DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                     ? raddr :
                        (raddr == MEM_DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {MEM_AWIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {MEM_AWIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {MEM_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module SILU_EM_QUANT_fifo_w168_d16_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 168,
    ADDR_WIDTH  = 4,
    DEPTH       = 16)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_fifo_w168_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 168,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_fifo_w168_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_fifo_w168_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_fifo_w168_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 168,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_fifo_w192_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 192,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_fifo_w192_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_fifo_w192_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_fifo_w192_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 192,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_fifo_w20_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 20,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_fifo_w20_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_fifo_w20_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_fifo_w20_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 20,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_fifo_w21_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 21,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_fifo_w21_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_fifo_w21_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_fifo_w21_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 21,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module SILU_EM_QUANT_flow_control_loop_delay_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_ready_delayed,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
reg ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_ready_delayed;
input   ap_loop_exit_done;


//Record the delay between ap_loop_exit_ready
//and ap_loop_exit_ready_delayed
reg    rewind_ap_ready_reg;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
//#0 rewind_ap_ready_reg = 1'b0;
end

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready_delayed;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else if ((ap_ready == 1'b0) & (ap_start == 1'b1) & ap_loop_exit_ready == 1'b1) begin
        rewind_ap_ready_reg <= 1'b1;
    end else if ((ap_ready == 1'b1) & (ap_start == 1'b1)) begin
        rewind_ap_ready_reg <= 1'b0;
    end
end

always @ (*) begin
    if ((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1)) begin
        ap_start_int = 1'b1;
    end else begin
        ap_start_int = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module SILU_EM_QUANT_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module SILU_EM_QUANT_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not SILU_EM_QUANT module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not SILU_EM_QUANT module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module SILU_EM_QUANT_mul_21s_20s_36_5_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;


reg signed [dout_WIDTH - 1 : 0] buff2;

























assign tmp_product = $signed(din0_reg) * $signed(din1_reg);




always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


        buff2 <= buff1;

















    end
end







assign dout = buff2;

















endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_pack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        silu_stream_dout,
        silu_stream_empty_n,
        silu_stream_read,
        silu_stream_num_data_valid,
        silu_stream_fifo_cap,
        silu_stream1_din,
        silu_stream1_full_n,
        silu_stream1_write,
        silu_stream1_num_data_valid,
        silu_stream1_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [19:0] silu_stream_dout;
input   silu_stream_empty_n;
output   silu_stream_read;
input  [2:0] silu_stream_num_data_valid;
input  [2:0] silu_stream_fifo_cap;
output  [159:0] silu_stream1_din;
input   silu_stream1_full_n;
output   silu_stream1_write;
input  [2:0] silu_stream1_num_data_valid;
input  [2:0] silu_stream1_fifo_cap;

reg ap_idle;
reg silu_stream_read;
reg silu_stream1_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg   [0:0] icmp_ln83_reg_450;
reg   [0:0] icmp_ln83_reg_450_pp0_iter3_reg;
reg   [0:0] icmp_ln88_1_reg_476;
reg    ap_predicate_op70_write_state5;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln83_fu_160_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    silu_stream_blk_n;
reg    silu_stream1_blk_n;
wire   [0:0] icmp_ln83_reg_450_pp0_iter0_reg;
reg   [0:0] icmp_ln83_reg_450_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_450_pp0_iter2_reg;
wire   [0:0] icmp_ln84_fu_180_p2;
reg   [0:0] icmp_ln84_reg_454;
wire   [0:0] or_ln84_fu_225_p2;
reg   [0:0] or_ln84_reg_460;
reg   [0:0] or_ln84_reg_460_pp0_iter3_reg;
wire   [3:0] t_5_fu_236_p3;
reg   [3:0] t_5_reg_471;
wire   [0:0] icmp_ln88_1_fu_249_p2;
reg   [3:0] t_fu_54;
wire    ap_loop_init;
reg   [19:0] p_0_0_08_155_fu_58;
wire   [19:0] select_ln84_5_fu_310_p3;
reg   [19:0] p_0_0_08_257_fu_62;
wire   [19:0] select_ln84_4_fu_303_p3;
reg   [19:0] p_0_0_08_359_fu_66;
wire   [19:0] select_ln84_3_fu_296_p3;
reg   [19:0] p_0_0_08_461_fu_70;
wire   [19:0] select_ln84_2_fu_289_p3;
reg   [19:0] p_0_0_08_563_fu_74;
wire   [19:0] select_ln84_1_fu_282_p3;
reg   [19:0] p_0_0_08_665_fu_78;
wire   [19:0] select_ln84_fu_275_p3;
reg   [19:0] p_0_0_0_0_0_067_fu_82;
reg   [13:0] indvar_flatten_fu_86;
wire   [13:0] select_ln84_7_fu_192_p3;
reg   [15:0] indvar_flatten18_fu_90;
wire   [15:0] add_ln83_fu_166_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
wire   [13:0] add_ln84_fu_186_p2;
wire   [0:0] icmp_ln88_fu_213_p2;
wire   [0:0] xor_ln83_fu_208_p2;
wire   [0:0] and_ln83_fu_219_p2;
wire   [3:0] add_ln88_fu_230_p2;
wire   [19:0] select_ln84_6_fu_317_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_111;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 t_fu_54 = 4'd0;
//#0 p_0_0_08_155_fu_58 = 20'd0;
//#0 p_0_0_08_257_fu_62 = 20'd0;
//#0 p_0_0_08_359_fu_66 = 20'd0;
//#0 p_0_0_08_461_fu_70 = 20'd0;
//#0 p_0_0_08_563_fu_74 = 20'd0;
//#0 p_0_0_08_665_fu_78 = 20'd0;
//#0 p_0_0_0_0_0_067_fu_82 = 20'd0;
//#0 indvar_flatten_fu_86 = 14'd0;
//#0 indvar_flatten18_fu_90 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

SILU_EM_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_111)) begin
        if ((icmp_ln83_fu_160_p2 == 1'd0)) begin
            indvar_flatten18_fu_90 <= add_ln83_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_90 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_86 <= 14'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln83_reg_450_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_86 <= select_ln84_7_fu_192_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_155_fu_58 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_155_fu_58 <= select_ln84_5_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_257_fu_62 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_257_fu_62 <= select_ln84_4_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_359_fu_66 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_359_fu_66 <= select_ln84_3_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_461_fu_70 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_461_fu_70 <= select_ln84_2_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_563_fu_74 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_563_fu_74 <= select_ln84_1_fu_282_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_08_665_fu_78 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_08_665_fu_78 <= select_ln84_fu_275_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_0_0_0_067_fu_82 <= 20'd0;
    end else if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        p_0_0_0_0_0_067_fu_82 <= silu_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_54 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln83_reg_450_pp0_iter1_reg == 1'd0))) begin
        t_fu_54 <= t_5_fu_236_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln83_reg_450 <= icmp_ln83_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln83_reg_450_pp0_iter1_reg <= icmp_ln83_reg_450;
        icmp_ln84_reg_454 <= icmp_ln84_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln83_reg_450_pp0_iter2_reg <= icmp_ln83_reg_450_pp0_iter1_reg;
        or_ln84_reg_460 <= or_ln84_fu_225_p2;
        t_5_reg_471 <= t_5_fu_236_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln83_reg_450_pp0_iter3_reg <= icmp_ln83_reg_450_pp0_iter2_reg;
        icmp_ln88_1_reg_476 <= icmp_ln88_1_fu_249_p2;
        or_ln84_reg_460_pp0_iter3_reg <= or_ln84_reg_460;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln83_fu_160_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_90;
    end
end

always @ (*) begin
    if (((ap_predicate_op70_write_state5 == 1'b1) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        silu_stream1_blk_n = silu_stream1_full_n;
    end else begin
        silu_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op70_write_state5 == 1'b1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        silu_stream1_write = 1'b1;
    end else begin
        silu_stream1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        silu_stream_blk_n = silu_stream_empty_n;
    end else begin
        silu_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        silu_stream_read = 1'b1;
    end else begin
        silu_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if (((1'b0 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4)) | ((icmp_ln83_reg_450_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln84_fu_186_p2 = (indvar_flatten_fu_86 + 14'd1);

assign add_ln88_fu_230_p2 = (t_fu_54 + 4'd1);

assign and_ln83_fu_219_p2 = (xor_ln83_fu_208_p2 & icmp_ln88_fu_213_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (((ap_predicate_op70_write_state5 == 1'b1) & (silu_stream1_full_n == 1'b0)) | ((icmp_ln83_reg_450_pp0_iter3_reg == 1'd0) & (silu_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_111 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op70_write_state5 = ((icmp_ln88_1_reg_476 == 1'd1) & (icmp_ln83_reg_450_pp0_iter3_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln83_fu_160_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd38912) ? 1'b1 : 1'b0);

assign icmp_ln83_reg_450_pp0_iter0_reg = icmp_ln83_reg_450;

assign icmp_ln84_fu_180_p2 = ((indvar_flatten_fu_86 == 14'd4864) ? 1'b1 : 1'b0);

assign icmp_ln88_1_fu_249_p2 = ((t_5_reg_471 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_213_p2 = ((t_fu_54 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln84_fu_225_p2 = (icmp_ln84_reg_454 | and_ln83_fu_219_p2);

assign select_ln84_1_fu_282_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_08_665_fu_78);

assign select_ln84_2_fu_289_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_08_563_fu_74);

assign select_ln84_3_fu_296_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_08_461_fu_70);

assign select_ln84_4_fu_303_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_08_359_fu_66);

assign select_ln84_5_fu_310_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_08_257_fu_62);

assign select_ln84_6_fu_317_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_08_155_fu_58);

assign select_ln84_7_fu_192_p3 = ((icmp_ln84_fu_180_p2[0:0] == 1'b1) ? 14'd1 : add_ln84_fu_186_p2);

assign select_ln84_fu_275_p3 = ((or_ln84_reg_460_pp0_iter3_reg[0:0] == 1'b1) ? 20'd0 : p_0_0_0_0_0_067_fu_82);

assign silu_stream1_din = {{{{{{{{silu_stream_dout}, {select_ln84_fu_275_p3}}, {select_ln84_1_fu_282_p3}}, {select_ln84_2_fu_289_p3}}, {select_ln84_3_fu_296_p3}}, {select_ln84_4_fu_303_p3}}, {select_ln84_5_fu_310_p3}}, {select_ln84_6_fu_317_p3}};

assign t_5_fu_236_p3 = ((or_ln84_fu_225_p2[0:0] == 1'b1) ? 4'd1 : add_ln88_fu_230_p2);

assign xor_ln83_fu_208_p2 = (icmp_ln84_reg_454 ^ 1'd1);

endmodule //SILU_EM_QUANT_pack
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module SILU_EM_QUANT_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_start_for_do_adapt_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_start_for_do_adapt_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_start_for_do_adapt_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_start_for_do_adapt_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_start_for_do_quant_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_start_for_do_quant_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_start_for_do_quant_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_start_for_do_quant_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_start_for_do_silu_parallel_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_start_for_do_silu_parallel_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_start_for_do_silu_parallel_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_start_for_do_silu_parallel_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_start_for_do_silu_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_start_for_do_silu_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_start_for_do_silu_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_start_for_do_silu_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module SILU_EM_QUANT_start_for_stream_merge_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    SILU_EM_QUANT_start_for_stream_merge_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_SILU_EM_QUANT_start_for_stream_merge_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module SILU_EM_QUANT_start_for_stream_merge_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_stream_merge (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        u_stream_dout,
        u_stream_empty_n,
        u_stream_read,
        u_stream_num_data_valid,
        u_stream_fifo_cap,
        silu_stream_dout,
        silu_stream_empty_n,
        silu_stream_read,
        silu_stream_num_data_valid,
        silu_stream_fifo_cap,
        mul_stream_din,
        mul_stream_full_n,
        mul_stream_write,
        mul_stream_num_data_valid,
        mul_stream_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [167:0] u_stream_dout;
input   u_stream_empty_n;
output   u_stream_read;
input  [4:0] u_stream_num_data_valid;
input  [4:0] u_stream_fifo_cap;
input  [159:0] silu_stream_dout;
input   silu_stream_empty_n;
output   silu_stream_read;
input  [2:0] silu_stream_num_data_valid;
input  [2:0] silu_stream_fifo_cap;
output  [191:0] mul_stream_din;
input   mul_stream_full_n;
output   mul_stream_write;
input  [2:0] mul_stream_num_data_valid;
input  [2:0] mul_stream_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg u_stream_read;
reg silu_stream_read;
reg mul_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln68_fu_167_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
reg   [0:0] icmp_ln68_reg_504;
reg   [0:0] icmp_ln68_reg_504_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
wire    ap_CS_iter5_fsm_state6;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    u_stream_blk_n;
reg    silu_stream_blk_n;
reg    mul_stream_blk_n;
reg   [0:0] icmp_ln68_reg_504_pp0_iter1_reg;
reg   [0:0] icmp_ln68_reg_504_pp0_iter2_reg;
reg   [0:0] icmp_ln68_reg_504_pp0_iter3_reg;
wire   [20:0] trunc_ln71_fu_179_p1;
reg  signed [20:0] trunc_ln71_reg_508;
reg  signed [20:0] trunc_ln71_1_reg_513;
reg  signed [20:0] trunc_ln71_2_reg_518;
reg  signed [20:0] trunc_ln71_3_reg_523;
reg  signed [20:0] trunc_ln71_4_reg_528;
reg  signed [20:0] trunc_ln71_5_reg_533;
reg  signed [20:0] trunc_ln71_6_reg_538;
reg  signed [20:0] trunc_ln71_7_reg_543;
wire   [19:0] trunc_ln72_fu_253_p1;
reg  signed [19:0] trunc_ln72_reg_548;
reg  signed [19:0] trunc_ln72_1_reg_553;
reg  signed [19:0] trunc_ln72_2_reg_558;
reg  signed [19:0] trunc_ln72_3_reg_563;
reg  signed [19:0] trunc_ln72_4_reg_568;
reg  signed [19:0] trunc_ln72_5_reg_573;
reg  signed [19:0] trunc_ln72_6_reg_578;
reg  signed [19:0] trunc_ln72_7_reg_583;
reg   [12:0] indvar_flatten_fu_104;
wire   [12:0] add_ln68_fu_173_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [35:0] grp_fu_127_p2;
wire   [35:0] grp_fu_131_p2;
wire   [35:0] grp_fu_135_p2;
wire   [35:0] grp_fu_139_p2;
wire   [35:0] grp_fu_143_p2;
wire   [35:0] grp_fu_147_p2;
wire   [35:0] grp_fu_151_p2;
wire   [35:0] grp_fu_155_p2;
wire   [23:0] trunc_ln75_7_fu_466_p4;
wire   [23:0] trunc_ln75_6_fu_456_p4;
wire   [23:0] trunc_ln75_5_fu_446_p4;
wire   [23:0] trunc_ln75_4_fu_436_p4;
wire   [23:0] trunc_ln75_3_fu_426_p4;
wire   [23:0] trunc_ln75_2_fu_416_p4;
wire   [23:0] trunc_ln75_1_fu_406_p4;
wire   [23:0] trunc_ln2_fu_396_p4;
reg    grp_fu_127_ce;
reg    grp_fu_131_ce;
reg    grp_fu_135_ce;
reg    grp_fu_139_ce;
reg    grp_fu_143_ce;
reg    grp_fu_147_ce;
reg    grp_fu_151_ce;
reg    grp_fu_155_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
reg    ap_ST_iter5_fsm_state6_blk;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_143;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_104 = 13'd0;
end

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_reg_508),
    .din1(trunc_ln72_reg_548),
    .ce(grp_fu_127_ce),
    .dout(grp_fu_127_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_1_reg_513),
    .din1(trunc_ln72_1_reg_553),
    .ce(grp_fu_131_ce),
    .dout(grp_fu_131_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_2_reg_518),
    .din1(trunc_ln72_2_reg_558),
    .ce(grp_fu_135_ce),
    .dout(grp_fu_135_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_3_reg_523),
    .din1(trunc_ln72_3_reg_563),
    .ce(grp_fu_139_ce),
    .dout(grp_fu_139_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_4_reg_528),
    .din1(trunc_ln72_4_reg_568),
    .ce(grp_fu_143_ce),
    .dout(grp_fu_143_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_5_reg_533),
    .din1(trunc_ln72_5_reg_573),
    .ce(grp_fu_147_ce),
    .dout(grp_fu_147_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_6_reg_538),
    .din1(trunc_ln72_6_reg_578),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

SILU_EM_QUANT_mul_21s_20s_36_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 36 ))
mul_21s_20s_36_5_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln71_7_reg_543),
    .din1(trunc_ln72_7_reg_583),
    .ce(grp_fu_155_ce),
    .dout(grp_fu_155_p2)
);

SILU_EM_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_143)) begin
        if ((icmp_ln68_fu_167_p2 == 1'd0)) begin
            indvar_flatten_fu_104 <= add_ln68_fu_173_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln68_reg_504 <= icmp_ln68_fu_167_p2;
        trunc_ln71_1_reg_513 <= {{u_stream_dout[41:21]}};
        trunc_ln71_2_reg_518 <= {{u_stream_dout[62:42]}};
        trunc_ln71_3_reg_523 <= {{u_stream_dout[83:63]}};
        trunc_ln71_4_reg_528 <= {{u_stream_dout[104:84]}};
        trunc_ln71_5_reg_533 <= {{u_stream_dout[125:105]}};
        trunc_ln71_6_reg_538 <= {{u_stream_dout[146:126]}};
        trunc_ln71_7_reg_543 <= {{u_stream_dout[167:147]}};
        trunc_ln71_reg_508 <= trunc_ln71_fu_179_p1;
        trunc_ln72_1_reg_553 <= {{silu_stream_dout[39:20]}};
        trunc_ln72_2_reg_558 <= {{silu_stream_dout[59:40]}};
        trunc_ln72_3_reg_563 <= {{silu_stream_dout[79:60]}};
        trunc_ln72_4_reg_568 <= {{silu_stream_dout[99:80]}};
        trunc_ln72_5_reg_573 <= {{silu_stream_dout[119:100]}};
        trunc_ln72_6_reg_578 <= {{silu_stream_dout[139:120]}};
        trunc_ln72_7_reg_583 <= {{silu_stream_dout[159:140]}};
        trunc_ln72_reg_548 <= trunc_ln72_fu_253_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln68_reg_504_pp0_iter1_reg <= icmp_ln68_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln68_reg_504_pp0_iter2_reg <= icmp_ln68_reg_504_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln68_reg_504_pp0_iter3_reg <= icmp_ln68_reg_504_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        icmp_ln68_reg_504_pp0_iter4_reg <= icmp_ln68_reg_504_pp0_iter3_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_pp0_stage0_iter5)) begin
        ap_ST_iter5_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_iter5_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (icmp_ln68_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_127_ce = 1'b1;
    end else begin
        grp_fu_127_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_131_ce = 1'b1;
    end else begin
        grp_fu_131_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_135_ce = 1'b1;
    end else begin
        grp_fu_135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_139_ce = 1'b1;
    end else begin
        grp_fu_139_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_143_ce = 1'b1;
    end else begin
        grp_fu_143_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_147_ce = 1'b1;
    end else begin
        grp_fu_147_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_151_ce = 1'b1;
    end else begin
        grp_fu_151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_155_ce = 1'b1;
    end else begin
        grp_fu_155_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln68_reg_504_pp0_iter4_reg == 1'd0))) begin
        mul_stream_blk_n = mul_stream_full_n;
    end else begin
        mul_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln68_reg_504_pp0_iter4_reg == 1'd0))) begin
        mul_stream_write = 1'b1;
    end else begin
        mul_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln68_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        silu_stream_blk_n = silu_stream_empty_n;
    end else begin
        silu_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (icmp_ln68_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        silu_stream_read = 1'b1;
    end else begin
        silu_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln68_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        u_stream_blk_n = u_stream_empty_n;
    end else begin
        u_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (icmp_ln68_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        u_stream_read = 1'b1;
    end else begin
        u_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln68_reg_504_pp0_iter4_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter4_fsm_state5)))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

assign add_ln68_fu_173_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((silu_stream_empty_n == 1'b0) & (icmp_ln68_fu_167_p2 == 1'd0)) | ((icmp_ln68_fu_167_p2 == 1'd0) & (u_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln68_reg_504_pp0_iter4_reg == 1'd0) & (mul_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_143 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln68_fu_167_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd4864) ? 1'b1 : 1'b0);

assign mul_stream_din = {{{{{{{{trunc_ln75_7_fu_466_p4}, {trunc_ln75_6_fu_456_p4}}, {trunc_ln75_5_fu_446_p4}}, {trunc_ln75_4_fu_436_p4}}, {trunc_ln75_3_fu_426_p4}}, {trunc_ln75_2_fu_416_p4}}, {trunc_ln75_1_fu_406_p4}}, {trunc_ln2_fu_396_p4}};

assign start_out = real_start;

assign trunc_ln2_fu_396_p4 = {{grp_fu_127_p2[35:12]}};

assign trunc_ln71_fu_179_p1 = u_stream_dout[20:0];

assign trunc_ln72_fu_253_p1 = silu_stream_dout[19:0];

assign trunc_ln75_1_fu_406_p4 = {{grp_fu_131_p2[35:12]}};

assign trunc_ln75_2_fu_416_p4 = {{grp_fu_135_p2[35:12]}};

assign trunc_ln75_3_fu_426_p4 = {{grp_fu_139_p2[35:12]}};

assign trunc_ln75_4_fu_436_p4 = {{grp_fu_143_p2[35:12]}};

assign trunc_ln75_5_fu_446_p4 = {{grp_fu_147_p2[35:12]}};

assign trunc_ln75_6_fu_456_p4 = {{grp_fu_151_p2[35:12]}};

assign trunc_ln75_7_fu_466_p4 = {{grp_fu_155_p2[35:12]}};

endmodule //SILU_EM_QUANT_stream_merge
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_stream_split (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ug_stream_TVALID,
        g_stream_din,
        g_stream_full_n,
        g_stream_write,
        g_stream_num_data_valid,
        g_stream_fifo_cap,
        u_stream_din,
        u_stream_full_n,
        u_stream_write,
        u_stream_num_data_valid,
        u_stream_fifo_cap,
        start_out,
        start_write,
        ug_stream_TDATA,
        ug_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   ug_stream_TVALID;
output  [167:0] g_stream_din;
input   g_stream_full_n;
output   g_stream_write;
input  [2:0] g_stream_num_data_valid;
input  [2:0] g_stream_fifo_cap;
output  [167:0] u_stream_din;
input   u_stream_full_n;
output   u_stream_write;
input  [4:0] u_stream_num_data_valid;
input  [4:0] u_stream_fifo_cap;
output   start_out;
output   start_write;
input  [167:0] ug_stream_TDATA;
output   ug_stream_TREADY;

reg ap_idle;
reg g_stream_write;
reg u_stream_write;
reg start_write;
reg ug_stream_TREADY;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln44_reg_269;
reg   [0:0] icmp_ln44_reg_269_pp0_iter2_reg;
reg   [0:0] cmp10_reg_280;
reg    ap_predicate_op48_write_state4;
reg    ap_predicate_op50_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln44_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    ug_stream_TDATA_blk_n;
reg    u_stream_blk_n;
reg    g_stream_blk_n;
wire   [0:0] icmp_ln44_reg_269_pp0_iter0_reg;
reg   [0:0] icmp_ln44_reg_269_pp0_iter1_reg;
wire   [0:0] icmp_ln45_fu_137_p2;
reg   [0:0] icmp_ln45_reg_273;
wire   [0:0] cmp10_fu_206_p2;
reg   [3:0] t_fu_56;
wire   [3:0] t_4_fu_223_p3;
wire    ap_loop_init;
reg   [1:0] ug_fu_60;
wire   [1:0] select_ln45_fu_198_p3;
reg   [5:0] indvar_flatten_fu_64;
wire   [5:0] select_ln45_1_fu_149_p3;
reg   [13:0] indvar_flatten11_fu_68;
wire   [13:0] add_ln44_fu_123_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten11_load;
wire   [5:0] add_ln45_1_fu_143_p2;
wire   [0:0] icmp_ln46_fu_180_p2;
wire   [0:0] xor_ln44_fu_175_p2;
wire   [1:0] select_ln44_fu_168_p3;
wire   [0:0] and_ln44_fu_186_p2;
wire   [1:0] ug_2_fu_192_p2;
wire   [0:0] or_ln46_fu_218_p2;
wire   [3:0] add_ln46_fu_212_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_118;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 t_fu_56 = 4'd0;
//#0 ug_fu_60 = 2'd0;
//#0 indvar_flatten_fu_64 = 6'd0;
//#0 indvar_flatten11_fu_68 = 14'd0;
end

SILU_EM_QUANT_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_118)) begin
        if ((icmp_ln44_fu_117_p2 == 1'd0)) begin
            indvar_flatten11_fu_68 <= add_ln44_fu_123_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_68 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_64 <= 6'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln44_reg_269_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_64 <= select_ln45_1_fu_149_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_56 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln44_reg_269_pp0_iter1_reg == 1'd0))) begin
        t_fu_56 <= t_4_fu_223_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ug_fu_60 <= 2'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln44_reg_269_pp0_iter1_reg == 1'd0))) begin
        ug_fu_60 <= select_ln45_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln44_reg_269 <= icmp_ln44_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln44_reg_269_pp0_iter1_reg <= icmp_ln44_reg_269;
        icmp_ln45_reg_273 <= icmp_ln45_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cmp10_reg_280 <= cmp10_fu_206_p2;
        icmp_ln44_reg_269_pp0_iter2_reg <= icmp_ln44_reg_269_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln44_fu_117_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_68;
    end
end

always @ (*) begin
    if (((ap_predicate_op48_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        g_stream_blk_n = g_stream_full_n;
    end else begin
        g_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_predicate_op48_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        g_stream_write = 1'b1;
    end else begin
        g_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op50_write_state4 == 1'b1))) begin
        u_stream_blk_n = u_stream_full_n;
    end else begin
        u_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op50_write_state4 == 1'b1))) begin
        u_stream_write = 1'b1;
    end else begin
        u_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_269_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ug_stream_TDATA_blk_n = ug_stream_TVALID;
    end else begin
        ug_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln44_reg_269_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ug_stream_TREADY = 1'b1;
    end else begin
        ug_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln44_reg_269_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_123_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 14'd1);

assign add_ln45_1_fu_143_p2 = (indvar_flatten_fu_64 + 6'd1);

assign add_ln46_fu_212_p2 = (t_fu_56 + 4'd1);

assign and_ln44_fu_186_p2 = (xor_ln44_fu_175_p2 & icmp_ln46_fu_180_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((u_stream_full_n == 1'b0) & (ap_predicate_op50_write_state4 == 1'b1)) | ((ap_predicate_op48_write_state4 == 1'b1) & (g_stream_full_n == 1'b0)) | ((icmp_ln44_reg_269_pp0_iter2_reg == 1'd0) & (ug_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_118 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op48_write_state4 = ((cmp10_reg_280 == 1'd0) & (icmp_ln44_reg_269_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op50_write_state4 = ((cmp10_reg_280 == 1'd1) & (icmp_ln44_reg_269_pp0_iter2_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp10_fu_206_p2 = ((select_ln45_fu_198_p3 == 2'd0) ? 1'b1 : 1'b0);

assign g_stream_din = ug_stream_TDATA;

assign icmp_ln44_fu_117_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 14'd9728) ? 1'b1 : 1'b0);

assign icmp_ln44_reg_269_pp0_iter0_reg = icmp_ln44_reg_269;

assign icmp_ln45_fu_137_p2 = ((indvar_flatten_fu_64 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_180_p2 = ((t_fu_56 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln46_fu_218_p2 = (icmp_ln45_reg_273 | and_ln44_fu_186_p2);

assign select_ln44_fu_168_p3 = ((icmp_ln45_reg_273[0:0] == 1'b1) ? 2'd0 : ug_fu_60);

assign select_ln45_1_fu_149_p3 = ((icmp_ln45_fu_137_p2[0:0] == 1'b1) ? 6'd1 : add_ln45_1_fu_143_p2);

assign select_ln45_fu_198_p3 = ((and_ln44_fu_186_p2[0:0] == 1'b1) ? ug_2_fu_192_p2 : select_ln44_fu_168_p3);

assign start_out = real_start;

assign t_4_fu_223_p3 = ((or_ln46_fu_218_p2[0:0] == 1'b1) ? 4'd1 : add_ln46_fu_212_p2);

assign u_stream_din = ug_stream_TDATA;

assign ug_2_fu_192_p2 = (select_ln44_fu_168_p3 + 2'd1);

assign xor_ln44_fu_175_p2 = (icmp_ln45_reg_273 ^ 1'd1);

endmodule //SILU_EM_QUANT_stream_split
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SILU_EM_QUANT_unpk (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        g_stream_dout,
        g_stream_empty_n,
        g_stream_read,
        g_stream_num_data_valid,
        g_stream_fifo_cap,
        adpt_stream_din,
        adpt_stream_full_n,
        adpt_stream_write,
        adpt_stream_num_data_valid,
        adpt_stream_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [167:0] g_stream_dout;
input   g_stream_empty_n;
output   g_stream_read;
input  [2:0] g_stream_num_data_valid;
input  [2:0] g_stream_fifo_cap;
output  [20:0] adpt_stream_din;
input   adpt_stream_full_n;
output   adpt_stream_write;
input  [2:0] adpt_stream_num_data_valid;
input  [2:0] adpt_stream_fifo_cap;

reg ap_idle;
reg g_stream_read;
reg adpt_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln50_reg_582;
reg   [0:0] icmp_ln50_reg_582_pp0_iter1_reg;
reg   [0:0] icmp_ln55_reg_592;
wire   [0:0] icmp_ln55_reg_592_pp0_iter1_reg;
reg    ap_predicate_op60_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln50_fu_275_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    g_stream_blk_n;
reg    adpt_stream_blk_n;
wire   [0:0] icmp_ln50_reg_582_pp0_iter0_reg;
wire   [0:0] icmp_ln51_fu_287_p2;
reg   [0:0] icmp_ln51_reg_586;
wire   [0:0] icmp_ln55_fu_350_p2;
reg   [20:0] ap_phi_mux_p_0_0_7_0_0_083_phi_fu_148_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_7_0_0_083_reg_145;
reg   [20:0] ap_phi_mux_p_0_0_6_0_0_081_phi_fu_158_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_6_0_0_081_reg_155;
reg   [20:0] ap_phi_mux_p_0_0_5_0_0_079_phi_fu_167_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_5_0_0_079_reg_164;
reg   [20:0] ap_phi_mux_p_0_0_4_0_0_077_phi_fu_176_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_4_0_0_077_reg_173;
reg   [20:0] ap_phi_mux_p_0_0_3_0_0_075_phi_fu_185_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_3_0_0_075_reg_182;
reg   [20:0] ap_phi_mux_p_0_0_2_0_0_073_phi_fu_194_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_2_0_0_073_reg_191;
reg   [20:0] ap_phi_mux_p_0_0_1_0_0_071_phi_fu_203_p4;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_1_0_0_071_reg_200;
reg   [20:0] ap_phi_mux_p_0_0_0_0_0_069_phi_fu_212_p4;
wire   [20:0] trunc_ln55_fu_395_p1;
wire   [20:0] ap_phi_reg_pp0_iter2_p_0_0_0_0_0_069_reg_209;
reg   [3:0] t_fu_92;
wire   [3:0] t_1_fu_356_p2;
wire    ap_loop_init;
reg   [13:0] indvar_flatten_fu_96;
wire   [13:0] select_ln51_1_fu_299_p3;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten24_fu_100;
wire   [15:0] add_ln50_fu_281_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten24_load;
reg   [20:0] p_0_0_0_0_0_068_fu_104;
reg   [20:0] p_0_0_1_0_0_070_fu_108;
reg   [20:0] p_0_0_2_0_0_072_fu_112;
reg   [20:0] p_0_0_3_0_0_074_fu_116;
reg   [20:0] p_0_0_4_0_0_076_fu_120;
reg   [20:0] p_0_0_5_0_0_078_fu_124;
reg   [20:0] p_0_0_6_0_0_080_fu_128;
wire   [13:0] add_ln51_fu_293_p2;
wire   [0:0] icmp_ln52_fu_325_p2;
wire   [0:0] xor_ln50_fu_320_p2;
wire   [0:0] and_ln50_fu_331_p2;
wire   [0:0] or_ln51_fu_337_p2;
wire   [3:0] select_ln51_fu_342_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_85;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 t_fu_92 = 4'd0;
//#0 indvar_flatten_fu_96 = 14'd0;
//#0 indvar_flatten24_fu_100 = 16'd0;
//#0 p_0_0_0_0_0_068_fu_104 = 21'd0;
//#0 p_0_0_1_0_0_070_fu_108 = 21'd0;
//#0 p_0_0_2_0_0_072_fu_112 = 21'd0;
//#0 p_0_0_3_0_0_074_fu_116 = 21'd0;
//#0 p_0_0_4_0_0_076_fu_120 = 21'd0;
//#0 p_0_0_5_0_0_078_fu_124 = 21'd0;
//#0 p_0_0_6_0_0_080_fu_128 = 21'd0;
//#0 ap_done_reg = 1'b0;
end

SILU_EM_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln50_fu_275_p2 == 1'd0)) begin
            indvar_flatten24_fu_100 <= add_ln50_fu_281_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten24_fu_100 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln50_fu_275_p2 == 1'd0)) begin
            indvar_flatten_fu_96 <= select_ln51_1_fu_299_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_0_0_0_068_fu_104 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_0_0_0_068_fu_104 <= ap_phi_mux_p_0_0_1_0_0_071_phi_fu_203_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_1_0_0_070_fu_108 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_1_0_0_070_fu_108 <= ap_phi_mux_p_0_0_2_0_0_073_phi_fu_194_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_2_0_0_072_fu_112 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_2_0_0_072_fu_112 <= ap_phi_mux_p_0_0_3_0_0_075_phi_fu_185_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_3_0_0_074_fu_116 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_3_0_0_074_fu_116 <= ap_phi_mux_p_0_0_4_0_0_077_phi_fu_176_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_4_0_0_076_fu_120 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_4_0_0_076_fu_120 <= ap_phi_mux_p_0_0_5_0_0_079_phi_fu_167_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_5_0_0_078_fu_124 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_5_0_0_078_fu_124 <= ap_phi_mux_p_0_0_6_0_0_081_phi_fu_158_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_0_0_6_0_0_080_fu_128 <= 21'd0;
    end else if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        p_0_0_6_0_0_080_fu_128 <= ap_phi_mux_p_0_0_7_0_0_083_phi_fu_148_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_92 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln50_reg_582_pp0_iter0_reg == 1'd0))) begin
        t_fu_92 <= t_1_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln50_reg_582 <= icmp_ln50_fu_275_p2;
        icmp_ln51_reg_586 <= icmp_ln51_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln50_reg_582_pp0_iter1_reg <= icmp_ln50_reg_582;
        icmp_ln55_reg_592 <= icmp_ln55_fu_350_p2;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        adpt_stream_blk_n = adpt_stream_full_n;
    end else begin
        adpt_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        adpt_stream_write = 1'b1;
    end else begin
        adpt_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln50_fu_275_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_0_0_0_069_phi_fu_212_p4 = p_0_0_0_0_0_068_fu_104;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_0_0_069_phi_fu_212_p4 = trunc_ln55_fu_395_p1;
        end else begin
            ap_phi_mux_p_0_0_0_0_0_069_phi_fu_212_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_0_0_069_reg_209;
        end
    end else begin
        ap_phi_mux_p_0_0_0_0_0_069_phi_fu_212_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_0_0_069_reg_209;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_1_0_0_071_phi_fu_203_p4 = p_0_0_1_0_0_070_fu_108;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_1_0_0_071_phi_fu_203_p4 = {{g_stream_dout[41:21]}};
        end else begin
            ap_phi_mux_p_0_0_1_0_0_071_phi_fu_203_p4 = ap_phi_reg_pp0_iter2_p_0_0_1_0_0_071_reg_200;
        end
    end else begin
        ap_phi_mux_p_0_0_1_0_0_071_phi_fu_203_p4 = ap_phi_reg_pp0_iter2_p_0_0_1_0_0_071_reg_200;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_2_0_0_073_phi_fu_194_p4 = p_0_0_2_0_0_072_fu_112;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_2_0_0_073_phi_fu_194_p4 = {{g_stream_dout[62:42]}};
        end else begin
            ap_phi_mux_p_0_0_2_0_0_073_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_p_0_0_2_0_0_073_reg_191;
        end
    end else begin
        ap_phi_mux_p_0_0_2_0_0_073_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_p_0_0_2_0_0_073_reg_191;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_3_0_0_075_phi_fu_185_p4 = p_0_0_3_0_0_074_fu_116;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_3_0_0_075_phi_fu_185_p4 = {{g_stream_dout[83:63]}};
        end else begin
            ap_phi_mux_p_0_0_3_0_0_075_phi_fu_185_p4 = ap_phi_reg_pp0_iter2_p_0_0_3_0_0_075_reg_182;
        end
    end else begin
        ap_phi_mux_p_0_0_3_0_0_075_phi_fu_185_p4 = ap_phi_reg_pp0_iter2_p_0_0_3_0_0_075_reg_182;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_4_0_0_077_phi_fu_176_p4 = p_0_0_4_0_0_076_fu_120;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_4_0_0_077_phi_fu_176_p4 = {{g_stream_dout[104:84]}};
        end else begin
            ap_phi_mux_p_0_0_4_0_0_077_phi_fu_176_p4 = ap_phi_reg_pp0_iter2_p_0_0_4_0_0_077_reg_173;
        end
    end else begin
        ap_phi_mux_p_0_0_4_0_0_077_phi_fu_176_p4 = ap_phi_reg_pp0_iter2_p_0_0_4_0_0_077_reg_173;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_5_0_0_079_phi_fu_167_p4 = p_0_0_5_0_0_078_fu_124;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_5_0_0_079_phi_fu_167_p4 = {{g_stream_dout[125:105]}};
        end else begin
            ap_phi_mux_p_0_0_5_0_0_079_phi_fu_167_p4 = ap_phi_reg_pp0_iter2_p_0_0_5_0_0_079_reg_164;
        end
    end else begin
        ap_phi_mux_p_0_0_5_0_0_079_phi_fu_167_p4 = ap_phi_reg_pp0_iter2_p_0_0_5_0_0_079_reg_164;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_6_0_0_081_phi_fu_158_p4 = p_0_0_6_0_0_080_fu_128;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_6_0_0_081_phi_fu_158_p4 = {{g_stream_dout[146:126]}};
        end else begin
            ap_phi_mux_p_0_0_6_0_0_081_phi_fu_158_p4 = ap_phi_reg_pp0_iter2_p_0_0_6_0_0_081_reg_155;
        end
    end else begin
        ap_phi_mux_p_0_0_6_0_0_081_phi_fu_158_p4 = ap_phi_reg_pp0_iter2_p_0_0_6_0_0_081_reg_155;
    end
end

always @ (*) begin
    if ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln55_reg_592_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_0_0_7_0_0_083_phi_fu_148_p4 = 21'd0;
        end else if ((icmp_ln55_reg_592 == 1'd1)) begin
            ap_phi_mux_p_0_0_7_0_0_083_phi_fu_148_p4 = {{g_stream_dout[167:147]}};
        end else begin
            ap_phi_mux_p_0_0_7_0_0_083_phi_fu_148_p4 = ap_phi_reg_pp0_iter2_p_0_0_7_0_0_083_reg_145;
        end
    end else begin
        ap_phi_mux_p_0_0_7_0_0_083_phi_fu_148_p4 = ap_phi_reg_pp0_iter2_p_0_0_7_0_0_083_reg_145;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten24_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten24_load = indvar_flatten24_fu_100;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_96;
    end
end

always @ (*) begin
    if (((ap_predicate_op60_read_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        g_stream_blk_n = g_stream_empty_n;
    end else begin
        g_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op60_read_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        g_stream_read = 1'b1;
    end else begin
        g_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_281_p2 = (ap_sig_allocacmp_indvar_flatten24_load + 16'd1);

assign add_ln51_fu_293_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign adpt_stream_din = ap_phi_mux_p_0_0_0_0_0_069_phi_fu_212_p4;

assign and_ln50_fu_331_p2 = (xor_ln50_fu_320_p2 & icmp_ln52_fu_325_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op60_read_state3 == 1'b1) & (g_stream_empty_n == 1'b0)) | ((icmp_ln50_reg_582_pp0_iter1_reg == 1'd0) & (1'b0 == adpt_stream_full_n)));
end

always @ (*) begin
    ap_condition_85 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_p_0_0_0_0_0_069_reg_209 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_1_0_0_071_reg_200 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_2_0_0_073_reg_191 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_3_0_0_075_reg_182 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_4_0_0_077_reg_173 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_5_0_0_079_reg_164 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_6_0_0_081_reg_155 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_7_0_0_083_reg_145 = 'bx;

always @ (*) begin
    ap_predicate_op60_read_state3 = ((icmp_ln55_reg_592 == 1'd1) & (icmp_ln50_reg_582_pp0_iter1_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln50_fu_275_p2 = ((ap_sig_allocacmp_indvar_flatten24_load == 16'd38912) ? 1'b1 : 1'b0);

assign icmp_ln50_reg_582_pp0_iter0_reg = icmp_ln50_reg_582;

assign icmp_ln51_fu_287_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd4864) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_325_p2 = ((t_fu_92 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_350_p2 = ((select_ln51_fu_342_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_reg_592_pp0_iter1_reg = icmp_ln55_reg_592;

assign or_ln51_fu_337_p2 = (icmp_ln51_reg_586 | and_ln50_fu_331_p2);

assign select_ln51_1_fu_299_p3 = ((icmp_ln51_fu_287_p2[0:0] == 1'b1) ? 14'd1 : add_ln51_fu_293_p2);

assign select_ln51_fu_342_p3 = ((or_ln51_fu_337_p2[0:0] == 1'b1) ? 4'd0 : t_fu_92);

assign t_1_fu_356_p2 = (select_ln51_fu_342_p3 + 4'd1);

assign trunc_ln55_fu_395_p1 = g_stream_dout[20:0];

assign xor_ln50_fu_320_p2 = (icmp_ln51_reg_586 ^ 1'd1);

endmodule //SILU_EM_QUANT_unpk
