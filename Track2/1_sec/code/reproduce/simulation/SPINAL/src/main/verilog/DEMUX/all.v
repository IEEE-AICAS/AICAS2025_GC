/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DEMUX_DEMUX,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.665250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=56,HLS_SYN_DSP=0,HLS_SYN_FF=2819,HLS_SYN_LUT=1667,HLS_VERSION=2024_2}" *)

module DEMUX (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        gemm_stream_TDATA,
        gemm_stream_TVALID,
        gemm_stream_TREADY,
        qk_stream_TDATA,
        qk_stream_TVALID,
        qk_stream_TREADY,
        v_stream_TDATA,
        v_stream_TVALID,
        v_stream_TREADY,
        ug_stream_TDATA,
        ug_stream_TVALID,
        ug_stream_TREADY,
        od_stream_TDATA,
        od_stream_TVALID,
        od_stream_TREADY,
        cls_stream_TDATA,
        cls_stream_TVALID,
        cls_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [231:0] gemm_stream_TDATA;
input   gemm_stream_TVALID;
output   gemm_stream_TREADY;
output  [159:0] qk_stream_TDATA;
output   qk_stream_TVALID;
input   qk_stream_TREADY;
output  [159:0] v_stream_TDATA;
output   v_stream_TVALID;
input   v_stream_TREADY;
output  [167:0] ug_stream_TDATA;
output   ug_stream_TVALID;
input   ug_stream_TREADY;
output  [207:0] od_stream_TDATA;
output   od_stream_TVALID;
input   od_stream_TREADY;
output  [135:0] cls_stream_TDATA;
output   cls_stream_TVALID;
input   cls_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [63:0] wide_trip_count_fu_117_p1;
reg  signed [63:0] wide_trip_count_reg_165;
reg    ap_block_state1;
wire   [11:0] trunc_ln115_fu_134_p1;
reg   [11:0] trunc_ln115_reg_176;
wire    ap_CS_fsm_state2;
wire   [0:0] run_cls_fu_143_p2;
reg   [0:0] run_cls_reg_181;
wire   [63:0] add_ln115_fu_149_p2;
reg   [63:0] add_ln115_reg_185;
wire    ap_CS_fsm_state5;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_done;
reg    ap_block_state5_on_subcall_done;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_done;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_idle;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_ready;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TREADY;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TREADY;
wire   [159:0] grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TDATA;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TVALID;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_gemm_stream_TREADY;
wire   [159:0] grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TDATA;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TVALID;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_idle;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_ready;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TREADY;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TREADY;
wire   [207:0] grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TDATA;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TVALID;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_gemm_stream_TREADY;
wire   [167:0] grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TDATA;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TVALID;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_done;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_idle;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_ready;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TREADY;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_gemm_stream_TREADY;
wire   [135:0] grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TDATA;
wire    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TVALID;
reg    grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start_reg;
wire   [0:0] icmp_ln115_fu_129_p2;
reg   [159:0] qk_stream_TDATA_reg;
wire    ap_CS_fsm_state3;
reg   [159:0] v_stream_TDATA_reg;
reg    grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [207:0] od_stream_TDATA_reg;
reg   [167:0] ug_stream_TDATA_reg;
reg    grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [135:0] cls_stream_TDATA_reg;
reg   [63:0] l_fu_62;
wire  signed [63:0] sext_ln115_fu_113_p1;
wire    ap_CS_fsm_state8;
wire   [31:0] trunc_ln116_fu_139_p1;
wire    ap_CS_fsm_state9;
wire    regslice_both_qk_stream_U_apdone_blk;
wire    regslice_both_v_stream_U_apdone_blk;
wire    regslice_both_ug_stream_U_apdone_blk;
wire    regslice_both_od_stream_U_apdone_blk;
wire    regslice_both_cls_stream_U_apdone_blk;
reg    ap_block_state9;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    regslice_both_gemm_stream_U_apdone_blk;
wire   [231:0] gemm_stream_TDATA_int_regslice;
wire    gemm_stream_TVALID_int_regslice;
reg    gemm_stream_TREADY_int_regslice;
wire    regslice_both_gemm_stream_U_ack_in;
reg   [159:0] qk_stream_TDATA_int_regslice;
wire    qk_stream_TREADY_int_regslice;
wire    regslice_both_qk_stream_U_vld_out;
reg   [159:0] v_stream_TDATA_int_regslice;
wire    v_stream_TREADY_int_regslice;
wire    regslice_both_v_stream_U_vld_out;
reg   [167:0] ug_stream_TDATA_int_regslice;
wire    ug_stream_TREADY_int_regslice;
wire    regslice_both_ug_stream_U_vld_out;
reg   [207:0] od_stream_TDATA_int_regslice;
wire    od_stream_TREADY_int_regslice;
wire    regslice_both_od_stream_U_vld_out;
reg   [135:0] cls_stream_TDATA_int_regslice;
wire    cls_stream_TREADY_int_regslice;
wire    regslice_both_cls_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 9'd1;
//#0 grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start_reg = 1'b0;
//#0 grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start_reg = 1'b0;
//#0 grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start_reg = 1'b0;
//#0 l_fu_62 = 64'd0;
end

DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5 grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start),
    .ap_done(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_done),
    .ap_idle(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_idle),
    .ap_ready(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_ready),
    .gemm_stream_TVALID(gemm_stream_TVALID_int_regslice),
    .qk_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TREADY),
    .v_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TREADY),
    .qk_stream_TDATA(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TDATA),
    .qk_stream_TVALID(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TVALID),
    .l(trunc_ln115_reg_176),
    .gemm_stream_TDATA(gemm_stream_TDATA_int_regslice),
    .gemm_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_gemm_stream_TREADY),
    .v_stream_TDATA(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TDATA),
    .v_stream_TVALID(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TVALID)
);

DEMUX_DEMUX_Pipeline_VITIS_LOOP_154_8 grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start),
    .ap_done(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_done),
    .ap_idle(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_idle),
    .ap_ready(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_ready),
    .gemm_stream_TVALID(gemm_stream_TVALID_int_regslice),
    .od_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TREADY),
    .ug_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TREADY),
    .od_stream_TDATA(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TDATA),
    .od_stream_TVALID(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TVALID),
    .gemm_stream_TDATA(gemm_stream_TDATA_int_regslice),
    .gemm_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_gemm_stream_TREADY),
    .ug_stream_TDATA(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TDATA),
    .ug_stream_TVALID(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TVALID)
);

DEMUX_DEMUX_Pipeline_VITIS_LOOP_182_12 grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start),
    .ap_done(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_done),
    .ap_idle(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_idle),
    .ap_ready(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_ready),
    .gemm_stream_TVALID(gemm_stream_TVALID_int_regslice),
    .cls_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TREADY),
    .gemm_stream_TDATA(gemm_stream_TDATA_int_regslice),
    .gemm_stream_TREADY(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_gemm_stream_TREADY),
    .cls_stream_TDATA(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TDATA),
    .cls_stream_TVALID(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TVALID)
);

DEMUX_regslice_both #(
    .DataWidth( 232 ))
regslice_both_gemm_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(gemm_stream_TDATA),
    .vld_in(gemm_stream_TVALID),
    .ack_in(regslice_both_gemm_stream_U_ack_in),
    .data_out(gemm_stream_TDATA_int_regslice),
    .vld_out(gemm_stream_TVALID_int_regslice),
    .ack_out(gemm_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_gemm_stream_U_apdone_blk)
);

DEMUX_regslice_both #(
    .DataWidth( 160 ))
regslice_both_qk_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qk_stream_TDATA_int_regslice),
    .vld_in(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TVALID),
    .ack_in(qk_stream_TREADY_int_regslice),
    .data_out(qk_stream_TDATA),
    .vld_out(regslice_both_qk_stream_U_vld_out),
    .ack_out(qk_stream_TREADY),
    .apdone_blk(regslice_both_qk_stream_U_apdone_blk)
);

DEMUX_regslice_both #(
    .DataWidth( 160 ))
regslice_both_v_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(v_stream_TDATA_int_regslice),
    .vld_in(grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TVALID),
    .ack_in(v_stream_TREADY_int_regslice),
    .data_out(v_stream_TDATA),
    .vld_out(regslice_both_v_stream_U_vld_out),
    .ack_out(v_stream_TREADY),
    .apdone_blk(regslice_both_v_stream_U_apdone_blk)
);

DEMUX_regslice_both #(
    .DataWidth( 168 ))
regslice_both_ug_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ug_stream_TDATA_int_regslice),
    .vld_in(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TVALID),
    .ack_in(ug_stream_TREADY_int_regslice),
    .data_out(ug_stream_TDATA),
    .vld_out(regslice_both_ug_stream_U_vld_out),
    .ack_out(ug_stream_TREADY),
    .apdone_blk(regslice_both_ug_stream_U_apdone_blk)
);

DEMUX_regslice_both #(
    .DataWidth( 208 ))
regslice_both_od_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(od_stream_TDATA_int_regslice),
    .vld_in(grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TVALID),
    .ack_in(od_stream_TREADY_int_regslice),
    .data_out(od_stream_TDATA),
    .vld_out(regslice_both_od_stream_U_vld_out),
    .ack_out(od_stream_TREADY),
    .apdone_blk(regslice_both_od_stream_U_apdone_blk)
);

DEMUX_regslice_both #(
    .DataWidth( 136 ))
regslice_both_cls_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(cls_stream_TDATA_int_regslice),
    .vld_in(grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TVALID),
    .ack_in(cls_stream_TREADY_int_regslice),
    .data_out(cls_stream_TDATA),
    .vld_out(regslice_both_cls_stream_U_vld_out),
    .ack_out(cls_stream_TREADY),
    .apdone_blk(regslice_both_cls_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if (((run_cls_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln115_fu_129_p2 == 1'd1))) begin
            grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_ready == 1'b1)) begin
            grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_ready == 1'b1)) begin
            grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start_reg <= 1'b1;
        end else if ((grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_ready == 1'b1)) begin
            grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_62 <= sext_ln115_fu_113_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        l_fu_62 <= add_ln115_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln115_reg_185 <= add_ln115_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TVALID == 1'b1))) begin
        cls_stream_TDATA_reg <= grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((run_cls_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TVALID == 1'b1))) begin
        od_stream_TDATA_reg <= grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        qk_stream_TDATA_reg <= grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        run_cls_reg_181 <= run_cls_fu_143_p2;
        trunc_ln115_reg_176 <= trunc_ln115_fu_134_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((run_cls_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TVALID == 1'b1))) begin
        ug_stream_TDATA_reg <= grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TVALID == 1'b1))) begin
        v_stream_TDATA_reg <= grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        wide_trip_count_reg_165 <= wide_trip_count_fu_117_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state9)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TVALID == 1'b1))) begin
        cls_stream_TDATA_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TDATA;
    end else begin
        cls_stream_TDATA_int_regslice = cls_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        gemm_stream_TREADY_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_gemm_stream_TREADY;
    end else if (((run_cls_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        gemm_stream_TREADY_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_gemm_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gemm_stream_TREADY_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_gemm_stream_TREADY;
    end else begin
        gemm_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((run_cls_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TVALID == 1'b1))) begin
        od_stream_TDATA_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TDATA;
    end else begin
        od_stream_TDATA_int_regslice = od_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        qk_stream_TDATA_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TDATA;
    end else begin
        qk_stream_TDATA_int_regslice = qk_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((run_cls_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TVALID == 1'b1))) begin
        ug_stream_TDATA_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TDATA;
    end else begin
        ug_stream_TDATA_int_regslice = ug_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TVALID == 1'b1))) begin
        v_stream_TDATA_int_regslice = grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TDATA;
    end else begin
        v_stream_TDATA_int_regslice = v_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((run_cls_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln115_fu_129_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((run_cls_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln115_fu_129_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_149_p2 = (l_fu_62 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_done == 1'b0) & (run_cls_reg_181 == 1'd0));
end

always @ (*) begin
    ap_block_state9 = ((regslice_both_cls_stream_U_apdone_blk == 1'b1) | (regslice_both_od_stream_U_apdone_blk == 1'b1) | (regslice_both_ug_stream_U_apdone_blk == 1'b1) | (regslice_both_v_stream_U_apdone_blk == 1'b1) | (regslice_both_qk_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cls_stream_TVALID = regslice_both_cls_stream_U_vld_out;

assign gemm_stream_TREADY = regslice_both_gemm_stream_U_ack_in;

assign grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start = grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_ap_start_reg;

assign grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_qk_stream_TREADY = (qk_stream_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5_fu_78_v_stream_TREADY = (v_stream_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start = grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ap_start_reg;

assign grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_od_stream_TREADY = (od_stream_TREADY_int_regslice & ap_CS_fsm_state5);

assign grp_DEMUX_Pipeline_VITIS_LOOP_154_8_fu_95_ug_stream_TREADY = (ug_stream_TREADY_int_regslice & ap_CS_fsm_state5);

assign grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start = grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_ap_start_reg;

assign grp_DEMUX_Pipeline_VITIS_LOOP_182_12_fu_105_cls_stream_TREADY = (cls_stream_TREADY_int_regslice & ap_CS_fsm_state7);

assign icmp_ln115_fu_129_p2 = (($signed(l_fu_62) < $signed(wide_trip_count_reg_165)) ? 1'b1 : 1'b0);

assign od_stream_TVALID = regslice_both_od_stream_U_vld_out;

assign qk_stream_TVALID = regslice_both_qk_stream_U_vld_out;

assign run_cls_fu_143_p2 = ((trunc_ln116_fu_139_p1 == 32'd24) ? 1'b1 : 1'b0);

assign sext_ln115_fu_113_p1 = $signed(l_begin);

assign trunc_ln115_fu_134_p1 = l_fu_62[11:0];

assign trunc_ln116_fu_139_p1 = l_fu_62[31:0];

assign ug_stream_TVALID = regslice_both_ug_stream_U_vld_out;

assign v_stream_TVALID = regslice_both_v_stream_U_vld_out;

assign wide_trip_count_fu_117_p1 = $signed(l_close);

endmodule //DEMUX
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module DEMUX_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not DEMUX module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not DEMUX module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module DEMUX_mul_4ns_6ns_9_1_1(din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;
























assign tmp_product = $signed({1'b0, din0}) * $signed({1'b0, din1});











assign dout = tmp_product;





















endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module DEMUX_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns / 1ps

module DEMUX_sparsemux_9_3_15_1_1 (din0,din1,din2,din3,def,sel,dout);

parameter din0_WIDTH = 1;

parameter din1_WIDTH = 1;

parameter din2_WIDTH = 1;

parameter din3_WIDTH = 1;

parameter def_WIDTH = 1;
parameter sel_WIDTH = 1;
parameter dout_WIDTH = 1;

parameter [sel_WIDTH-1:0] CASE0 = 1;

parameter [sel_WIDTH-1:0] CASE1 = 1;

parameter [sel_WIDTH-1:0] CASE2 = 1;

parameter [sel_WIDTH-1:0] CASE3 = 1;

parameter ID = 1;
parameter NUM_STAGE = 1;



input [din0_WIDTH-1:0] din0;

input [din1_WIDTH-1:0] din1;

input [din2_WIDTH-1:0] din2;

input [din3_WIDTH-1:0] din3;

input [def_WIDTH-1:0] def;
input [sel_WIDTH-1:0] sel;

output [dout_WIDTH-1:0] dout;



reg [dout_WIDTH-1:0] dout_tmp;


always @ (*) begin
(* parallel_case *) case (sel)
    
    CASE0 : dout_tmp = din0;
    
    CASE1 : dout_tmp = din1;
    
    CASE2 : dout_tmp = din2;
    
    CASE3 : dout_tmp = din3;
    
    default : dout_tmp = def;
endcase
end


assign dout = dout_tmp;



endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns / 1ps

module DEMUX_sparsemux_9_3_20_1_1 (din0,din1,din2,din3,def,sel,dout);

parameter din0_WIDTH = 1;

parameter din1_WIDTH = 1;

parameter din2_WIDTH = 1;

parameter din3_WIDTH = 1;

parameter def_WIDTH = 1;
parameter sel_WIDTH = 1;
parameter dout_WIDTH = 1;

parameter [sel_WIDTH-1:0] CASE0 = 1;

parameter [sel_WIDTH-1:0] CASE1 = 1;

parameter [sel_WIDTH-1:0] CASE2 = 1;

parameter [sel_WIDTH-1:0] CASE3 = 1;

parameter ID = 1;
parameter NUM_STAGE = 1;



input [din0_WIDTH-1:0] din0;

input [din1_WIDTH-1:0] din1;

input [din2_WIDTH-1:0] din2;

input [din3_WIDTH-1:0] din3;

input [def_WIDTH-1:0] def;
input [sel_WIDTH-1:0] sel;

output [dout_WIDTH-1:0] dout;



reg [dout_WIDTH-1:0] dout_tmp;


always @ (*) begin
(* parallel_case *) case (sel)
    
    CASE0 : dout_tmp = din0;
    
    CASE1 : dout_tmp = din1;
    
    CASE2 : dout_tmp = din2;
    
    CASE3 : dout_tmp = din3;
    
    default : dout_tmp = def;
endcase
end


assign dout = dout_tmp;



endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gemm_stream_TVALID,
        qk_stream_TREADY,
        v_stream_TREADY,
        qk_stream_TDATA,
        qk_stream_TVALID,
        l,
        gemm_stream_TDATA,
        gemm_stream_TREADY,
        v_stream_TDATA,
        v_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   gemm_stream_TVALID;
input   qk_stream_TREADY;
input   v_stream_TREADY;
output  [159:0] qk_stream_TDATA;
output   qk_stream_TVALID;
input  [11:0] l;
input  [231:0] gemm_stream_TDATA;
output   gemm_stream_TREADY;
output  [159:0] v_stream_TDATA;
output   v_stream_TVALID;

reg ap_idle;
reg qk_stream_TVALID;
reg gemm_stream_TREADY;
reg v_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
wire   [0:0] icmp_ln120_fu_374_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
reg   [0:0] icmp_ln120_reg_1487;
reg   [0:0] icmp_ln120_reg_1487_pp0_iter4_reg;
reg   [0:0] cmp48_reg_1605;
reg    ap_predicate_op190_write_state6;
reg    ap_predicate_op192_write_state6;
reg    ap_block_state6_pp0_stage0_iter5;
wire    ap_CS_iter5_fsm_state6;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [11:0] BQ_66_address0;
wire   [237:0] BQ_66_q0;
wire   [8:0] BK_RAW_65_address0;
wire   [238:0] BK_RAW_65_q0;
wire   [8:0] BK_RAW_65_address1;
wire   [238:0] BK_RAW_65_q1;
wire   [8:0] BV_RAW_64_address0;
wire   [238:0] BV_RAW_64_q0;
wire   [8:0] BV_RAW_64_address1;
wire   [238:0] BV_RAW_64_q1;
reg    qk_stream_TDATA_blk_n;
reg    gemm_stream_TDATA_blk_n;
reg    v_stream_TDATA_blk_n;
wire   [0:0] icmp_ln120_reg_1487_pp0_iter0_reg;
reg   [0:0] icmp_ln120_reg_1487_pp0_iter1_reg;
reg   [0:0] icmp_ln120_reg_1487_pp0_iter2_reg;
reg   [0:0] icmp_ln120_reg_1487_pp0_iter3_reg;
wire   [0:0] icmp_ln121_fu_386_p2;
reg   [0:0] icmp_ln121_reg_1491;
reg   [0:0] icmp_ln121_reg_1491_pp0_iter1_reg;
wire   [0:0] xor_ln120_fu_392_p2;
reg   [0:0] xor_ln120_reg_1500;
reg   [231:0] gemm_stream_read_reg_1506;
reg   [231:0] gemm_stream_read_reg_1506_pp0_iter1_reg;
reg   [231:0] gemm_stream_read_reg_1506_pp0_iter2_reg;
reg   [231:0] gemm_stream_read_reg_1506_pp0_iter3_reg;
reg   [231:0] gemm_stream_read_reg_1506_pp0_iter4_reg;
wire   [0:0] and_ln120_1_fu_449_p2;
reg   [0:0] and_ln120_1_reg_1526;
wire   [3:0] select_ln120_1_fu_454_p3;
reg   [3:0] select_ln120_1_reg_1531;
wire   [0:0] empty_fu_461_p2;
reg   [0:0] empty_reg_1537;
wire   [0:0] icmp_ln123_mid212_fu_482_p2;
reg   [0:0] icmp_ln123_mid212_reg_1542;
wire   [1:0] select_ln121_fu_571_p3;
reg   [1:0] select_ln121_reg_1547;
reg   [1:0] select_ln121_reg_1547_pp0_iter3_reg;
wire   [3:0] select_ln122_fu_584_p3;
reg   [3:0] select_ln122_reg_1554;
reg   [0:0] tmp_reg_1559;
wire   [2:0] empty_18_fu_623_p1;
reg   [2:0] empty_18_reg_1565;
wire   [6:0] empty_19_fu_627_p2;
reg   [6:0] empty_19_reg_1570;
wire   [0:0] cmp22_fu_716_p2;
reg   [0:0] cmp22_reg_1600;
wire   [0:0] cmp48_fu_726_p2;
wire   [0:0] empty_17_fu_731_p2;
reg   [0:0] empty_17_reg_1609;
wire   [19:0] trunc_ln137_fu_737_p1;
reg   [19:0] trunc_ln137_reg_1621;
reg   [19:0] bias_1_cast_reg_1626;
reg   [19:0] bias_2_cast_reg_1631;
reg   [19:0] bias_3_cast_reg_1636;
reg   [19:0] bias_4_cast_reg_1641;
reg   [19:0] bias_5_cast_reg_1646;
reg   [19:0] bias_6_cast_reg_1651;
reg   [13:0] tmp_8_reg_1656;
wire   [19:0] trunc_ln137_1_fu_811_p1;
reg   [19:0] trunc_ln137_1_reg_1661;
reg   [19:0] tmp_7_cast_reg_1666;
reg   [19:0] tmp_8_cast_reg_1671;
reg   [19:0] tmp_9_cast_reg_1676;
reg   [19:0] tmp_10_cast_reg_1681;
reg   [19:0] tmp_11_cast_reg_1686;
reg   [19:0] tmp_12_cast_reg_1691;
reg   [14:0] tmp_9_reg_1696;
wire   [19:0] trunc_ln137_2_fu_885_p1;
reg   [19:0] trunc_ln137_2_reg_1701;
reg   [19:0] tmp_15_cast_reg_1706;
reg   [19:0] tmp_16_cast_reg_1711;
reg   [19:0] tmp_17_cast_reg_1716;
reg   [19:0] tmp_18_cast_reg_1721;
reg   [19:0] tmp_19_cast_reg_1726;
reg   [19:0] tmp_20_cast_reg_1731;
reg   [14:0] tmp_s_reg_1736;
wire   [0:0] sel_tmp4_fu_965_p2;
reg   [0:0] sel_tmp4_reg_1741;
wire   [0:0] sel_tmp8_fu_977_p2;
reg   [0:0] sel_tmp8_reg_1746;
wire   [63:0] p_cast5_fu_678_p1;
wire   [63:0] tmp_14_cast_fu_696_p1;
wire   [63:0] tmp_16_cast6_fu_710_p1;
reg   [3:0] t_fu_216;
wire   [3:0] t_1_fu_508_p3;
wire    ap_loop_init;
reg   [3:0] hct_fu_220;
reg   [7:0] indvar_flatten_fu_224;
wire   [7:0] select_ln122_1_fu_522_p3;
reg   [1:0] qkv_fu_228;
reg   [8:0] indvar_flatten13_fu_232;
wire   [8:0] select_ln121_1_fu_404_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten13_load;
reg   [3:0] h_fu_236;
reg   [11:0] indvar_flatten37_fu_240;
wire   [11:0] add_ln120_1_fu_380_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten37_load;
wire   [159:0] or_ln147_s_fu_1408_p9;
reg    BQ_66_ce0_local;
reg    BK_RAW_65_ce1_local;
reg    BK_RAW_65_ce0_local;
reg    BV_RAW_64_ce1_local;
reg    BV_RAW_64_ce0_local;
wire   [8:0] add_ln121_1_fu_398_p2;
wire   [0:0] icmp_ln122_fu_443_p2;
wire   [3:0] add_ln120_fu_431_p2;
wire   [0:0] exitcond_flatten_not_fu_466_p2;
wire   [0:0] not_exitcond_flatten_mid236_fu_472_p2;
wire   [0:0] and_ln120_fu_477_p2;
wire   [0:0] icmp_ln123_fu_437_p2;
wire   [0:0] or_ln123_fu_497_p2;
wire   [0:0] or_ln123_1_fu_503_p2;
wire   [3:0] add_ln123_fu_491_p2;
wire   [7:0] add_ln122_1_fu_516_p2;
wire   [1:0] select_ln120_fu_551_p3;
wire   [1:0] qkv_2_fu_558_p2;
wire   [3:0] hct_mid26_fu_564_p3;
wire   [3:0] add_ln122_fu_578_p2;
wire   [3:0] mul_fu_594_p0;
wire   [5:0] mul_fu_594_p1;
wire   [8:0] mul_fu_594_p2;
wire   [11:0] mul_cast_fu_600_p1;
wire   [6:0] zext_ln122_fu_619_p1;
wire   [6:0] p_udiv_fu_604_p3;
wire   [11:0] empty_21_fu_656_p2;
wire   [11:0] empty_22_fu_661_p2;
wire   [11:0] empty_23_fu_666_p2;
wire   [11:0] p_cast_fu_650_p1;
wire   [11:0] empty_24_fu_672_p2;
wire   [3:0] tmp_6_fu_643_p3;
wire   [4:0] empty_20_fu_653_p1;
wire   [3:0] empty_25_fu_683_p2;
wire   [8:0] tmp_7_fu_688_p3;
wire   [8:0] tmp_10_fu_702_p4;
wire   [0:0] cmp23_fu_721_p2;
wire   [0:0] sel_tmp_fu_959_p2;
wire   [0:0] sel_tmp7_fu_971_p2;
wire   [19:0] trunc_ln3_fu_983_p4;
wire   [19:0] trunc_ln131_fu_992_p1;
wire   [19:0] trunc_ln131_2_fu_1002_p4;
wire   [19:0] tmp_1_fu_1011_p4;
wire   [19:0] trunc_ln131_3_fu_1027_p4;
wire   [19:0] tmp_2_fu_1036_p4;
wire   [19:0] trunc_ln131_4_fu_1052_p4;
wire   [19:0] tmp_3_fu_1061_p4;
wire   [19:0] trunc_ln131_5_fu_1077_p4;
wire   [19:0] tmp_4_fu_1086_p4;
wire   [19:0] trunc_ln131_6_fu_1102_p4;
wire   [19:0] tmp_5_fu_1111_p4;
wire   [19:0] tmp_11_fu_1127_p4;
wire   [19:0] tmp_12_fu_1136_p4;
wire   [19:0] tmp_13_fu_1152_p4;
wire   [19:0] tmp_14_fu_1161_p4;
wire   [19:0] trunc_ln140_6_fu_1187_p9;
wire   [2:0] sel_tmp9_fu_1180_p4;
wire   [19:0] trunc_ln140_4_fu_1208_p9;
wire   [19:0] trunc_ln140_2_fu_1229_p9;
wire   [19:0] trunc_ln_fu_1250_p9;
wire   [19:0] trunc_ln140_1_fu_1271_p9;
wire   [19:0] trunc_ln140_3_fu_1292_p9;
wire   [19:0] trunc_ln140_5_fu_1313_p9;
wire  signed [14:0] bias_fu_1334_p2;
wire   [14:0] bias_fu_1334_p9;
wire   [14:0] bias_fu_1334_p11;
wire   [19:0] trunc_ln_fu_1250_p11;
wire   [19:0] select_ln131_fu_995_p3;
wire   [19:0] trunc_ln140_1_fu_1271_p11;
wire   [19:0] select_ln131_1_fu_1020_p3;
wire   [19:0] trunc_ln140_2_fu_1229_p11;
wire   [19:0] select_ln131_2_fu_1045_p3;
wire   [19:0] trunc_ln140_3_fu_1292_p11;
wire   [19:0] select_ln131_3_fu_1070_p3;
wire   [19:0] trunc_ln140_4_fu_1208_p11;
wire   [19:0] select_ln131_4_fu_1095_p3;
wire   [19:0] trunc_ln140_5_fu_1313_p11;
wire   [19:0] select_ln131_5_fu_1120_p3;
wire   [19:0] trunc_ln140_6_fu_1187_p11;
wire   [19:0] select_ln131_6_fu_1145_p3;
wire  signed [19:0] sext_ln140_fu_1356_p1;
wire   [19:0] select_ln131_7_fu_1170_p3;
wire   [19:0] add_ln140_7_fu_1402_p2;
wire   [19:0] add_ln140_6_fu_1396_p2;
wire   [19:0] add_ln140_5_fu_1390_p2;
wire   [19:0] add_ln140_4_fu_1384_p2;
wire   [19:0] add_ln140_3_fu_1378_p2;
wire   [19:0] add_ln140_2_fu_1372_p2;
wire   [19:0] add_ln140_1_fu_1366_p2;
wire   [19:0] add_ln140_fu_1360_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
reg    ap_ST_iter5_fsm_state6_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [8:0] mul_fu_594_p00;
reg    ap_condition_124;
wire  signed [2:0] trunc_ln140_6_fu_1187_p1;
wire   [2:0] trunc_ln140_6_fu_1187_p3;
wire   [2:0] trunc_ln140_6_fu_1187_p5;
wire   [2:0] trunc_ln140_6_fu_1187_p7;
wire  signed [2:0] trunc_ln140_4_fu_1208_p1;
wire   [2:0] trunc_ln140_4_fu_1208_p3;
wire   [2:0] trunc_ln140_4_fu_1208_p5;
wire   [2:0] trunc_ln140_4_fu_1208_p7;
wire  signed [2:0] trunc_ln140_2_fu_1229_p1;
wire   [2:0] trunc_ln140_2_fu_1229_p3;
wire   [2:0] trunc_ln140_2_fu_1229_p5;
wire   [2:0] trunc_ln140_2_fu_1229_p7;
wire  signed [2:0] trunc_ln_fu_1250_p1;
wire   [2:0] trunc_ln_fu_1250_p3;
wire   [2:0] trunc_ln_fu_1250_p5;
wire   [2:0] trunc_ln_fu_1250_p7;
wire  signed [2:0] trunc_ln140_1_fu_1271_p1;
wire   [2:0] trunc_ln140_1_fu_1271_p3;
wire   [2:0] trunc_ln140_1_fu_1271_p5;
wire   [2:0] trunc_ln140_1_fu_1271_p7;
wire  signed [2:0] trunc_ln140_3_fu_1292_p1;
wire   [2:0] trunc_ln140_3_fu_1292_p3;
wire   [2:0] trunc_ln140_3_fu_1292_p5;
wire   [2:0] trunc_ln140_3_fu_1292_p7;
wire  signed [2:0] trunc_ln140_5_fu_1313_p1;
wire   [2:0] trunc_ln140_5_fu_1313_p3;
wire   [2:0] trunc_ln140_5_fu_1313_p5;
wire   [2:0] trunc_ln140_5_fu_1313_p7;
wire  signed [2:0] bias_fu_1334_p1;
wire   [2:0] bias_fu_1334_p3;
wire   [2:0] bias_fu_1334_p5;
wire   [2:0] bias_fu_1334_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 t_fu_216 = 4'd0;
//#0 hct_fu_220 = 4'd0;
//#0 indvar_flatten_fu_224 = 8'd0;
//#0 qkv_fu_228 = 2'd0;
//#0 indvar_flatten13_fu_232 = 9'd0;
//#0 h_fu_236 = 4'd0;
//#0 indvar_flatten37_fu_240 = 12'd0;
//#0 ap_done_reg = 1'b0;
end

DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12bkb #(
    .DataWidth( 238 ),
    .AddressRange( 2688 ),
    .AddressWidth( 12 ))
BQ_66_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BQ_66_address0),
    .ce0(BQ_66_ce0_local),
    .q0(BQ_66_q0)
);

DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12cud #(
    .DataWidth( 239 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
BK_RAW_65_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BK_RAW_65_address0),
    .ce0(BK_RAW_65_ce0_local),
    .q0(BK_RAW_65_q0),
    .address1(BK_RAW_65_address1),
    .ce1(BK_RAW_65_ce1_local),
    .q1(BK_RAW_65_q1)
);

DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12dEe #(
    .DataWidth( 239 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
BV_RAW_64_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BV_RAW_64_address0),
    .ce0(BV_RAW_64_ce0_local),
    .q0(BV_RAW_64_q0),
    .address1(BV_RAW_64_address1),
    .ce1(BV_RAW_64_ce1_local),
    .q1(BV_RAW_64_q1)
);

DEMUX_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U1(
    .din0(mul_fu_594_p0),
    .din1(mul_fu_594_p1),
    .dout(mul_fu_594_p2)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U2(
    .din0(bias_6_cast_reg_1651),
    .din1(tmp_12_cast_reg_1691),
    .din2(tmp_20_cast_reg_1731),
    .din3(20'd0),
    .def(trunc_ln140_6_fu_1187_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln140_6_fu_1187_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U3(
    .din0(bias_4_cast_reg_1641),
    .din1(tmp_10_cast_reg_1681),
    .din2(tmp_18_cast_reg_1721),
    .din3(20'd0),
    .def(trunc_ln140_4_fu_1208_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln140_4_fu_1208_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U4(
    .din0(bias_2_cast_reg_1631),
    .din1(tmp_8_cast_reg_1671),
    .din2(tmp_16_cast_reg_1711),
    .din3(20'd0),
    .def(trunc_ln140_2_fu_1229_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln140_2_fu_1229_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U5(
    .din0(trunc_ln137_reg_1621),
    .din1(trunc_ln137_1_reg_1661),
    .din2(trunc_ln137_2_reg_1701),
    .din3(20'd0),
    .def(trunc_ln_fu_1250_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln_fu_1250_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U6(
    .din0(bias_1_cast_reg_1626),
    .din1(tmp_7_cast_reg_1666),
    .din2(tmp_15_cast_reg_1706),
    .din3(20'd0),
    .def(trunc_ln140_1_fu_1271_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln140_1_fu_1271_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U7(
    .din0(bias_3_cast_reg_1636),
    .din1(tmp_9_cast_reg_1676),
    .din2(tmp_17_cast_reg_1716),
    .din3(20'd0),
    .def(trunc_ln140_3_fu_1292_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln140_3_fu_1292_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 20 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 20 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 20 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 20 ),
    .def_WIDTH( 20 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 20 ))
sparsemux_9_3_20_1_1_U8(
    .din0(bias_5_cast_reg_1646),
    .din1(tmp_11_cast_reg_1686),
    .din2(tmp_19_cast_reg_1726),
    .din3(20'd0),
    .def(trunc_ln140_5_fu_1313_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(trunc_ln140_5_fu_1313_p11)
);

(* dissolve_hierarchy = "yes" *) DEMUX_sparsemux_9_3_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 15 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 15 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 15 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 15 ),
    .def_WIDTH( 15 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 15 ))
sparsemux_9_3_15_1_1_U9(
    .din0(bias_fu_1334_p2),
    .din1(tmp_9_reg_1696),
    .din2(tmp_s_reg_1736),
    .din3(15'd0),
    .def(bias_fu_1334_p9),
    .sel(sel_tmp9_fu_1180_p4),
    .dout(bias_fu_1334_p11)
);

DEMUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter5_fsm_state6) & (1'b0 == ap_block_state6_pp0_stage0_iter5) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (1'b0 == ap_block_state6_pp0_stage0_iter5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        h_fu_236 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln120_reg_1487_pp0_iter0_reg == 1'd0))) begin
        h_fu_236 <= select_ln120_1_fu_454_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        hct_fu_220 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln120_reg_1487_pp0_iter1_reg == 1'd0))) begin
        hct_fu_220 <= select_ln122_fu_584_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln120_fu_374_p2 == 1'd0)) begin
            indvar_flatten13_fu_232 <= select_ln121_1_fu_404_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_232 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln120_fu_374_p2 == 1'd0)) begin
            indvar_flatten37_fu_240 <= add_ln120_1_fu_380_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten37_fu_240 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_224 <= 8'd0;
    end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln120_reg_1487_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_224 <= select_ln122_1_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        qkv_fu_228 <= 2'd0;
    end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln120_reg_1487_pp0_iter1_reg == 1'd0))) begin
        qkv_fu_228 <= select_ln121_fu_571_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_216 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln120_reg_1487_pp0_iter0_reg == 1'd0))) begin
        t_fu_216 <= t_1_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        and_ln120_1_reg_1526 <= and_ln120_1_fu_449_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_1537 <= empty_fu_461_p2;
        gemm_stream_read_reg_1506_pp0_iter1_reg <= gemm_stream_read_reg_1506;
        icmp_ln120_reg_1487_pp0_iter1_reg <= icmp_ln120_reg_1487;
        icmp_ln121_reg_1491_pp0_iter1_reg <= icmp_ln121_reg_1491;
        icmp_ln123_mid212_reg_1542 <= icmp_ln123_mid212_fu_482_p2;
        select_ln120_1_reg_1531 <= select_ln120_1_fu_454_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        gemm_stream_read_reg_1506 <= gemm_stream_TDATA;
        icmp_ln120_reg_1487 <= icmp_ln120_fu_374_p2;
        icmp_ln121_reg_1491 <= icmp_ln121_fu_386_p2;
        xor_ln120_reg_1500 <= xor_ln120_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        empty_18_reg_1565 <= empty_18_fu_623_p1;
        empty_19_reg_1570 <= empty_19_fu_627_p2;
        gemm_stream_read_reg_1506_pp0_iter2_reg <= gemm_stream_read_reg_1506_pp0_iter1_reg;
        icmp_ln120_reg_1487_pp0_iter2_reg <= icmp_ln120_reg_1487_pp0_iter1_reg;
        select_ln121_reg_1547 <= select_ln121_fu_571_p3;
        select_ln122_reg_1554 <= select_ln122_fu_584_p3;
        tmp_reg_1559 <= mul_cast_fu_600_p1[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        gemm_stream_read_reg_1506_pp0_iter3_reg <= gemm_stream_read_reg_1506_pp0_iter2_reg;
        icmp_ln120_reg_1487_pp0_iter3_reg <= icmp_ln120_reg_1487_pp0_iter2_reg;
        select_ln121_reg_1547_pp0_iter3_reg <= select_ln121_reg_1547;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        bias_1_cast_reg_1626 <= {{BQ_66_q0[51:32]}};
        bias_2_cast_reg_1631 <= {{BQ_66_q0[83:64]}};
        bias_3_cast_reg_1636 <= {{BQ_66_q0[115:96]}};
        bias_4_cast_reg_1641 <= {{BQ_66_q0[147:128]}};
        bias_5_cast_reg_1646 <= {{BQ_66_q0[179:160]}};
        bias_6_cast_reg_1651 <= {{BQ_66_q0[211:192]}};
        cmp22_reg_1600 <= cmp22_fu_716_p2;
        cmp48_reg_1605 <= cmp48_fu_726_p2;
        empty_17_reg_1609 <= empty_17_fu_731_p2;
        gemm_stream_read_reg_1506_pp0_iter4_reg <= gemm_stream_read_reg_1506_pp0_iter3_reg;
        icmp_ln120_reg_1487_pp0_iter4_reg <= icmp_ln120_reg_1487_pp0_iter3_reg;
        sel_tmp4_reg_1741 <= sel_tmp4_fu_965_p2;
        sel_tmp8_reg_1746 <= sel_tmp8_fu_977_p2;
        tmp_10_cast_reg_1681 <= {{BK_RAW_65_q0[147:128]}};
        tmp_11_cast_reg_1686 <= {{BK_RAW_65_q0[179:160]}};
        tmp_12_cast_reg_1691 <= {{BK_RAW_65_q0[211:192]}};
        tmp_15_cast_reg_1706 <= {{BV_RAW_64_q0[51:32]}};
        tmp_16_cast_reg_1711 <= {{BV_RAW_64_q0[83:64]}};
        tmp_17_cast_reg_1716 <= {{BV_RAW_64_q0[115:96]}};
        tmp_18_cast_reg_1721 <= {{BV_RAW_64_q0[147:128]}};
        tmp_19_cast_reg_1726 <= {{BV_RAW_64_q0[179:160]}};
        tmp_20_cast_reg_1731 <= {{BV_RAW_64_q0[211:192]}};
        tmp_7_cast_reg_1666 <= {{BK_RAW_65_q0[51:32]}};
        tmp_8_cast_reg_1671 <= {{BK_RAW_65_q0[83:64]}};
        tmp_8_reg_1656 <= {{BQ_66_q0[237:224]}};
        tmp_9_cast_reg_1676 <= {{BK_RAW_65_q0[115:96]}};
        tmp_9_reg_1696 <= {{BK_RAW_65_q0[238:224]}};
        tmp_s_reg_1736 <= {{BV_RAW_64_q0[238:224]}};
        trunc_ln137_1_reg_1661 <= trunc_ln137_1_fu_811_p1;
        trunc_ln137_2_reg_1701 <= trunc_ln137_2_fu_885_p1;
        trunc_ln137_reg_1621 <= trunc_ln137_fu_737_p1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        BK_RAW_65_ce0_local = 1'b1;
    end else begin
        BK_RAW_65_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        BK_RAW_65_ce1_local = 1'b1;
    end else begin
        BK_RAW_65_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        BQ_66_ce0_local = 1'b1;
    end else begin
        BQ_66_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        BV_RAW_64_ce0_local = 1'b1;
    end else begin
        BV_RAW_64_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        BV_RAW_64_ce1_local = 1'b1;
    end else begin
        BV_RAW_64_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_pp0_stage0_iter5)) begin
        ap_ST_iter5_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_iter5_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln120_fu_374_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (1'b0 == ap_block_state6_pp0_stage0_iter5) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_232;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten37_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten37_load = indvar_flatten37_fu_240;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln120_fu_374_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
        gemm_stream_TDATA_blk_n = gemm_stream_TVALID;
    end else begin
        gemm_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln120_fu_374_p2 == 1'd0))) begin
        gemm_stream_TREADY = 1'b1;
    end else begin
        gemm_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (ap_predicate_op190_write_state6 == 1'b1))) begin
        qk_stream_TDATA_blk_n = qk_stream_TREADY;
    end else begin
        qk_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (1'b0 == ap_block_state6_pp0_stage0_iter5) & (ap_predicate_op190_write_state6 == 1'b1))) begin
        qk_stream_TVALID = 1'b1;
    end else begin
        qk_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (ap_predicate_op192_write_state6 == 1'b1))) begin
        v_stream_TDATA_blk_n = v_stream_TREADY;
    end else begin
        v_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (1'b0 == ap_block_state6_pp0_stage0_iter5) & (ap_predicate_op192_write_state6 == 1'b1))) begin
        v_stream_TVALID = 1'b1;
    end else begin
        v_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if (((1'b0 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state6_pp0_stage0_iter5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state6_pp0_stage0_iter5)) | ((icmp_ln120_reg_1487_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_iter5_fsm_state6) & (1'b0 == ap_block_state6_pp0_stage0_iter5)))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

assign BK_RAW_65_address0 = tmp_16_cast6_fu_710_p1;

assign BK_RAW_65_address1 = tmp_14_cast_fu_696_p1;

assign BQ_66_address0 = p_cast5_fu_678_p1;

assign BV_RAW_64_address0 = tmp_16_cast6_fu_710_p1;

assign BV_RAW_64_address1 = tmp_14_cast_fu_696_p1;

assign add_ln120_1_fu_380_p2 = (ap_sig_allocacmp_indvar_flatten37_load + 12'd1);

assign add_ln120_fu_431_p2 = (h_fu_236 + 4'd1);

assign add_ln121_1_fu_398_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 9'd1);

assign add_ln122_1_fu_516_p2 = (indvar_flatten_fu_224 + 8'd1);

assign add_ln122_fu_578_p2 = (hct_mid26_fu_564_p3 + 4'd1);

assign add_ln123_fu_491_p2 = (t_fu_216 + 4'd1);

assign add_ln140_1_fu_1366_p2 = (trunc_ln140_1_fu_1271_p11 + select_ln131_1_fu_1020_p3);

assign add_ln140_2_fu_1372_p2 = (trunc_ln140_2_fu_1229_p11 + select_ln131_2_fu_1045_p3);

assign add_ln140_3_fu_1378_p2 = (trunc_ln140_3_fu_1292_p11 + select_ln131_3_fu_1070_p3);

assign add_ln140_4_fu_1384_p2 = (trunc_ln140_4_fu_1208_p11 + select_ln131_4_fu_1095_p3);

assign add_ln140_5_fu_1390_p2 = (trunc_ln140_5_fu_1313_p11 + select_ln131_5_fu_1120_p3);

assign add_ln140_6_fu_1396_p2 = (trunc_ln140_6_fu_1187_p11 + select_ln131_6_fu_1145_p3);

assign add_ln140_7_fu_1402_p2 = ($signed(sext_ln140_fu_1356_p1) + $signed(select_ln131_7_fu_1170_p3));

assign add_ln140_fu_1360_p2 = (trunc_ln_fu_1250_p11 + select_ln131_fu_995_p3);

assign and_ln120_1_fu_449_p2 = (xor_ln120_reg_1500 & icmp_ln122_fu_443_p2);

assign and_ln120_fu_477_p2 = (xor_ln120_reg_1500 & not_exitcond_flatten_mid236_fu_472_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln120_fu_374_p2 == 1'd0) & (gemm_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = (((qk_stream_TREADY == 1'b0) & (ap_predicate_op190_write_state6 == 1'b1)) | ((ap_predicate_op192_write_state6 == 1'b1) & (v_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_124 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op190_write_state6 = ((cmp48_reg_1605 == 1'd0) & (icmp_ln120_reg_1487_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op192_write_state6 = ((cmp48_reg_1605 == 1'd1) & (icmp_ln120_reg_1487_pp0_iter4_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign bias_fu_1334_p2 = $signed(tmp_8_reg_1656);

assign bias_fu_1334_p9 = 'bx;

assign cmp22_fu_716_p2 = ((select_ln121_reg_1547_pp0_iter3_reg == 2'd0) ? 1'b1 : 1'b0);

assign cmp23_fu_721_p2 = ((select_ln121_reg_1547_pp0_iter3_reg == 2'd1) ? 1'b1 : 1'b0);

assign cmp48_fu_726_p2 = ((select_ln121_reg_1547_pp0_iter3_reg == 2'd2) ? 1'b1 : 1'b0);

assign empty_17_fu_731_p2 = (cmp23_fu_721_p2 | cmp22_fu_716_p2);

assign empty_18_fu_623_p1 = select_ln122_fu_584_p3[2:0];

assign empty_19_fu_627_p2 = (zext_ln122_fu_619_p1 + p_udiv_fu_604_p3);

assign empty_20_fu_653_p1 = l[4:0];

assign empty_21_fu_656_p2 = l << 12'd7;

assign empty_22_fu_661_p2 = l << 12'd4;

assign empty_23_fu_666_p2 = (empty_21_fu_656_p2 - empty_22_fu_661_p2);

assign empty_24_fu_672_p2 = (empty_23_fu_666_p2 + p_cast_fu_650_p1);

assign empty_25_fu_683_p2 = (select_ln122_reg_1554 + tmp_6_fu_643_p3);

assign empty_fu_461_p2 = (icmp_ln121_reg_1491 | and_ln120_1_fu_449_p2);

assign exitcond_flatten_not_fu_466_p2 = (icmp_ln122_fu_443_p2 ^ 1'd1);

assign hct_mid26_fu_564_p3 = ((empty_reg_1537[0:0] == 1'b1) ? 4'd0 : hct_fu_220);

assign icmp_ln120_fu_374_p2 = ((ap_sig_allocacmp_indvar_flatten37_load == 12'd2688) ? 1'b1 : 1'b0);

assign icmp_ln120_reg_1487_pp0_iter0_reg = icmp_ln120_reg_1487;

assign icmp_ln121_fu_386_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_443_p2 = ((indvar_flatten_fu_224 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_437_p2 = ((t_fu_216 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln123_mid212_fu_482_p2 = (icmp_ln123_fu_437_p2 & and_ln120_fu_477_p2);

assign mul_cast_fu_600_p1 = mul_fu_594_p2;

assign mul_fu_594_p0 = mul_fu_594_p00;

assign mul_fu_594_p00 = select_ln120_1_reg_1531;

assign mul_fu_594_p1 = 9'd19;

assign not_exitcond_flatten_mid236_fu_472_p2 = (icmp_ln121_reg_1491 | exitcond_flatten_not_fu_466_p2);

assign or_ln123_1_fu_503_p2 = (or_ln123_fu_497_p2 | icmp_ln121_reg_1491);

assign or_ln123_fu_497_p2 = (icmp_ln123_mid212_fu_482_p2 | and_ln120_1_fu_449_p2);

assign or_ln147_s_fu_1408_p9 = {{{{{{{{add_ln140_7_fu_1402_p2}, {add_ln140_6_fu_1396_p2}}, {add_ln140_5_fu_1390_p2}}, {add_ln140_4_fu_1384_p2}}, {add_ln140_3_fu_1378_p2}}, {add_ln140_2_fu_1372_p2}}, {add_ln140_1_fu_1366_p2}}, {add_ln140_fu_1360_p2}};

assign p_cast5_fu_678_p1 = empty_24_fu_672_p2;

assign p_cast_fu_650_p1 = empty_19_reg_1570;

assign p_udiv_fu_604_p3 = {{select_ln120_1_reg_1531}, {3'd0}};

assign qk_stream_TDATA = or_ln147_s_fu_1408_p9;

assign qkv_2_fu_558_p2 = (select_ln120_fu_551_p3 + 2'd1);

assign sel_tmp4_fu_965_p2 = (sel_tmp_fu_959_p2 & cmp23_fu_721_p2);

assign sel_tmp7_fu_971_p2 = (empty_17_fu_731_p2 ^ 1'd1);

assign sel_tmp8_fu_977_p2 = (sel_tmp7_fu_971_p2 & cmp48_fu_726_p2);

assign sel_tmp9_fu_1180_p4 = {{{cmp22_reg_1600}, {sel_tmp4_reg_1741}}, {sel_tmp8_reg_1746}};

assign sel_tmp_fu_959_p2 = (cmp22_fu_716_p2 ^ 1'd1);

assign select_ln120_1_fu_454_p3 = ((icmp_ln121_reg_1491[0:0] == 1'b1) ? add_ln120_fu_431_p2 : h_fu_236);

assign select_ln120_fu_551_p3 = ((icmp_ln121_reg_1491_pp0_iter1_reg[0:0] == 1'b1) ? 2'd0 : qkv_fu_228);

assign select_ln121_1_fu_404_p3 = ((icmp_ln121_fu_386_p2[0:0] == 1'b1) ? 9'd1 : add_ln121_1_fu_398_p2);

assign select_ln121_fu_571_p3 = ((and_ln120_1_reg_1526[0:0] == 1'b1) ? qkv_2_fu_558_p2 : select_ln120_fu_551_p3);

assign select_ln122_1_fu_522_p3 = ((empty_fu_461_p2[0:0] == 1'b1) ? 8'd1 : add_ln122_1_fu_516_p2);

assign select_ln122_fu_584_p3 = ((icmp_ln123_mid212_reg_1542[0:0] == 1'b1) ? add_ln122_fu_578_p2 : hct_mid26_fu_564_p3);

assign select_ln131_1_fu_1020_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? trunc_ln131_2_fu_1002_p4 : tmp_1_fu_1011_p4);

assign select_ln131_2_fu_1045_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? trunc_ln131_3_fu_1027_p4 : tmp_2_fu_1036_p4);

assign select_ln131_3_fu_1070_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? trunc_ln131_4_fu_1052_p4 : tmp_3_fu_1061_p4);

assign select_ln131_4_fu_1095_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? trunc_ln131_5_fu_1077_p4 : tmp_4_fu_1086_p4);

assign select_ln131_5_fu_1120_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? trunc_ln131_6_fu_1102_p4 : tmp_5_fu_1111_p4);

assign select_ln131_6_fu_1145_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? tmp_11_fu_1127_p4 : tmp_12_fu_1136_p4);

assign select_ln131_7_fu_1170_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? tmp_13_fu_1152_p4 : tmp_14_fu_1161_p4);

assign select_ln131_fu_995_p3 = ((empty_17_reg_1609[0:0] == 1'b1) ? trunc_ln3_fu_983_p4 : trunc_ln131_fu_992_p1);

assign sext_ln140_fu_1356_p1 = $signed(bias_fu_1334_p11);

assign t_1_fu_508_p3 = ((or_ln123_1_fu_503_p2[0:0] == 1'b1) ? 4'd1 : add_ln123_fu_491_p2);

assign tmp_10_fu_702_p4 = {{{empty_20_fu_653_p1}, {tmp_reg_1559}}, {empty_18_reg_1565}};

assign tmp_11_fu_1127_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[199:180]}};

assign tmp_12_fu_1136_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[193:174]}};

assign tmp_13_fu_1152_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[228:209]}};

assign tmp_14_cast_fu_696_p1 = tmp_7_fu_688_p3;

assign tmp_14_fu_1161_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[222:203]}};

assign tmp_16_cast6_fu_710_p1 = tmp_10_fu_702_p4;

assign tmp_1_fu_1011_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[48:29]}};

assign tmp_2_fu_1036_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[77:58]}};

assign tmp_3_fu_1061_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[106:87]}};

assign tmp_4_fu_1086_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[135:116]}};

assign tmp_5_fu_1111_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[164:145]}};

assign tmp_6_fu_643_p3 = {{tmp_reg_1559}, {3'd0}};

assign tmp_7_fu_688_p3 = {{empty_20_fu_653_p1}, {empty_25_fu_683_p2}};

assign trunc_ln131_2_fu_1002_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[54:35]}};

assign trunc_ln131_3_fu_1027_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[83:64]}};

assign trunc_ln131_4_fu_1052_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[112:93]}};

assign trunc_ln131_5_fu_1077_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[141:122]}};

assign trunc_ln131_6_fu_1102_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[170:151]}};

assign trunc_ln131_fu_992_p1 = gemm_stream_read_reg_1506_pp0_iter4_reg[19:0];

assign trunc_ln137_1_fu_811_p1 = BK_RAW_65_q1[19:0];

assign trunc_ln137_2_fu_885_p1 = BV_RAW_64_q1[19:0];

assign trunc_ln137_fu_737_p1 = BQ_66_q0[19:0];

assign trunc_ln140_1_fu_1271_p9 = 'bx;

assign trunc_ln140_2_fu_1229_p9 = 'bx;

assign trunc_ln140_3_fu_1292_p9 = 'bx;

assign trunc_ln140_4_fu_1208_p9 = 'bx;

assign trunc_ln140_5_fu_1313_p9 = 'bx;

assign trunc_ln140_6_fu_1187_p9 = 'bx;

assign trunc_ln3_fu_983_p4 = {{gemm_stream_read_reg_1506_pp0_iter4_reg[25:6]}};

assign trunc_ln_fu_1250_p9 = 'bx;

assign v_stream_TDATA = or_ln147_s_fu_1408_p9;

assign xor_ln120_fu_392_p2 = (icmp_ln121_fu_386_p2 ^ 1'd1);

assign zext_ln122_fu_619_p1 = select_ln122_fu_584_p3;

endmodule //DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_123_5
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12bkb (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 238;
parameter AddressWidth = 12;
parameter AddressRange = 2688;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/DEMUX/DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12bkb.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12cud (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 239;
parameter AddressWidth = 9;
parameter AddressRange = 384;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/DEMUX/DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12cud.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12dEe (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 239;
parameter AddressWidth = 9;
parameter AddressRange = 384;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/DEMUX/DEMUX_DEMUX_Pipeline_VITIS_LOOP_120_2_VITIS_LOOP_121_3_VITIS_LOOP_122_4_VITIS_LOOP_12dEe.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module DEMUX_DEMUX_Pipeline_VITIS_LOOP_154_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gemm_stream_TVALID,
        od_stream_TREADY,
        ug_stream_TREADY,
        od_stream_TDATA,
        od_stream_TVALID,
        gemm_stream_TDATA,
        gemm_stream_TREADY,
        ug_stream_TDATA,
        ug_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   gemm_stream_TVALID;
input   od_stream_TREADY;
input   ug_stream_TREADY;
output  [207:0] od_stream_TDATA;
output   od_stream_TVALID;
input  [231:0] gemm_stream_TDATA;
output   gemm_stream_TREADY;
output  [167:0] ug_stream_TDATA;
output   ug_stream_TVALID;

reg ap_idle;
reg[207:0] od_stream_TDATA;
reg od_stream_TVALID;
reg gemm_stream_TREADY;
reg ug_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln154_reg_541;
wire   [0:0] icmp_ln154_reg_541_pp0_iter0_reg;
reg   [0:0] icmp_ln157_reg_545;
reg   [0:0] icmp_ln164_reg_549;
reg    ap_predicate_op42_write_state2;
reg    ap_predicate_op53_write_state2;
reg    ap_predicate_op65_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln154_fu_170_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    od_stream_TDATA_blk_n;
reg    gemm_stream_TDATA_blk_n;
reg    ug_stream_TDATA_blk_n;
wire   [0:0] icmp_ln157_fu_176_p2;
wire   [0:0] icmp_ln164_fu_182_p2;
reg   [13:0] iter_2_fu_138;
wire   [13:0] iter_3_fu_188_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_iter;
wire   [207:0] or_ln177_s_fu_349_p9;
wire  signed [207:0] sext_ln163_1_fu_529_p1;
wire   [25:0] trunc_ln175_7_fu_339_p4;
wire   [25:0] trunc_ln175_6_fu_329_p4;
wire   [25:0] trunc_ln175_5_fu_319_p4;
wire   [25:0] trunc_ln175_4_fu_309_p4;
wire   [25:0] trunc_ln175_3_fu_299_p4;
wire   [25:0] trunc_ln175_2_fu_289_p4;
wire   [25:0] trunc_ln175_1_fu_279_p4;
wire   [25:0] trunc_ln5_fu_269_p4;
wire   [20:0] trunc_ln168_7_fu_440_p4;
wire   [20:0] trunc_ln168_6_fu_430_p4;
wire   [20:0] trunc_ln168_5_fu_420_p4;
wire   [20:0] trunc_ln168_4_fu_410_p4;
wire   [20:0] trunc_ln168_3_fu_400_p4;
wire   [20:0] trunc_ln168_2_fu_390_p4;
wire   [20:0] trunc_ln168_1_fu_380_p4;
wire   [20:0] trunc_ln4_fu_370_p4;
wire   [23:0] trunc_ln161_1_fu_471_p4;
wire   [23:0] lshr_ln156_1_fu_209_p4;
wire   [23:0] lshr_ln156_2_fu_219_p4;
wire   [23:0] lshr_ln156_3_fu_229_p4;
wire   [23:0] lshr_ln156_4_fu_239_p4;
wire   [23:0] lshr_ln156_5_fu_249_p4;
wire   [23:0] lshr_ln_fu_199_p4;
wire   [23:0] lshr_ln156_6_fu_259_p4;
wire  signed [25:0] sext_ln161_5_fu_501_p1;
wire  signed [25:0] sext_ln161_4_fu_497_p1;
wire  signed [25:0] sext_ln161_3_fu_493_p1;
wire  signed [25:0] sext_ln161_2_fu_489_p1;
wire  signed [25:0] sext_ln161_1_fu_485_p1;
wire  signed [25:0] sext_ln163_fu_505_p1;
wire  signed [25:0] sext_ln161_fu_481_p1;
wire   [205:0] tmp_fu_509_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_80;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 iter_2_fu_138 = 14'd0;
//#0 ap_done_reg = 1'b0;
end

DEMUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_80)) begin
        if ((icmp_ln154_fu_170_p2 == 1'd0)) begin
            iter_2_fu_138 <= iter_3_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iter_2_fu_138 <= 14'd2688;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln154_reg_541 <= icmp_ln154_fu_170_p2;
        icmp_ln157_reg_545 <= icmp_ln157_fu_176_p2;
        icmp_ln164_reg_549 <= icmp_ln164_fu_182_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln154_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_iter = 14'd2688;
    end else begin
        ap_sig_allocacmp_iter = iter_2_fu_138;
    end
end

always @ (*) begin
    if (((icmp_ln154_reg_541 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gemm_stream_TDATA_blk_n = gemm_stream_TVALID;
    end else begin
        gemm_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln154_reg_541 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        gemm_stream_TREADY = 1'b1;
    end else begin
        gemm_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        if ((ap_predicate_op65_write_state2 == 1'b1)) begin
            od_stream_TDATA = sext_ln163_1_fu_529_p1;
        end else if ((ap_predicate_op42_write_state2 == 1'b1)) begin
            od_stream_TDATA = or_ln177_s_fu_349_p9;
        end else begin
            od_stream_TDATA = 'bx;
        end
    end else begin
        od_stream_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op65_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((ap_predicate_op42_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        od_stream_TDATA_blk_n = od_stream_TREADY;
    end else begin
        od_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op65_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)) | ((ap_predicate_op42_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
        od_stream_TVALID = 1'b1;
    end else begin
        od_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ug_stream_TDATA_blk_n = ug_stream_TREADY;
    end else begin
        ug_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        ug_stream_TVALID = 1'b1;
    end else begin
        ug_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((icmp_ln154_reg_541_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op65_write_state2 == 1'b1) & (od_stream_TREADY == 1'b0)) | ((ap_predicate_op53_write_state2 == 1'b1) & (ug_stream_TREADY == 1'b0)) | ((ap_predicate_op42_write_state2 == 1'b1) & (od_stream_TREADY == 1'b0)) | ((icmp_ln154_reg_541 == 1'd0) & (gemm_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_80 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op42_write_state2 = ((icmp_ln164_reg_549 == 1'd0) & (icmp_ln157_reg_545 == 1'd0) & (icmp_ln154_reg_541 == 1'd0));
end

always @ (*) begin
    ap_predicate_op53_write_state2 = ((icmp_ln164_reg_549 == 1'd1) & (icmp_ln157_reg_545 == 1'd0) & (icmp_ln154_reg_541 == 1'd0));
end

always @ (*) begin
    ap_predicate_op65_write_state2 = ((icmp_ln157_reg_545 == 1'd1) & (icmp_ln154_reg_541 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln154_fu_170_p2 = ((ap_sig_allocacmp_iter == 14'd14208) ? 1'b1 : 1'b0);

assign icmp_ln154_reg_541_pp0_iter0_reg = icmp_ln154_reg_541;

assign icmp_ln157_fu_176_p2 = ((ap_sig_allocacmp_iter < 14'd3584) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_182_p2 = ((ap_sig_allocacmp_iter < 14'd13312) ? 1'b1 : 1'b0);

assign iter_3_fu_188_p2 = (ap_sig_allocacmp_iter + 14'd1);

assign lshr_ln156_1_fu_209_p4 = {{gemm_stream_TDATA[86:63]}};

assign lshr_ln156_2_fu_219_p4 = {{gemm_stream_TDATA[115:92]}};

assign lshr_ln156_3_fu_229_p4 = {{gemm_stream_TDATA[144:121]}};

assign lshr_ln156_4_fu_239_p4 = {{gemm_stream_TDATA[173:150]}};

assign lshr_ln156_5_fu_249_p4 = {{gemm_stream_TDATA[202:179]}};

assign lshr_ln156_6_fu_259_p4 = {{gemm_stream_TDATA[231:208]}};

assign lshr_ln_fu_199_p4 = {{gemm_stream_TDATA[57:34]}};

assign or_ln177_s_fu_349_p9 = {{{{{{{{trunc_ln175_7_fu_339_p4}, {trunc_ln175_6_fu_329_p4}}, {trunc_ln175_5_fu_319_p4}}, {trunc_ln175_4_fu_309_p4}}, {trunc_ln175_3_fu_299_p4}}, {trunc_ln175_2_fu_289_p4}}, {trunc_ln175_1_fu_279_p4}}, {trunc_ln5_fu_269_p4}};

assign sext_ln161_1_fu_485_p1 = $signed(lshr_ln156_1_fu_209_p4);

assign sext_ln161_2_fu_489_p1 = $signed(lshr_ln156_2_fu_219_p4);

assign sext_ln161_3_fu_493_p1 = $signed(lshr_ln156_3_fu_229_p4);

assign sext_ln161_4_fu_497_p1 = $signed(lshr_ln156_4_fu_239_p4);

assign sext_ln161_5_fu_501_p1 = $signed(lshr_ln156_5_fu_249_p4);

assign sext_ln161_fu_481_p1 = $signed(trunc_ln161_1_fu_471_p4);

assign sext_ln163_1_fu_529_p1 = $signed(tmp_fu_509_p9);

assign sext_ln163_fu_505_p1 = $signed(lshr_ln_fu_199_p4);

assign tmp_fu_509_p9 = {{{{{{{{lshr_ln156_6_fu_259_p4}, {sext_ln161_5_fu_501_p1}}, {sext_ln161_4_fu_497_p1}}, {sext_ln161_3_fu_493_p1}}, {sext_ln161_2_fu_489_p1}}, {sext_ln161_1_fu_485_p1}}, {sext_ln163_fu_505_p1}}, {sext_ln161_fu_481_p1}};

assign trunc_ln161_1_fu_471_p4 = {{gemm_stream_TDATA[28:5]}};

assign trunc_ln168_1_fu_380_p4 = {{gemm_stream_TDATA[51:31]}};

assign trunc_ln168_2_fu_390_p4 = {{gemm_stream_TDATA[80:60]}};

assign trunc_ln168_3_fu_400_p4 = {{gemm_stream_TDATA[109:89]}};

assign trunc_ln168_4_fu_410_p4 = {{gemm_stream_TDATA[138:118]}};

assign trunc_ln168_5_fu_420_p4 = {{gemm_stream_TDATA[167:147]}};

assign trunc_ln168_6_fu_430_p4 = {{gemm_stream_TDATA[196:176]}};

assign trunc_ln168_7_fu_440_p4 = {{gemm_stream_TDATA[225:205]}};

assign trunc_ln175_1_fu_279_p4 = {{gemm_stream_TDATA[57:32]}};

assign trunc_ln175_2_fu_289_p4 = {{gemm_stream_TDATA[86:61]}};

assign trunc_ln175_3_fu_299_p4 = {{gemm_stream_TDATA[115:90]}};

assign trunc_ln175_4_fu_309_p4 = {{gemm_stream_TDATA[144:119]}};

assign trunc_ln175_5_fu_319_p4 = {{gemm_stream_TDATA[173:148]}};

assign trunc_ln175_6_fu_329_p4 = {{gemm_stream_TDATA[202:177]}};

assign trunc_ln175_7_fu_339_p4 = {{gemm_stream_TDATA[231:206]}};

assign trunc_ln4_fu_370_p4 = {{gemm_stream_TDATA[22:2]}};

assign trunc_ln5_fu_269_p4 = {{gemm_stream_TDATA[28:3]}};

assign ug_stream_TDATA = {{{{{{{{trunc_ln168_7_fu_440_p4}, {trunc_ln168_6_fu_430_p4}}, {trunc_ln168_5_fu_420_p4}}, {trunc_ln168_4_fu_410_p4}}, {trunc_ln168_3_fu_400_p4}}, {trunc_ln168_2_fu_390_p4}}, {trunc_ln168_1_fu_380_p4}}, {trunc_ln4_fu_370_p4}};

endmodule //DEMUX_DEMUX_Pipeline_VITIS_LOOP_154_8
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module DEMUX_DEMUX_Pipeline_VITIS_LOOP_182_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gemm_stream_TVALID,
        cls_stream_TREADY,
        gemm_stream_TDATA,
        gemm_stream_TREADY,
        cls_stream_TDATA,
        cls_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   gemm_stream_TVALID;
input   cls_stream_TREADY;
input  [231:0] gemm_stream_TDATA;
output   gemm_stream_TREADY;
output  [135:0] cls_stream_TDATA;
output   cls_stream_TVALID;

reg ap_idle;
reg gemm_stream_TREADY;
reg cls_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln182_reg_224;
wire   [0:0] icmp_ln182_reg_224_pp0_iter0_reg;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln182_fu_99_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gemm_stream_TDATA_blk_n;
reg    cls_stream_TDATA_blk_n;
reg   [17:0] iter_fu_74;
wire   [17:0] iter_2_fu_105_p2;
wire    ap_loop_init;
reg   [17:0] ap_sig_allocacmp_iter_1;
wire   [16:0] trunc_ln188_7_fu_186_p4;
wire   [16:0] trunc_ln188_6_fu_176_p4;
wire   [16:0] trunc_ln188_5_fu_166_p4;
wire   [16:0] trunc_ln188_4_fu_156_p4;
wire   [16:0] trunc_ln188_3_fu_146_p4;
wire   [16:0] trunc_ln188_2_fu_136_p4;
wire   [16:0] trunc_ln188_1_fu_126_p4;
wire   [16:0] trunc_ln2_fu_116_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_55;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 iter_fu_74 = 18'd0;
//#0 ap_done_reg = 1'b0;
end

DEMUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_55)) begin
        if ((icmp_ln182_fu_99_p2 == 1'd0)) begin
            iter_fu_74 <= iter_2_fu_105_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iter_fu_74 <= 18'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln182_reg_224 <= icmp_ln182_fu_99_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln182_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_iter_1 = 18'd0;
    end else begin
        ap_sig_allocacmp_iter_1 = iter_fu_74;
    end
end

always @ (*) begin
    if (((icmp_ln182_reg_224 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cls_stream_TDATA_blk_n = cls_stream_TREADY;
    end else begin
        cls_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln182_reg_224 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cls_stream_TVALID = 1'b1;
    end else begin
        cls_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_reg_224 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gemm_stream_TDATA_blk_n = gemm_stream_TVALID;
    end else begin
        gemm_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln182_reg_224 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gemm_stream_TREADY = 1'b1;
    end else begin
        gemm_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1)) | ((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln182_reg_224_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((cls_stream_TREADY == 1'b0) & (icmp_ln182_reg_224 == 1'd0)) | ((icmp_ln182_reg_224 == 1'd0) & (gemm_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_55 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cls_stream_TDATA = {{{{{{{{trunc_ln188_7_fu_186_p4}, {trunc_ln188_6_fu_176_p4}}, {trunc_ln188_5_fu_166_p4}}, {trunc_ln188_4_fu_156_p4}}, {trunc_ln188_3_fu_146_p4}}, {trunc_ln188_2_fu_136_p4}}, {trunc_ln188_1_fu_126_p4}}, {trunc_ln2_fu_116_p4}};

assign icmp_ln182_fu_99_p2 = ((ap_sig_allocacmp_iter_1 == 18'd151936) ? 1'b1 : 1'b0);

assign icmp_ln182_reg_224_pp0_iter0_reg = icmp_ln182_reg_224;

assign iter_2_fu_105_p2 = (ap_sig_allocacmp_iter_1 + 18'd1);

assign trunc_ln188_1_fu_126_p4 = {{gemm_stream_TDATA[48:32]}};

assign trunc_ln188_2_fu_136_p4 = {{gemm_stream_TDATA[77:61]}};

assign trunc_ln188_3_fu_146_p4 = {{gemm_stream_TDATA[106:90]}};

assign trunc_ln188_4_fu_156_p4 = {{gemm_stream_TDATA[135:119]}};

assign trunc_ln188_5_fu_166_p4 = {{gemm_stream_TDATA[164:148]}};

assign trunc_ln188_6_fu_176_p4 = {{gemm_stream_TDATA[193:177]}};

assign trunc_ln188_7_fu_186_p4 = {{gemm_stream_TDATA[222:206]}};

assign trunc_ln2_fu_116_p4 = {{gemm_stream_TDATA[19:3]}};

endmodule //DEMUX_DEMUX_Pipeline_VITIS_LOOP_182_12
