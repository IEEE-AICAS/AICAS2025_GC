/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ROPE_QK_QUANT_ROPE_QK_QUANT,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.626500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=12693,HLS_SYN_LUT=8342,HLS_VERSION=2024_2}" *)

module ROPE_QK_QUANT (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        pos_id,
        qk_stream_TDATA,
        qk_stream_TVALID,
        qk_stream_TREADY,
        rot_q_stream_TDATA,
        rot_q_stream_TVALID,
        rot_q_stream_TREADY,
        rot_s_stream_TDATA,
        rot_s_stream_TVALID,
        rot_s_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [31:0] pos_id;
input  [159:0] qk_stream_TDATA;
input   qk_stream_TVALID;
output   qk_stream_TREADY;
output  [63:0] rot_q_stream_TDATA;
output   rot_q_stream_TVALID;
input   rot_q_stream_TREADY;
output  [7:0] rot_s_stream_TDATA;
output   rot_s_stream_TVALID;
input   rot_s_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_185;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_190;
wire   [31:0] add_ln54_fu_93_p2;
reg   [31:0] add_ln54_reg_196;
wire   [0:0] empty_fu_99_p2;
reg   [0:0] empty_reg_203;
wire   [0:0] empty_36_fu_105_p2;
reg   [0:0] empty_36_reg_208;
wire   [31:0] sub_ln54_fu_124_p2;
reg   [31:0] sub_ln54_reg_213;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln54_1_fu_140_p2;
reg   [31:0] sub_ln54_1_reg_219;
wire   [0:0] empty_37_fu_145_p2;
reg   [0:0] empty_37_reg_225;
wire    ap_CS_fsm_state3;
reg   [31:0] pos_id_read_reg_230;
wire    ap_CS_fsm_state4;
wire   [31:0] sub_ln54_2_fu_154_p2;
reg   [31:0] sub_ln54_2_reg_235;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TDATA;
wire   [7:0] grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_qk_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready;
wire    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_idle;
reg    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_continue;
reg    grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln54_fu_162_p2;
wire    ap_CS_fsm_state6;
reg    ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready;
reg    ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done;
reg    ap_block_state6_on_subcall_done;
wire    ap_sync_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready;
reg   [63:0] rot_q_stream_TDATA_reg;
reg   [7:0] rot_s_stream_TDATA_reg;
reg   [31:0] l_fu_54;
wire   [31:0] add_ln54_1_fu_167_p2;
wire   [31:0] smax_fu_119_p3;
wire   [30:0] trunc_ln35_fu_116_p1;
wire   [30:0] smax1_fu_129_p3;
wire   [31:0] zext_ln54_fu_136_p1;
wire   [31:0] umax_fu_149_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_rot_q_stream_U_apdone_blk;
wire    regslice_both_rot_s_stream_U_apdone_blk;
reg    ap_block_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_qk_stream_U_apdone_blk;
wire   [159:0] qk_stream_TDATA_int_regslice;
wire    qk_stream_TVALID_int_regslice;
reg    qk_stream_TREADY_int_regslice;
wire    regslice_both_qk_stream_U_ack_in;
reg   [63:0] rot_q_stream_TDATA_int_regslice;
wire    rot_q_stream_TREADY_int_regslice;
wire    regslice_both_rot_q_stream_U_vld_out;
reg   [7:0] rot_s_stream_TDATA_int_regslice;
wire    rot_s_stream_TREADY_int_regslice;
wire    regslice_both_rot_s_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 7'd1;
//#0 grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done = 1'b0;
//#0 l_fu_54 = 32'd0;
end

ROPE_QK_QUANT_dataflow_in_loop_VITIS_LOOP_54_1_1 grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76(
    .pos_id(pos_id_read_reg_230),
    .qk_stream_TDATA(qk_stream_TDATA_int_regslice),
    .rot_q_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TDATA),
    .rot_s_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .pos_id_ap_vld(1'b1),
    .ap_start(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start),
    .qk_stream_TVALID(qk_stream_TVALID_int_regslice),
    .qk_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_qk_stream_TREADY),
    .rot_q_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TVALID),
    .rot_q_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TREADY),
    .rot_s_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TVALID),
    .rot_s_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TREADY),
    .ap_done(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done),
    .ap_ready(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready),
    .ap_idle(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_idle),
    .ap_continue(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_continue)
);

ROPE_QK_QUANT_regslice_both #(
    .DataWidth( 160 ))
regslice_both_qk_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qk_stream_TDATA),
    .vld_in(qk_stream_TVALID),
    .ack_in(regslice_both_qk_stream_U_ack_in),
    .data_out(qk_stream_TDATA_int_regslice),
    .vld_out(qk_stream_TVALID_int_regslice),
    .ack_out(qk_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_qk_stream_U_apdone_blk)
);

ROPE_QK_QUANT_regslice_both #(
    .DataWidth( 64 ))
regslice_both_rot_q_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rot_q_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TVALID),
    .ack_in(rot_q_stream_TREADY_int_regslice),
    .data_out(rot_q_stream_TDATA),
    .vld_out(regslice_both_rot_q_stream_U_vld_out),
    .ack_out(rot_q_stream_TREADY),
    .apdone_blk(regslice_both_rot_q_stream_U_apdone_blk)
);

ROPE_QK_QUANT_regslice_both #(
    .DataWidth( 8 ))
regslice_both_rot_s_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rot_s_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TVALID),
    .ack_in(rot_s_stream_TREADY_int_regslice),
    .data_out(rot_s_stream_TDATA),
    .vld_out(regslice_both_rot_s_stream_U_vld_out),
    .ack_out(rot_s_stream_TREADY),
    .apdone_blk(regslice_both_rot_s_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done <= 1'b0;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready <= 1'b0;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (ap_sync_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_162_p2 == 1'd0)))) begin
            grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready == 1'b1)) begin
            grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_54 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_162_p2 == 1'd0))) begin
        l_fu_54 <= add_ln54_1_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln54_reg_196 <= add_ln54_fu_93_p2;
        empty_36_reg_208 <= empty_36_fu_105_p2;
        empty_reg_203 <= empty_fu_99_p2;
        l_begin_read_reg_190 <= l_begin;
        l_close_read_reg_185 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_37_reg_225 <= empty_37_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pos_id_read_reg_230 <= pos_id;
        sub_ln54_2_reg_235 <= sub_ln54_2_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rot_q_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rot_s_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln54_1_reg_219 <= sub_ln54_1_fu_140_p2;
        sub_ln54_reg_213 <= sub_ln54_fu_124_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_continue = 1'b1;
    end else begin
        grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        qk_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_qk_stream_TREADY;
    end else begin
        qk_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rot_q_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TDATA;
    end else begin
        rot_q_stream_TDATA_int_regslice = rot_q_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rot_s_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TDATA;
    end else begin
        rot_s_stream_TDATA_int_regslice = rot_s_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_162_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_167_p2 = (l_fu_54 + 32'd1);

assign add_ln54_fu_93_p2 = ($signed(l_begin) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready & ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state7 = ((regslice_both_rot_s_stream_U_apdone_blk == 1'b1) | (regslice_both_rot_q_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready = (grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready | ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_ready);

assign empty_36_fu_105_p2 = (($signed(l_begin) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_37_fu_145_p2 = ((sub_ln54_reg_213 > sub_ln54_1_reg_219) ? 1'b1 : 1'b0);

assign empty_fu_99_p2 = (($signed(l_close) > $signed(l_begin)) ? 1'b1 : 1'b0);

assign grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start = grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_ap_start_reg;

assign grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_q_stream_TREADY = (rot_q_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_dataflow_in_loop_VITIS_LOOP_54_1_1_fu_76_rot_s_stream_TREADY = (rot_s_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign icmp_ln54_fu_162_p2 = ((l_fu_54 == sub_ln54_2_reg_235) ? 1'b1 : 1'b0);

assign qk_stream_TREADY = regslice_both_qk_stream_U_ack_in;

assign rot_q_stream_TVALID = regslice_both_rot_q_stream_U_vld_out;

assign rot_s_stream_TVALID = regslice_both_rot_s_stream_U_vld_out;

assign smax1_fu_129_p3 = ((empty_36_reg_208[0:0] == 1'b1) ? trunc_ln35_fu_116_p1 : 31'd24);

assign smax_fu_119_p3 = ((empty_reg_203[0:0] == 1'b1) ? l_close_read_reg_185 : l_begin_read_reg_190);

assign sub_ln54_1_fu_140_p2 = (add_ln54_reg_196 - zext_ln54_fu_136_p1);

assign sub_ln54_2_fu_154_p2 = (add_ln54_reg_196 - umax_fu_149_p3);

assign sub_ln54_fu_124_p2 = (add_ln54_reg_196 - smax_fu_119_p3);

assign trunc_ln35_fu_116_p1 = l_begin_read_reg_190[30:0];

assign umax_fu_149_p3 = ((empty_37_reg_225[0:0] == 1'b1) ? sub_ln54_reg_213 : sub_ln54_1_reg_219);

assign zext_ln54_fu_136_p1 = smax1_fu_129_p3;

endmodule //ROPE_QK_QUANT
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_dataflow_in_loop_VITIS_LOOP_54_1_1 (
        pos_id,
        qk_stream_TDATA,
        rot_q_stream_TDATA,
        rot_s_stream_TDATA,
        ap_clk,
        ap_rst,
        pos_id_ap_vld,
        ap_start,
        qk_stream_TVALID,
        qk_stream_TREADY,
        rot_q_stream_TVALID,
        rot_q_stream_TREADY,
        rot_s_stream_TVALID,
        rot_s_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] pos_id;
input  [159:0] qk_stream_TDATA;
output  [63:0] rot_q_stream_TDATA;
output  [7:0] rot_s_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   pos_id_ap_vld;
input   ap_start;
input   qk_stream_TVALID;
output   qk_stream_TREADY;
output   rot_q_stream_TVALID;
input   rot_q_stream_TREADY;
output   rot_s_stream_TVALID;
input   rot_s_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_cordic_U0_ap_start;
wire    do_cordic_U0_start_out;
wire    do_cordic_U0_start_write;
wire   [127:0] do_cordic_U0_cos_sin_stream_din;
wire    do_cordic_U0_cos_sin_stream_write;
wire    do_cordic_U0_ap_done;
wire    do_cordic_U0_ap_ready;
wire    do_cordic_U0_ap_idle;
wire    do_cordic_U0_ap_continue;
wire    do_rope_U0_ap_start;
wire    do_rope_U0_start_out;
wire    do_rope_U0_start_write;
wire    do_rope_U0_cos_sin_stream_read;
wire   [135:0] do_rope_U0_rot_stream_din;
wire    do_rope_U0_rot_stream_write;
wire    do_rope_U0_qk_stream_TREADY;
wire    do_rope_U0_ap_done;
wire    do_rope_U0_ap_ready;
wire    do_rope_U0_ap_idle;
wire    do_rope_U0_ap_continue;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_rot_stream_read;
wire   [63:0] do_quant_U0_rot_q_stream_TDATA;
wire    do_quant_U0_rot_q_stream_TVALID;
wire   [7:0] do_quant_U0_rot_s_stream_TDATA;
wire    do_quant_U0_rot_s_stream_TVALID;
wire    cos_sin_stream_full_n;
wire   [127:0] cos_sin_stream_dout;
wire    cos_sin_stream_empty_n;
wire   [2:0] cos_sin_stream_num_data_valid;
wire   [2:0] cos_sin_stream_fifo_cap;
wire    rot_stream_full_n;
wire   [135:0] rot_stream_dout;
wire    rot_stream_empty_n;
wire   [2:0] rot_stream_num_data_valid;
wire   [2:0] rot_stream_fifo_cap;
wire   [0:0] start_for_do_rope_U0_din;
wire    start_for_do_rope_U0_full_n;
wire   [0:0] start_for_do_rope_U0_dout;
wire    start_for_do_rope_U0_empty_n;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;

ROPE_QK_QUANT_do_cordic do_cordic_U0(
    .ap_start(do_cordic_U0_ap_start),
    .start_full_n(start_for_do_rope_U0_full_n),
    .start_out(do_cordic_U0_start_out),
    .start_write(do_cordic_U0_start_write),
    .pos_id(pos_id),
    .cos_sin_stream_din(do_cordic_U0_cos_sin_stream_din),
    .cos_sin_stream_full_n(cos_sin_stream_full_n),
    .cos_sin_stream_write(do_cordic_U0_cos_sin_stream_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .pos_id_ap_vld(pos_id_ap_vld),
    .ap_done(do_cordic_U0_ap_done),
    .ap_ready(do_cordic_U0_ap_ready),
    .ap_idle(do_cordic_U0_ap_idle),
    .ap_continue(do_cordic_U0_ap_continue)
);

ROPE_QK_QUANT_do_rope do_rope_U0(
    .ap_start(do_rope_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .start_out(do_rope_U0_start_out),
    .start_write(do_rope_U0_start_write),
    .qk_stream_TDATA(qk_stream_TDATA),
    .cos_sin_stream_dout(cos_sin_stream_dout),
    .cos_sin_stream_empty_n(cos_sin_stream_empty_n),
    .cos_sin_stream_read(do_rope_U0_cos_sin_stream_read),
    .rot_stream_din(do_rope_U0_rot_stream_din),
    .rot_stream_full_n(rot_stream_full_n),
    .rot_stream_write(do_rope_U0_rot_stream_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .qk_stream_TVALID(qk_stream_TVALID),
    .qk_stream_TREADY(do_rope_U0_qk_stream_TREADY),
    .ap_done(do_rope_U0_ap_done),
    .ap_ready(do_rope_U0_ap_ready),
    .ap_idle(do_rope_U0_ap_idle),
    .ap_continue(do_rope_U0_ap_continue)
);

ROPE_QK_QUANT_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .rot_stream_dout(rot_stream_dout),
    .rot_stream_empty_n(rot_stream_empty_n),
    .rot_stream_read(do_quant_U0_rot_stream_read),
    .rot_stream_num_data_valid(rot_stream_num_data_valid),
    .rot_stream_fifo_cap(rot_stream_fifo_cap),
    .rot_q_stream_TREADY(rot_q_stream_TREADY),
    .rot_s_stream_TREADY(rot_s_stream_TREADY),
    .rot_q_stream_TDATA(do_quant_U0_rot_q_stream_TDATA),
    .rot_q_stream_TVALID(do_quant_U0_rot_q_stream_TVALID),
    .rot_s_stream_TDATA(do_quant_U0_rot_s_stream_TDATA),
    .rot_s_stream_TVALID(do_quant_U0_rot_s_stream_TVALID)
);

ROPE_QK_QUANT_fifo_w128_d2_S_x cos_sin_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_cordic_U0_cos_sin_stream_din),
    .if_full_n(cos_sin_stream_full_n),
    .if_write(do_cordic_U0_cos_sin_stream_write),
    .if_dout(cos_sin_stream_dout),
    .if_empty_n(cos_sin_stream_empty_n),
    .if_read(do_rope_U0_cos_sin_stream_read),
    .if_num_data_valid(cos_sin_stream_num_data_valid),
    .if_fifo_cap(cos_sin_stream_fifo_cap)
);

ROPE_QK_QUANT_fifo_w136_d2_S rot_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_rope_U0_rot_stream_din),
    .if_full_n(rot_stream_full_n),
    .if_write(do_rope_U0_rot_stream_write),
    .if_dout(rot_stream_dout),
    .if_empty_n(rot_stream_empty_n),
    .if_read(do_quant_U0_rot_stream_read),
    .if_num_data_valid(rot_stream_num_data_valid),
    .if_fifo_cap(rot_stream_fifo_cap)
);

ROPE_QK_QUANT_start_for_do_rope_U0 start_for_do_rope_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_rope_U0_din),
    .if_full_n(start_for_do_rope_U0_full_n),
    .if_write(do_cordic_U0_start_write),
    .if_dout(start_for_do_rope_U0_dout),
    .if_empty_n(start_for_do_rope_U0_empty_n),
    .if_read(do_rope_U0_ap_ready)
);

ROPE_QK_QUANT_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(do_rope_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

assign ap_done = do_quant_U0_ap_done;

assign ap_idle = (do_rope_U0_ap_idle & do_quant_U0_ap_idle & do_cordic_U0_ap_idle);

assign ap_ready = do_cordic_U0_ap_ready;

assign do_cordic_U0_ap_continue = 1'b1;

assign do_cordic_U0_ap_start = ap_start;

assign do_quant_U0_ap_continue = ap_continue;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_rope_U0_ap_continue = 1'b1;

assign do_rope_U0_ap_start = start_for_do_rope_U0_empty_n;

assign qk_stream_TREADY = do_rope_U0_qk_stream_TREADY;

assign rot_q_stream_TDATA = do_quant_U0_rot_q_stream_TDATA;

assign rot_q_stream_TVALID = do_quant_U0_rot_q_stream_TVALID;

assign rot_s_stream_TDATA = do_quant_U0_rot_s_stream_TDATA;

assign rot_s_stream_TVALID = do_quant_U0_rot_s_stream_TVALID;

assign start_for_do_quant_U0_din = 1'b1;

assign start_for_do_rope_U0_din = 1'b1;

endmodule //ROPE_QK_QUANT_dataflow_in_loop_VITIS_LOOP_54_1_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_do_cordic (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        pos_id,
        cos_sin_stream_din,
        cos_sin_stream_full_n,
        cos_sin_stream_write,
        ap_clk,
        ap_rst,
        pos_id_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [31:0] pos_id;
output  [127:0] cos_sin_stream_din;
input   cos_sin_stream_full_n;
output   cos_sin_stream_write;
input   ap_clk;
input   ap_rst;
input   pos_id_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    stage1_preprocess_U0_ap_start;
wire    stage1_preprocess_U0_start_full_n;
wire    stage1_preprocess_U0_ap_done;
wire    stage1_preprocess_U0_ap_continue;
wire    stage1_preprocess_U0_ap_idle;
wire    stage1_preprocess_U0_ap_ready;
wire   [87:0] stage1_preprocess_U0_gamma_stream_din;
wire    stage1_preprocess_U0_gamma_stream_write;
wire   [39:0] stage1_preprocess_U0_n_quarter_stream_din;
wire    stage1_preprocess_U0_n_quarter_stream_write;
wire    stage1_preprocess_U0_start_out;
wire    stage1_preprocess_U0_start_write;
wire    stage2_cordic_U0_ap_start;
wire    stage2_cordic_U0_ap_done;
wire    stage2_cordic_U0_ap_continue;
wire    stage2_cordic_U0_ap_idle;
wire    stage2_cordic_U0_ap_ready;
wire    stage2_cordic_U0_gamma_stream_read;
wire   [63:0] stage2_cordic_U0_x_stream_din;
wire    stage2_cordic_U0_x_stream_write;
wire   [63:0] stage2_cordic_U0_y_stream_din;
wire    stage2_cordic_U0_y_stream_write;
wire    stage3_postprocess_U0_ap_start;
wire    stage3_postprocess_U0_ap_done;
wire    stage3_postprocess_U0_ap_continue;
wire    stage3_postprocess_U0_ap_idle;
wire    stage3_postprocess_U0_ap_ready;
wire    stage3_postprocess_U0_x_stream_read;
wire    stage3_postprocess_U0_y_stream_read;
wire    stage3_postprocess_U0_n_quarter_stream_read;
wire   [127:0] stage3_postprocess_U0_cos_sin_stream_din;
wire    stage3_postprocess_U0_cos_sin_stream_write;
wire    gamma_stream_full_n;
wire   [87:0] gamma_stream_dout;
wire    gamma_stream_empty_n;
wire   [2:0] gamma_stream_num_data_valid;
wire   [2:0] gamma_stream_fifo_cap;
wire    n_quarter_stream_full_n;
wire   [39:0] n_quarter_stream_dout;
wire    n_quarter_stream_empty_n;
wire   [2:0] n_quarter_stream_num_data_valid;
wire   [2:0] n_quarter_stream_fifo_cap;
wire    x_stream_full_n;
wire   [63:0] x_stream_dout;
wire    x_stream_empty_n;
wire   [2:0] x_stream_num_data_valid;
wire   [2:0] x_stream_fifo_cap;
wire    y_stream_full_n;
wire   [63:0] y_stream_dout;
wire    y_stream_empty_n;
wire   [2:0] y_stream_num_data_valid;
wire   [2:0] y_stream_fifo_cap;
wire    ap_sync_ready;
wire   [0:0] start_for_stage2_cordic_U0_din;
wire    start_for_stage2_cordic_U0_full_n;
wire   [0:0] start_for_stage2_cordic_U0_dout;
wire    start_for_stage2_cordic_U0_empty_n;
wire   [0:0] start_for_stage3_postprocess_U0_din;
wire    start_for_stage3_postprocess_U0_full_n;
wire   [0:0] start_for_stage3_postprocess_U0_dout;
wire    start_for_stage3_postprocess_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ROPE_QK_QUANT_stage1_preprocess stage1_preprocess_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stage1_preprocess_U0_ap_start),
    .start_full_n(stage1_preprocess_U0_start_full_n),
    .ap_done(stage1_preprocess_U0_ap_done),
    .ap_continue(stage1_preprocess_U0_ap_continue),
    .ap_idle(stage1_preprocess_U0_ap_idle),
    .ap_ready(stage1_preprocess_U0_ap_ready),
    .gamma_stream_din(stage1_preprocess_U0_gamma_stream_din),
    .gamma_stream_full_n(gamma_stream_full_n),
    .gamma_stream_write(stage1_preprocess_U0_gamma_stream_write),
    .gamma_stream_num_data_valid(gamma_stream_num_data_valid),
    .gamma_stream_fifo_cap(gamma_stream_fifo_cap),
    .n_quarter_stream_din(stage1_preprocess_U0_n_quarter_stream_din),
    .n_quarter_stream_full_n(n_quarter_stream_full_n),
    .n_quarter_stream_write(stage1_preprocess_U0_n_quarter_stream_write),
    .n_quarter_stream_num_data_valid(n_quarter_stream_num_data_valid),
    .n_quarter_stream_fifo_cap(n_quarter_stream_fifo_cap),
    .start_out(stage1_preprocess_U0_start_out),
    .start_write(stage1_preprocess_U0_start_write),
    .pos_id(pos_id)
);

ROPE_QK_QUANT_stage2_cordic stage2_cordic_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stage2_cordic_U0_ap_start),
    .ap_done(stage2_cordic_U0_ap_done),
    .ap_continue(stage2_cordic_U0_ap_continue),
    .ap_idle(stage2_cordic_U0_ap_idle),
    .ap_ready(stage2_cordic_U0_ap_ready),
    .gamma_stream_dout(gamma_stream_dout),
    .gamma_stream_empty_n(gamma_stream_empty_n),
    .gamma_stream_read(stage2_cordic_U0_gamma_stream_read),
    .gamma_stream_num_data_valid(gamma_stream_num_data_valid),
    .gamma_stream_fifo_cap(gamma_stream_fifo_cap),
    .x_stream_din(stage2_cordic_U0_x_stream_din),
    .x_stream_full_n(x_stream_full_n),
    .x_stream_write(stage2_cordic_U0_x_stream_write),
    .x_stream_num_data_valid(x_stream_num_data_valid),
    .x_stream_fifo_cap(x_stream_fifo_cap),
    .y_stream_din(stage2_cordic_U0_y_stream_din),
    .y_stream_full_n(y_stream_full_n),
    .y_stream_write(stage2_cordic_U0_y_stream_write),
    .y_stream_num_data_valid(y_stream_num_data_valid),
    .y_stream_fifo_cap(y_stream_fifo_cap)
);

ROPE_QK_QUANT_stage3_postprocess stage3_postprocess_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stage3_postprocess_U0_ap_start),
    .ap_done(stage3_postprocess_U0_ap_done),
    .ap_continue(stage3_postprocess_U0_ap_continue),
    .ap_idle(stage3_postprocess_U0_ap_idle),
    .ap_ready(stage3_postprocess_U0_ap_ready),
    .x_stream_dout(x_stream_dout),
    .x_stream_empty_n(x_stream_empty_n),
    .x_stream_read(stage3_postprocess_U0_x_stream_read),
    .x_stream_num_data_valid(x_stream_num_data_valid),
    .x_stream_fifo_cap(x_stream_fifo_cap),
    .y_stream_dout(y_stream_dout),
    .y_stream_empty_n(y_stream_empty_n),
    .y_stream_read(stage3_postprocess_U0_y_stream_read),
    .y_stream_num_data_valid(y_stream_num_data_valid),
    .y_stream_fifo_cap(y_stream_fifo_cap),
    .n_quarter_stream_dout(n_quarter_stream_dout),
    .n_quarter_stream_empty_n(n_quarter_stream_empty_n),
    .n_quarter_stream_read(stage3_postprocess_U0_n_quarter_stream_read),
    .n_quarter_stream_num_data_valid(n_quarter_stream_num_data_valid),
    .n_quarter_stream_fifo_cap(n_quarter_stream_fifo_cap),
    .cos_sin_stream_din(stage3_postprocess_U0_cos_sin_stream_din),
    .cos_sin_stream_full_n(cos_sin_stream_full_n),
    .cos_sin_stream_write(stage3_postprocess_U0_cos_sin_stream_write),
    .cos_sin_stream_num_data_valid(3'd0),
    .cos_sin_stream_fifo_cap(3'd0)
);

ROPE_QK_QUANT_fifo_w88_d2_S gamma_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stage1_preprocess_U0_gamma_stream_din),
    .if_full_n(gamma_stream_full_n),
    .if_write(stage1_preprocess_U0_gamma_stream_write),
    .if_dout(gamma_stream_dout),
    .if_empty_n(gamma_stream_empty_n),
    .if_read(stage2_cordic_U0_gamma_stream_read),
    .if_num_data_valid(gamma_stream_num_data_valid),
    .if_fifo_cap(gamma_stream_fifo_cap)
);

ROPE_QK_QUANT_fifo_w40_d2_S n_quarter_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stage1_preprocess_U0_n_quarter_stream_din),
    .if_full_n(n_quarter_stream_full_n),
    .if_write(stage1_preprocess_U0_n_quarter_stream_write),
    .if_dout(n_quarter_stream_dout),
    .if_empty_n(n_quarter_stream_empty_n),
    .if_read(stage3_postprocess_U0_n_quarter_stream_read),
    .if_num_data_valid(n_quarter_stream_num_data_valid),
    .if_fifo_cap(n_quarter_stream_fifo_cap)
);

ROPE_QK_QUANT_fifo_w64_d2_S x_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stage2_cordic_U0_x_stream_din),
    .if_full_n(x_stream_full_n),
    .if_write(stage2_cordic_U0_x_stream_write),
    .if_dout(x_stream_dout),
    .if_empty_n(x_stream_empty_n),
    .if_read(stage3_postprocess_U0_x_stream_read),
    .if_num_data_valid(x_stream_num_data_valid),
    .if_fifo_cap(x_stream_fifo_cap)
);

ROPE_QK_QUANT_fifo_w64_d2_S y_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stage2_cordic_U0_y_stream_din),
    .if_full_n(y_stream_full_n),
    .if_write(stage2_cordic_U0_y_stream_write),
    .if_dout(y_stream_dout),
    .if_empty_n(y_stream_empty_n),
    .if_read(stage3_postprocess_U0_y_stream_read),
    .if_num_data_valid(y_stream_num_data_valid),
    .if_fifo_cap(y_stream_fifo_cap)
);

ROPE_QK_QUANT_start_for_stage2_cordic_U0 start_for_stage2_cordic_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stage2_cordic_U0_din),
    .if_full_n(start_for_stage2_cordic_U0_full_n),
    .if_write(stage1_preprocess_U0_start_write),
    .if_dout(start_for_stage2_cordic_U0_dout),
    .if_empty_n(start_for_stage2_cordic_U0_empty_n),
    .if_read(stage2_cordic_U0_ap_ready)
);

ROPE_QK_QUANT_start_for_stage3_postprocess_U0 start_for_stage3_postprocess_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stage3_postprocess_U0_din),
    .if_full_n(start_for_stage3_postprocess_U0_full_n),
    .if_write(stage1_preprocess_U0_start_write),
    .if_dout(start_for_stage3_postprocess_U0_dout),
    .if_empty_n(start_for_stage3_postprocess_U0_empty_n),
    .if_read(stage3_postprocess_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = stage3_postprocess_U0_ap_done;

assign ap_idle = (stage3_postprocess_U0_ap_idle & stage2_cordic_U0_ap_idle & stage1_preprocess_U0_ap_idle);

assign ap_ready = stage1_preprocess_U0_ap_ready;

assign ap_sync_ready = stage1_preprocess_U0_ap_ready;

assign cos_sin_stream_din = stage3_postprocess_U0_cos_sin_stream_din;

assign cos_sin_stream_write = stage3_postprocess_U0_cos_sin_stream_write;

assign internal_ap_ready = ap_sync_ready;

assign stage1_preprocess_U0_ap_continue = 1'b1;

assign stage1_preprocess_U0_ap_start = real_start;

assign stage1_preprocess_U0_start_full_n = (start_for_stage3_postprocess_U0_full_n & start_for_stage2_cordic_U0_full_n);

assign stage2_cordic_U0_ap_continue = 1'b1;

assign stage2_cordic_U0_ap_start = start_for_stage2_cordic_U0_empty_n;

assign stage3_postprocess_U0_ap_continue = ap_continue;

assign stage3_postprocess_U0_ap_start = start_for_stage3_postprocess_U0_empty_n;

assign start_for_stage2_cordic_U0_din = 1'b1;

assign start_for_stage3_postprocess_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ROPE_QK_QUANT_do_cordic
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rot_stream_dout,
        rot_stream_empty_n,
        rot_stream_read,
        rot_stream_num_data_valid,
        rot_stream_fifo_cap,
        rot_q_stream_TREADY,
        rot_s_stream_TREADY,
        rot_q_stream_TDATA,
        rot_q_stream_TVALID,
        rot_s_stream_TDATA,
        rot_s_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter16_fsm_state17 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;
parameter    ap_ST_iter16_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [135:0] rot_stream_dout;
input   rot_stream_empty_n;
output   rot_stream_read;
input  [2:0] rot_stream_num_data_valid;
input  [2:0] rot_stream_fifo_cap;
input   rot_q_stream_TREADY;
input   rot_s_stream_TREADY;
output  [63:0] rot_q_stream_TDATA;
output   rot_q_stream_TVALID;
output  [7:0] rot_s_stream_TDATA;
output   rot_s_stream_TVALID;

reg ap_idle;
reg rot_stream_read;
reg rot_q_stream_TVALID;
reg rot_s_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg   [1:0] ap_CS_iter16_fsm;
wire    ap_CS_iter16_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln61_reg_1327;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_CS_iter13_fsm_state14;
wire    ap_CS_iter14_fsm_state15;
wire    ap_CS_iter15_fsm_state16;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter15_reg;
reg    ap_block_state17_pp0_stage0_iter16;
wire    ap_CS_iter16_fsm_state17;
wire   [0:0] icmp_ln61_fu_318_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    rot_stream_blk_n;
reg    rot_q_stream_TDATA_blk_n;
reg    rot_s_stream_TDATA_blk_n;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter1_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter2_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter3_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter4_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter5_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter6_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter7_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter8_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter9_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter10_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter11_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter12_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter13_reg;
reg   [0:0] icmp_ln61_reg_1327_pp0_iter14_reg;
wire   [16:0] trunc_ln67_fu_335_p1;
reg   [16:0] trunc_ln67_reg_1331;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter2_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter3_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter4_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter5_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter6_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter7_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter8_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter9_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter10_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter11_reg;
reg   [16:0] trunc_ln67_reg_1331_pp0_iter12_reg;
reg   [16:0] trunc_ln67_1_reg_1339;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter2_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter3_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter4_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter5_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter6_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter7_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter8_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter9_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter10_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter11_reg;
reg   [16:0] trunc_ln67_1_reg_1339_pp0_iter12_reg;
reg   [16:0] trunc_ln67_2_reg_1347;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter2_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter3_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter4_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter5_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter6_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter7_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter8_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter9_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter10_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter11_reg;
reg   [16:0] trunc_ln67_2_reg_1347_pp0_iter12_reg;
reg   [16:0] trunc_ln67_3_reg_1355;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter2_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter3_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter4_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter5_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter6_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter7_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter8_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter9_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter10_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter11_reg;
reg   [16:0] trunc_ln67_3_reg_1355_pp0_iter12_reg;
reg   [16:0] trunc_ln67_4_reg_1363;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter2_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter3_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter4_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter5_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter6_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter7_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter8_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter9_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter10_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter11_reg;
reg   [16:0] trunc_ln67_4_reg_1363_pp0_iter12_reg;
reg   [16:0] trunc_ln67_5_reg_1371;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter2_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter3_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter4_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter5_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter6_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter7_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter8_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter9_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter10_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter11_reg;
reg   [16:0] trunc_ln67_5_reg_1371_pp0_iter12_reg;
reg   [16:0] trunc_ln67_6_reg_1379;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter2_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter3_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter4_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter5_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter6_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter7_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter8_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter9_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter10_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter11_reg;
reg   [16:0] trunc_ln67_6_reg_1379_pp0_iter12_reg;
reg   [16:0] trunc_ln67_7_reg_1387;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter2_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter3_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter4_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter5_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter6_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter7_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter8_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter9_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter10_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter11_reg;
reg   [16:0] trunc_ln67_7_reg_1387_pp0_iter12_reg;
reg   [0:0] tmp_reg_1395;
reg   [0:0] tmp_1_reg_1400;
reg   [0:0] tmp_1_reg_1400_pp0_iter2_reg;
reg   [0:0] tmp_2_reg_1405;
reg   [0:0] tmp_2_reg_1405_pp0_iter2_reg;
reg   [0:0] tmp_2_reg_1405_pp0_iter3_reg;
reg   [0:0] tmp_3_reg_1410;
reg   [0:0] tmp_3_reg_1410_pp0_iter2_reg;
reg   [0:0] tmp_3_reg_1410_pp0_iter3_reg;
reg   [0:0] tmp_3_reg_1410_pp0_iter4_reg;
reg   [0:0] tmp_4_reg_1415;
reg   [0:0] tmp_4_reg_1415_pp0_iter2_reg;
reg   [0:0] tmp_4_reg_1415_pp0_iter3_reg;
reg   [0:0] tmp_4_reg_1415_pp0_iter4_reg;
reg   [0:0] tmp_4_reg_1415_pp0_iter5_reg;
reg   [0:0] tmp_5_reg_1420;
reg   [0:0] tmp_5_reg_1420_pp0_iter2_reg;
reg   [0:0] tmp_5_reg_1420_pp0_iter3_reg;
reg   [0:0] tmp_5_reg_1420_pp0_iter4_reg;
reg   [0:0] tmp_5_reg_1420_pp0_iter5_reg;
reg   [0:0] tmp_5_reg_1420_pp0_iter6_reg;
reg   [0:0] tmp_6_reg_1425;
reg   [0:0] tmp_6_reg_1425_pp0_iter2_reg;
reg   [0:0] tmp_6_reg_1425_pp0_iter3_reg;
reg   [0:0] tmp_6_reg_1425_pp0_iter4_reg;
reg   [0:0] tmp_6_reg_1425_pp0_iter5_reg;
reg   [0:0] tmp_6_reg_1425_pp0_iter6_reg;
reg   [0:0] tmp_6_reg_1425_pp0_iter7_reg;
reg   [0:0] tmp_7_reg_1430;
reg   [0:0] tmp_7_reg_1430_pp0_iter2_reg;
reg   [0:0] tmp_7_reg_1430_pp0_iter3_reg;
reg   [0:0] tmp_7_reg_1430_pp0_iter4_reg;
reg   [0:0] tmp_7_reg_1430_pp0_iter5_reg;
reg   [0:0] tmp_7_reg_1430_pp0_iter6_reg;
reg   [0:0] tmp_7_reg_1430_pp0_iter7_reg;
reg   [0:0] tmp_7_reg_1430_pp0_iter8_reg;
wire   [16:0] select_ln99_fu_478_p3;
reg   [16:0] select_ln99_reg_1435;
wire   [15:0] trunc_ln224_fu_484_p1;
reg   [15:0] trunc_ln224_reg_1440;
wire   [15:0] select_ln99_1_fu_493_p3;
reg   [15:0] select_ln99_1_reg_1445;
wire   [16:0] select_ln99_2_fu_505_p3;
reg   [16:0] select_ln99_2_reg_1451;
wire   [15:0] trunc_ln224_1_fu_511_p1;
reg   [15:0] trunc_ln224_1_reg_1456;
wire   [15:0] select_ln99_3_fu_523_p3;
reg   [15:0] select_ln99_3_reg_1461;
wire   [16:0] select_ln99_4_fu_534_p3;
reg   [16:0] select_ln99_4_reg_1467;
wire   [15:0] trunc_ln224_2_fu_540_p1;
reg   [15:0] trunc_ln224_2_reg_1472;
wire   [15:0] select_ln99_5_fu_552_p3;
reg   [15:0] select_ln99_5_reg_1477;
wire   [16:0] select_ln99_6_fu_563_p3;
reg   [16:0] select_ln99_6_reg_1483;
wire   [15:0] trunc_ln224_3_fu_569_p1;
reg   [15:0] trunc_ln224_3_reg_1488;
wire   [15:0] select_ln99_7_fu_581_p3;
reg   [15:0] select_ln99_7_reg_1493;
wire   [16:0] select_ln99_8_fu_592_p3;
reg   [16:0] select_ln99_8_reg_1499;
wire   [15:0] trunc_ln224_4_fu_598_p1;
reg   [15:0] trunc_ln224_4_reg_1504;
wire   [15:0] select_ln99_9_fu_610_p3;
reg   [15:0] select_ln99_9_reg_1509;
wire   [16:0] select_ln99_10_fu_621_p3;
reg   [16:0] select_ln99_10_reg_1515;
wire   [15:0] trunc_ln224_5_fu_627_p1;
reg   [15:0] trunc_ln224_5_reg_1520;
wire   [15:0] select_ln99_11_fu_639_p3;
reg   [15:0] select_ln99_11_reg_1525;
wire   [16:0] select_ln99_12_fu_650_p3;
reg   [16:0] select_ln99_12_reg_1531;
wire   [15:0] trunc_ln224_6_fu_656_p1;
reg   [15:0] trunc_ln224_6_reg_1536;
wire   [15:0] select_ln99_13_fu_668_p3;
reg   [15:0] select_ln99_13_reg_1541;
wire   [16:0] select_ln99_14_fu_679_p3;
reg   [16:0] select_ln99_14_reg_1547;
wire   [15:0] trunc_ln224_7_fu_685_p1;
reg   [15:0] trunc_ln224_7_reg_1552;
wire   [15:0] abs_max_fu_697_p3;
reg   [15:0] abs_max_reg_1557;
reg   [0:0] tmp_8_reg_1563;
wire   [0:0] tmp_8_reg_1563_pp0_iter11_reg;
reg   [0:0] tmp_9_reg_1567;
wire   [0:0] tmp_9_reg_1567_pp0_iter11_reg;
reg   [0:0] tmp_10_reg_1571;
wire   [0:0] tmp_10_reg_1571_pp0_iter11_reg;
reg   [0:0] tmp_11_reg_1575;
wire   [0:0] tmp_11_reg_1575_pp0_iter11_reg;
reg   [0:0] tmp_12_reg_1579;
wire   [0:0] tmp_12_reg_1579_pp0_iter11_reg;
reg   [0:0] tmp_13_reg_1583;
wire   [0:0] tmp_13_reg_1583_pp0_iter11_reg;
reg   [0:0] tmp_14_reg_1587;
wire   [0:0] tmp_14_reg_1587_pp0_iter11_reg;
reg   [0:0] tmp_15_reg_1591;
wire   [0:0] tmp_15_reg_1591_pp0_iter11_reg;
reg   [0:0] tmp_16_reg_1595;
wire   [0:0] tmp_16_reg_1595_pp0_iter11_reg;
reg   [0:0] tmp_17_reg_1599;
wire   [0:0] tmp_17_reg_1599_pp0_iter11_reg;
reg   [0:0] tmp_18_reg_1603;
wire   [0:0] tmp_18_reg_1603_pp0_iter11_reg;
reg   [0:0] tmp_19_reg_1607;
wire   [0:0] tmp_19_reg_1607_pp0_iter11_reg;
reg   [0:0] tmp_20_reg_1611;
wire   [0:0] tmp_20_reg_1611_pp0_iter11_reg;
reg   [0:0] tmp_21_reg_1615;
wire   [0:0] tmp_21_reg_1615_pp0_iter11_reg;
reg   [0:0] tmp_22_reg_1619;
wire   [0:0] tmp_22_reg_1619_pp0_iter11_reg;
wire   [0:0] trunc_ln16_fu_841_p1;
reg   [0:0] trunc_ln16_reg_1623;
wire   [3:0] s_val_fu_865_p3;
reg   [3:0] s_val_reg_1628;
reg   [3:0] s_val_reg_1628_pp0_iter13_reg;
reg   [3:0] s_val_reg_1628_pp0_iter14_reg;
reg   [3:0] s_val_reg_1628_pp0_iter15_reg;
wire   [0:0] icmp_ln118_fu_873_p2;
reg   [0:0] icmp_ln118_reg_1635;
wire   [0:0] icmp_ln118_reg_1635_pp0_iter13_reg;
wire   [16:0] ashr_ln119_fu_887_p2;
reg   [16:0] ashr_ln119_reg_1639;
wire   [16:0] ashr_ln119_1_fu_892_p2;
reg   [16:0] ashr_ln119_1_reg_1644;
wire   [16:0] ashr_ln119_2_fu_897_p2;
reg   [16:0] ashr_ln119_2_reg_1649;
wire   [16:0] ashr_ln119_3_fu_902_p2;
reg   [16:0] ashr_ln119_3_reg_1654;
wire   [16:0] ashr_ln119_4_fu_907_p2;
reg   [16:0] ashr_ln119_4_reg_1659;
wire   [16:0] ashr_ln119_5_fu_912_p2;
reg   [16:0] ashr_ln119_5_reg_1664;
wire   [16:0] ashr_ln119_6_fu_917_p2;
reg   [16:0] ashr_ln119_6_reg_1669;
wire   [16:0] ashr_ln119_7_fu_922_p2;
reg   [16:0] ashr_ln119_7_reg_1674;
wire  signed [16:0] sext_ln121_fu_942_p1;
wire  signed [16:0] sext_ln121_1_fu_961_p1;
wire  signed [16:0] sext_ln121_2_fu_980_p1;
wire  signed [16:0] sext_ln121_3_fu_999_p1;
wire  signed [16:0] sext_ln121_4_fu_1018_p1;
wire  signed [16:0] sext_ln121_5_fu_1037_p1;
wire  signed [16:0] sext_ln121_6_fu_1056_p1;
wire  signed [16:0] sext_ln121_7_fu_1075_p1;
wire   [7:0] select_ln123_fu_1099_p3;
reg   [7:0] select_ln123_reg_1719;
wire   [7:0] select_ln123_1_fu_1127_p3;
reg   [7:0] select_ln123_1_reg_1724;
wire   [7:0] select_ln123_2_fu_1175_p3;
reg   [7:0] select_ln123_2_reg_1729;
wire   [7:0] select_ln123_3_fu_1223_p3;
reg   [7:0] select_ln123_3_reg_1734;
wire   [7:0] select_ln123_4_fu_1271_p3;
reg   [7:0] select_ln123_4_reg_1739;
wire   [7:0] select_ln123_5_fu_1279_p3;
reg   [7:0] select_ln123_5_reg_1744;
wire   [7:0] select_ln123_6_fu_1287_p3;
reg   [7:0] select_ln123_6_reg_1749;
wire   [7:0] select_ln123_7_fu_1295_p3;
reg   [7:0] select_ln123_7_reg_1754;
reg   [4:0] ap_phi_mux_s_val_1_phi_fu_189_p32;
wire   [4:0] ap_phi_reg_pp0_iter12_s_val_1_reg_186;
wire   [4:0] select_ln16_fu_845_p3;
wire   [16:0] ap_phi_reg_pp0_iter0_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter1_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter2_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter3_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter4_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter5_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter6_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter7_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter8_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter9_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter10_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter11_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter12_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter13_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter14_q_val_reg_238;
reg   [16:0] ap_phi_reg_pp0_iter15_q_val_reg_238;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_reg_247;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_reg_247;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_49_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_49_reg_256;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_50_reg_265;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_50_reg_265;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_51_reg_274;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_51_reg_274;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_52_reg_283;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_52_reg_283;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_53_reg_292;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_53_reg_292;
wire   [16:0] ap_phi_reg_pp0_iter0_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter1_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter2_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter3_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter4_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter5_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter6_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter7_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter8_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter9_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter10_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter11_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter12_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter13_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter14_empty_54_reg_301;
reg   [16:0] ap_phi_reg_pp0_iter15_empty_54_reg_301;
reg   [10:0] indvar_flatten10_fu_162;
wire   [10:0] add_ln61_fu_324_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_indvar_flatten10_load;
wire   [16:0] sub_ln99_fu_473_p2;
wire   [0:0] icmp_ln224_fu_488_p2;
wire   [16:0] sub_ln99_1_fu_500_p2;
wire   [16:0] zext_ln99_fu_515_p1;
wire   [0:0] icmp_ln224_1_fu_518_p2;
wire   [16:0] sub_ln99_2_fu_529_p2;
wire   [16:0] zext_ln99_1_fu_544_p1;
wire   [0:0] icmp_ln224_2_fu_547_p2;
wire   [16:0] sub_ln99_3_fu_558_p2;
wire   [16:0] zext_ln99_2_fu_573_p1;
wire   [0:0] icmp_ln224_3_fu_576_p2;
wire   [16:0] sub_ln99_4_fu_587_p2;
wire   [16:0] zext_ln99_3_fu_602_p1;
wire   [0:0] icmp_ln224_4_fu_605_p2;
wire   [16:0] sub_ln99_5_fu_616_p2;
wire   [16:0] zext_ln99_4_fu_631_p1;
wire   [0:0] icmp_ln224_5_fu_634_p2;
wire   [16:0] sub_ln99_6_fu_645_p2;
wire   [16:0] zext_ln99_5_fu_660_p1;
wire   [0:0] icmp_ln224_6_fu_663_p2;
wire   [16:0] sub_ln99_7_fu_674_p2;
wire   [16:0] zext_ln99_6_fu_689_p1;
wire   [0:0] icmp_ln224_7_fu_692_p2;
wire   [0:0] icmp_ln12_fu_703_p2;
wire   [15:0] x_1_fu_708_p2;
wire   [15:0] x_2_fu_713_p3;
wire   [0:0] tmp_23_fu_853_p3;
wire   [3:0] trunc_ln108_fu_861_p1;
wire   [3:0] add_ln119_fu_878_p2;
wire   [16:0] zext_ln119_fu_883_p1;
wire   [16:0] add_ln120_fu_927_p2;
wire   [15:0] trunc_ln121_1_fu_932_p4;
wire   [16:0] add_ln120_1_fu_946_p2;
wire   [15:0] trunc_ln_fu_951_p4;
wire   [16:0] add_ln120_2_fu_965_p2;
wire   [15:0] trunc_ln121_2_fu_970_p4;
wire   [16:0] add_ln120_3_fu_984_p2;
wire   [15:0] trunc_ln121_3_fu_989_p4;
wire   [16:0] add_ln120_4_fu_1003_p2;
wire   [15:0] trunc_ln121_4_fu_1008_p4;
wire   [16:0] add_ln120_5_fu_1022_p2;
wire   [15:0] trunc_ln121_5_fu_1027_p4;
wire   [16:0] add_ln120_6_fu_1041_p2;
wire   [15:0] trunc_ln121_6_fu_1046_p4;
wire   [16:0] add_ln120_7_fu_1060_p2;
wire   [15:0] trunc_ln121_7_fu_1065_p4;
wire   [9:0] tmp_24_fu_1079_p4;
wire   [0:0] icmp_ln200_fu_1089_p2;
wire   [7:0] trunc_ln123_fu_1095_p1;
wire   [9:0] tmp_25_fu_1107_p4;
wire   [0:0] icmp_ln200_1_fu_1117_p2;
wire   [7:0] trunc_ln123_1_fu_1123_p1;
wire   [9:0] tmp_26_fu_1135_p4;
wire   [9:0] tmp_27_fu_1155_p4;
wire   [0:0] icmp_ln200_3_fu_1165_p2;
wire   [7:0] trunc_ln123_3_fu_1171_p1;
wire   [9:0] tmp_28_fu_1183_p4;
wire   [9:0] tmp_29_fu_1203_p4;
wire   [0:0] icmp_ln200_5_fu_1213_p2;
wire   [7:0] trunc_ln123_5_fu_1219_p1;
wire   [9:0] tmp_30_fu_1231_p4;
wire   [9:0] tmp_31_fu_1251_p4;
wire   [0:0] icmp_ln200_7_fu_1261_p2;
wire   [7:0] trunc_ln123_7_fu_1267_p1;
wire   [0:0] icmp_ln200_2_fu_1145_p2;
wire   [7:0] trunc_ln123_2_fu_1151_p1;
wire   [0:0] icmp_ln200_4_fu_1193_p2;
wire   [7:0] trunc_ln123_4_fu_1199_p1;
wire   [0:0] icmp_ln200_6_fu_1241_p2;
wire   [7:0] trunc_ln123_6_fu_1247_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg   [1:0] ap_NS_iter16_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
wire    ap_ST_iter15_fsm_state16_blk;
reg    ap_ST_iter16_fsm_state17_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_1885;
reg    ap_condition_1890;
reg    ap_condition_1896;
reg    ap_condition_1903;
reg    ap_condition_1911;
reg    ap_condition_1920;
reg    ap_condition_1930;
reg    ap_condition_1941;
reg    ap_condition_1953;
reg    ap_condition_1966;
reg    ap_condition_1980;
reg    ap_condition_1995;
reg    ap_condition_2011;
reg    ap_condition_2027;
reg    ap_condition_337;
reg    ap_condition_339;
reg    ap_condition_272;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_CS_iter16_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten10_fu_162 = 11'd0;
end

ROPE_QK_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter16_fsm <= ap_ST_iter16_fsm_state0;
    end else begin
        ap_CS_iter16_fsm <= ap_NS_iter16_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_49_reg_256 <= trunc_ln67_4_reg_1363_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_49_reg_256 <= ap_phi_reg_pp0_iter13_empty_49_reg_256;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_50_reg_265 <= trunc_ln67_2_reg_1347_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_50_reg_265 <= ap_phi_reg_pp0_iter13_empty_50_reg_265;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_51_reg_274 <= trunc_ln67_reg_1331_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_51_reg_274 <= ap_phi_reg_pp0_iter13_empty_51_reg_274;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_52_reg_283 <= trunc_ln67_1_reg_1339_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_52_reg_283 <= ap_phi_reg_pp0_iter13_empty_52_reg_283;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_53_reg_292 <= trunc_ln67_3_reg_1355_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_53_reg_292 <= ap_phi_reg_pp0_iter13_empty_53_reg_292;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_54_reg_301 <= trunc_ln67_5_reg_1371_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_54_reg_301 <= ap_phi_reg_pp0_iter13_empty_54_reg_301;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_reg_247 <= trunc_ln67_6_reg_1379_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_reg_247 <= ap_phi_reg_pp0_iter13_empty_reg_247;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if (((icmp_ln118_fu_873_p2 == 1'd1) & (icmp_ln61_reg_1327_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_q_val_reg_238 <= trunc_ln67_7_reg_1387_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_q_val_reg_238 <= ap_phi_reg_pp0_iter13_q_val_reg_238;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_49_reg_256 <= sext_ln121_4_fu_1018_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_49_reg_256 <= ap_phi_reg_pp0_iter14_empty_49_reg_256;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_50_reg_265 <= sext_ln121_2_fu_980_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_50_reg_265 <= ap_phi_reg_pp0_iter14_empty_50_reg_265;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_51_reg_274 <= sext_ln121_fu_942_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_51_reg_274 <= ap_phi_reg_pp0_iter14_empty_51_reg_274;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_52_reg_283 <= sext_ln121_1_fu_961_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_52_reg_283 <= ap_phi_reg_pp0_iter14_empty_52_reg_283;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_53_reg_292 <= sext_ln121_3_fu_999_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_53_reg_292 <= ap_phi_reg_pp0_iter14_empty_53_reg_292;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_54_reg_301 <= sext_ln121_5_fu_1037_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_54_reg_301 <= ap_phi_reg_pp0_iter14_empty_54_reg_301;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_empty_reg_247 <= sext_ln121_6_fu_1056_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_reg_247 <= ap_phi_reg_pp0_iter14_empty_reg_247;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if (((icmp_ln118_reg_1635_pp0_iter13_reg == 1'd0) & (icmp_ln61_reg_1327_pp0_iter13_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter15_q_val_reg_238 <= sext_ln121_7_fu_1075_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_q_val_reg_238 <= ap_phi_reg_pp0_iter14_q_val_reg_238;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_272)) begin
        if ((icmp_ln61_fu_318_p2 == 1'd0)) begin
            indvar_flatten10_fu_162 <= add_ln61_fu_324_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_162 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        abs_max_reg_1557 <= abs_max_fu_697_p3;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_phi_reg_pp0_iter11_empty_49_reg_256 <= ap_phi_reg_pp0_iter10_empty_49_reg_256;
        ap_phi_reg_pp0_iter11_empty_50_reg_265 <= ap_phi_reg_pp0_iter10_empty_50_reg_265;
        ap_phi_reg_pp0_iter11_empty_51_reg_274 <= ap_phi_reg_pp0_iter10_empty_51_reg_274;
        ap_phi_reg_pp0_iter11_empty_52_reg_283 <= ap_phi_reg_pp0_iter10_empty_52_reg_283;
        ap_phi_reg_pp0_iter11_empty_53_reg_292 <= ap_phi_reg_pp0_iter10_empty_53_reg_292;
        ap_phi_reg_pp0_iter11_empty_54_reg_301 <= ap_phi_reg_pp0_iter10_empty_54_reg_301;
        ap_phi_reg_pp0_iter11_empty_reg_247 <= ap_phi_reg_pp0_iter10_empty_reg_247;
        ap_phi_reg_pp0_iter11_q_val_reg_238 <= ap_phi_reg_pp0_iter10_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter10_reg <= icmp_ln61_reg_1327_pp0_iter9_reg;
        trunc_ln67_1_reg_1339_pp0_iter10_reg <= trunc_ln67_1_reg_1339_pp0_iter9_reg;
        trunc_ln67_2_reg_1347_pp0_iter10_reg <= trunc_ln67_2_reg_1347_pp0_iter9_reg;
        trunc_ln67_3_reg_1355_pp0_iter10_reg <= trunc_ln67_3_reg_1355_pp0_iter9_reg;
        trunc_ln67_4_reg_1363_pp0_iter10_reg <= trunc_ln67_4_reg_1363_pp0_iter9_reg;
        trunc_ln67_5_reg_1371_pp0_iter10_reg <= trunc_ln67_5_reg_1371_pp0_iter9_reg;
        trunc_ln67_6_reg_1379_pp0_iter10_reg <= trunc_ln67_6_reg_1379_pp0_iter9_reg;
        trunc_ln67_7_reg_1387_pp0_iter10_reg <= trunc_ln67_7_reg_1387_pp0_iter9_reg;
        trunc_ln67_reg_1331_pp0_iter10_reg <= trunc_ln67_reg_1331_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_phi_reg_pp0_iter10_empty_49_reg_256 <= ap_phi_reg_pp0_iter9_empty_49_reg_256;
        ap_phi_reg_pp0_iter10_empty_50_reg_265 <= ap_phi_reg_pp0_iter9_empty_50_reg_265;
        ap_phi_reg_pp0_iter10_empty_51_reg_274 <= ap_phi_reg_pp0_iter9_empty_51_reg_274;
        ap_phi_reg_pp0_iter10_empty_52_reg_283 <= ap_phi_reg_pp0_iter9_empty_52_reg_283;
        ap_phi_reg_pp0_iter10_empty_53_reg_292 <= ap_phi_reg_pp0_iter9_empty_53_reg_292;
        ap_phi_reg_pp0_iter10_empty_54_reg_301 <= ap_phi_reg_pp0_iter9_empty_54_reg_301;
        ap_phi_reg_pp0_iter10_empty_reg_247 <= ap_phi_reg_pp0_iter9_empty_reg_247;
        ap_phi_reg_pp0_iter10_q_val_reg_238 <= ap_phi_reg_pp0_iter9_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter9_reg <= icmp_ln61_reg_1327_pp0_iter8_reg;
        select_ln99_13_reg_1541 <= select_ln99_13_fu_668_p3;
        select_ln99_14_reg_1547 <= select_ln99_14_fu_679_p3;
        trunc_ln224_7_reg_1552 <= trunc_ln224_7_fu_685_p1;
        trunc_ln67_1_reg_1339_pp0_iter9_reg <= trunc_ln67_1_reg_1339_pp0_iter8_reg;
        trunc_ln67_2_reg_1347_pp0_iter9_reg <= trunc_ln67_2_reg_1347_pp0_iter8_reg;
        trunc_ln67_3_reg_1355_pp0_iter9_reg <= trunc_ln67_3_reg_1355_pp0_iter8_reg;
        trunc_ln67_4_reg_1363_pp0_iter9_reg <= trunc_ln67_4_reg_1363_pp0_iter8_reg;
        trunc_ln67_5_reg_1371_pp0_iter9_reg <= trunc_ln67_5_reg_1371_pp0_iter8_reg;
        trunc_ln67_6_reg_1379_pp0_iter9_reg <= trunc_ln67_6_reg_1379_pp0_iter8_reg;
        trunc_ln67_7_reg_1387_pp0_iter9_reg <= trunc_ln67_7_reg_1387_pp0_iter8_reg;
        trunc_ln67_reg_1331_pp0_iter9_reg <= trunc_ln67_reg_1331_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_phi_reg_pp0_iter12_empty_49_reg_256 <= ap_phi_reg_pp0_iter11_empty_49_reg_256;
        ap_phi_reg_pp0_iter12_empty_50_reg_265 <= ap_phi_reg_pp0_iter11_empty_50_reg_265;
        ap_phi_reg_pp0_iter12_empty_51_reg_274 <= ap_phi_reg_pp0_iter11_empty_51_reg_274;
        ap_phi_reg_pp0_iter12_empty_52_reg_283 <= ap_phi_reg_pp0_iter11_empty_52_reg_283;
        ap_phi_reg_pp0_iter12_empty_53_reg_292 <= ap_phi_reg_pp0_iter11_empty_53_reg_292;
        ap_phi_reg_pp0_iter12_empty_54_reg_301 <= ap_phi_reg_pp0_iter11_empty_54_reg_301;
        ap_phi_reg_pp0_iter12_empty_reg_247 <= ap_phi_reg_pp0_iter11_empty_reg_247;
        ap_phi_reg_pp0_iter12_q_val_reg_238 <= ap_phi_reg_pp0_iter11_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter11_reg <= icmp_ln61_reg_1327_pp0_iter10_reg;
        tmp_10_reg_1571 <= x_2_fu_713_p3[32'd13];
        tmp_11_reg_1575 <= x_2_fu_713_p3[32'd12];
        tmp_12_reg_1579 <= x_2_fu_713_p3[32'd11];
        tmp_13_reg_1583 <= x_2_fu_713_p3[32'd10];
        tmp_14_reg_1587 <= x_2_fu_713_p3[32'd9];
        tmp_15_reg_1591 <= x_2_fu_713_p3[32'd8];
        tmp_16_reg_1595 <= x_2_fu_713_p3[32'd7];
        tmp_17_reg_1599 <= x_2_fu_713_p3[32'd6];
        tmp_18_reg_1603 <= x_2_fu_713_p3[32'd5];
        tmp_19_reg_1607 <= x_2_fu_713_p3[32'd4];
        tmp_20_reg_1611 <= x_2_fu_713_p3[32'd3];
        tmp_21_reg_1615 <= x_2_fu_713_p3[32'd2];
        tmp_22_reg_1619 <= x_2_fu_713_p3[32'd1];
        tmp_8_reg_1563 <= x_2_fu_713_p3[32'd15];
        tmp_9_reg_1567 <= x_2_fu_713_p3[32'd14];
        trunc_ln16_reg_1623 <= trunc_ln16_fu_841_p1;
        trunc_ln67_1_reg_1339_pp0_iter11_reg <= trunc_ln67_1_reg_1339_pp0_iter10_reg;
        trunc_ln67_2_reg_1347_pp0_iter11_reg <= trunc_ln67_2_reg_1347_pp0_iter10_reg;
        trunc_ln67_3_reg_1355_pp0_iter11_reg <= trunc_ln67_3_reg_1355_pp0_iter10_reg;
        trunc_ln67_4_reg_1363_pp0_iter11_reg <= trunc_ln67_4_reg_1363_pp0_iter10_reg;
        trunc_ln67_5_reg_1371_pp0_iter11_reg <= trunc_ln67_5_reg_1371_pp0_iter10_reg;
        trunc_ln67_6_reg_1379_pp0_iter11_reg <= trunc_ln67_6_reg_1379_pp0_iter10_reg;
        trunc_ln67_7_reg_1387_pp0_iter11_reg <= trunc_ln67_7_reg_1387_pp0_iter10_reg;
        trunc_ln67_reg_1331_pp0_iter11_reg <= trunc_ln67_reg_1331_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_phi_reg_pp0_iter13_empty_49_reg_256 <= ap_phi_reg_pp0_iter12_empty_49_reg_256;
        ap_phi_reg_pp0_iter13_empty_50_reg_265 <= ap_phi_reg_pp0_iter12_empty_50_reg_265;
        ap_phi_reg_pp0_iter13_empty_51_reg_274 <= ap_phi_reg_pp0_iter12_empty_51_reg_274;
        ap_phi_reg_pp0_iter13_empty_52_reg_283 <= ap_phi_reg_pp0_iter12_empty_52_reg_283;
        ap_phi_reg_pp0_iter13_empty_53_reg_292 <= ap_phi_reg_pp0_iter12_empty_53_reg_292;
        ap_phi_reg_pp0_iter13_empty_54_reg_301 <= ap_phi_reg_pp0_iter12_empty_54_reg_301;
        ap_phi_reg_pp0_iter13_empty_reg_247 <= ap_phi_reg_pp0_iter12_empty_reg_247;
        ap_phi_reg_pp0_iter13_q_val_reg_238 <= ap_phi_reg_pp0_iter12_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter12_reg <= icmp_ln61_reg_1327_pp0_iter11_reg;
        s_val_reg_1628 <= s_val_fu_865_p3;
        trunc_ln67_1_reg_1339_pp0_iter12_reg <= trunc_ln67_1_reg_1339_pp0_iter11_reg;
        trunc_ln67_2_reg_1347_pp0_iter12_reg <= trunc_ln67_2_reg_1347_pp0_iter11_reg;
        trunc_ln67_3_reg_1355_pp0_iter12_reg <= trunc_ln67_3_reg_1355_pp0_iter11_reg;
        trunc_ln67_4_reg_1363_pp0_iter12_reg <= trunc_ln67_4_reg_1363_pp0_iter11_reg;
        trunc_ln67_5_reg_1371_pp0_iter12_reg <= trunc_ln67_5_reg_1371_pp0_iter11_reg;
        trunc_ln67_6_reg_1379_pp0_iter12_reg <= trunc_ln67_6_reg_1379_pp0_iter11_reg;
        trunc_ln67_7_reg_1387_pp0_iter12_reg <= trunc_ln67_7_reg_1387_pp0_iter11_reg;
        trunc_ln67_reg_1331_pp0_iter12_reg <= trunc_ln67_reg_1331_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ashr_ln119_1_reg_1644 <= ashr_ln119_1_fu_892_p2;
        ashr_ln119_2_reg_1649 <= ashr_ln119_2_fu_897_p2;
        ashr_ln119_3_reg_1654 <= ashr_ln119_3_fu_902_p2;
        ashr_ln119_4_reg_1659 <= ashr_ln119_4_fu_907_p2;
        ashr_ln119_5_reg_1664 <= ashr_ln119_5_fu_912_p2;
        ashr_ln119_6_reg_1669 <= ashr_ln119_6_fu_917_p2;
        ashr_ln119_7_reg_1674 <= ashr_ln119_7_fu_922_p2;
        ashr_ln119_reg_1639 <= ashr_ln119_fu_887_p2;
        icmp_ln118_reg_1635 <= icmp_ln118_fu_873_p2;
        icmp_ln61_reg_1327_pp0_iter13_reg <= icmp_ln61_reg_1327_pp0_iter12_reg;
        s_val_reg_1628_pp0_iter13_reg <= s_val_reg_1628;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        icmp_ln61_reg_1327_pp0_iter14_reg <= icmp_ln61_reg_1327_pp0_iter13_reg;
        s_val_reg_1628_pp0_iter14_reg <= s_val_reg_1628_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_empty_49_reg_256 <= ap_phi_reg_pp0_iter0_empty_49_reg_256;
        ap_phi_reg_pp0_iter1_empty_50_reg_265 <= ap_phi_reg_pp0_iter0_empty_50_reg_265;
        ap_phi_reg_pp0_iter1_empty_51_reg_274 <= ap_phi_reg_pp0_iter0_empty_51_reg_274;
        ap_phi_reg_pp0_iter1_empty_52_reg_283 <= ap_phi_reg_pp0_iter0_empty_52_reg_283;
        ap_phi_reg_pp0_iter1_empty_53_reg_292 <= ap_phi_reg_pp0_iter0_empty_53_reg_292;
        ap_phi_reg_pp0_iter1_empty_54_reg_301 <= ap_phi_reg_pp0_iter0_empty_54_reg_301;
        ap_phi_reg_pp0_iter1_empty_reg_247 <= ap_phi_reg_pp0_iter0_empty_reg_247;
        ap_phi_reg_pp0_iter1_q_val_reg_238 <= ap_phi_reg_pp0_iter0_q_val_reg_238;
        icmp_ln61_reg_1327 <= icmp_ln61_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_empty_49_reg_256 <= ap_phi_reg_pp0_iter1_empty_49_reg_256;
        ap_phi_reg_pp0_iter2_empty_50_reg_265 <= ap_phi_reg_pp0_iter1_empty_50_reg_265;
        ap_phi_reg_pp0_iter2_empty_51_reg_274 <= ap_phi_reg_pp0_iter1_empty_51_reg_274;
        ap_phi_reg_pp0_iter2_empty_52_reg_283 <= ap_phi_reg_pp0_iter1_empty_52_reg_283;
        ap_phi_reg_pp0_iter2_empty_53_reg_292 <= ap_phi_reg_pp0_iter1_empty_53_reg_292;
        ap_phi_reg_pp0_iter2_empty_54_reg_301 <= ap_phi_reg_pp0_iter1_empty_54_reg_301;
        ap_phi_reg_pp0_iter2_empty_reg_247 <= ap_phi_reg_pp0_iter1_empty_reg_247;
        ap_phi_reg_pp0_iter2_q_val_reg_238 <= ap_phi_reg_pp0_iter1_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter1_reg <= icmp_ln61_reg_1327;
        tmp_1_reg_1400 <= rot_stream_dout[32'd33];
        tmp_2_reg_1405 <= rot_stream_dout[32'd50];
        tmp_3_reg_1410 <= rot_stream_dout[32'd67];
        tmp_4_reg_1415 <= rot_stream_dout[32'd84];
        tmp_5_reg_1420 <= rot_stream_dout[32'd101];
        tmp_6_reg_1425 <= rot_stream_dout[32'd118];
        tmp_7_reg_1430 <= rot_stream_dout[32'd135];
        tmp_reg_1395 <= rot_stream_dout[32'd16];
        trunc_ln67_1_reg_1339 <= {{rot_stream_dout[33:17]}};
        trunc_ln67_2_reg_1347 <= {{rot_stream_dout[50:34]}};
        trunc_ln67_3_reg_1355 <= {{rot_stream_dout[67:51]}};
        trunc_ln67_4_reg_1363 <= {{rot_stream_dout[84:68]}};
        trunc_ln67_5_reg_1371 <= {{rot_stream_dout[101:85]}};
        trunc_ln67_6_reg_1379 <= {{rot_stream_dout[118:102]}};
        trunc_ln67_7_reg_1387 <= {{rot_stream_dout[135:119]}};
        trunc_ln67_reg_1331 <= trunc_ln67_fu_335_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_phi_reg_pp0_iter3_empty_49_reg_256 <= ap_phi_reg_pp0_iter2_empty_49_reg_256;
        ap_phi_reg_pp0_iter3_empty_50_reg_265 <= ap_phi_reg_pp0_iter2_empty_50_reg_265;
        ap_phi_reg_pp0_iter3_empty_51_reg_274 <= ap_phi_reg_pp0_iter2_empty_51_reg_274;
        ap_phi_reg_pp0_iter3_empty_52_reg_283 <= ap_phi_reg_pp0_iter2_empty_52_reg_283;
        ap_phi_reg_pp0_iter3_empty_53_reg_292 <= ap_phi_reg_pp0_iter2_empty_53_reg_292;
        ap_phi_reg_pp0_iter3_empty_54_reg_301 <= ap_phi_reg_pp0_iter2_empty_54_reg_301;
        ap_phi_reg_pp0_iter3_empty_reg_247 <= ap_phi_reg_pp0_iter2_empty_reg_247;
        ap_phi_reg_pp0_iter3_q_val_reg_238 <= ap_phi_reg_pp0_iter2_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter2_reg <= icmp_ln61_reg_1327_pp0_iter1_reg;
        select_ln99_reg_1435 <= select_ln99_fu_478_p3;
        tmp_1_reg_1400_pp0_iter2_reg <= tmp_1_reg_1400;
        tmp_2_reg_1405_pp0_iter2_reg <= tmp_2_reg_1405;
        tmp_3_reg_1410_pp0_iter2_reg <= tmp_3_reg_1410;
        tmp_4_reg_1415_pp0_iter2_reg <= tmp_4_reg_1415;
        tmp_5_reg_1420_pp0_iter2_reg <= tmp_5_reg_1420;
        tmp_6_reg_1425_pp0_iter2_reg <= tmp_6_reg_1425;
        tmp_7_reg_1430_pp0_iter2_reg <= tmp_7_reg_1430;
        trunc_ln224_reg_1440 <= trunc_ln224_fu_484_p1;
        trunc_ln67_1_reg_1339_pp0_iter2_reg <= trunc_ln67_1_reg_1339;
        trunc_ln67_2_reg_1347_pp0_iter2_reg <= trunc_ln67_2_reg_1347;
        trunc_ln67_3_reg_1355_pp0_iter2_reg <= trunc_ln67_3_reg_1355;
        trunc_ln67_4_reg_1363_pp0_iter2_reg <= trunc_ln67_4_reg_1363;
        trunc_ln67_5_reg_1371_pp0_iter2_reg <= trunc_ln67_5_reg_1371;
        trunc_ln67_6_reg_1379_pp0_iter2_reg <= trunc_ln67_6_reg_1379;
        trunc_ln67_7_reg_1387_pp0_iter2_reg <= trunc_ln67_7_reg_1387;
        trunc_ln67_reg_1331_pp0_iter2_reg <= trunc_ln67_reg_1331;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_phi_reg_pp0_iter4_empty_49_reg_256 <= ap_phi_reg_pp0_iter3_empty_49_reg_256;
        ap_phi_reg_pp0_iter4_empty_50_reg_265 <= ap_phi_reg_pp0_iter3_empty_50_reg_265;
        ap_phi_reg_pp0_iter4_empty_51_reg_274 <= ap_phi_reg_pp0_iter3_empty_51_reg_274;
        ap_phi_reg_pp0_iter4_empty_52_reg_283 <= ap_phi_reg_pp0_iter3_empty_52_reg_283;
        ap_phi_reg_pp0_iter4_empty_53_reg_292 <= ap_phi_reg_pp0_iter3_empty_53_reg_292;
        ap_phi_reg_pp0_iter4_empty_54_reg_301 <= ap_phi_reg_pp0_iter3_empty_54_reg_301;
        ap_phi_reg_pp0_iter4_empty_reg_247 <= ap_phi_reg_pp0_iter3_empty_reg_247;
        ap_phi_reg_pp0_iter4_q_val_reg_238 <= ap_phi_reg_pp0_iter3_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter3_reg <= icmp_ln61_reg_1327_pp0_iter2_reg;
        select_ln99_1_reg_1445 <= select_ln99_1_fu_493_p3;
        select_ln99_2_reg_1451 <= select_ln99_2_fu_505_p3;
        tmp_2_reg_1405_pp0_iter3_reg <= tmp_2_reg_1405_pp0_iter2_reg;
        tmp_3_reg_1410_pp0_iter3_reg <= tmp_3_reg_1410_pp0_iter2_reg;
        tmp_4_reg_1415_pp0_iter3_reg <= tmp_4_reg_1415_pp0_iter2_reg;
        tmp_5_reg_1420_pp0_iter3_reg <= tmp_5_reg_1420_pp0_iter2_reg;
        tmp_6_reg_1425_pp0_iter3_reg <= tmp_6_reg_1425_pp0_iter2_reg;
        tmp_7_reg_1430_pp0_iter3_reg <= tmp_7_reg_1430_pp0_iter2_reg;
        trunc_ln224_1_reg_1456 <= trunc_ln224_1_fu_511_p1;
        trunc_ln67_1_reg_1339_pp0_iter3_reg <= trunc_ln67_1_reg_1339_pp0_iter2_reg;
        trunc_ln67_2_reg_1347_pp0_iter3_reg <= trunc_ln67_2_reg_1347_pp0_iter2_reg;
        trunc_ln67_3_reg_1355_pp0_iter3_reg <= trunc_ln67_3_reg_1355_pp0_iter2_reg;
        trunc_ln67_4_reg_1363_pp0_iter3_reg <= trunc_ln67_4_reg_1363_pp0_iter2_reg;
        trunc_ln67_5_reg_1371_pp0_iter3_reg <= trunc_ln67_5_reg_1371_pp0_iter2_reg;
        trunc_ln67_6_reg_1379_pp0_iter3_reg <= trunc_ln67_6_reg_1379_pp0_iter2_reg;
        trunc_ln67_7_reg_1387_pp0_iter3_reg <= trunc_ln67_7_reg_1387_pp0_iter2_reg;
        trunc_ln67_reg_1331_pp0_iter3_reg <= trunc_ln67_reg_1331_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_phi_reg_pp0_iter5_empty_49_reg_256 <= ap_phi_reg_pp0_iter4_empty_49_reg_256;
        ap_phi_reg_pp0_iter5_empty_50_reg_265 <= ap_phi_reg_pp0_iter4_empty_50_reg_265;
        ap_phi_reg_pp0_iter5_empty_51_reg_274 <= ap_phi_reg_pp0_iter4_empty_51_reg_274;
        ap_phi_reg_pp0_iter5_empty_52_reg_283 <= ap_phi_reg_pp0_iter4_empty_52_reg_283;
        ap_phi_reg_pp0_iter5_empty_53_reg_292 <= ap_phi_reg_pp0_iter4_empty_53_reg_292;
        ap_phi_reg_pp0_iter5_empty_54_reg_301 <= ap_phi_reg_pp0_iter4_empty_54_reg_301;
        ap_phi_reg_pp0_iter5_empty_reg_247 <= ap_phi_reg_pp0_iter4_empty_reg_247;
        ap_phi_reg_pp0_iter5_q_val_reg_238 <= ap_phi_reg_pp0_iter4_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter4_reg <= icmp_ln61_reg_1327_pp0_iter3_reg;
        select_ln99_3_reg_1461 <= select_ln99_3_fu_523_p3;
        select_ln99_4_reg_1467 <= select_ln99_4_fu_534_p3;
        tmp_3_reg_1410_pp0_iter4_reg <= tmp_3_reg_1410_pp0_iter3_reg;
        tmp_4_reg_1415_pp0_iter4_reg <= tmp_4_reg_1415_pp0_iter3_reg;
        tmp_5_reg_1420_pp0_iter4_reg <= tmp_5_reg_1420_pp0_iter3_reg;
        tmp_6_reg_1425_pp0_iter4_reg <= tmp_6_reg_1425_pp0_iter3_reg;
        tmp_7_reg_1430_pp0_iter4_reg <= tmp_7_reg_1430_pp0_iter3_reg;
        trunc_ln224_2_reg_1472 <= trunc_ln224_2_fu_540_p1;
        trunc_ln67_1_reg_1339_pp0_iter4_reg <= trunc_ln67_1_reg_1339_pp0_iter3_reg;
        trunc_ln67_2_reg_1347_pp0_iter4_reg <= trunc_ln67_2_reg_1347_pp0_iter3_reg;
        trunc_ln67_3_reg_1355_pp0_iter4_reg <= trunc_ln67_3_reg_1355_pp0_iter3_reg;
        trunc_ln67_4_reg_1363_pp0_iter4_reg <= trunc_ln67_4_reg_1363_pp0_iter3_reg;
        trunc_ln67_5_reg_1371_pp0_iter4_reg <= trunc_ln67_5_reg_1371_pp0_iter3_reg;
        trunc_ln67_6_reg_1379_pp0_iter4_reg <= trunc_ln67_6_reg_1379_pp0_iter3_reg;
        trunc_ln67_7_reg_1387_pp0_iter4_reg <= trunc_ln67_7_reg_1387_pp0_iter3_reg;
        trunc_ln67_reg_1331_pp0_iter4_reg <= trunc_ln67_reg_1331_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_phi_reg_pp0_iter6_empty_49_reg_256 <= ap_phi_reg_pp0_iter5_empty_49_reg_256;
        ap_phi_reg_pp0_iter6_empty_50_reg_265 <= ap_phi_reg_pp0_iter5_empty_50_reg_265;
        ap_phi_reg_pp0_iter6_empty_51_reg_274 <= ap_phi_reg_pp0_iter5_empty_51_reg_274;
        ap_phi_reg_pp0_iter6_empty_52_reg_283 <= ap_phi_reg_pp0_iter5_empty_52_reg_283;
        ap_phi_reg_pp0_iter6_empty_53_reg_292 <= ap_phi_reg_pp0_iter5_empty_53_reg_292;
        ap_phi_reg_pp0_iter6_empty_54_reg_301 <= ap_phi_reg_pp0_iter5_empty_54_reg_301;
        ap_phi_reg_pp0_iter6_empty_reg_247 <= ap_phi_reg_pp0_iter5_empty_reg_247;
        ap_phi_reg_pp0_iter6_q_val_reg_238 <= ap_phi_reg_pp0_iter5_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter5_reg <= icmp_ln61_reg_1327_pp0_iter4_reg;
        select_ln99_5_reg_1477 <= select_ln99_5_fu_552_p3;
        select_ln99_6_reg_1483 <= select_ln99_6_fu_563_p3;
        tmp_4_reg_1415_pp0_iter5_reg <= tmp_4_reg_1415_pp0_iter4_reg;
        tmp_5_reg_1420_pp0_iter5_reg <= tmp_5_reg_1420_pp0_iter4_reg;
        tmp_6_reg_1425_pp0_iter5_reg <= tmp_6_reg_1425_pp0_iter4_reg;
        tmp_7_reg_1430_pp0_iter5_reg <= tmp_7_reg_1430_pp0_iter4_reg;
        trunc_ln224_3_reg_1488 <= trunc_ln224_3_fu_569_p1;
        trunc_ln67_1_reg_1339_pp0_iter5_reg <= trunc_ln67_1_reg_1339_pp0_iter4_reg;
        trunc_ln67_2_reg_1347_pp0_iter5_reg <= trunc_ln67_2_reg_1347_pp0_iter4_reg;
        trunc_ln67_3_reg_1355_pp0_iter5_reg <= trunc_ln67_3_reg_1355_pp0_iter4_reg;
        trunc_ln67_4_reg_1363_pp0_iter5_reg <= trunc_ln67_4_reg_1363_pp0_iter4_reg;
        trunc_ln67_5_reg_1371_pp0_iter5_reg <= trunc_ln67_5_reg_1371_pp0_iter4_reg;
        trunc_ln67_6_reg_1379_pp0_iter5_reg <= trunc_ln67_6_reg_1379_pp0_iter4_reg;
        trunc_ln67_7_reg_1387_pp0_iter5_reg <= trunc_ln67_7_reg_1387_pp0_iter4_reg;
        trunc_ln67_reg_1331_pp0_iter5_reg <= trunc_ln67_reg_1331_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_phi_reg_pp0_iter7_empty_49_reg_256 <= ap_phi_reg_pp0_iter6_empty_49_reg_256;
        ap_phi_reg_pp0_iter7_empty_50_reg_265 <= ap_phi_reg_pp0_iter6_empty_50_reg_265;
        ap_phi_reg_pp0_iter7_empty_51_reg_274 <= ap_phi_reg_pp0_iter6_empty_51_reg_274;
        ap_phi_reg_pp0_iter7_empty_52_reg_283 <= ap_phi_reg_pp0_iter6_empty_52_reg_283;
        ap_phi_reg_pp0_iter7_empty_53_reg_292 <= ap_phi_reg_pp0_iter6_empty_53_reg_292;
        ap_phi_reg_pp0_iter7_empty_54_reg_301 <= ap_phi_reg_pp0_iter6_empty_54_reg_301;
        ap_phi_reg_pp0_iter7_empty_reg_247 <= ap_phi_reg_pp0_iter6_empty_reg_247;
        ap_phi_reg_pp0_iter7_q_val_reg_238 <= ap_phi_reg_pp0_iter6_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter6_reg <= icmp_ln61_reg_1327_pp0_iter5_reg;
        select_ln99_7_reg_1493 <= select_ln99_7_fu_581_p3;
        select_ln99_8_reg_1499 <= select_ln99_8_fu_592_p3;
        tmp_5_reg_1420_pp0_iter6_reg <= tmp_5_reg_1420_pp0_iter5_reg;
        tmp_6_reg_1425_pp0_iter6_reg <= tmp_6_reg_1425_pp0_iter5_reg;
        tmp_7_reg_1430_pp0_iter6_reg <= tmp_7_reg_1430_pp0_iter5_reg;
        trunc_ln224_4_reg_1504 <= trunc_ln224_4_fu_598_p1;
        trunc_ln67_1_reg_1339_pp0_iter6_reg <= trunc_ln67_1_reg_1339_pp0_iter5_reg;
        trunc_ln67_2_reg_1347_pp0_iter6_reg <= trunc_ln67_2_reg_1347_pp0_iter5_reg;
        trunc_ln67_3_reg_1355_pp0_iter6_reg <= trunc_ln67_3_reg_1355_pp0_iter5_reg;
        trunc_ln67_4_reg_1363_pp0_iter6_reg <= trunc_ln67_4_reg_1363_pp0_iter5_reg;
        trunc_ln67_5_reg_1371_pp0_iter6_reg <= trunc_ln67_5_reg_1371_pp0_iter5_reg;
        trunc_ln67_6_reg_1379_pp0_iter6_reg <= trunc_ln67_6_reg_1379_pp0_iter5_reg;
        trunc_ln67_7_reg_1387_pp0_iter6_reg <= trunc_ln67_7_reg_1387_pp0_iter5_reg;
        trunc_ln67_reg_1331_pp0_iter6_reg <= trunc_ln67_reg_1331_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_phi_reg_pp0_iter8_empty_49_reg_256 <= ap_phi_reg_pp0_iter7_empty_49_reg_256;
        ap_phi_reg_pp0_iter8_empty_50_reg_265 <= ap_phi_reg_pp0_iter7_empty_50_reg_265;
        ap_phi_reg_pp0_iter8_empty_51_reg_274 <= ap_phi_reg_pp0_iter7_empty_51_reg_274;
        ap_phi_reg_pp0_iter8_empty_52_reg_283 <= ap_phi_reg_pp0_iter7_empty_52_reg_283;
        ap_phi_reg_pp0_iter8_empty_53_reg_292 <= ap_phi_reg_pp0_iter7_empty_53_reg_292;
        ap_phi_reg_pp0_iter8_empty_54_reg_301 <= ap_phi_reg_pp0_iter7_empty_54_reg_301;
        ap_phi_reg_pp0_iter8_empty_reg_247 <= ap_phi_reg_pp0_iter7_empty_reg_247;
        ap_phi_reg_pp0_iter8_q_val_reg_238 <= ap_phi_reg_pp0_iter7_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter7_reg <= icmp_ln61_reg_1327_pp0_iter6_reg;
        select_ln99_10_reg_1515 <= select_ln99_10_fu_621_p3;
        select_ln99_9_reg_1509 <= select_ln99_9_fu_610_p3;
        tmp_6_reg_1425_pp0_iter7_reg <= tmp_6_reg_1425_pp0_iter6_reg;
        tmp_7_reg_1430_pp0_iter7_reg <= tmp_7_reg_1430_pp0_iter6_reg;
        trunc_ln224_5_reg_1520 <= trunc_ln224_5_fu_627_p1;
        trunc_ln67_1_reg_1339_pp0_iter7_reg <= trunc_ln67_1_reg_1339_pp0_iter6_reg;
        trunc_ln67_2_reg_1347_pp0_iter7_reg <= trunc_ln67_2_reg_1347_pp0_iter6_reg;
        trunc_ln67_3_reg_1355_pp0_iter7_reg <= trunc_ln67_3_reg_1355_pp0_iter6_reg;
        trunc_ln67_4_reg_1363_pp0_iter7_reg <= trunc_ln67_4_reg_1363_pp0_iter6_reg;
        trunc_ln67_5_reg_1371_pp0_iter7_reg <= trunc_ln67_5_reg_1371_pp0_iter6_reg;
        trunc_ln67_6_reg_1379_pp0_iter7_reg <= trunc_ln67_6_reg_1379_pp0_iter6_reg;
        trunc_ln67_7_reg_1387_pp0_iter7_reg <= trunc_ln67_7_reg_1387_pp0_iter6_reg;
        trunc_ln67_reg_1331_pp0_iter7_reg <= trunc_ln67_reg_1331_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_phi_reg_pp0_iter9_empty_49_reg_256 <= ap_phi_reg_pp0_iter8_empty_49_reg_256;
        ap_phi_reg_pp0_iter9_empty_50_reg_265 <= ap_phi_reg_pp0_iter8_empty_50_reg_265;
        ap_phi_reg_pp0_iter9_empty_51_reg_274 <= ap_phi_reg_pp0_iter8_empty_51_reg_274;
        ap_phi_reg_pp0_iter9_empty_52_reg_283 <= ap_phi_reg_pp0_iter8_empty_52_reg_283;
        ap_phi_reg_pp0_iter9_empty_53_reg_292 <= ap_phi_reg_pp0_iter8_empty_53_reg_292;
        ap_phi_reg_pp0_iter9_empty_54_reg_301 <= ap_phi_reg_pp0_iter8_empty_54_reg_301;
        ap_phi_reg_pp0_iter9_empty_reg_247 <= ap_phi_reg_pp0_iter8_empty_reg_247;
        ap_phi_reg_pp0_iter9_q_val_reg_238 <= ap_phi_reg_pp0_iter8_q_val_reg_238;
        icmp_ln61_reg_1327_pp0_iter8_reg <= icmp_ln61_reg_1327_pp0_iter7_reg;
        select_ln99_11_reg_1525 <= select_ln99_11_fu_639_p3;
        select_ln99_12_reg_1531 <= select_ln99_12_fu_650_p3;
        tmp_7_reg_1430_pp0_iter8_reg <= tmp_7_reg_1430_pp0_iter7_reg;
        trunc_ln224_6_reg_1536 <= trunc_ln224_6_fu_656_p1;
        trunc_ln67_1_reg_1339_pp0_iter8_reg <= trunc_ln67_1_reg_1339_pp0_iter7_reg;
        trunc_ln67_2_reg_1347_pp0_iter8_reg <= trunc_ln67_2_reg_1347_pp0_iter7_reg;
        trunc_ln67_3_reg_1355_pp0_iter8_reg <= trunc_ln67_3_reg_1355_pp0_iter7_reg;
        trunc_ln67_4_reg_1363_pp0_iter8_reg <= trunc_ln67_4_reg_1363_pp0_iter7_reg;
        trunc_ln67_5_reg_1371_pp0_iter8_reg <= trunc_ln67_5_reg_1371_pp0_iter7_reg;
        trunc_ln67_6_reg_1379_pp0_iter8_reg <= trunc_ln67_6_reg_1379_pp0_iter7_reg;
        trunc_ln67_7_reg_1387_pp0_iter8_reg <= trunc_ln67_7_reg_1387_pp0_iter7_reg;
        trunc_ln67_reg_1331_pp0_iter8_reg <= trunc_ln67_reg_1331_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        icmp_ln61_reg_1327_pp0_iter15_reg <= icmp_ln61_reg_1327_pp0_iter14_reg;
        s_val_reg_1628_pp0_iter15_reg <= s_val_reg_1628_pp0_iter14_reg;
        select_ln123_1_reg_1724 <= select_ln123_1_fu_1127_p3;
        select_ln123_2_reg_1729 <= select_ln123_2_fu_1175_p3;
        select_ln123_3_reg_1734 <= select_ln123_3_fu_1223_p3;
        select_ln123_4_reg_1739 <= select_ln123_4_fu_1271_p3;
        select_ln123_5_reg_1744 <= select_ln123_5_fu_1279_p3;
        select_ln123_6_reg_1749 <= select_ln123_6_fu_1287_p3;
        select_ln123_7_reg_1754 <= select_ln123_7_fu_1295_p3;
        select_ln123_reg_1719 <= select_ln123_fu_1099_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

assign ap_ST_iter15_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state17_pp0_stage0_iter16)) begin
        ap_ST_iter16_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_iter16_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (icmp_ln61_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter16_fsm_state0) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_reg_1327_pp0_iter11_reg == 1'd0)) begin
        if ((1'b1 == ap_condition_2027)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = select_ln16_fu_845_p3;
        end else if ((1'b1 == ap_condition_2011)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd27;
        end else if ((1'b1 == ap_condition_1995)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd28;
        end else if ((1'b1 == ap_condition_1980)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd29;
        end else if ((1'b1 == ap_condition_1966)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd30;
        end else if ((1'b1 == ap_condition_1953)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd31;
        end else if ((1'b1 == ap_condition_1941)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd0;
        end else if ((1'b1 == ap_condition_1930)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd1;
        end else if ((1'b1 == ap_condition_1920)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd2;
        end else if ((1'b1 == ap_condition_1911)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd3;
        end else if ((1'b1 == ap_condition_1903)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd4;
        end else if ((1'b1 == ap_condition_1896)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd5;
        end else if ((1'b1 == ap_condition_1890)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd6;
        end else if ((1'b1 == ap_condition_1885)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd7;
        end else if (((tmp_9_reg_1567_pp0_iter11_reg == 1'd1) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0))) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd8;
        end else if ((tmp_8_reg_1563_pp0_iter11_reg == 1'd1)) begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = 5'd9;
        end else begin
            ap_phi_mux_s_val_1_phi_fu_189_p32 = ap_phi_reg_pp0_iter12_s_val_1_reg_186;
        end
    end else begin
        ap_phi_mux_s_val_1_phi_fu_189_p32 = ap_phi_reg_pp0_iter12_s_val_1_reg_186;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_162;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1327_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        rot_q_stream_TDATA_blk_n = rot_q_stream_TREADY;
    end else begin
        rot_q_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1327_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        rot_q_stream_TVALID = 1'b1;
    end else begin
        rot_q_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1327_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        rot_s_stream_TDATA_blk_n = rot_s_stream_TREADY;
    end else begin
        rot_s_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1327_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        rot_s_stream_TVALID = 1'b1;
    end else begin
        rot_s_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln61_reg_1327 == 1'd0))) begin
        rot_stream_blk_n = rot_stream_empty_n;
    end else begin
        rot_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln61_reg_1327 == 1'd0))) begin
        rot_stream_read = 1'b1;
    end else begin
        rot_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter16_fsm)
        ap_ST_iter16_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end else if (((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1327_pp0_iter15_reg == 1'd1) & (1'b1 == ap_CS_iter16_fsm_state17)))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end
        end
        ap_ST_iter16_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter16_fsm = 'bx;
        end
    endcase
end

assign abs_max_fu_697_p3 = ((icmp_ln224_7_fu_692_p2[0:0] == 1'b1) ? trunc_ln224_7_reg_1552 : select_ln99_13_reg_1541);

assign add_ln119_fu_878_p2 = ($signed(s_val_reg_1628) + $signed(4'd15));

assign add_ln120_1_fu_946_p2 = (ashr_ln119_1_reg_1644 + 17'd1);

assign add_ln120_2_fu_965_p2 = (ashr_ln119_2_reg_1649 + 17'd1);

assign add_ln120_3_fu_984_p2 = (ashr_ln119_3_reg_1654 + 17'd1);

assign add_ln120_4_fu_1003_p2 = (ashr_ln119_4_reg_1659 + 17'd1);

assign add_ln120_5_fu_1022_p2 = (ashr_ln119_5_reg_1664 + 17'd1);

assign add_ln120_6_fu_1041_p2 = (ashr_ln119_6_reg_1669 + 17'd1);

assign add_ln120_7_fu_1060_p2 = (ashr_ln119_7_reg_1674 + 17'd1);

assign add_ln120_fu_927_p2 = (ashr_ln119_reg_1639 + 17'd1);

assign add_ln61_fu_324_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 11'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter16_fsm_state0 = ap_CS_iter16_fsm[32'd0];

assign ap_CS_iter16_fsm_state17 = ap_CS_iter16_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = (((rot_s_stream_TREADY == 1'b0) & (icmp_ln61_reg_1327_pp0_iter15_reg == 1'd0)) | ((icmp_ln61_reg_1327_pp0_iter15_reg == 1'd0) & (rot_q_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln61_reg_1327 == 1'd0) & (rot_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_1885 = ((tmp_10_reg_1571_pp0_iter11_reg == 1'd1) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1890 = ((tmp_11_reg_1575_pp0_iter11_reg == 1'd1) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1896 = ((tmp_12_reg_1579_pp0_iter11_reg == 1'd1) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1903 = ((tmp_13_reg_1583_pp0_iter11_reg == 1'd1) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1911 = ((tmp_14_reg_1587_pp0_iter11_reg == 1'd1) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1920 = ((tmp_15_reg_1591_pp0_iter11_reg == 1'd1) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1930 = ((tmp_16_reg_1595_pp0_iter11_reg == 1'd1) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1941 = ((tmp_17_reg_1599_pp0_iter11_reg == 1'd1) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1953 = ((tmp_18_reg_1603_pp0_iter11_reg == 1'd1) & (tmp_17_reg_1599_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1966 = ((tmp_19_reg_1607_pp0_iter11_reg == 1'd1) & (tmp_18_reg_1603_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1599_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1980 = ((tmp_20_reg_1611_pp0_iter11_reg == 1'd1) & (tmp_19_reg_1607_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1603_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1599_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1995 = ((tmp_21_reg_1615_pp0_iter11_reg == 1'd1) & (tmp_20_reg_1611_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1607_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1603_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1599_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_2011 = ((tmp_22_reg_1619_pp0_iter11_reg == 1'd1) & (tmp_21_reg_1615_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1611_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1607_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1603_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1599_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_2027 = ((tmp_22_reg_1619_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1615_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1611_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1607_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1603_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1599_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1595_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1591_pp0_iter11_reg == 1'd0) & (tmp_14_reg_1587_pp0_iter11_reg == 1'd0) & (tmp_13_reg_1583_pp0_iter11_reg == 1'd0) & (tmp_12_reg_1579_pp0_iter11_reg == 1'd0) & (tmp_11_reg_1575_pp0_iter11_reg == 1'd0) & (tmp_10_reg_1571_pp0_iter11_reg == 1'd0) & (tmp_9_reg_1567_pp0_iter11_reg == 1'd0) & (tmp_8_reg_1563_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_272 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_337 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14));
end

always @ (*) begin
    ap_condition_339 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_49_reg_256 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_50_reg_265 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_51_reg_274 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_52_reg_283 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_53_reg_292 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_54_reg_301 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_247 = 'bx;

assign ap_phi_reg_pp0_iter0_q_val_reg_238 = 'bx;

assign ap_phi_reg_pp0_iter12_s_val_1_reg_186 = 'bx;

assign ap_ready = ap_ready_sig;

assign ashr_ln119_1_fu_892_p2 = $signed(trunc_ln67_1_reg_1339_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_2_fu_897_p2 = $signed(trunc_ln67_2_reg_1347_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_3_fu_902_p2 = $signed(trunc_ln67_3_reg_1355_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_4_fu_907_p2 = $signed(trunc_ln67_4_reg_1363_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_5_fu_912_p2 = $signed(trunc_ln67_5_reg_1371_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_6_fu_917_p2 = $signed(trunc_ln67_6_reg_1379_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_7_fu_922_p2 = $signed(trunc_ln67_7_reg_1387_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign ashr_ln119_fu_887_p2 = $signed(trunc_ln67_reg_1331_pp0_iter12_reg) >>> zext_ln119_fu_883_p1;

assign icmp_ln118_fu_873_p2 = ((s_val_reg_1628 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln118_reg_1635_pp0_iter13_reg = icmp_ln118_reg_1635;

assign icmp_ln12_fu_703_p2 = ((abs_max_reg_1557 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_1_fu_1117_p2 = (($signed(tmp_25_fu_1107_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_2_fu_1145_p2 = (($signed(tmp_26_fu_1135_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_3_fu_1165_p2 = (($signed(tmp_27_fu_1155_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_4_fu_1193_p2 = (($signed(tmp_28_fu_1183_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_5_fu_1213_p2 = (($signed(tmp_29_fu_1203_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_6_fu_1241_p2 = (($signed(tmp_30_fu_1231_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_7_fu_1261_p2 = (($signed(tmp_31_fu_1251_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_1089_p2 = (($signed(tmp_24_fu_1079_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_518_p2 = (($signed(zext_ln99_fu_515_p1) < $signed(select_ln99_2_reg_1451)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_547_p2 = (($signed(zext_ln99_1_fu_544_p1) < $signed(select_ln99_4_reg_1467)) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_576_p2 = (($signed(zext_ln99_2_fu_573_p1) < $signed(select_ln99_6_reg_1483)) ? 1'b1 : 1'b0);

assign icmp_ln224_4_fu_605_p2 = (($signed(zext_ln99_3_fu_602_p1) < $signed(select_ln99_8_reg_1499)) ? 1'b1 : 1'b0);

assign icmp_ln224_5_fu_634_p2 = (($signed(zext_ln99_4_fu_631_p1) < $signed(select_ln99_10_reg_1515)) ? 1'b1 : 1'b0);

assign icmp_ln224_6_fu_663_p2 = (($signed(zext_ln99_5_fu_660_p1) < $signed(select_ln99_12_reg_1531)) ? 1'b1 : 1'b0);

assign icmp_ln224_7_fu_692_p2 = (($signed(zext_ln99_6_fu_689_p1) < $signed(select_ln99_14_reg_1547)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_488_p2 = (($signed(select_ln99_reg_1435) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_318_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 11'd1792) ? 1'b1 : 1'b0);

assign rot_q_stream_TDATA = {{{{{{{{select_ln123_4_reg_1739}, {select_ln123_7_reg_1754}}, {select_ln123_3_reg_1734}}, {select_ln123_6_reg_1749}}, {select_ln123_2_reg_1729}}, {select_ln123_5_reg_1744}}, {select_ln123_1_reg_1724}}, {select_ln123_reg_1719}};

assign rot_s_stream_TDATA = s_val_reg_1628_pp0_iter15_reg;

assign s_val_fu_865_p3 = ((tmp_23_fu_853_p3[0:0] == 1'b1) ? 4'd0 : trunc_ln108_fu_861_p1);

assign select_ln123_1_fu_1127_p3 = ((icmp_ln200_1_fu_1117_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_1_fu_1123_p1);

assign select_ln123_2_fu_1175_p3 = ((icmp_ln200_3_fu_1165_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_3_fu_1171_p1);

assign select_ln123_3_fu_1223_p3 = ((icmp_ln200_5_fu_1213_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_5_fu_1219_p1);

assign select_ln123_4_fu_1271_p3 = ((icmp_ln200_7_fu_1261_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_7_fu_1267_p1);

assign select_ln123_5_fu_1279_p3 = ((icmp_ln200_2_fu_1145_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_2_fu_1151_p1);

assign select_ln123_6_fu_1287_p3 = ((icmp_ln200_4_fu_1193_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_4_fu_1199_p1);

assign select_ln123_7_fu_1295_p3 = ((icmp_ln200_6_fu_1241_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_6_fu_1247_p1);

assign select_ln123_fu_1099_p3 = ((icmp_ln200_fu_1089_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_fu_1095_p1);

assign select_ln16_fu_845_p3 = ((trunc_ln16_reg_1623[0:0] == 1'b1) ? 5'd26 : 5'd25);

assign select_ln99_10_fu_621_p3 = ((tmp_5_reg_1420_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln99_5_fu_616_p2 : trunc_ln67_5_reg_1371_pp0_iter6_reg);

assign select_ln99_11_fu_639_p3 = ((icmp_ln224_5_fu_634_p2[0:0] == 1'b1) ? trunc_ln224_5_reg_1520 : select_ln99_9_reg_1509);

assign select_ln99_12_fu_650_p3 = ((tmp_6_reg_1425_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln99_6_fu_645_p2 : trunc_ln67_6_reg_1379_pp0_iter7_reg);

assign select_ln99_13_fu_668_p3 = ((icmp_ln224_6_fu_663_p2[0:0] == 1'b1) ? trunc_ln224_6_reg_1536 : select_ln99_11_reg_1525);

assign select_ln99_14_fu_679_p3 = ((tmp_7_reg_1430_pp0_iter8_reg[0:0] == 1'b1) ? sub_ln99_7_fu_674_p2 : trunc_ln67_7_reg_1387_pp0_iter8_reg);

assign select_ln99_1_fu_493_p3 = ((icmp_ln224_fu_488_p2[0:0] == 1'b1) ? trunc_ln224_reg_1440 : 16'd0);

assign select_ln99_2_fu_505_p3 = ((tmp_1_reg_1400_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln99_1_fu_500_p2 : trunc_ln67_1_reg_1339_pp0_iter2_reg);

assign select_ln99_3_fu_523_p3 = ((icmp_ln224_1_fu_518_p2[0:0] == 1'b1) ? trunc_ln224_1_reg_1456 : select_ln99_1_reg_1445);

assign select_ln99_4_fu_534_p3 = ((tmp_2_reg_1405_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln99_2_fu_529_p2 : trunc_ln67_2_reg_1347_pp0_iter3_reg);

assign select_ln99_5_fu_552_p3 = ((icmp_ln224_2_fu_547_p2[0:0] == 1'b1) ? trunc_ln224_2_reg_1472 : select_ln99_3_reg_1461);

assign select_ln99_6_fu_563_p3 = ((tmp_3_reg_1410_pp0_iter4_reg[0:0] == 1'b1) ? sub_ln99_3_fu_558_p2 : trunc_ln67_3_reg_1355_pp0_iter4_reg);

assign select_ln99_7_fu_581_p3 = ((icmp_ln224_3_fu_576_p2[0:0] == 1'b1) ? trunc_ln224_3_reg_1488 : select_ln99_5_reg_1477);

assign select_ln99_8_fu_592_p3 = ((tmp_4_reg_1415_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln99_4_fu_587_p2 : trunc_ln67_4_reg_1363_pp0_iter5_reg);

assign select_ln99_9_fu_610_p3 = ((icmp_ln224_4_fu_605_p2[0:0] == 1'b1) ? trunc_ln224_4_reg_1504 : select_ln99_7_reg_1493);

assign select_ln99_fu_478_p3 = ((tmp_reg_1395[0:0] == 1'b1) ? sub_ln99_fu_473_p2 : trunc_ln67_reg_1331);

assign sext_ln121_1_fu_961_p1 = $signed(trunc_ln_fu_951_p4);

assign sext_ln121_2_fu_980_p1 = $signed(trunc_ln121_2_fu_970_p4);

assign sext_ln121_3_fu_999_p1 = $signed(trunc_ln121_3_fu_989_p4);

assign sext_ln121_4_fu_1018_p1 = $signed(trunc_ln121_4_fu_1008_p4);

assign sext_ln121_5_fu_1037_p1 = $signed(trunc_ln121_5_fu_1027_p4);

assign sext_ln121_6_fu_1056_p1 = $signed(trunc_ln121_6_fu_1046_p4);

assign sext_ln121_7_fu_1075_p1 = $signed(trunc_ln121_7_fu_1065_p4);

assign sext_ln121_fu_942_p1 = $signed(trunc_ln121_1_fu_932_p4);

assign sub_ln99_1_fu_500_p2 = (17'd0 - trunc_ln67_1_reg_1339_pp0_iter2_reg);

assign sub_ln99_2_fu_529_p2 = (17'd0 - trunc_ln67_2_reg_1347_pp0_iter3_reg);

assign sub_ln99_3_fu_558_p2 = (17'd0 - trunc_ln67_3_reg_1355_pp0_iter4_reg);

assign sub_ln99_4_fu_587_p2 = (17'd0 - trunc_ln67_4_reg_1363_pp0_iter5_reg);

assign sub_ln99_5_fu_616_p2 = (17'd0 - trunc_ln67_5_reg_1371_pp0_iter6_reg);

assign sub_ln99_6_fu_645_p2 = (17'd0 - trunc_ln67_6_reg_1379_pp0_iter7_reg);

assign sub_ln99_7_fu_674_p2 = (17'd0 - trunc_ln67_7_reg_1387_pp0_iter8_reg);

assign sub_ln99_fu_473_p2 = (17'd0 - trunc_ln67_reg_1331);

assign tmp_10_reg_1571_pp0_iter11_reg = tmp_10_reg_1571;

assign tmp_11_reg_1575_pp0_iter11_reg = tmp_11_reg_1575;

assign tmp_12_reg_1579_pp0_iter11_reg = tmp_12_reg_1579;

assign tmp_13_reg_1583_pp0_iter11_reg = tmp_13_reg_1583;

assign tmp_14_reg_1587_pp0_iter11_reg = tmp_14_reg_1587;

assign tmp_15_reg_1591_pp0_iter11_reg = tmp_15_reg_1591;

assign tmp_16_reg_1595_pp0_iter11_reg = tmp_16_reg_1595;

assign tmp_17_reg_1599_pp0_iter11_reg = tmp_17_reg_1599;

assign tmp_18_reg_1603_pp0_iter11_reg = tmp_18_reg_1603;

assign tmp_19_reg_1607_pp0_iter11_reg = tmp_19_reg_1607;

assign tmp_20_reg_1611_pp0_iter11_reg = tmp_20_reg_1611;

assign tmp_21_reg_1615_pp0_iter11_reg = tmp_21_reg_1615;

assign tmp_22_reg_1619_pp0_iter11_reg = tmp_22_reg_1619;

assign tmp_23_fu_853_p3 = ap_phi_mux_s_val_1_phi_fu_189_p32[32'd4];

assign tmp_24_fu_1079_p4 = {{ap_phi_reg_pp0_iter15_empty_51_reg_274[16:7]}};

assign tmp_25_fu_1107_p4 = {{ap_phi_reg_pp0_iter15_empty_52_reg_283[16:7]}};

assign tmp_26_fu_1135_p4 = {{ap_phi_reg_pp0_iter15_empty_50_reg_265[16:7]}};

assign tmp_27_fu_1155_p4 = {{ap_phi_reg_pp0_iter15_empty_53_reg_292[16:7]}};

assign tmp_28_fu_1183_p4 = {{ap_phi_reg_pp0_iter15_empty_49_reg_256[16:7]}};

assign tmp_29_fu_1203_p4 = {{ap_phi_reg_pp0_iter15_empty_54_reg_301[16:7]}};

assign tmp_30_fu_1231_p4 = {{ap_phi_reg_pp0_iter15_empty_reg_247[16:7]}};

assign tmp_31_fu_1251_p4 = {{ap_phi_reg_pp0_iter15_q_val_reg_238[16:7]}};

assign tmp_8_reg_1563_pp0_iter11_reg = tmp_8_reg_1563;

assign tmp_9_reg_1567_pp0_iter11_reg = tmp_9_reg_1567;

assign trunc_ln108_fu_861_p1 = ap_phi_mux_s_val_1_phi_fu_189_p32[3:0];

assign trunc_ln121_1_fu_932_p4 = {{add_ln120_fu_927_p2[16:1]}};

assign trunc_ln121_2_fu_970_p4 = {{add_ln120_2_fu_965_p2[16:1]}};

assign trunc_ln121_3_fu_989_p4 = {{add_ln120_3_fu_984_p2[16:1]}};

assign trunc_ln121_4_fu_1008_p4 = {{add_ln120_4_fu_1003_p2[16:1]}};

assign trunc_ln121_5_fu_1027_p4 = {{add_ln120_5_fu_1022_p2[16:1]}};

assign trunc_ln121_6_fu_1046_p4 = {{add_ln120_6_fu_1041_p2[16:1]}};

assign trunc_ln121_7_fu_1065_p4 = {{add_ln120_7_fu_1060_p2[16:1]}};

assign trunc_ln123_1_fu_1123_p1 = ap_phi_reg_pp0_iter15_empty_52_reg_283[7:0];

assign trunc_ln123_2_fu_1151_p1 = ap_phi_reg_pp0_iter15_empty_50_reg_265[7:0];

assign trunc_ln123_3_fu_1171_p1 = ap_phi_reg_pp0_iter15_empty_53_reg_292[7:0];

assign trunc_ln123_4_fu_1199_p1 = ap_phi_reg_pp0_iter15_empty_49_reg_256[7:0];

assign trunc_ln123_5_fu_1219_p1 = ap_phi_reg_pp0_iter15_empty_54_reg_301[7:0];

assign trunc_ln123_6_fu_1247_p1 = ap_phi_reg_pp0_iter15_empty_reg_247[7:0];

assign trunc_ln123_7_fu_1267_p1 = ap_phi_reg_pp0_iter15_q_val_reg_238[7:0];

assign trunc_ln123_fu_1095_p1 = ap_phi_reg_pp0_iter15_empty_51_reg_274[7:0];

assign trunc_ln16_fu_841_p1 = x_2_fu_713_p3[0:0];

assign trunc_ln224_1_fu_511_p1 = select_ln99_2_fu_505_p3[15:0];

assign trunc_ln224_2_fu_540_p1 = select_ln99_4_fu_534_p3[15:0];

assign trunc_ln224_3_fu_569_p1 = select_ln99_6_fu_563_p3[15:0];

assign trunc_ln224_4_fu_598_p1 = select_ln99_8_fu_592_p3[15:0];

assign trunc_ln224_5_fu_627_p1 = select_ln99_10_fu_621_p3[15:0];

assign trunc_ln224_6_fu_656_p1 = select_ln99_12_fu_650_p3[15:0];

assign trunc_ln224_7_fu_685_p1 = select_ln99_14_fu_679_p3[15:0];

assign trunc_ln224_fu_484_p1 = select_ln99_fu_478_p3[15:0];

assign trunc_ln67_fu_335_p1 = rot_stream_dout[16:0];

assign trunc_ln_fu_951_p4 = {{add_ln120_1_fu_946_p2[16:1]}};

assign x_1_fu_708_p2 = ($signed(abs_max_reg_1557) + $signed(16'd65535));

assign x_2_fu_713_p3 = ((icmp_ln12_fu_703_p2[0:0] == 1'b1) ? x_1_fu_708_p2 : 16'd0);

assign zext_ln119_fu_883_p1 = add_ln119_fu_878_p2;

assign zext_ln99_1_fu_544_p1 = select_ln99_3_reg_1461;

assign zext_ln99_2_fu_573_p1 = select_ln99_5_reg_1477;

assign zext_ln99_3_fu_602_p1 = select_ln99_7_reg_1493;

assign zext_ln99_4_fu_631_p1 = select_ln99_9_reg_1509;

assign zext_ln99_5_fu_660_p1 = select_ln99_11_reg_1525;

assign zext_ln99_6_fu_689_p1 = select_ln99_13_reg_1541;

assign zext_ln99_fu_515_p1 = select_ln99_1_reg_1445;

endmodule //ROPE_QK_QUANT_do_quant
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_do_rope (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qk_stream_TDATA,
        cos_sin_stream_dout,
        cos_sin_stream_empty_n,
        cos_sin_stream_read,
        rot_stream_din,
        rot_stream_full_n,
        rot_stream_write,
        ap_clk,
        ap_rst,
        qk_stream_TVALID,
        qk_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [159:0] qk_stream_TDATA;
input  [127:0] cos_sin_stream_dout;
input   cos_sin_stream_empty_n;
output   cos_sin_stream_read;
output  [135:0] rot_stream_din;
input   rot_stream_full_n;
output   rot_stream_write;
input   ap_clk;
input   ap_rst;
input   qk_stream_TVALID;
output   qk_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    stage1_cache_cos_sin_U0_ap_start;
wire    stage1_cache_cos_sin_U0_ap_done;
wire    stage1_cache_cos_sin_U0_ap_continue;
wire    stage1_cache_cos_sin_U0_ap_idle;
wire    stage1_cache_cos_sin_U0_ap_ready;
wire    stage1_cache_cos_sin_U0_start_out;
wire    stage1_cache_cos_sin_U0_start_write;
wire    stage1_cache_cos_sin_U0_cos_sin_stream_read;
wire   [127:0] stage1_cache_cos_sin_U0_cache_stream_din;
wire    stage1_cache_cos_sin_U0_cache_stream_write;
wire    stage2_apply_rotation_U0_ap_start;
wire    stage2_apply_rotation_U0_ap_done;
wire    stage2_apply_rotation_U0_ap_continue;
wire    stage2_apply_rotation_U0_ap_idle;
wire    stage2_apply_rotation_U0_ap_ready;
wire    stage2_apply_rotation_U0_cache_stream_read;
wire   [135:0] stage2_apply_rotation_U0_rot_stream_din;
wire    stage2_apply_rotation_U0_rot_stream_write;
wire    stage2_apply_rotation_U0_qk_stream_TREADY;
wire    cache_stream_full_n;
wire   [127:0] cache_stream_dout;
wire    cache_stream_empty_n;
wire   [2:0] cache_stream_num_data_valid;
wire   [2:0] cache_stream_fifo_cap;
wire    ap_sync_ready;
wire   [0:0] start_for_stage2_apply_rotation_U0_din;
wire    start_for_stage2_apply_rotation_U0_full_n;
wire   [0:0] start_for_stage2_apply_rotation_U0_dout;
wire    start_for_stage2_apply_rotation_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ROPE_QK_QUANT_stage1_cache_cos_sin stage1_cache_cos_sin_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stage1_cache_cos_sin_U0_ap_start),
    .start_full_n(start_for_stage2_apply_rotation_U0_full_n),
    .ap_done(stage1_cache_cos_sin_U0_ap_done),
    .ap_continue(stage1_cache_cos_sin_U0_ap_continue),
    .ap_idle(stage1_cache_cos_sin_U0_ap_idle),
    .ap_ready(stage1_cache_cos_sin_U0_ap_ready),
    .start_out(stage1_cache_cos_sin_U0_start_out),
    .start_write(stage1_cache_cos_sin_U0_start_write),
    .cos_sin_stream_dout(cos_sin_stream_dout),
    .cos_sin_stream_empty_n(cos_sin_stream_empty_n),
    .cos_sin_stream_read(stage1_cache_cos_sin_U0_cos_sin_stream_read),
    .cos_sin_stream_num_data_valid(3'd0),
    .cos_sin_stream_fifo_cap(3'd0),
    .cache_stream_din(stage1_cache_cos_sin_U0_cache_stream_din),
    .cache_stream_full_n(cache_stream_full_n),
    .cache_stream_write(stage1_cache_cos_sin_U0_cache_stream_write),
    .cache_stream_num_data_valid(cache_stream_num_data_valid),
    .cache_stream_fifo_cap(cache_stream_fifo_cap)
);

ROPE_QK_QUANT_stage2_apply_rotation stage2_apply_rotation_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stage2_apply_rotation_U0_ap_start),
    .ap_done(stage2_apply_rotation_U0_ap_done),
    .ap_continue(stage2_apply_rotation_U0_ap_continue),
    .ap_idle(stage2_apply_rotation_U0_ap_idle),
    .ap_ready(stage2_apply_rotation_U0_ap_ready),
    .qk_stream_TVALID(qk_stream_TVALID),
    .cache_stream_dout(cache_stream_dout),
    .cache_stream_empty_n(cache_stream_empty_n),
    .cache_stream_read(stage2_apply_rotation_U0_cache_stream_read),
    .cache_stream_num_data_valid(cache_stream_num_data_valid),
    .cache_stream_fifo_cap(cache_stream_fifo_cap),
    .rot_stream_din(stage2_apply_rotation_U0_rot_stream_din),
    .rot_stream_full_n(rot_stream_full_n),
    .rot_stream_write(stage2_apply_rotation_U0_rot_stream_write),
    .rot_stream_num_data_valid(3'd0),
    .rot_stream_fifo_cap(3'd0),
    .qk_stream_TDATA(qk_stream_TDATA),
    .qk_stream_TREADY(stage2_apply_rotation_U0_qk_stream_TREADY)
);

ROPE_QK_QUANT_fifo_w128_d2_S cache_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stage1_cache_cos_sin_U0_cache_stream_din),
    .if_full_n(cache_stream_full_n),
    .if_write(stage1_cache_cos_sin_U0_cache_stream_write),
    .if_dout(cache_stream_dout),
    .if_empty_n(cache_stream_empty_n),
    .if_read(stage2_apply_rotation_U0_cache_stream_read),
    .if_num_data_valid(cache_stream_num_data_valid),
    .if_fifo_cap(cache_stream_fifo_cap)
);

ROPE_QK_QUANT_start_for_stage2_apply_rotation_U0 start_for_stage2_apply_rotation_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stage2_apply_rotation_U0_din),
    .if_full_n(start_for_stage2_apply_rotation_U0_full_n),
    .if_write(stage1_cache_cos_sin_U0_start_write),
    .if_dout(start_for_stage2_apply_rotation_U0_dout),
    .if_empty_n(start_for_stage2_apply_rotation_U0_empty_n),
    .if_read(stage2_apply_rotation_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = stage2_apply_rotation_U0_ap_done;

assign ap_idle = (stage2_apply_rotation_U0_ap_idle & stage1_cache_cos_sin_U0_ap_idle);

assign ap_ready = stage1_cache_cos_sin_U0_ap_ready;

assign ap_sync_ready = stage1_cache_cos_sin_U0_ap_ready;

assign cos_sin_stream_read = stage1_cache_cos_sin_U0_cos_sin_stream_read;

assign internal_ap_ready = ap_sync_ready;

assign qk_stream_TREADY = stage2_apply_rotation_U0_qk_stream_TREADY;

assign rot_stream_din = stage2_apply_rotation_U0_rot_stream_din;

assign rot_stream_write = stage2_apply_rotation_U0_rot_stream_write;

assign stage1_cache_cos_sin_U0_ap_continue = 1'b1;

assign stage1_cache_cos_sin_U0_ap_start = real_start;

assign stage2_apply_rotation_U0_ap_continue = ap_continue;

assign stage2_apply_rotation_U0_ap_start = start_for_stage2_apply_rotation_U0_empty_n;

assign start_for_stage2_apply_rotation_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ROPE_QK_QUANT_do_rope
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_fifo_w128_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 128,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_fifo_w128_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_fifo_w128_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_fifo_w128_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 128,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_fifo_w128_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 128,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_fifo_w128_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_fifo_w128_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_fifo_w128_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 128,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_fifo_w136_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 136,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_fifo_w136_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_fifo_w136_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_fifo_w136_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 136,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_fifo_w40_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 40,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_fifo_w40_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_fifo_w40_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_fifo_w40_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 40,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_fifo_w64_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 64,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_fifo_w64_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_fifo_w64_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_fifo_w64_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_fifo_w88_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 88,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_fifo_w88_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_fifo_w88_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_fifo_w88_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 88,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module ROPE_QK_QUANT_flow_control_loop_delay_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_ready_delayed,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
reg ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_ready_delayed;
input   ap_loop_exit_done;


//Record the delay between ap_loop_exit_ready
//and ap_loop_exit_ready_delayed
reg    rewind_ap_ready_reg;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
//#0 rewind_ap_ready_reg = 1'b0;
end

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready_delayed;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else if ((ap_ready == 1'b0) & (ap_start == 1'b1) & ap_loop_exit_ready == 1'b1) begin
        rewind_ap_ready_reg <= 1'b1;
    end else if ((ap_ready == 1'b1) & (ap_start == 1'b1)) begin
        rewind_ap_ready_reg <= 1'b0;
    end
end

always @ (*) begin
    if ((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1)) begin
        ap_start_int = 1'b1;
    end else begin
        ap_start_int = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module ROPE_QK_QUANT_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module ROPE_QK_QUANT_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not ROPE_QK_QUANT module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not ROPE_QK_QUANT module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [16 - 1:0] in0,
    input  [7 - 1:0] in1,
    input  [20 - 1:0] in2,
    output [22 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1_DSP48_0 ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [20 - 1:0] in0,
    input  [16 - 1:0] in1,
    input  [29 - 1:0] in2,
    output [29 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1_DSP48_0 ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [20 - 1:0] in0,
    input  [16 - 1:0] in1,
    input  [29 - 1:0] in2,
    output [29 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = c - m_reg;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1_DSP48_0 ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module ROPE_QK_QUANT_mul_16s_17ns_32_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;

























assign tmp_product = $signed(din0) * $signed({1'b0, din1});







always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;



















    end
end




assign dout = buff0;




















endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module ROPE_QK_QUANT_mul_20s_14ns_34_4_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;

























assign tmp_product = $signed(din0_reg) * $signed({1'b0, din1_reg});





always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


















    end
end






assign dout = buff1;


















endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module ROPE_QK_QUANT_mul_20s_16s_29_4_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;


























assign tmp_product = $signed(din0_reg) * $signed(din1_reg);




always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


















    end
end






assign dout = buff1;


















endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module ROPE_QK_QUANT_mul_32s_24ns_32_5_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;


reg signed [dout_WIDTH - 1 : 0] buff2;
























assign tmp_product = $signed(din0_reg) * $signed({1'b0, din1_reg});





always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


        buff2 <= buff1;

















    end
end







assign dout = buff2;

















endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module ROPE_QK_QUANT_mul_32s_25ns_32_5_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;


reg signed [dout_WIDTH - 1 : 0] buff2;
























assign tmp_product = $signed(din0_reg) * $signed({1'b0, din1_reg});





always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


        buff2 <= buff1;

















    end
end







assign dout = buff2;

















endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module ROPE_QK_QUANT_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage1_cache_cos_sin (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cos_sin_stream_dout,
        cos_sin_stream_empty_n,
        cos_sin_stream_read,
        cos_sin_stream_num_data_valid,
        cos_sin_stream_fifo_cap,
        cache_stream_din,
        cache_stream_full_n,
        cache_stream_write,
        cache_stream_num_data_valid,
        cache_stream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] cos_sin_stream_dout;
input   cos_sin_stream_empty_n;
output   cos_sin_stream_read;
input  [2:0] cos_sin_stream_num_data_valid;
input  [2:0] cos_sin_stream_fifo_cap;
output  [127:0] cache_stream_din;
input   cache_stream_full_n;
output   cache_stream_write;
input  [2:0] cache_stream_num_data_valid;
input  [2:0] cache_stream_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [5:0] cos_sin_address0;
reg    cos_sin_ce0;
reg    cos_sin_we0;
wire   [127:0] cos_sin_q0;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_done;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_idle;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_ready;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_stream_read;
wire   [5:0] grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_address0;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_ce0;
wire    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_we0;
wire   [127:0] grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_d0;
wire    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start;
wire    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done;
wire    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_idle;
wire    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_ready;
wire   [127:0] grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cache_stream_din;
wire    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cache_stream_write;
wire   [5:0] grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cos_sin_address0;
wire    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cos_sin_ce0;
reg    grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start_reg;
reg    ap_block_state1_ignore_call3;
wire    ap_CS_fsm_state2;
reg    grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start_reg = 1'b0;
//#0 grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start_reg = 1'b0;
end

ROPE_QK_QUANT_stage1_cache_cos_sin_cos_sin_RAM_AUTO_1R1W #(
    .DataWidth( 128 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cos_sin_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_sin_address0),
    .ce0(cos_sin_ce0),
    .we0(cos_sin_we0),
    .d0(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_d0),
    .q0(cos_sin_q0)
);

ROPE_QK_QUANT_stage1_cache_cos_sin_Pipeline_1 grp_stage1_cache_cos_sin_Pipeline_1_fu_26(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start),
    .ap_done(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_done),
    .ap_idle(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_idle),
    .ap_ready(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_ready),
    .cos_sin_stream_dout(cos_sin_stream_dout),
    .cos_sin_stream_empty_n(cos_sin_stream_empty_n),
    .cos_sin_stream_read(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_stream_read),
    .cos_sin_stream_num_data_valid(3'd0),
    .cos_sin_stream_fifo_cap(3'd0),
    .cos_sin_address0(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_address0),
    .cos_sin_ce0(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_ce0),
    .cos_sin_we0(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_we0),
    .cos_sin_d0(grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_d0)
);

ROPE_QK_QUANT_stage1_cache_cos_sin_Pipeline_2 grp_stage1_cache_cos_sin_Pipeline_2_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start),
    .ap_done(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done),
    .ap_idle(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_idle),
    .ap_ready(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_ready),
    .cache_stream_din(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cache_stream_din),
    .cache_stream_full_n(cache_stream_full_n),
    .cache_stream_write(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cache_stream_write),
    .cache_stream_num_data_valid(3'd0),
    .cache_stream_fifo_cap(3'd0),
    .cos_sin_address0(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cos_sin_address0),
    .cos_sin_ce0(grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cos_sin_ce0),
    .cos_sin_q0(cos_sin_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call3) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start_reg <= 1'b1;
        end else if ((grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_ready == 1'b1)) begin
            grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_ready == 1'b1)) begin
            grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cos_sin_address0 = grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cos_sin_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cos_sin_address0 = grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_address0;
    end else begin
        cos_sin_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cos_sin_ce0 = grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cos_sin_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cos_sin_ce0 = grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_ce0;
    end else begin
        cos_sin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cos_sin_we0 = grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_we0;
    end else begin
        cos_sin_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call3 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign cache_stream_din = grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cache_stream_din;

assign cache_stream_write = grp_stage1_cache_cos_sin_Pipeline_2_fu_34_cache_stream_write;

assign cos_sin_stream_read = grp_stage1_cache_cos_sin_Pipeline_1_fu_26_cos_sin_stream_read;

assign grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start = grp_stage1_cache_cos_sin_Pipeline_1_fu_26_ap_start_reg;

assign grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start = grp_stage1_cache_cos_sin_Pipeline_2_fu_34_ap_start_reg;

assign start_out = real_start;

endmodule //ROPE_QK_QUANT_stage1_cache_cos_sin
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ROPE_QK_QUANT_stage1_cache_cos_sin_cos_sin_RAM_AUTO_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 128;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "auto"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage1_cache_cos_sin_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cos_sin_stream_dout,
        cos_sin_stream_empty_n,
        cos_sin_stream_read,
        cos_sin_stream_num_data_valid,
        cos_sin_stream_fifo_cap,
        cos_sin_address0,
        cos_sin_ce0,
        cos_sin_we0,
        cos_sin_d0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] cos_sin_stream_dout;
input   cos_sin_stream_empty_n;
output   cos_sin_stream_read;
input  [2:0] cos_sin_stream_num_data_valid;
input  [2:0] cos_sin_stream_fifo_cap;
output  [5:0] cos_sin_address0;
output   cos_sin_ce0;
output   cos_sin_we0;
output  [127:0] cos_sin_d0;

reg ap_idle;
reg cos_sin_stream_read;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln43_reg_204;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln43_fu_91_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cos_sin_stream_blk_n;
reg   [0:0] icmp_ln43_reg_204_pp0_iter1_reg;
wire   [3:0] select_ln43_fu_126_p3;
reg   [3:0] select_ln43_reg_208;
wire   [2:0] trunc_ln51_fu_142_p1;
reg   [2:0] trunc_ln51_reg_213;
reg   [127:0] cos_sin_stream_read_reg_218;
wire   [63:0] zext_ln51_1_fu_178_p1;
reg   [3:0] hct_fu_42;
wire   [3:0] add_ln44_fu_146_p2;
wire    ap_loop_init;
reg   [3:0] t_fu_46;
wire   [3:0] select_ln43_1_fu_134_p3;
reg   [6:0] indvar_flatten_fu_50;
wire   [6:0] add_ln43_1_fu_97_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg    cos_sin_we0_local;
reg    cos_sin_ce0_local;
wire   [0:0] icmp_ln44_fu_120_p2;
wire   [3:0] add_ln43_fu_114_p2;
wire   [5:0] tmp_fu_162_p3;
wire   [5:0] zext_ln51_fu_169_p1;
wire   [5:0] add_ln51_fu_172_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 hct_fu_42 = 4'd0;
//#0 t_fu_46 = 4'd0;
//#0 indvar_flatten_fu_50 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

ROPE_QK_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        hct_fu_42 <= 4'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln43_reg_204 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        hct_fu_42 <= add_ln44_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln43_fu_91_p2 == 1'd0)) begin
            indvar_flatten_fu_50 <= add_ln43_1_fu_97_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_50 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_fu_46 <= 4'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln43_reg_204 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        t_fu_46 <= select_ln43_1_fu_134_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln43_reg_204 <= icmp_ln43_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cos_sin_stream_read_reg_218 <= cos_sin_stream_dout;
        icmp_ln43_reg_204_pp0_iter1_reg <= icmp_ln43_reg_204;
        select_ln43_reg_208 <= select_ln43_fu_126_p3;
        trunc_ln51_reg_213 <= trunc_ln51_fu_142_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln43_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_50;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        cos_sin_ce0_local = 1'b1;
    end else begin
        cos_sin_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_204 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cos_sin_stream_blk_n = cos_sin_stream_empty_n;
    end else begin
        cos_sin_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln43_reg_204 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cos_sin_stream_read = 1'b1;
    end else begin
        cos_sin_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_204_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        cos_sin_we0_local = 1'b1;
    end else begin
        cos_sin_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln43_reg_204_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_97_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln43_fu_114_p2 = (t_fu_46 + 4'd1);

assign add_ln44_fu_146_p2 = (select_ln43_fu_126_p3 + 4'd1);

assign add_ln51_fu_172_p2 = (tmp_fu_162_p3 + zext_ln51_fu_169_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln43_reg_204 == 1'd0) & (cos_sin_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cos_sin_address0 = zext_ln51_1_fu_178_p1;

assign cos_sin_ce0 = cos_sin_ce0_local;

assign cos_sin_d0 = cos_sin_stream_read_reg_218;

assign cos_sin_we0 = cos_sin_we0_local;

assign icmp_ln43_fu_91_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_120_p2 = ((hct_fu_42 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln43_1_fu_134_p3 = ((icmp_ln44_fu_120_p2[0:0] == 1'b1) ? add_ln43_fu_114_p2 : t_fu_46);

assign select_ln43_fu_126_p3 = ((icmp_ln44_fu_120_p2[0:0] == 1'b1) ? 4'd0 : hct_fu_42);

assign tmp_fu_162_p3 = {{trunc_ln51_reg_213}, {3'd0}};

assign trunc_ln51_fu_142_p1 = select_ln43_1_fu_134_p3[2:0];

assign zext_ln51_1_fu_178_p1 = add_ln51_fu_172_p2;

assign zext_ln51_fu_169_p1 = select_ln43_reg_208;

endmodule //ROPE_QK_QUANT_stage1_cache_cos_sin_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage1_cache_cos_sin_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_stream_din,
        cache_stream_full_n,
        cache_stream_write,
        cache_stream_num_data_valid,
        cache_stream_fifo_cap,
        cos_sin_address0,
        cos_sin_ce0,
        cos_sin_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [127:0] cache_stream_din;
input   cache_stream_full_n;
output   cache_stream_write;
input  [2:0] cache_stream_num_data_valid;
input  [2:0] cache_stream_fifo_cap;
output  [5:0] cos_sin_address0;
output   cos_sin_ce0;
input  [127:0] cos_sin_q0;

reg ap_idle;
reg cache_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg   [0:0] icmp_ln59_reg_364;
reg   [0:0] icmp_ln59_reg_364_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln59_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_stream_blk_n;
wire   [0:0] icmp_ln59_reg_364_pp0_iter0_reg;
reg   [0:0] icmp_ln59_reg_364_pp0_iter1_reg;
reg   [0:0] icmp_ln59_reg_364_pp0_iter2_reg;
wire   [0:0] icmp_ln60_fu_148_p2;
reg   [0:0] icmp_ln60_reg_368;
wire   [0:0] xor_ln59_fu_154_p2;
reg   [0:0] xor_ln59_reg_374;
wire   [0:0] icmp_ln62_fu_160_p2;
reg   [0:0] icmp_ln62_reg_379;
wire   [0:0] and_ln59_1_fu_166_p2;
reg   [0:0] and_ln59_1_reg_384;
wire   [0:0] or_ln60_fu_172_p2;
reg   [0:0] or_ln60_reg_389;
wire   [2:0] trunc_ln62_fu_280_p1;
reg   [2:0] trunc_ln62_reg_394;
wire   [3:0] select_ln62_1_fu_284_p3;
reg   [3:0] select_ln62_1_reg_399;
wire   [63:0] zext_ln70_1_fu_324_p1;
reg   [3:0] tp_fu_56;
wire   [3:0] add_ln63_fu_292_p2;
wire    ap_loop_init;
reg   [3:0] hct_fu_60;
reg   [7:0] indvar_flatten6_fu_64;
wire   [7:0] select_ln62_2_fu_184_p3;
reg   [8:0] indvar_flatten17_fu_68;
wire   [8:0] select_ln60_1_fu_198_p3;
reg   [10:0] indvar_flatten36_fu_72;
wire   [10:0] add_ln59_fu_131_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten36_load;
reg    cos_sin_ce0_local;
wire   [7:0] add_ln62_1_fu_178_p2;
wire   [8:0] add_ln60_fu_192_p2;
wire   [0:0] xor_ln60_fu_235_p2;
wire   [0:0] or_ln60_1_fu_240_p2;
wire   [0:0] and_ln59_fu_245_p2;
wire   [0:0] icmp_ln63_fu_222_p2;
wire   [3:0] select_ln60_fu_228_p3;
wire   [0:0] or_ln62_fu_262_p2;
wire   [0:0] and_ln60_fu_250_p2;
wire   [0:0] or_ln62_1_fu_266_p2;
wire   [3:0] select_ln62_fu_272_p3;
wire   [3:0] add_ln62_fu_256_p2;
wire   [5:0] tmp_1_fu_311_p3;
wire   [5:0] zext_ln70_fu_308_p1;
wire   [5:0] add_ln70_fu_318_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_98;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 tp_fu_56 = 4'd0;
//#0 hct_fu_60 = 4'd0;
//#0 indvar_flatten6_fu_64 = 8'd0;
//#0 indvar_flatten17_fu_68 = 9'd0;
//#0 indvar_flatten36_fu_72 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

ROPE_QK_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        hct_fu_60 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln59_reg_364_pp0_iter1_reg == 1'd0))) begin
        hct_fu_60 <= select_ln62_1_fu_284_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten17_fu_68 <= 9'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln59_reg_364_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten17_fu_68 <= select_ln60_1_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_98)) begin
        if ((icmp_ln59_fu_125_p2 == 1'd0)) begin
            indvar_flatten36_fu_72 <= add_ln59_fu_131_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten36_fu_72 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten6_fu_64 <= 8'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln59_reg_364_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten6_fu_64 <= select_ln62_2_fu_184_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tp_fu_56 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln59_reg_364_pp0_iter1_reg == 1'd0))) begin
        tp_fu_56 <= add_ln63_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        and_ln59_1_reg_384 <= and_ln59_1_fu_166_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln59_reg_364_pp0_iter1_reg <= icmp_ln59_reg_364;
        icmp_ln60_reg_368 <= icmp_ln60_fu_148_p2;
        icmp_ln62_reg_379 <= icmp_ln62_fu_160_p2;
        or_ln60_reg_389 <= or_ln60_fu_172_p2;
        xor_ln59_reg_374 <= xor_ln59_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln59_reg_364 <= icmp_ln59_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln59_reg_364_pp0_iter2_reg <= icmp_ln59_reg_364_pp0_iter1_reg;
        select_ln62_1_reg_399 <= select_ln62_1_fu_284_p3;
        trunc_ln62_reg_394 <= trunc_ln62_fu_280_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln59_reg_364_pp0_iter3_reg <= icmp_ln59_reg_364_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln59_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten36_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten36_load = indvar_flatten36_fu_72;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_364_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        cache_stream_blk_n = cache_stream_full_n;
    end else begin
        cache_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_364_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
        cache_stream_write = 1'b1;
    end else begin
        cache_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        cos_sin_ce0_local = 1'b1;
    end else begin
        cos_sin_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if (((1'b0 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if ((((icmp_ln59_reg_364_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state5_pp0_stage0_iter4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln59_fu_131_p2 = (ap_sig_allocacmp_indvar_flatten36_load + 11'd1);

assign add_ln60_fu_192_p2 = (indvar_flatten17_fu_68 + 9'd1);

assign add_ln62_1_fu_178_p2 = (indvar_flatten6_fu_64 + 8'd1);

assign add_ln62_fu_256_p2 = (select_ln60_fu_228_p3 + 4'd1);

assign add_ln63_fu_292_p2 = (select_ln62_fu_272_p3 + 4'd1);

assign add_ln70_fu_318_p2 = (tmp_1_fu_311_p3 + zext_ln70_fu_308_p1);

assign and_ln59_1_fu_166_p2 = (xor_ln59_fu_154_p2 & icmp_ln62_fu_160_p2);

assign and_ln59_fu_245_p2 = (xor_ln59_reg_374 & or_ln60_1_fu_240_p2);

assign and_ln60_fu_250_p2 = (icmp_ln63_fu_222_p2 & and_ln59_fu_245_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln59_reg_364_pp0_iter3_reg == 1'd0) & (cache_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_98 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_stream_din = cos_sin_q0;

assign cos_sin_address0 = zext_ln70_1_fu_324_p1;

assign cos_sin_ce0 = cos_sin_ce0_local;

assign icmp_ln59_fu_125_p2 = ((ap_sig_allocacmp_indvar_flatten36_load == 11'd1792) ? 1'b1 : 1'b0);

assign icmp_ln59_reg_364_pp0_iter0_reg = icmp_ln59_reg_364;

assign icmp_ln60_fu_148_p2 = ((indvar_flatten17_fu_68 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_160_p2 = ((indvar_flatten6_fu_64 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_222_p2 = ((tp_fu_56 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln60_1_fu_240_p2 = (xor_ln60_fu_235_p2 | icmp_ln60_reg_368);

assign or_ln60_fu_172_p2 = (icmp_ln60_fu_148_p2 | and_ln59_1_fu_166_p2);

assign or_ln62_1_fu_266_p2 = (or_ln62_fu_262_p2 | and_ln60_fu_250_p2);

assign or_ln62_fu_262_p2 = (icmp_ln60_reg_368 | and_ln59_1_reg_384);

assign select_ln60_1_fu_198_p3 = ((icmp_ln60_fu_148_p2[0:0] == 1'b1) ? 9'd1 : add_ln60_fu_192_p2);

assign select_ln60_fu_228_p3 = ((or_ln60_reg_389[0:0] == 1'b1) ? 4'd0 : hct_fu_60);

assign select_ln62_1_fu_284_p3 = ((and_ln60_fu_250_p2[0:0] == 1'b1) ? add_ln62_fu_256_p2 : select_ln60_fu_228_p3);

assign select_ln62_2_fu_184_p3 = ((or_ln60_fu_172_p2[0:0] == 1'b1) ? 8'd1 : add_ln62_1_fu_178_p2);

assign select_ln62_fu_272_p3 = ((or_ln62_1_fu_266_p2[0:0] == 1'b1) ? 4'd0 : tp_fu_56);

assign tmp_1_fu_311_p3 = {{trunc_ln62_reg_394}, {3'd0}};

assign trunc_ln62_fu_280_p1 = select_ln62_fu_272_p3[2:0];

assign xor_ln59_fu_154_p2 = (icmp_ln60_fu_148_p2 ^ 1'd1);

assign xor_ln60_fu_235_p2 = (icmp_ln62_reg_379 ^ 1'd1);

assign zext_ln70_1_fu_324_p1 = add_ln70_fu_318_p2;

assign zext_ln70_fu_308_p1 = select_ln62_1_reg_399;

endmodule //ROPE_QK_QUANT_stage1_cache_cos_sin_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage1_preprocess (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gamma_stream_din,
        gamma_stream_full_n,
        gamma_stream_write,
        gamma_stream_num_data_valid,
        gamma_stream_fifo_cap,
        n_quarter_stream_din,
        n_quarter_stream_full_n,
        n_quarter_stream_write,
        n_quarter_stream_num_data_valid,
        n_quarter_stream_fifo_cap,
        start_out,
        start_write,
        pos_id
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter16_fsm_state17 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;
parameter    ap_ST_iter16_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [87:0] gamma_stream_din;
input   gamma_stream_full_n;
output   gamma_stream_write;
input  [2:0] gamma_stream_num_data_valid;
input  [2:0] gamma_stream_fifo_cap;
output  [39:0] n_quarter_stream_din;
input   n_quarter_stream_full_n;
output   n_quarter_stream_write;
input  [2:0] n_quarter_stream_num_data_valid;
input  [2:0] n_quarter_stream_fifo_cap;
output   start_out;
output   start_write;
input  [31:0] pos_id;

reg ap_idle;
reg gamma_stream_write;
reg n_quarter_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg   [1:0] ap_CS_iter16_fsm;
wire    ap_CS_iter16_fsm_state0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_CS_iter15_fsm_state16;
wire    ap_CS_iter14_fsm_state15;
wire    ap_CS_iter13_fsm_state14;
reg   [0:0] icmp_ln71_reg_871;
reg   [0:0] icmp_ln71_reg_871_pp0_iter15_reg;
reg    ap_block_state17_pp0_stage0_iter16;
wire    ap_CS_iter16_fsm_state17;
wire   [0:0] icmp_ln71_fu_306_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
wire   [3:0] p_ZL11ROPE_THETAS_0_address0;
wire   [24:0] p_ZL11ROPE_THETAS_0_q0;
wire   [3:0] p_ZL11ROPE_THETAS_0_address1;
wire   [24:0] p_ZL11ROPE_THETAS_0_q1;
wire   [3:0] p_ZL11ROPE_THETAS_1_address0;
wire   [23:0] p_ZL11ROPE_THETAS_1_q0;
wire   [3:0] p_ZL11ROPE_THETAS_1_address1;
wire   [23:0] p_ZL11ROPE_THETAS_1_q1;
reg    gamma_stream_blk_n;
reg    n_quarter_stream_blk_n;
reg   [31:0] pos_id_read_reg_866;
reg   [31:0] pos_id_read_reg_866_pp0_iter1_reg;
wire   [0:0] icmp_ln71_reg_871_pp0_iter0_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter1_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter2_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter3_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter4_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter5_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter6_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter7_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter8_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter9_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter10_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter11_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter12_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter13_reg;
reg   [0:0] icmp_ln71_reg_871_pp0_iter14_reg;
wire   [3:0] select_ln71_1_fu_349_p3;
reg   [3:0] select_ln71_1_reg_875;
wire  signed [31:0] pos_ids_fu_406_p2;
reg  signed [31:0] pos_ids_reg_900;
reg   [24:0] p_ZL11ROPE_THETAS_0_load_reg_908;
reg   [23:0] p_ZL11ROPE_THETAS_1_load_reg_913;
reg   [24:0] p_ZL11ROPE_THETAS_0_load_1_reg_918;
reg   [23:0] p_ZL11ROPE_THETAS_1_load_1_reg_923;
reg  signed [19:0] freqs_reg_948;
reg  signed [19:0] freqs_reg_948_pp0_iter8_reg;
reg  signed [19:0] freqs_reg_948_pp0_iter9_reg;
reg  signed [19:0] freqs_reg_948_pp0_iter10_reg;
reg  signed [19:0] freqs_reg_948_pp0_iter11_reg;
reg  signed [19:0] freqs_reg_948_pp0_iter12_reg;
reg  signed [19:0] freqs_reg_948_pp0_iter13_reg;
reg  signed [19:0] freqs_1_reg_954;
reg  signed [19:0] freqs_1_reg_954_pp0_iter8_reg;
reg  signed [19:0] freqs_1_reg_954_pp0_iter9_reg;
reg  signed [19:0] freqs_1_reg_954_pp0_iter10_reg;
reg  signed [19:0] freqs_1_reg_954_pp0_iter11_reg;
reg  signed [19:0] freqs_1_reg_954_pp0_iter12_reg;
reg  signed [19:0] freqs_1_reg_954_pp0_iter13_reg;
reg  signed [19:0] freqs_2_reg_960;
reg  signed [19:0] freqs_2_reg_960_pp0_iter8_reg;
reg  signed [19:0] freqs_2_reg_960_pp0_iter9_reg;
reg  signed [19:0] freqs_2_reg_960_pp0_iter10_reg;
reg  signed [19:0] freqs_2_reg_960_pp0_iter11_reg;
reg  signed [19:0] freqs_2_reg_960_pp0_iter12_reg;
reg  signed [19:0] freqs_2_reg_960_pp0_iter13_reg;
reg  signed [19:0] freqs_3_reg_966;
reg  signed [19:0] freqs_3_reg_966_pp0_iter8_reg;
reg  signed [19:0] freqs_3_reg_966_pp0_iter9_reg;
reg  signed [19:0] freqs_3_reg_966_pp0_iter10_reg;
reg  signed [19:0] freqs_3_reg_966_pp0_iter11_reg;
reg  signed [19:0] freqs_3_reg_966_pp0_iter12_reg;
reg  signed [19:0] freqs_3_reg_966_pp0_iter13_reg;
reg   [2:0] trunc_ln_reg_992;
reg   [2:0] trunc_ln_reg_992_pp0_iter12_reg;
reg   [2:0] trunc_ln_reg_992_pp0_iter13_reg;
reg   [2:0] trunc_ln_reg_992_pp0_iter14_reg;
reg   [2:0] trunc_ln_reg_992_pp0_iter15_reg;
reg  signed [6:0] trunc_ln8_reg_997;
reg   [2:0] trunc_ln103_1_reg_1002;
reg   [2:0] trunc_ln103_1_reg_1002_pp0_iter12_reg;
reg   [2:0] trunc_ln103_1_reg_1002_pp0_iter13_reg;
reg   [2:0] trunc_ln103_1_reg_1002_pp0_iter14_reg;
reg   [2:0] trunc_ln103_1_reg_1002_pp0_iter15_reg;
reg  signed [6:0] trunc_ln104_1_reg_1007;
reg   [2:0] trunc_ln103_2_reg_1012;
reg   [2:0] trunc_ln103_2_reg_1012_pp0_iter12_reg;
reg   [2:0] trunc_ln103_2_reg_1012_pp0_iter13_reg;
reg   [2:0] trunc_ln103_2_reg_1012_pp0_iter14_reg;
reg   [2:0] trunc_ln103_2_reg_1012_pp0_iter15_reg;
reg  signed [6:0] trunc_ln104_2_reg_1017;
reg   [2:0] trunc_ln103_3_reg_1022;
reg   [2:0] trunc_ln103_3_reg_1022_pp0_iter12_reg;
reg   [2:0] trunc_ln103_3_reg_1022_pp0_iter13_reg;
reg   [2:0] trunc_ln103_3_reg_1022_pp0_iter14_reg;
reg   [2:0] trunc_ln103_3_reg_1022_pp0_iter15_reg;
reg  signed [6:0] trunc_ln104_3_reg_1027;
wire  signed [21:0] grp_fu_785_p3;
reg  signed [21:0] add_ln106_reg_1072;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln122_fu_607_p2;
reg   [21:0] sub_ln122_reg_1077;
(* use_dsp48 = "no" *) wire   [21:0] add_ln120_fu_612_p2;
reg   [21:0] add_ln120_reg_1082;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln118_fu_617_p2;
reg   [21:0] sub_ln118_reg_1087;
(* use_dsp48 = "no" *) wire   [21:0] add_ln116_fu_622_p2;
reg   [21:0] add_ln116_reg_1092;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln114_fu_627_p2;
reg   [21:0] sub_ln114_reg_1097;
(* use_dsp48 = "no" *) wire   [21:0] add_ln112_fu_632_p2;
reg   [21:0] add_ln112_reg_1102;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln110_fu_637_p2;
reg   [21:0] sub_ln110_reg_1107;
wire  signed [21:0] grp_fu_800_p3;
reg  signed [21:0] add_ln106_1_reg_1112;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln122_1_fu_642_p2;
reg   [21:0] sub_ln122_1_reg_1117;
(* use_dsp48 = "no" *) wire   [21:0] add_ln120_1_fu_647_p2;
reg   [21:0] add_ln120_1_reg_1122;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln118_1_fu_652_p2;
reg   [21:0] sub_ln118_1_reg_1127;
(* use_dsp48 = "no" *) wire   [21:0] add_ln116_1_fu_657_p2;
reg   [21:0] add_ln116_1_reg_1132;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln114_1_fu_662_p2;
reg   [21:0] sub_ln114_1_reg_1137;
(* use_dsp48 = "no" *) wire   [21:0] add_ln112_1_fu_667_p2;
reg   [21:0] add_ln112_1_reg_1142;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln110_1_fu_672_p2;
reg   [21:0] sub_ln110_1_reg_1147;
wire  signed [21:0] grp_fu_815_p3;
reg  signed [21:0] add_ln106_2_reg_1152;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln122_2_fu_677_p2;
reg   [21:0] sub_ln122_2_reg_1157;
(* use_dsp48 = "no" *) wire   [21:0] add_ln120_2_fu_682_p2;
reg   [21:0] add_ln120_2_reg_1162;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln118_2_fu_687_p2;
reg   [21:0] sub_ln118_2_reg_1167;
(* use_dsp48 = "no" *) wire   [21:0] add_ln116_2_fu_692_p2;
reg   [21:0] add_ln116_2_reg_1172;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln114_2_fu_697_p2;
reg   [21:0] sub_ln114_2_reg_1177;
(* use_dsp48 = "no" *) wire   [21:0] add_ln112_2_fu_702_p2;
reg   [21:0] add_ln112_2_reg_1182;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln110_2_fu_707_p2;
reg   [21:0] sub_ln110_2_reg_1187;
wire  signed [21:0] grp_fu_830_p3;
reg  signed [21:0] add_ln106_3_reg_1192;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln122_3_fu_712_p2;
reg   [21:0] sub_ln122_3_reg_1197;
(* use_dsp48 = "no" *) wire   [21:0] add_ln120_3_fu_717_p2;
reg   [21:0] add_ln120_3_reg_1202;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln118_3_fu_722_p2;
reg   [21:0] sub_ln118_3_reg_1207;
(* use_dsp48 = "no" *) wire   [21:0] add_ln116_3_fu_727_p2;
reg   [21:0] add_ln116_3_reg_1212;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln114_3_fu_732_p2;
reg   [21:0] sub_ln114_3_reg_1217;
(* use_dsp48 = "no" *) wire   [21:0] add_ln112_3_fu_737_p2;
reg   [21:0] add_ln112_3_reg_1222;
(* use_dsp48 = "no" *) wire   [21:0] sub_ln110_3_fu_742_p2;
reg   [21:0] sub_ln110_3_reg_1227;
reg   [21:0] ap_phi_mux_GAMMA_6_in_phi_fu_191_p16;
wire   [21:0] ap_phi_reg_pp0_iter16_GAMMA_6_in_reg_188;
reg   [21:0] ap_phi_mux_phi_ln131_phi_fu_212_p16;
wire   [21:0] ap_phi_reg_pp0_iter16_phi_ln131_reg_209;
reg   [21:0] ap_phi_mux_phi_ln131_1_phi_fu_233_p16;
wire   [21:0] ap_phi_reg_pp0_iter16_phi_ln131_1_reg_230;
reg   [21:0] ap_phi_mux_phi_ln131_2_phi_fu_254_p16;
wire   [21:0] ap_phi_reg_pp0_iter16_phi_ln131_2_reg_251;
wire   [63:0] zext_ln87_fu_367_p1;
wire   [63:0] zext_ln87_1_fu_381_p1;
reg   [3:0] hc2t_fu_106;
wire   [3:0] add_ln72_fu_387_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_110;
reg   [6:0] indvar_flatten_fu_114;
wire   [6:0] add_ln71_fu_312_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg    p_ZL11ROPE_THETAS_0_ce1_local;
reg    p_ZL11ROPE_THETAS_0_ce0_local;
reg    p_ZL11ROPE_THETAS_1_ce1_local;
reg    p_ZL11ROPE_THETAS_1_ce0_local;
wire   [23:0] grp_fu_272_p1;
wire   [23:0] grp_fu_276_p1;
wire   [24:0] grp_fu_280_p1;
wire   [24:0] grp_fu_284_p1;
wire   [0:0] icmp_ln72_fu_335_p2;
wire   [3:0] tt_2_fu_329_p2;
wire   [3:0] select_ln71_fu_341_p3;
wire   [3:0] shl_ln87_fu_361_p2;
wire   [2:0] trunc_ln87_fu_357_p1;
wire   [3:0] or_ln_fu_373_p3;
wire   [31:0] zext_ln71_fu_403_p1;
wire   [31:0] grp_fu_280_p2;
wire   [31:0] grp_fu_272_p2;
wire   [31:0] grp_fu_284_p2;
wire   [31:0] grp_fu_276_p2;
wire   [13:0] grp_fu_470_p1;
wire   [13:0] grp_fu_479_p1;
wire   [13:0] grp_fu_488_p1;
wire   [13:0] grp_fu_497_p1;
wire   [33:0] grp_fu_470_p2;
wire   [33:0] grp_fu_479_p2;
wire   [33:0] grp_fu_488_p2;
wire   [33:0] grp_fu_497_p2;
wire   [9:0] zext_ln106_2_fu_753_p1;
wire   [9:0] zext_ln106_1_fu_750_p1;
wire   [9:0] zext_ln106_fu_747_p1;
wire   [32:0] or_ln132_5_fu_769_p5;
wire  signed [15:0] grp_fu_785_p0;
wire  signed [15:0] grp_fu_800_p0;
wire  signed [15:0] grp_fu_815_p0;
wire  signed [15:0] grp_fu_830_p0;
reg    grp_fu_272_ce;
reg    grp_fu_276_ce;
reg    grp_fu_280_ce;
reg    grp_fu_284_ce;
reg    grp_fu_470_ce;
reg    grp_fu_479_ce;
reg    grp_fu_488_ce;
reg    grp_fu_497_ce;
reg    grp_fu_785_ce;
reg    grp_fu_800_ce;
reg    grp_fu_815_ce;
reg    grp_fu_830_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg   [1:0] ap_NS_iter16_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
wire    ap_ST_iter15_fsm_state16_blk;
reg    ap_ST_iter16_fsm_state17_blk;
wire    ap_start_int;
wire    ap_done_sig;
wire   [31:0] grp_fu_272_p10;
wire   [31:0] grp_fu_276_p10;
wire   [31:0] grp_fu_280_p10;
wire   [31:0] grp_fu_284_p10;
reg    ap_condition_272;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_CS_iter16_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 hc2t_fu_106 = 4'd0;
//#0 tt_fu_110 = 4'd0;
//#0 indvar_flatten_fu_114 = 7'd0;
end

ROPE_QK_QUANT_stage1_preprocess_p_ZL11ROPE_THETAS_0_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_ZL11ROPE_THETAS_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL11ROPE_THETAS_0_address0),
    .ce0(p_ZL11ROPE_THETAS_0_ce0_local),
    .q0(p_ZL11ROPE_THETAS_0_q0),
    .address1(p_ZL11ROPE_THETAS_0_address1),
    .ce1(p_ZL11ROPE_THETAS_0_ce1_local),
    .q1(p_ZL11ROPE_THETAS_0_q1)
);

ROPE_QK_QUANT_stage1_preprocess_p_ZL11ROPE_THETAS_1_ROM_AUTO_1R #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_ZL11ROPE_THETAS_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL11ROPE_THETAS_1_address0),
    .ce0(p_ZL11ROPE_THETAS_1_ce0_local),
    .q0(p_ZL11ROPE_THETAS_1_q0),
    .address1(p_ZL11ROPE_THETAS_1_address1),
    .ce1(p_ZL11ROPE_THETAS_1_ce1_local),
    .q1(p_ZL11ROPE_THETAS_1_q1)
);

ROPE_QK_QUANT_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
mul_32s_24ns_32_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pos_ids_reg_900),
    .din1(grp_fu_272_p1),
    .ce(grp_fu_272_ce),
    .dout(grp_fu_272_p2)
);

ROPE_QK_QUANT_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
mul_32s_24ns_32_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pos_ids_reg_900),
    .din1(grp_fu_276_p1),
    .ce(grp_fu_276_ce),
    .dout(grp_fu_276_p2)
);

ROPE_QK_QUANT_mul_32s_25ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 32 ))
mul_32s_25ns_32_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pos_ids_reg_900),
    .din1(grp_fu_280_p1),
    .ce(grp_fu_280_ce),
    .dout(grp_fu_280_p2)
);

ROPE_QK_QUANT_mul_32s_25ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 32 ))
mul_32s_25ns_32_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pos_ids_reg_900),
    .din1(grp_fu_284_p1),
    .ce(grp_fu_284_ce),
    .dout(grp_fu_284_p2)
);

ROPE_QK_QUANT_mul_20s_14ns_34_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 34 ))
mul_20s_14ns_34_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(freqs_reg_948),
    .din1(grp_fu_470_p1),
    .ce(grp_fu_470_ce),
    .dout(grp_fu_470_p2)
);

ROPE_QK_QUANT_mul_20s_14ns_34_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 34 ))
mul_20s_14ns_34_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(freqs_1_reg_954),
    .din1(grp_fu_479_p1),
    .ce(grp_fu_479_ce),
    .dout(grp_fu_479_p2)
);

ROPE_QK_QUANT_mul_20s_14ns_34_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 34 ))
mul_20s_14ns_34_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(freqs_2_reg_960),
    .din1(grp_fu_488_p1),
    .ce(grp_fu_488_ce),
    .dout(grp_fu_488_p2)
);

ROPE_QK_QUANT_mul_20s_14ns_34_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 34 ))
mul_20s_14ns_34_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(freqs_3_reg_966),
    .din1(grp_fu_497_p1),
    .ce(grp_fu_497_ce),
    .dout(grp_fu_497_p2)
);

ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 22 ))
mac_muladd_16s_7s_20s_22_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_785_p0),
    .din1(trunc_ln8_reg_997),
    .din2(freqs_reg_948_pp0_iter13_reg),
    .ce(grp_fu_785_ce),
    .dout(grp_fu_785_p3)
);

ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 22 ))
mac_muladd_16s_7s_20s_22_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_800_p0),
    .din1(trunc_ln104_1_reg_1007),
    .din2(freqs_1_reg_954_pp0_iter13_reg),
    .ce(grp_fu_800_ce),
    .dout(grp_fu_800_p3)
);

ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 22 ))
mac_muladd_16s_7s_20s_22_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_815_p0),
    .din1(trunc_ln104_2_reg_1017),
    .din2(freqs_2_reg_960_pp0_iter13_reg),
    .ce(grp_fu_815_ce),
    .dout(grp_fu_815_p3)
);

ROPE_QK_QUANT_mac_muladd_16s_7s_20s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 22 ))
mac_muladd_16s_7s_20s_22_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_830_p0),
    .din1(trunc_ln104_3_reg_1027),
    .din2(freqs_3_reg_966_pp0_iter13_reg),
    .ce(grp_fu_830_ce),
    .dout(grp_fu_830_p3)
);

ROPE_QK_QUANT_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter16_fsm <= ap_ST_iter16_fsm_state0;
    end else begin
        ap_CS_iter16_fsm <= ap_NS_iter16_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        hc2t_fu_106 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (icmp_ln71_reg_871_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        hc2t_fu_106 <= add_ln72_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_272)) begin
        if ((icmp_ln71_fu_306_p2 == 1'd0)) begin
            indvar_flatten_fu_114 <= add_ln71_fu_312_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_114 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tt_fu_110 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (icmp_ln71_reg_871_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tt_fu_110 <= select_ln71_1_fu_349_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        add_ln106_1_reg_1112 <= grp_fu_800_p3;
        add_ln106_2_reg_1152 <= grp_fu_815_p3;
        add_ln106_3_reg_1192 <= grp_fu_830_p3;
        add_ln106_reg_1072 <= grp_fu_785_p3;
        add_ln112_1_reg_1142 <= add_ln112_1_fu_667_p2;
        add_ln112_2_reg_1182 <= add_ln112_2_fu_702_p2;
        add_ln112_3_reg_1222 <= add_ln112_3_fu_737_p2;
        add_ln112_reg_1102 <= add_ln112_fu_632_p2;
        add_ln116_1_reg_1132 <= add_ln116_1_fu_657_p2;
        add_ln116_2_reg_1172 <= add_ln116_2_fu_692_p2;
        add_ln116_3_reg_1212 <= add_ln116_3_fu_727_p2;
        add_ln116_reg_1092 <= add_ln116_fu_622_p2;
        add_ln120_1_reg_1122 <= add_ln120_1_fu_647_p2;
        add_ln120_2_reg_1162 <= add_ln120_2_fu_682_p2;
        add_ln120_3_reg_1202 <= add_ln120_3_fu_717_p2;
        add_ln120_reg_1082 <= add_ln120_fu_612_p2;
        icmp_ln71_reg_871_pp0_iter15_reg <= icmp_ln71_reg_871_pp0_iter14_reg;
        sub_ln110_1_reg_1147 <= sub_ln110_1_fu_672_p2;
        sub_ln110_2_reg_1187 <= sub_ln110_2_fu_707_p2;
        sub_ln110_3_reg_1227 <= sub_ln110_3_fu_742_p2;
        sub_ln110_reg_1107 <= sub_ln110_fu_637_p2;
        sub_ln114_1_reg_1137 <= sub_ln114_1_fu_662_p2;
        sub_ln114_2_reg_1177 <= sub_ln114_2_fu_697_p2;
        sub_ln114_3_reg_1217 <= sub_ln114_3_fu_732_p2;
        sub_ln114_reg_1097 <= sub_ln114_fu_627_p2;
        sub_ln118_1_reg_1127 <= sub_ln118_1_fu_652_p2;
        sub_ln118_2_reg_1167 <= sub_ln118_2_fu_687_p2;
        sub_ln118_3_reg_1207 <= sub_ln118_3_fu_722_p2;
        sub_ln118_reg_1087 <= sub_ln118_fu_617_p2;
        sub_ln122_1_reg_1117 <= sub_ln122_1_fu_642_p2;
        sub_ln122_2_reg_1157 <= sub_ln122_2_fu_677_p2;
        sub_ln122_3_reg_1197 <= sub_ln122_3_fu_712_p2;
        sub_ln122_reg_1077 <= sub_ln122_fu_607_p2;
        trunc_ln103_1_reg_1002_pp0_iter15_reg <= trunc_ln103_1_reg_1002_pp0_iter14_reg;
        trunc_ln103_2_reg_1012_pp0_iter15_reg <= trunc_ln103_2_reg_1012_pp0_iter14_reg;
        trunc_ln103_3_reg_1022_pp0_iter15_reg <= trunc_ln103_3_reg_1022_pp0_iter14_reg;
        trunc_ln_reg_992_pp0_iter15_reg <= trunc_ln_reg_992_pp0_iter14_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        freqs_1_reg_954_pp0_iter9_reg <= freqs_1_reg_954_pp0_iter8_reg;
        freqs_2_reg_960_pp0_iter9_reg <= freqs_2_reg_960_pp0_iter8_reg;
        freqs_3_reg_966_pp0_iter9_reg <= freqs_3_reg_966_pp0_iter8_reg;
        freqs_reg_948_pp0_iter9_reg <= freqs_reg_948_pp0_iter8_reg;
        icmp_ln71_reg_871_pp0_iter9_reg <= icmp_ln71_reg_871_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        freqs_1_reg_954_pp0_iter10_reg <= freqs_1_reg_954_pp0_iter9_reg;
        freqs_2_reg_960_pp0_iter10_reg <= freqs_2_reg_960_pp0_iter9_reg;
        freqs_3_reg_966_pp0_iter10_reg <= freqs_3_reg_966_pp0_iter9_reg;
        freqs_reg_948_pp0_iter10_reg <= freqs_reg_948_pp0_iter9_reg;
        icmp_ln71_reg_871_pp0_iter10_reg <= icmp_ln71_reg_871_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        freqs_1_reg_954_pp0_iter11_reg <= freqs_1_reg_954_pp0_iter10_reg;
        freqs_2_reg_960_pp0_iter11_reg <= freqs_2_reg_960_pp0_iter10_reg;
        freqs_3_reg_966_pp0_iter11_reg <= freqs_3_reg_966_pp0_iter10_reg;
        freqs_reg_948_pp0_iter11_reg <= freqs_reg_948_pp0_iter10_reg;
        icmp_ln71_reg_871_pp0_iter11_reg <= icmp_ln71_reg_871_pp0_iter10_reg;
        trunc_ln103_1_reg_1002 <= {{grp_fu_479_p2[26:24]}};
        trunc_ln103_2_reg_1012 <= {{grp_fu_488_p2[26:24]}};
        trunc_ln103_3_reg_1022 <= {{grp_fu_497_p2[26:24]}};
        trunc_ln104_1_reg_1007 <= {{grp_fu_479_p2[33:27]}};
        trunc_ln104_2_reg_1017 <= {{grp_fu_488_p2[33:27]}};
        trunc_ln104_3_reg_1027 <= {{grp_fu_497_p2[33:27]}};
        trunc_ln8_reg_997 <= {{grp_fu_470_p2[33:27]}};
        trunc_ln_reg_992 <= {{grp_fu_470_p2[26:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        freqs_1_reg_954_pp0_iter12_reg <= freqs_1_reg_954_pp0_iter11_reg;
        freqs_2_reg_960_pp0_iter12_reg <= freqs_2_reg_960_pp0_iter11_reg;
        freqs_3_reg_966_pp0_iter12_reg <= freqs_3_reg_966_pp0_iter11_reg;
        freqs_reg_948_pp0_iter12_reg <= freqs_reg_948_pp0_iter11_reg;
        icmp_ln71_reg_871_pp0_iter12_reg <= icmp_ln71_reg_871_pp0_iter11_reg;
        trunc_ln103_1_reg_1002_pp0_iter12_reg <= trunc_ln103_1_reg_1002;
        trunc_ln103_2_reg_1012_pp0_iter12_reg <= trunc_ln103_2_reg_1012;
        trunc_ln103_3_reg_1022_pp0_iter12_reg <= trunc_ln103_3_reg_1022;
        trunc_ln_reg_992_pp0_iter12_reg <= trunc_ln_reg_992;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        freqs_1_reg_954_pp0_iter13_reg <= freqs_1_reg_954_pp0_iter12_reg;
        freqs_2_reg_960_pp0_iter13_reg <= freqs_2_reg_960_pp0_iter12_reg;
        freqs_3_reg_966_pp0_iter13_reg <= freqs_3_reg_966_pp0_iter12_reg;
        freqs_reg_948_pp0_iter13_reg <= freqs_reg_948_pp0_iter12_reg;
        icmp_ln71_reg_871_pp0_iter13_reg <= icmp_ln71_reg_871_pp0_iter12_reg;
        trunc_ln103_1_reg_1002_pp0_iter13_reg <= trunc_ln103_1_reg_1002_pp0_iter12_reg;
        trunc_ln103_2_reg_1012_pp0_iter13_reg <= trunc_ln103_2_reg_1012_pp0_iter12_reg;
        trunc_ln103_3_reg_1022_pp0_iter13_reg <= trunc_ln103_3_reg_1022_pp0_iter12_reg;
        trunc_ln_reg_992_pp0_iter13_reg <= trunc_ln_reg_992_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        icmp_ln71_reg_871_pp0_iter14_reg <= icmp_ln71_reg_871_pp0_iter13_reg;
        trunc_ln103_1_reg_1002_pp0_iter14_reg <= trunc_ln103_1_reg_1002_pp0_iter13_reg;
        trunc_ln103_2_reg_1012_pp0_iter14_reg <= trunc_ln103_2_reg_1012_pp0_iter13_reg;
        trunc_ln103_3_reg_1022_pp0_iter14_reg <= trunc_ln103_3_reg_1022_pp0_iter13_reg;
        trunc_ln_reg_992_pp0_iter14_reg <= trunc_ln_reg_992_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln71_reg_871 <= icmp_ln71_fu_306_p2;
        pos_id_read_reg_866 <= pos_id;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln71_reg_871_pp0_iter1_reg <= icmp_ln71_reg_871;
        pos_id_read_reg_866_pp0_iter1_reg <= pos_id_read_reg_866;
        select_ln71_1_reg_875 <= select_ln71_1_fu_349_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln71_reg_871_pp0_iter2_reg <= icmp_ln71_reg_871_pp0_iter1_reg;
        p_ZL11ROPE_THETAS_0_load_1_reg_918 <= p_ZL11ROPE_THETAS_0_q0;
        p_ZL11ROPE_THETAS_0_load_reg_908 <= p_ZL11ROPE_THETAS_0_q1;
        p_ZL11ROPE_THETAS_1_load_1_reg_923 <= p_ZL11ROPE_THETAS_1_q0;
        p_ZL11ROPE_THETAS_1_load_reg_913 <= p_ZL11ROPE_THETAS_1_q1;
        pos_ids_reg_900 <= pos_ids_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln71_reg_871_pp0_iter3_reg <= icmp_ln71_reg_871_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln71_reg_871_pp0_iter4_reg <= icmp_ln71_reg_871_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln71_reg_871_pp0_iter5_reg <= icmp_ln71_reg_871_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln71_reg_871_pp0_iter6_reg <= icmp_ln71_reg_871_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        freqs_1_reg_954 <= {{grp_fu_272_p2[31:12]}};
        freqs_2_reg_960 <= {{grp_fu_284_p2[31:12]}};
        freqs_3_reg_966 <= {{grp_fu_276_p2[31:12]}};
        freqs_reg_948 <= {{grp_fu_280_p2[31:12]}};
        icmp_ln71_reg_871_pp0_iter7_reg <= icmp_ln71_reg_871_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        freqs_1_reg_954_pp0_iter8_reg <= freqs_1_reg_954;
        freqs_2_reg_960_pp0_iter8_reg <= freqs_2_reg_960;
        freqs_3_reg_966_pp0_iter8_reg <= freqs_3_reg_966;
        freqs_reg_948_pp0_iter8_reg <= freqs_reg_948;
        icmp_ln71_reg_871_pp0_iter8_reg <= icmp_ln71_reg_871_pp0_iter7_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

assign ap_ST_iter15_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state17_pp0_stage0_iter16)) begin
        ap_ST_iter16_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_iter16_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (icmp_ln71_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter16_fsm_state0) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0)) begin
        if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd0)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = add_ln106_reg_1072;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd7)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = sub_ln122_reg_1077;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd6)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = add_ln120_reg_1082;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd5)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = sub_ln118_reg_1087;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd4)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = add_ln116_reg_1092;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd3)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = sub_ln114_reg_1097;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd2)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = add_ln112_reg_1102;
        end else if ((trunc_ln_reg_992_pp0_iter15_reg == 3'd1)) begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = sub_ln110_reg_1107;
        end else begin
            ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = ap_phi_reg_pp0_iter16_GAMMA_6_in_reg_188;
        end
    end else begin
        ap_phi_mux_GAMMA_6_in_phi_fu_191_p16 = ap_phi_reg_pp0_iter16_GAMMA_6_in_reg_188;
    end
end

always @ (*) begin
    if ((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0)) begin
        if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd0)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = add_ln106_2_reg_1152;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd7)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = sub_ln122_2_reg_1157;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd6)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = add_ln120_2_reg_1162;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd5)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = sub_ln118_2_reg_1167;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd4)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = add_ln116_2_reg_1172;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd3)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = sub_ln114_2_reg_1177;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd2)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = add_ln112_2_reg_1182;
        end else if ((trunc_ln103_2_reg_1012_pp0_iter15_reg == 3'd1)) begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = sub_ln110_2_reg_1187;
        end else begin
            ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = ap_phi_reg_pp0_iter16_phi_ln131_1_reg_230;
        end
    end else begin
        ap_phi_mux_phi_ln131_1_phi_fu_233_p16 = ap_phi_reg_pp0_iter16_phi_ln131_1_reg_230;
    end
end

always @ (*) begin
    if ((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0)) begin
        if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd0)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = add_ln106_3_reg_1192;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd7)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = sub_ln122_3_reg_1197;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd6)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = add_ln120_3_reg_1202;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd5)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = sub_ln118_3_reg_1207;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd4)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = add_ln116_3_reg_1212;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd3)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = sub_ln114_3_reg_1217;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd2)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = add_ln112_3_reg_1222;
        end else if ((trunc_ln103_3_reg_1022_pp0_iter15_reg == 3'd1)) begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = sub_ln110_3_reg_1227;
        end else begin
            ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = ap_phi_reg_pp0_iter16_phi_ln131_2_reg_251;
        end
    end else begin
        ap_phi_mux_phi_ln131_2_phi_fu_254_p16 = ap_phi_reg_pp0_iter16_phi_ln131_2_reg_251;
    end
end

always @ (*) begin
    if ((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0)) begin
        if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd0)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = add_ln106_1_reg_1112;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd7)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = sub_ln122_1_reg_1117;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd6)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = add_ln120_1_reg_1122;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd5)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = sub_ln118_1_reg_1127;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd4)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = add_ln116_1_reg_1132;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd3)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = sub_ln114_1_reg_1137;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd2)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = add_ln112_1_reg_1142;
        end else if ((trunc_ln103_1_reg_1002_pp0_iter15_reg == 3'd1)) begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = sub_ln110_1_reg_1147;
        end else begin
            ap_phi_mux_phi_ln131_phi_fu_212_p16 = ap_phi_reg_pp0_iter16_phi_ln131_reg_209;
        end
    end else begin
        ap_phi_mux_phi_ln131_phi_fu_212_p16 = ap_phi_reg_pp0_iter16_phi_ln131_reg_209;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_114;
    end
end

always @ (*) begin
    if (((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        gamma_stream_blk_n = gamma_stream_full_n;
    end else begin
        gamma_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln71_reg_871_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        gamma_stream_write = 1'b1;
    end else begin
        gamma_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_272_ce = 1'b1;
    end else begin
        grp_fu_272_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_280_ce = 1'b1;
    end else begin
        grp_fu_280_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_284_ce = 1'b1;
    end else begin
        grp_fu_284_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_470_ce = 1'b1;
    end else begin
        grp_fu_470_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_479_ce = 1'b1;
    end else begin
        grp_fu_479_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_488_ce = 1'b1;
    end else begin
        grp_fu_488_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_497_ce = 1'b1;
    end else begin
        grp_fu_497_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13)))) begin
        grp_fu_785_ce = 1'b1;
    end else begin
        grp_fu_785_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13)))) begin
        grp_fu_800_ce = 1'b1;
    end else begin
        grp_fu_800_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13)))) begin
        grp_fu_815_ce = 1'b1;
    end else begin
        grp_fu_815_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13)))) begin
        grp_fu_830_ce = 1'b1;
    end else begin
        grp_fu_830_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        n_quarter_stream_blk_n = n_quarter_stream_full_n;
    end else begin
        n_quarter_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln71_reg_871_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        n_quarter_stream_write = 1'b1;
    end else begin
        n_quarter_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL11ROPE_THETAS_0_ce0_local = 1'b1;
    end else begin
        p_ZL11ROPE_THETAS_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL11ROPE_THETAS_0_ce1_local = 1'b1;
    end else begin
        p_ZL11ROPE_THETAS_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL11ROPE_THETAS_1_ce0_local = 1'b1;
    end else begin
        p_ZL11ROPE_THETAS_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL11ROPE_THETAS_1_ce1_local = 1'b1;
    end else begin
        p_ZL11ROPE_THETAS_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter16_fsm)
        ap_ST_iter16_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end else if (((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln71_reg_871_pp0_iter15_reg == 1'd1) & (1'b1 == ap_CS_iter16_fsm_state17)) | (~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter15_fsm_state16)))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end
        end
        ap_ST_iter16_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter16_fsm = 'bx;
        end
    endcase
end

assign add_ln112_1_fu_667_p2 = ($signed(grp_fu_800_p3) + $signed(22'd4187871));

assign add_ln112_2_fu_702_p2 = ($signed(grp_fu_815_p3) + $signed(22'd4187871));

assign add_ln112_3_fu_737_p2 = ($signed(grp_fu_830_p3) + $signed(22'd4187871));

assign add_ln112_fu_632_p2 = ($signed(grp_fu_785_p3) + $signed(22'd4187871));

assign add_ln116_1_fu_657_p2 = ($signed(grp_fu_800_p3) + $signed(22'd4181437));

assign add_ln116_2_fu_692_p2 = ($signed(grp_fu_815_p3) + $signed(22'd4181437));

assign add_ln116_3_fu_727_p2 = ($signed(grp_fu_830_p3) + $signed(22'd4181437));

assign add_ln116_fu_622_p2 = ($signed(grp_fu_785_p3) + $signed(22'd4181437));

assign add_ln120_1_fu_647_p2 = ($signed(grp_fu_800_p3) + $signed(22'd4175003));

assign add_ln120_2_fu_682_p2 = ($signed(grp_fu_815_p3) + $signed(22'd4175003));

assign add_ln120_3_fu_717_p2 = ($signed(grp_fu_830_p3) + $signed(22'd4175003));

assign add_ln120_fu_612_p2 = ($signed(grp_fu_785_p3) + $signed(22'd4175003));

assign add_ln71_fu_312_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln72_fu_387_p2 = (select_ln71_fu_341_p3 + 4'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter16_fsm_state0 = ap_CS_iter16_fsm[32'd0];

assign ap_CS_iter16_fsm_state17 = ap_CS_iter16_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = (((n_quarter_stream_full_n == 1'b0) & (icmp_ln71_reg_871_pp0_iter15_reg == 1'd0)) | ((icmp_ln71_reg_871_pp0_iter15_reg == 1'd0) & (gamma_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_condition_272 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter16_GAMMA_6_in_reg_188 = 'bx;

assign ap_phi_reg_pp0_iter16_phi_ln131_1_reg_230 = 'bx;

assign ap_phi_reg_pp0_iter16_phi_ln131_2_reg_251 = 'bx;

assign ap_phi_reg_pp0_iter16_phi_ln131_reg_209 = 'bx;

assign ap_ready = internal_ap_ready;

assign gamma_stream_din = {{{{ap_phi_mux_phi_ln131_2_phi_fu_254_p16}, {ap_phi_mux_phi_ln131_1_phi_fu_233_p16}}, {ap_phi_mux_phi_ln131_phi_fu_212_p16}}, {ap_phi_mux_GAMMA_6_in_phi_fu_191_p16}};

assign grp_fu_272_p1 = grp_fu_272_p10;

assign grp_fu_272_p10 = p_ZL11ROPE_THETAS_1_load_reg_913;

assign grp_fu_276_p1 = grp_fu_276_p10;

assign grp_fu_276_p10 = p_ZL11ROPE_THETAS_1_load_1_reg_923;

assign grp_fu_280_p1 = grp_fu_280_p10;

assign grp_fu_280_p10 = p_ZL11ROPE_THETAS_0_load_reg_908;

assign grp_fu_284_p1 = grp_fu_284_p10;

assign grp_fu_284_p10 = p_ZL11ROPE_THETAS_0_load_1_reg_918;

assign grp_fu_470_p1 = 34'd5215;

assign grp_fu_479_p1 = 34'd5215;

assign grp_fu_488_p1 = 34'd5215;

assign grp_fu_497_p1 = 34'd5215;

assign grp_fu_785_p0 = 22'd4168569;

assign grp_fu_800_p0 = 22'd4168569;

assign grp_fu_815_p0 = 22'd4168569;

assign grp_fu_830_p0 = 22'd4168569;

assign icmp_ln71_fu_306_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln71_reg_871_pp0_iter0_reg = icmp_ln71_reg_871;

assign icmp_ln72_fu_335_p2 = ((hc2t_fu_106 == 4'd8) ? 1'b1 : 1'b0);

assign n_quarter_stream_din = or_ln132_5_fu_769_p5;

assign or_ln132_5_fu_769_p5 = {{{{trunc_ln103_3_reg_1022_pp0_iter15_reg}, {zext_ln106_2_fu_753_p1}}, {zext_ln106_1_fu_750_p1}}, {zext_ln106_fu_747_p1}};

assign or_ln_fu_373_p3 = {{trunc_ln87_fu_357_p1}, {1'd1}};

assign p_ZL11ROPE_THETAS_0_address0 = zext_ln87_1_fu_381_p1;

assign p_ZL11ROPE_THETAS_0_address1 = zext_ln87_fu_367_p1;

assign p_ZL11ROPE_THETAS_1_address0 = zext_ln87_1_fu_381_p1;

assign p_ZL11ROPE_THETAS_1_address1 = zext_ln87_fu_367_p1;

assign pos_ids_fu_406_p2 = (zext_ln71_fu_403_p1 + pos_id_read_reg_866_pp0_iter1_reg);

assign select_ln71_1_fu_349_p3 = ((icmp_ln72_fu_335_p2[0:0] == 1'b1) ? tt_2_fu_329_p2 : tt_fu_110);

assign select_ln71_fu_341_p3 = ((icmp_ln72_fu_335_p2[0:0] == 1'b1) ? 4'd0 : hc2t_fu_106);

assign shl_ln87_fu_361_p2 = select_ln71_fu_341_p3 << 4'd1;

assign start_out = real_start;

assign sub_ln110_1_fu_672_p2 = ($signed(22'd6433) - $signed(grp_fu_800_p3));

assign sub_ln110_2_fu_707_p2 = ($signed(22'd6433) - $signed(grp_fu_815_p3));

assign sub_ln110_3_fu_742_p2 = ($signed(22'd6433) - $signed(grp_fu_830_p3));

assign sub_ln110_fu_637_p2 = ($signed(22'd6433) - $signed(grp_fu_785_p3));

assign sub_ln114_1_fu_662_p2 = ($signed(22'd12867) - $signed(grp_fu_800_p3));

assign sub_ln114_2_fu_697_p2 = ($signed(22'd12867) - $signed(grp_fu_815_p3));

assign sub_ln114_3_fu_732_p2 = ($signed(22'd12867) - $signed(grp_fu_830_p3));

assign sub_ln114_fu_627_p2 = ($signed(22'd12867) - $signed(grp_fu_785_p3));

assign sub_ln118_1_fu_652_p2 = ($signed(22'd19301) - $signed(grp_fu_800_p3));

assign sub_ln118_2_fu_687_p2 = ($signed(22'd19301) - $signed(grp_fu_815_p3));

assign sub_ln118_3_fu_722_p2 = ($signed(22'd19301) - $signed(grp_fu_830_p3));

assign sub_ln118_fu_617_p2 = ($signed(22'd19301) - $signed(grp_fu_785_p3));

assign sub_ln122_1_fu_642_p2 = ($signed(22'd25735) - $signed(grp_fu_800_p3));

assign sub_ln122_2_fu_677_p2 = ($signed(22'd25735) - $signed(grp_fu_815_p3));

assign sub_ln122_3_fu_712_p2 = ($signed(22'd25735) - $signed(grp_fu_830_p3));

assign sub_ln122_fu_607_p2 = ($signed(22'd25735) - $signed(grp_fu_785_p3));

assign trunc_ln87_fu_357_p1 = select_ln71_fu_341_p3[2:0];

assign tt_2_fu_329_p2 = (tt_fu_110 + 4'd1);

assign zext_ln106_1_fu_750_p1 = trunc_ln103_1_reg_1002_pp0_iter15_reg;

assign zext_ln106_2_fu_753_p1 = trunc_ln103_2_reg_1012_pp0_iter15_reg;

assign zext_ln106_fu_747_p1 = trunc_ln_reg_992_pp0_iter15_reg;

assign zext_ln71_fu_403_p1 = select_ln71_1_reg_875;

assign zext_ln87_1_fu_381_p1 = or_ln_fu_373_p3;

assign zext_ln87_fu_367_p1 = shl_ln87_fu_361_p2;

endmodule //ROPE_QK_QUANT_stage1_preprocess
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ROPE_QK_QUANT_stage1_preprocess_p_ZL11ROPE_THETAS_0_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 25;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/ROPE_QK_QUANT/ROPE_QK_QUANT_stage1_preprocess_p_ZL11ROPE_THETAS_0_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ROPE_QK_QUANT_stage1_preprocess_p_ZL11ROPE_THETAS_1_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 24;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/ROPE_QK_QUANT/ROPE_QK_QUANT_stage1_preprocess_p_ZL11ROPE_THETAS_1_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage2_apply_rotation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qk_stream_TVALID,
        cache_stream_dout,
        cache_stream_empty_n,
        cache_stream_read,
        cache_stream_num_data_valid,
        cache_stream_fifo_cap,
        rot_stream_din,
        rot_stream_full_n,
        rot_stream_write,
        rot_stream_num_data_valid,
        rot_stream_fifo_cap,
        qk_stream_TDATA,
        qk_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   qk_stream_TVALID;
input  [127:0] cache_stream_dout;
input   cache_stream_empty_n;
output   cache_stream_read;
input  [2:0] cache_stream_num_data_valid;
input  [2:0] cache_stream_fifo_cap;
output  [135:0] rot_stream_din;
input   rot_stream_full_n;
output   rot_stream_write;
input  [2:0] rot_stream_num_data_valid;
input  [2:0] rot_stream_fifo_cap;
input  [159:0] qk_stream_TDATA;
output   qk_stream_TREADY;

reg ap_idle;
reg cache_stream_read;
reg rot_stream_write;
reg qk_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
wire   [0:0] icmp_ln89_fu_135_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln89_reg_560;
reg   [0:0] icmp_ln89_reg_560_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
wire    ap_CS_iter5_fsm_state6;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    qk_stream_TDATA_blk_n;
reg    cache_stream_blk_n;
reg    rot_stream_blk_n;
reg   [0:0] icmp_ln89_reg_560_pp0_iter1_reg;
reg   [0:0] icmp_ln89_reg_560_pp0_iter2_reg;
reg   [0:0] icmp_ln89_reg_560_pp0_iter3_reg;
wire   [19:0] trunc_ln97_fu_147_p1;
reg   [19:0] trunc_ln97_reg_564;
reg   [19:0] trunc_ln97_1_reg_569;
reg   [19:0] trunc_ln97_1_reg_569_pp0_iter1_reg;
reg   [19:0] trunc_ln97_2_reg_574;
reg   [19:0] trunc_ln97_3_reg_579;
reg   [19:0] trunc_ln97_3_reg_579_pp0_iter1_reg;
reg   [19:0] trunc_ln97_4_reg_584;
reg   [19:0] trunc_ln97_5_reg_589;
reg   [19:0] trunc_ln97_5_reg_589_pp0_iter1_reg;
reg   [19:0] trunc_ln97_6_reg_594;
reg   [19:0] trunc_ln97_7_reg_599;
reg   [19:0] trunc_ln97_7_reg_599_pp0_iter1_reg;
wire   [15:0] cur_cos_fu_221_p1;
reg  signed [15:0] cur_cos_reg_604;
reg  signed [15:0] cur_cos_1_reg_609;
reg  signed [15:0] cur_cos_2_reg_614;
reg  signed [15:0] cur_cos_3_reg_619;
reg  signed [15:0] cur_sin_reg_624;
reg  signed [15:0] cur_sin_1_reg_629;
reg  signed [15:0] cur_sin_2_reg_634;
reg  signed [15:0] cur_sin_3_reg_639;
wire  signed [28:0] sext_ln106_fu_300_p1;
reg  signed [28:0] sext_ln106_reg_644;
wire  signed [28:0] sext_ln106_1_fu_303_p1;
wire  signed [28:0] sext_ln106_2_fu_306_p1;
reg  signed [28:0] sext_ln106_2_reg_656;
wire  signed [28:0] sext_ln106_4_fu_321_p1;
reg  signed [28:0] sext_ln106_4_reg_662;
wire  signed [28:0] sext_ln106_5_fu_324_p1;
wire  signed [28:0] sext_ln106_6_fu_327_p1;
reg  signed [28:0] sext_ln106_6_reg_674;
wire  signed [28:0] sext_ln106_8_fu_342_p1;
reg  signed [28:0] sext_ln106_8_reg_680;
wire  signed [28:0] sext_ln106_9_fu_345_p1;
wire  signed [28:0] sext_ln106_10_fu_348_p1;
reg  signed [28:0] sext_ln106_10_reg_692;
wire  signed [28:0] sext_ln106_12_fu_363_p1;
reg  signed [28:0] sext_ln106_12_reg_698;
wire  signed [28:0] sext_ln106_13_fu_366_p1;
wire  signed [28:0] sext_ln106_14_fu_369_p1;
reg  signed [28:0] sext_ln106_14_reg_710;
wire  signed [28:0] sext_ln106_3_fu_384_p1;
wire  signed [28:0] sext_ln106_7_fu_387_p1;
wire  signed [28:0] sext_ln106_11_fu_390_p1;
wire  signed [28:0] sext_ln106_15_fu_393_p1;
wire  signed [28:0] grp_fu_309_p2;
wire  signed [28:0] grp_fu_315_p2;
wire  signed [28:0] grp_fu_330_p2;
wire  signed [28:0] grp_fu_336_p2;
wire  signed [28:0] grp_fu_351_p2;
wire  signed [28:0] grp_fu_357_p2;
wire  signed [28:0] grp_fu_372_p2;
wire  signed [28:0] grp_fu_378_p2;
reg   [10:0] indvar_flatten29_fu_104;
wire   [10:0] add_ln89_fu_141_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_indvar_flatten29_load;
wire  signed [19:0] grp_fu_309_p0;
wire  signed [19:0] grp_fu_315_p0;
wire  signed [19:0] grp_fu_330_p0;
wire  signed [19:0] grp_fu_336_p0;
wire  signed [19:0] grp_fu_351_p0;
wire  signed [19:0] grp_fu_357_p0;
wire  signed [19:0] grp_fu_372_p0;
wire  signed [19:0] grp_fu_378_p0;
wire  signed [28:0] grp_fu_489_p3;
wire  signed [28:0] grp_fu_497_p3;
wire  signed [28:0] grp_fu_505_p3;
wire  signed [28:0] grp_fu_513_p3;
wire  signed [28:0] grp_fu_521_p3;
wire  signed [28:0] grp_fu_529_p3;
wire  signed [28:0] grp_fu_537_p3;
wire  signed [28:0] grp_fu_545_p3;
wire   [16:0] trunc_ln107_3_fu_459_p4;
wire   [16:0] trunc_ln106_3_fu_450_p4;
wire   [16:0] trunc_ln107_2_fu_441_p4;
wire   [16:0] trunc_ln106_2_fu_432_p4;
wire   [16:0] trunc_ln107_1_fu_423_p4;
wire   [16:0] trunc_ln106_1_fu_414_p4;
wire   [16:0] trunc_ln7_fu_405_p4;
wire   [16:0] trunc_ln6_fu_396_p4;
wire  signed [19:0] grp_fu_489_p0;
wire  signed [15:0] grp_fu_489_p1;
wire  signed [19:0] grp_fu_497_p0;
wire  signed [15:0] grp_fu_497_p1;
wire  signed [19:0] grp_fu_505_p0;
wire  signed [15:0] grp_fu_505_p1;
wire  signed [19:0] grp_fu_513_p0;
wire  signed [15:0] grp_fu_513_p1;
wire  signed [19:0] grp_fu_521_p0;
wire  signed [15:0] grp_fu_521_p1;
wire  signed [19:0] grp_fu_529_p0;
wire  signed [15:0] grp_fu_529_p1;
wire  signed [19:0] grp_fu_537_p0;
wire  signed [15:0] grp_fu_537_p1;
wire  signed [19:0] grp_fu_545_p0;
wire  signed [15:0] grp_fu_545_p1;
reg    grp_fu_309_ce;
reg    grp_fu_315_ce;
reg    grp_fu_330_ce;
reg    grp_fu_336_ce;
reg    grp_fu_351_ce;
reg    grp_fu_357_ce;
reg    grp_fu_372_ce;
reg    grp_fu_378_ce;
reg    grp_fu_489_ce;
reg    grp_fu_497_ce;
reg    grp_fu_505_ce;
reg    grp_fu_513_ce;
reg    grp_fu_521_ce;
reg    grp_fu_529_ce;
reg    grp_fu_537_ce;
reg    grp_fu_545_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
reg    ap_ST_iter5_fsm_state6_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_144;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten29_fu_104 = 11'd0;
end

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_309_p0),
    .din1(cur_cos_reg_604),
    .ce(grp_fu_309_ce),
    .dout(grp_fu_309_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_315_p0),
    .din1(cur_sin_reg_624),
    .ce(grp_fu_315_ce),
    .dout(grp_fu_315_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_330_p0),
    .din1(cur_cos_1_reg_609),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_336_p0),
    .din1(cur_sin_1_reg_629),
    .ce(grp_fu_336_ce),
    .dout(grp_fu_336_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_351_p0),
    .din1(cur_cos_2_reg_614),
    .ce(grp_fu_351_ce),
    .dout(grp_fu_351_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_357_p0),
    .din1(cur_sin_2_reg_634),
    .ce(grp_fu_357_ce),
    .dout(grp_fu_357_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_372_p0),
    .din1(cur_cos_3_reg_619),
    .ce(grp_fu_372_ce),
    .dout(grp_fu_372_p2)
);

ROPE_QK_QUANT_mul_20s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_20s_16s_29_4_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_378_p0),
    .din1(cur_sin_3_reg_639),
    .ce(grp_fu_378_ce),
    .dout(grp_fu_378_p2)
);

ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_mulsub_20s_16s_29s_29_4_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_489_p0),
    .din1(grp_fu_489_p1),
    .din2(grp_fu_309_p2),
    .ce(grp_fu_489_ce),
    .dout(grp_fu_489_p3)
);

ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_20s_16s_29s_29_4_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_497_p0),
    .din1(grp_fu_497_p1),
    .din2(grp_fu_315_p2),
    .ce(grp_fu_497_ce),
    .dout(grp_fu_497_p3)
);

ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_mulsub_20s_16s_29s_29_4_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_505_p0),
    .din1(grp_fu_505_p1),
    .din2(grp_fu_330_p2),
    .ce(grp_fu_505_ce),
    .dout(grp_fu_505_p3)
);

ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_20s_16s_29s_29_4_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .din2(grp_fu_336_p2),
    .ce(grp_fu_513_ce),
    .dout(grp_fu_513_p3)
);

ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_mulsub_20s_16s_29s_29_4_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_521_p0),
    .din1(grp_fu_521_p1),
    .din2(grp_fu_351_p2),
    .ce(grp_fu_521_ce),
    .dout(grp_fu_521_p3)
);

ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_20s_16s_29s_29_4_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_529_p0),
    .din1(grp_fu_529_p1),
    .din2(grp_fu_357_p2),
    .ce(grp_fu_529_ce),
    .dout(grp_fu_529_p3)
);

ROPE_QK_QUANT_mac_mulsub_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_mulsub_20s_16s_29s_29_4_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_537_p0),
    .din1(grp_fu_537_p1),
    .din2(grp_fu_372_p2),
    .ce(grp_fu_537_ce),
    .dout(grp_fu_537_p3)
);

ROPE_QK_QUANT_mac_muladd_20s_16s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_20s_16s_29s_29_4_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_545_p0),
    .din1(grp_fu_545_p1),
    .din2(grp_fu_378_p2),
    .ce(grp_fu_545_ce),
    .dout(grp_fu_545_p3)
);

ROPE_QK_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_144)) begin
        if ((icmp_ln89_fu_135_p2 == 1'd0)) begin
            indvar_flatten29_fu_104 <= add_ln89_fu_141_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten29_fu_104 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        cur_cos_1_reg_609 <= {{cache_stream_dout[31:16]}};
        cur_cos_2_reg_614 <= {{cache_stream_dout[47:32]}};
        cur_cos_3_reg_619 <= {{cache_stream_dout[63:48]}};
        cur_cos_reg_604 <= cur_cos_fu_221_p1;
        cur_sin_1_reg_629 <= {{cache_stream_dout[95:80]}};
        cur_sin_2_reg_634 <= {{cache_stream_dout[111:96]}};
        cur_sin_3_reg_639 <= {{cache_stream_dout[127:112]}};
        cur_sin_reg_624 <= {{cache_stream_dout[79:64]}};
        icmp_ln89_reg_560 <= icmp_ln89_fu_135_p2;
        trunc_ln97_1_reg_569 <= {{qk_stream_TDATA[39:20]}};
        trunc_ln97_2_reg_574 <= {{qk_stream_TDATA[59:40]}};
        trunc_ln97_3_reg_579 <= {{qk_stream_TDATA[79:60]}};
        trunc_ln97_4_reg_584 <= {{qk_stream_TDATA[99:80]}};
        trunc_ln97_5_reg_589 <= {{qk_stream_TDATA[119:100]}};
        trunc_ln97_6_reg_594 <= {{qk_stream_TDATA[139:120]}};
        trunc_ln97_7_reg_599 <= {{qk_stream_TDATA[159:140]}};
        trunc_ln97_reg_564 <= trunc_ln97_fu_147_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln89_reg_560_pp0_iter1_reg <= icmp_ln89_reg_560;
        sext_ln106_10_reg_692 <= sext_ln106_10_fu_348_p1;
        sext_ln106_12_reg_698 <= sext_ln106_12_fu_363_p1;
        sext_ln106_14_reg_710 <= sext_ln106_14_fu_369_p1;
        sext_ln106_2_reg_656 <= sext_ln106_2_fu_306_p1;
        sext_ln106_4_reg_662 <= sext_ln106_4_fu_321_p1;
        sext_ln106_6_reg_674 <= sext_ln106_6_fu_327_p1;
        sext_ln106_8_reg_680 <= sext_ln106_8_fu_342_p1;
        sext_ln106_reg_644 <= sext_ln106_fu_300_p1;
        trunc_ln97_1_reg_569_pp0_iter1_reg <= trunc_ln97_1_reg_569;
        trunc_ln97_3_reg_579_pp0_iter1_reg <= trunc_ln97_3_reg_579;
        trunc_ln97_5_reg_589_pp0_iter1_reg <= trunc_ln97_5_reg_589;
        trunc_ln97_7_reg_599_pp0_iter1_reg <= trunc_ln97_7_reg_599;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln89_reg_560_pp0_iter2_reg <= icmp_ln89_reg_560_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln89_reg_560_pp0_iter3_reg <= icmp_ln89_reg_560_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        icmp_ln89_reg_560_pp0_iter4_reg <= icmp_ln89_reg_560_pp0_iter3_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6_pp0_stage0_iter5)) begin
        ap_ST_iter5_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_iter5_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln89_fu_135_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten29_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten29_load = indvar_flatten29_fu_104;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln89_fu_135_p2 == 1'd0))) begin
        cache_stream_blk_n = cache_stream_empty_n;
    end else begin
        cache_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln89_fu_135_p2 == 1'd0))) begin
        cache_stream_read = 1'b1;
    end else begin
        cache_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_309_ce = 1'b1;
    end else begin
        grp_fu_309_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_315_ce = 1'b1;
    end else begin
        grp_fu_315_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_330_ce = 1'b1;
    end else begin
        grp_fu_330_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_351_ce = 1'b1;
    end else begin
        grp_fu_351_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_357_ce = 1'b1;
    end else begin
        grp_fu_357_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_372_ce = 1'b1;
    end else begin
        grp_fu_372_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) 
    & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_378_ce = 1'b1;
    end else begin
        grp_fu_378_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_489_ce = 1'b1;
    end else begin
        grp_fu_489_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_497_ce = 1'b1;
    end else begin
        grp_fu_497_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_505_ce = 1'b1;
    end else begin
        grp_fu_505_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_513_ce = 1'b1;
    end else begin
        grp_fu_513_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_521_ce = 1'b1;
    end else begin
        grp_fu_521_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_529_ce = 1'b1;
    end else begin
        grp_fu_529_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_537_ce = 1'b1;
    end else begin
        grp_fu_537_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_545_ce = 1'b1;
    end else begin
        grp_fu_545_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln89_fu_135_p2 == 1'd0))) begin
        qk_stream_TDATA_blk_n = qk_stream_TVALID;
    end else begin
        qk_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln89_fu_135_p2 == 1'd0))) begin
        qk_stream_TREADY = 1'b1;
    end else begin
        qk_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln89_reg_560_pp0_iter4_reg == 1'd0))) begin
        rot_stream_blk_n = rot_stream_full_n;
    end else begin
        rot_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln89_reg_560_pp0_iter4_reg == 1'd0))) begin
        rot_stream_write = 1'b1;
    end else begin
        rot_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & ((1'b0 == ap_CS_iter3_fsm_state4) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & ((1'b0 == ap_CS_iter4_fsm_state5) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter4_fsm_state5) & (1'b0 == ap_block_state5_pp0_stage0_iter4)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state6_pp0_stage0_iter5)) & (1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln89_reg_560_pp0_iter4_reg == 1'd1)))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

assign add_ln89_fu_141_p2 = (ap_sig_allocacmp_indvar_flatten29_load + 11'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((cache_stream_empty_n == 1'b0) & (icmp_ln89_fu_135_p2 == 1'd0)) | ((icmp_ln89_fu_135_p2 == 1'd0) & (qk_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((rot_stream_full_n == 1'b0) & (icmp_ln89_reg_560_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_condition_144 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((1'b1 == ap_CS_iter5_fsm_state6) & (1'b1 == ap_block_state6_pp0_stage0_iter5))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cur_cos_fu_221_p1 = cache_stream_dout[15:0];

assign grp_fu_309_p0 = sext_ln106_1_fu_303_p1;

assign grp_fu_315_p0 = sext_ln106_1_fu_303_p1;

assign grp_fu_330_p0 = sext_ln106_5_fu_324_p1;

assign grp_fu_336_p0 = sext_ln106_5_fu_324_p1;

assign grp_fu_351_p0 = sext_ln106_9_fu_345_p1;

assign grp_fu_357_p0 = sext_ln106_9_fu_345_p1;

assign grp_fu_372_p0 = sext_ln106_13_fu_366_p1;

assign grp_fu_378_p0 = sext_ln106_13_fu_366_p1;

assign grp_fu_489_p0 = sext_ln106_3_fu_384_p1;

assign grp_fu_489_p1 = sext_ln106_2_reg_656;

assign grp_fu_497_p0 = sext_ln106_3_fu_384_p1;

assign grp_fu_497_p1 = sext_ln106_reg_644;

assign grp_fu_505_p0 = sext_ln106_7_fu_387_p1;

assign grp_fu_505_p1 = sext_ln106_6_reg_674;

assign grp_fu_513_p0 = sext_ln106_7_fu_387_p1;

assign grp_fu_513_p1 = sext_ln106_4_reg_662;

assign grp_fu_521_p0 = sext_ln106_11_fu_390_p1;

assign grp_fu_521_p1 = sext_ln106_10_reg_692;

assign grp_fu_529_p0 = sext_ln106_11_fu_390_p1;

assign grp_fu_529_p1 = sext_ln106_8_reg_680;

assign grp_fu_537_p0 = sext_ln106_15_fu_393_p1;

assign grp_fu_537_p1 = sext_ln106_14_reg_710;

assign grp_fu_545_p0 = sext_ln106_15_fu_393_p1;

assign grp_fu_545_p1 = sext_ln106_12_reg_698;

assign icmp_ln89_fu_135_p2 = ((ap_sig_allocacmp_indvar_flatten29_load == 11'd1792) ? 1'b1 : 1'b0);

assign rot_stream_din = {{{{{{{{trunc_ln107_3_fu_459_p4}, {trunc_ln106_3_fu_450_p4}}, {trunc_ln107_2_fu_441_p4}}, {trunc_ln106_2_fu_432_p4}}, {trunc_ln107_1_fu_423_p4}}, {trunc_ln106_1_fu_414_p4}}, {trunc_ln7_fu_405_p4}}, {trunc_ln6_fu_396_p4}};

assign sext_ln106_10_fu_348_p1 = cur_sin_2_reg_634;

assign sext_ln106_11_fu_390_p1 = $signed(trunc_ln97_5_reg_589_pp0_iter1_reg);

assign sext_ln106_12_fu_363_p1 = cur_cos_3_reg_619;

assign sext_ln106_13_fu_366_p1 = $signed(trunc_ln97_6_reg_594);

assign sext_ln106_14_fu_369_p1 = cur_sin_3_reg_639;

assign sext_ln106_15_fu_393_p1 = $signed(trunc_ln97_7_reg_599_pp0_iter1_reg);

assign sext_ln106_1_fu_303_p1 = $signed(trunc_ln97_reg_564);

assign sext_ln106_2_fu_306_p1 = cur_sin_reg_624;

assign sext_ln106_3_fu_384_p1 = $signed(trunc_ln97_1_reg_569_pp0_iter1_reg);

assign sext_ln106_4_fu_321_p1 = cur_cos_1_reg_609;

assign sext_ln106_5_fu_324_p1 = $signed(trunc_ln97_2_reg_574);

assign sext_ln106_6_fu_327_p1 = cur_sin_1_reg_629;

assign sext_ln106_7_fu_387_p1 = $signed(trunc_ln97_3_reg_579_pp0_iter1_reg);

assign sext_ln106_8_fu_342_p1 = cur_cos_2_reg_614;

assign sext_ln106_9_fu_345_p1 = $signed(trunc_ln97_4_reg_584);

assign sext_ln106_fu_300_p1 = cur_cos_reg_604;

assign trunc_ln106_1_fu_414_p4 = {{grp_fu_505_p3[28:12]}};

assign trunc_ln106_2_fu_432_p4 = {{grp_fu_521_p3[28:12]}};

assign trunc_ln106_3_fu_450_p4 = {{grp_fu_537_p3[28:12]}};

assign trunc_ln107_1_fu_423_p4 = {{grp_fu_513_p3[28:12]}};

assign trunc_ln107_2_fu_441_p4 = {{grp_fu_529_p3[28:12]}};

assign trunc_ln107_3_fu_459_p4 = {{grp_fu_545_p3[28:12]}};

assign trunc_ln6_fu_396_p4 = {{grp_fu_489_p3[28:12]}};

assign trunc_ln7_fu_405_p4 = {{grp_fu_497_p3[28:12]}};

assign trunc_ln97_fu_147_p1 = qk_stream_TDATA[19:0];

endmodule //ROPE_QK_QUANT_stage2_apply_rotation
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage2_cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gamma_stream_dout,
        gamma_stream_empty_n,
        gamma_stream_read,
        gamma_stream_num_data_valid,
        gamma_stream_fifo_cap,
        x_stream_din,
        x_stream_full_n,
        x_stream_write,
        x_stream_num_data_valid,
        x_stream_fifo_cap,
        y_stream_din,
        y_stream_full_n,
        y_stream_write,
        y_stream_num_data_valid,
        y_stream_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [87:0] gamma_stream_dout;
input   gamma_stream_empty_n;
output   gamma_stream_read;
input  [2:0] gamma_stream_num_data_valid;
input  [2:0] gamma_stream_fifo_cap;
output  [63:0] x_stream_din;
input   x_stream_full_n;
output   x_stream_write;
input  [2:0] x_stream_num_data_valid;
input  [2:0] x_stream_fifo_cap;
output  [63:0] y_stream_din;
input   y_stream_full_n;
output   y_stream_write;
input  [2:0] y_stream_num_data_valid;
input  [2:0] y_stream_fifo_cap;

reg ap_idle;
reg gamma_stream_read;
reg x_stream_write;
reg y_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
wire   [0:0] icmp_ln148_fu_278_p2;
wire   [0:0] icmp_ln153_fu_331_p2;
reg    ap_predicate_op42_read_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln148_reg_1005;
reg   [0:0] icmp_ln148_reg_1005_pp0_iter2_reg;
reg   [0:0] icmp_ln180_reg_1045;
reg   [0:0] icmp_ln180_reg_1045_pp0_iter2_reg;
reg    ap_predicate_op162_write_state4;
reg    ap_predicate_op164_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] CORDIC_THETAS_address0;
wire   [10:0] CORDIC_THETAS_q0;
reg    gamma_stream_blk_n;
reg    x_stream_blk_n;
reg    y_stream_blk_n;
wire   [0:0] icmp_ln148_reg_1005_pp0_iter0_reg;
reg   [0:0] icmp_ln148_reg_1005_pp0_iter1_reg;
wire   [3:0] select_ln149_fu_323_p3;
reg   [3:0] select_ln149_reg_1009;
reg   [3:0] select_ln149_reg_1009_pp0_iter1_reg;
reg   [0:0] icmp_ln153_reg_1016;
wire   [0:0] icmp_ln153_reg_1016_pp0_iter0_reg;
reg   [0:0] icmp_ln153_reg_1016_pp0_iter1_reg;
wire   [21:0] trunc_ln164_fu_337_p1;
reg   [21:0] trunc_ln164_reg_1020;
reg   [21:0] trunc_ln164_1_reg_1025;
reg   [21:0] trunc_ln164_2_reg_1030;
reg   [21:0] trunc_ln164_3_reg_1035;
wire   [0:0] icmp_ln180_fu_430_p2;
wire   [15:0] NEW_X_fu_550_p3;
reg   [15:0] NEW_X_reg_1049;
wire   [15:0] NEW_Y_fu_576_p3;
reg   [15:0] NEW_Y_reg_1054;
wire   [15:0] NEW_X_1_fu_632_p3;
reg   [15:0] NEW_X_1_reg_1059;
wire   [15:0] NEW_Y_1_fu_658_p3;
reg   [15:0] NEW_Y_1_reg_1064;
wire   [15:0] NEW_X_2_fu_714_p3;
reg   [15:0] NEW_X_2_reg_1069;
wire   [15:0] NEW_Y_2_fu_740_p3;
reg   [15:0] NEW_Y_2_reg_1074;
wire   [15:0] NEW_X_3_fu_796_p3;
reg   [15:0] NEW_X_3_reg_1079;
wire   [15:0] NEW_Y_3_fu_822_p3;
reg   [15:0] NEW_Y_3_reg_1084;
reg   [21:0] ap_phi_mux_conv_i_3406_phi_fu_180_p4;
wire   [21:0] ap_phi_reg_pp0_iter0_conv_i_3406_reg_177;
reg   [21:0] ap_phi_reg_pp0_iter1_conv_i_3406_reg_177;
reg   [21:0] ap_phi_reg_pp0_iter2_conv_i_3406_reg_177;
wire  signed [21:0] sext_ln148_3_fu_478_p1;
reg   [21:0] ap_phi_mux_conv_i_2404_phi_fu_189_p4;
wire   [21:0] ap_phi_reg_pp0_iter0_conv_i_2404_reg_186;
reg   [21:0] ap_phi_reg_pp0_iter1_conv_i_2404_reg_186;
reg   [21:0] ap_phi_reg_pp0_iter2_conv_i_2404_reg_186;
wire  signed [21:0] sext_ln148_2_fu_473_p1;
reg   [21:0] ap_phi_mux_conv_i_1402_phi_fu_198_p4;
wire   [21:0] ap_phi_reg_pp0_iter0_conv_i_1402_reg_195;
reg   [21:0] ap_phi_reg_pp0_iter1_conv_i_1402_reg_195;
reg   [21:0] ap_phi_reg_pp0_iter2_conv_i_1402_reg_195;
wire  signed [21:0] sext_ln148_1_fu_468_p1;
reg   [21:0] ap_phi_mux_conv_i400_phi_fu_207_p4;
wire   [21:0] ap_phi_reg_pp0_iter0_conv_i400_reg_204;
reg   [21:0] ap_phi_reg_pp0_iter1_conv_i400_reg_204;
reg   [21:0] ap_phi_reg_pp0_iter2_conv_i400_reg_204;
wire  signed [21:0] sext_ln148_fu_463_p1;
reg   [15:0] ap_phi_mux_empty_45_phi_fu_217_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_45_reg_213;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_45_reg_213;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_45_reg_213;
reg   [15:0] ap_phi_mux_empty_46_phi_fu_228_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_46_reg_224;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_46_reg_224;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_46_reg_224;
reg   [15:0] ap_phi_mux_empty_47_phi_fu_239_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_47_reg_235;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_47_reg_235;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_47_reg_235;
reg   [15:0] ap_phi_mux_empty_48_phi_fu_250_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_empty_48_reg_246;
reg   [15:0] ap_phi_reg_pp0_iter1_empty_48_reg_246;
reg   [15:0] ap_phi_reg_pp0_iter2_empty_48_reg_246;
wire   [63:0] zext_ln150_fu_406_p1;
reg   [3:0] iter_fu_84;
wire   [3:0] add_ln150_fu_371_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_iter_load;
reg   [15:0] conv_i401_fu_88;
wire   [15:0] NEW_GAMMA_fu_521_p3;
reg   [15:0] conv_i_1403_fu_92;
wire   [15:0] NEW_GAMMA_1_fu_606_p3;
reg   [15:0] conv_i_2405_fu_96;
wire   [15:0] NEW_GAMMA_2_fu_688_p3;
reg   [15:0] conv_i_3407_fu_100;
wire   [15:0] NEW_GAMMA_3_fu_770_p3;
reg   [7:0] indvar_flatten_fu_104;
wire   [7:0] select_ln149_1_fu_383_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [9:0] indvar_flatten41_fu_108;
wire   [9:0] add_ln148_fu_284_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten41_load;
reg   [15:0] empty_fu_112;
reg   [15:0] empty_38_fu_116;
reg   [15:0] empty_39_fu_120;
reg   [15:0] empty_40_fu_124;
reg   [15:0] empty_41_fu_128;
reg   [15:0] empty_42_fu_132;
reg   [15:0] empty_43_fu_136;
reg   [15:0] empty_44_fu_140;
reg    CORDIC_THETAS_ce0_local;
wire   [0:0] icmp_ln149_fu_293_p2;
wire   [0:0] icmp_ln150_fu_305_p2;
wire   [0:0] xor_ln148_fu_299_p2;
wire   [0:0] and_ln148_fu_311_p2;
wire   [0:0] or_ln149_fu_317_p2;
wire   [7:0] add_ln149_fu_377_p2;
wire  signed [15:0] sext_ln148_fu_463_p0;
wire  signed [15:0] sext_ln148_1_fu_468_p0;
wire  signed [15:0] sext_ln148_2_fu_473_p0;
wire  signed [15:0] sext_ln148_3_fu_478_p0;
wire   [15:0] trunc_ln171_fu_501_p1;
wire   [15:0] zext_ln171_fu_505_p1;
wire   [0:0] icmp_ln171_fu_495_p2;
wire   [15:0] sub_ln171_fu_509_p2;
wire   [15:0] add_ln171_fu_515_p2;
wire   [15:0] zext_ln172_fu_529_p1;
wire   [15:0] ashr_ln172_fu_532_p2;
wire   [15:0] sub_ln172_fu_538_p2;
wire   [15:0] add_ln172_fu_544_p2;
wire   [15:0] ashr_ln173_fu_558_p2;
wire   [15:0] add_ln173_fu_564_p2;
wire   [15:0] sub_ln173_fu_570_p2;
wire   [15:0] trunc_ln171_1_fu_590_p1;
wire   [0:0] icmp_ln171_1_fu_584_p2;
wire   [15:0] sub_ln171_1_fu_594_p2;
wire   [15:0] add_ln171_1_fu_600_p2;
wire   [15:0] ashr_ln172_1_fu_614_p2;
wire   [15:0] sub_ln172_1_fu_620_p2;
wire   [15:0] add_ln172_1_fu_626_p2;
wire   [15:0] ashr_ln173_1_fu_640_p2;
wire   [15:0] add_ln173_1_fu_646_p2;
wire   [15:0] sub_ln173_1_fu_652_p2;
wire   [15:0] trunc_ln171_2_fu_672_p1;
wire   [0:0] icmp_ln171_2_fu_666_p2;
wire   [15:0] sub_ln171_2_fu_676_p2;
wire   [15:0] add_ln171_2_fu_682_p2;
wire   [15:0] ashr_ln172_2_fu_696_p2;
wire   [15:0] sub_ln172_2_fu_702_p2;
wire   [15:0] add_ln172_2_fu_708_p2;
wire   [15:0] ashr_ln173_2_fu_722_p2;
wire   [15:0] add_ln173_2_fu_728_p2;
wire   [15:0] sub_ln173_2_fu_734_p2;
wire   [15:0] trunc_ln171_3_fu_754_p1;
wire   [0:0] icmp_ln171_3_fu_748_p2;
wire   [15:0] sub_ln171_3_fu_758_p2;
wire   [15:0] add_ln171_3_fu_764_p2;
wire   [15:0] ashr_ln172_3_fu_778_p2;
wire   [15:0] sub_ln172_3_fu_784_p2;
wire   [15:0] add_ln172_3_fu_790_p2;
wire   [15:0] ashr_ln173_3_fu_804_p2;
wire   [15:0] add_ln173_3_fu_810_p2;
wire   [15:0] sub_ln173_3_fu_816_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_166;
reg    ap_condition_790;
reg    ap_condition_165;
reg    ap_condition_121;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 iter_fu_84 = 4'd0;
//#0 conv_i401_fu_88 = 16'd0;
//#0 conv_i_1403_fu_92 = 16'd0;
//#0 conv_i_2405_fu_96 = 16'd0;
//#0 conv_i_3407_fu_100 = 16'd0;
//#0 indvar_flatten_fu_104 = 8'd0;
//#0 indvar_flatten41_fu_108 = 10'd0;
//#0 empty_fu_112 = 16'd0;
//#0 empty_38_fu_116 = 16'd0;
//#0 empty_39_fu_120 = 16'd0;
//#0 empty_40_fu_124 = 16'd0;
//#0 empty_41_fu_128 = 16'd0;
//#0 empty_42_fu_132 = 16'd0;
//#0 empty_43_fu_136 = 16'd0;
//#0 empty_44_fu_140 = 16'd0;
end

ROPE_QK_QUANT_stage2_cordic_CORDIC_THETAS_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
CORDIC_THETAS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(CORDIC_THETAS_address0),
    .ce0(CORDIC_THETAS_ce0_local),
    .q0(CORDIC_THETAS_q0)
);

ROPE_QK_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_conv_i400_reg_204 <= trunc_ln164_reg_1020;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_conv_i400_reg_204 <= ap_phi_reg_pp0_iter1_conv_i400_reg_204;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_conv_i_1402_reg_195 <= trunc_ln164_1_reg_1025;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_conv_i_1402_reg_195 <= ap_phi_reg_pp0_iter1_conv_i_1402_reg_195;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_conv_i_2404_reg_186 <= trunc_ln164_2_reg_1030;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_conv_i_2404_reg_186 <= ap_phi_reg_pp0_iter1_conv_i_2404_reg_186;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_conv_i_3406_reg_177 <= trunc_ln164_3_reg_1035;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_conv_i_3406_reg_177 <= ap_phi_reg_pp0_iter1_conv_i_3406_reg_177;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_empty_45_reg_213 <= 16'd4096;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_45_reg_213 <= ap_phi_reg_pp0_iter1_empty_45_reg_213;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_empty_46_reg_224 <= 16'd4096;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_46_reg_224 <= ap_phi_reg_pp0_iter1_empty_46_reg_224;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_empty_47_reg_235 <= 16'd4096;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_47_reg_235 <= ap_phi_reg_pp0_iter1_empty_47_reg_235;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_166)) begin
        if (((icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_empty_48_reg_246 <= 16'd4096;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_48_reg_246 <= ap_phi_reg_pp0_iter1_empty_48_reg_246;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_165)) begin
        if ((1'b1 == ap_condition_790)) begin
            empty_38_fu_116 <= 16'd0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
            empty_38_fu_116 <= NEW_Y_fu_576_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_165)) begin
        if ((1'b1 == ap_condition_790)) begin
            empty_40_fu_124 <= 16'd0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
            empty_40_fu_124 <= NEW_Y_1_fu_658_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_165)) begin
        if ((1'b1 == ap_condition_790)) begin
            empty_42_fu_132 <= 16'd0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
            empty_42_fu_132 <= NEW_Y_2_fu_740_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_165)) begin
        if ((1'b1 == ap_condition_790)) begin
            empty_44_fu_140 <= 16'd0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
            empty_44_fu_140 <= NEW_Y_3_fu_822_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_121)) begin
        if ((icmp_ln148_fu_278_p2 == 1'd0)) begin
            indvar_flatten41_fu_108 <= add_ln148_fu_284_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten41_fu_108 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_121)) begin
        if ((icmp_ln148_fu_278_p2 == 1'd0)) begin
            indvar_flatten_fu_104 <= select_ln149_1_fu_383_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_121)) begin
        if ((icmp_ln148_fu_278_p2 == 1'd0)) begin
            iter_fu_84 <= add_ln150_fu_371_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iter_fu_84 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        NEW_X_1_reg_1059 <= NEW_X_1_fu_632_p3;
        NEW_X_2_reg_1069 <= NEW_X_2_fu_714_p3;
        NEW_X_3_reg_1079 <= NEW_X_3_fu_796_p3;
        NEW_X_reg_1049 <= NEW_X_fu_550_p3;
        NEW_Y_1_reg_1064 <= NEW_Y_1_fu_658_p3;
        NEW_Y_2_reg_1074 <= NEW_Y_2_fu_740_p3;
        NEW_Y_3_reg_1084 <= NEW_Y_3_fu_822_p3;
        NEW_Y_reg_1054 <= NEW_Y_fu_576_p3;
        icmp_ln148_reg_1005_pp0_iter2_reg <= icmp_ln148_reg_1005_pp0_iter1_reg;
        icmp_ln180_reg_1045_pp0_iter2_reg <= icmp_ln180_reg_1045;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_conv_i400_reg_204 <= ap_phi_reg_pp0_iter0_conv_i400_reg_204;
        ap_phi_reg_pp0_iter1_conv_i_1402_reg_195 <= ap_phi_reg_pp0_iter0_conv_i_1402_reg_195;
        ap_phi_reg_pp0_iter1_conv_i_2404_reg_186 <= ap_phi_reg_pp0_iter0_conv_i_2404_reg_186;
        ap_phi_reg_pp0_iter1_conv_i_3406_reg_177 <= ap_phi_reg_pp0_iter0_conv_i_3406_reg_177;
        ap_phi_reg_pp0_iter1_empty_45_reg_213 <= ap_phi_reg_pp0_iter0_empty_45_reg_213;
        ap_phi_reg_pp0_iter1_empty_46_reg_224 <= ap_phi_reg_pp0_iter0_empty_46_reg_224;
        ap_phi_reg_pp0_iter1_empty_47_reg_235 <= ap_phi_reg_pp0_iter0_empty_47_reg_235;
        ap_phi_reg_pp0_iter1_empty_48_reg_246 <= ap_phi_reg_pp0_iter0_empty_48_reg_246;
        icmp_ln148_reg_1005 <= icmp_ln148_fu_278_p2;
        icmp_ln153_reg_1016 <= icmp_ln153_fu_331_p2;
        select_ln149_reg_1009 <= select_ln149_fu_323_p3;
        trunc_ln164_1_reg_1025 <= {{gamma_stream_dout[43:22]}};
        trunc_ln164_2_reg_1030 <= {{gamma_stream_dout[65:44]}};
        trunc_ln164_3_reg_1035 <= {{gamma_stream_dout[87:66]}};
        trunc_ln164_reg_1020 <= trunc_ln164_fu_337_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln148_reg_1005_pp0_iter1_reg <= icmp_ln148_reg_1005;
        icmp_ln153_reg_1016_pp0_iter1_reg <= icmp_ln153_reg_1016;
        icmp_ln180_reg_1045 <= icmp_ln180_fu_430_p2;
        select_ln149_reg_1009_pp0_iter1_reg <= select_ln149_reg_1009;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        conv_i401_fu_88 <= NEW_GAMMA_fu_521_p3;
        conv_i_1403_fu_92 <= NEW_GAMMA_1_fu_606_p3;
        conv_i_2405_fu_96 <= NEW_GAMMA_2_fu_688_p3;
        conv_i_3407_fu_100 <= NEW_GAMMA_3_fu_770_p3;
        empty_39_fu_120 <= NEW_X_1_fu_632_p3;
        empty_41_fu_128 <= NEW_X_2_fu_714_p3;
        empty_43_fu_136 <= NEW_X_3_fu_796_p3;
        empty_fu_112 <= NEW_X_fu_550_p3;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        CORDIC_THETAS_ce0_local = 1'b1;
    end else begin
        CORDIC_THETAS_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln148_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_conv_i400_phi_fu_207_p4 = sext_ln148_fu_463_p1;
    end else begin
        ap_phi_mux_conv_i400_phi_fu_207_p4 = ap_phi_reg_pp0_iter2_conv_i400_reg_204;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_conv_i_1402_phi_fu_198_p4 = sext_ln148_1_fu_468_p1;
    end else begin
        ap_phi_mux_conv_i_1402_phi_fu_198_p4 = ap_phi_reg_pp0_iter2_conv_i_1402_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_conv_i_2404_phi_fu_189_p4 = sext_ln148_2_fu_473_p1;
    end else begin
        ap_phi_mux_conv_i_2404_phi_fu_189_p4 = ap_phi_reg_pp0_iter2_conv_i_2404_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_conv_i_3406_phi_fu_180_p4 = sext_ln148_3_fu_478_p1;
    end else begin
        ap_phi_mux_conv_i_3406_phi_fu_180_p4 = ap_phi_reg_pp0_iter2_conv_i_3406_reg_177;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_empty_45_phi_fu_217_p4 = empty_43_fu_136;
    end else begin
        ap_phi_mux_empty_45_phi_fu_217_p4 = ap_phi_reg_pp0_iter2_empty_45_reg_213;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_empty_46_phi_fu_228_p4 = empty_41_fu_128;
    end else begin
        ap_phi_mux_empty_46_phi_fu_228_p4 = ap_phi_reg_pp0_iter2_empty_46_reg_224;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_empty_47_phi_fu_239_p4 = empty_39_fu_120;
    end else begin
        ap_phi_mux_empty_47_phi_fu_239_p4 = ap_phi_reg_pp0_iter2_empty_47_reg_235;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_1016_pp0_iter1_reg == 1'd0) & (icmp_ln148_reg_1005_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_empty_48_phi_fu_250_p4 = empty_fu_112;
    end else begin
        ap_phi_mux_empty_48_phi_fu_250_p4 = ap_phi_reg_pp0_iter2_empty_48_reg_246;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten41_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten41_load = indvar_flatten41_fu_108;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_iter_load = 4'd1;
    end else begin
        ap_sig_allocacmp_iter_load = iter_fu_84;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (ap_predicate_op42_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        gamma_stream_blk_n = gamma_stream_empty_n;
    end else begin
        gamma_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (ap_predicate_op42_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        gamma_stream_read = 1'b1;
    end else begin
        gamma_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op162_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        x_stream_blk_n = x_stream_full_n;
    end else begin
        x_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_predicate_op162_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        x_stream_write = 1'b1;
    end else begin
        x_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op164_write_state4 == 1'b1))) begin
        y_stream_blk_n = y_stream_full_n;
    end else begin
        y_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op164_write_state4 == 1'b1))) begin
        y_stream_write = 1'b1;
    end else begin
        y_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln148_reg_1005_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign CORDIC_THETAS_address0 = zext_ln150_fu_406_p1;

assign NEW_GAMMA_1_fu_606_p3 = ((icmp_ln171_1_fu_584_p2[0:0] == 1'b1) ? sub_ln171_1_fu_594_p2 : add_ln171_1_fu_600_p2);

assign NEW_GAMMA_2_fu_688_p3 = ((icmp_ln171_2_fu_666_p2[0:0] == 1'b1) ? sub_ln171_2_fu_676_p2 : add_ln171_2_fu_682_p2);

assign NEW_GAMMA_3_fu_770_p3 = ((icmp_ln171_3_fu_748_p2[0:0] == 1'b1) ? sub_ln171_3_fu_758_p2 : add_ln171_3_fu_764_p2);

assign NEW_GAMMA_fu_521_p3 = ((icmp_ln171_fu_495_p2[0:0] == 1'b1) ? sub_ln171_fu_509_p2 : add_ln171_fu_515_p2);

assign NEW_X_1_fu_632_p3 = ((icmp_ln171_1_fu_584_p2[0:0] == 1'b1) ? sub_ln172_1_fu_620_p2 : add_ln172_1_fu_626_p2);

assign NEW_X_2_fu_714_p3 = ((icmp_ln171_2_fu_666_p2[0:0] == 1'b1) ? sub_ln172_2_fu_702_p2 : add_ln172_2_fu_708_p2);

assign NEW_X_3_fu_796_p3 = ((icmp_ln171_3_fu_748_p2[0:0] == 1'b1) ? sub_ln172_3_fu_784_p2 : add_ln172_3_fu_790_p2);

assign NEW_X_fu_550_p3 = ((icmp_ln171_fu_495_p2[0:0] == 1'b1) ? sub_ln172_fu_538_p2 : add_ln172_fu_544_p2);

assign NEW_Y_1_fu_658_p3 = ((icmp_ln171_1_fu_584_p2[0:0] == 1'b1) ? add_ln173_1_fu_646_p2 : sub_ln173_1_fu_652_p2);

assign NEW_Y_2_fu_740_p3 = ((icmp_ln171_2_fu_666_p2[0:0] == 1'b1) ? add_ln173_2_fu_728_p2 : sub_ln173_2_fu_734_p2);

assign NEW_Y_3_fu_822_p3 = ((icmp_ln171_3_fu_748_p2[0:0] == 1'b1) ? add_ln173_3_fu_810_p2 : sub_ln173_3_fu_816_p2);

assign NEW_Y_fu_576_p3 = ((icmp_ln171_fu_495_p2[0:0] == 1'b1) ? add_ln173_fu_564_p2 : sub_ln173_fu_570_p2);

assign add_ln148_fu_284_p2 = (ap_sig_allocacmp_indvar_flatten41_load + 10'd1);

assign add_ln149_fu_377_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln150_fu_371_p2 = (select_ln149_fu_323_p3 + 4'd1);

assign add_ln171_1_fu_600_p2 = (trunc_ln171_1_fu_590_p1 + zext_ln171_fu_505_p1);

assign add_ln171_2_fu_682_p2 = (trunc_ln171_2_fu_672_p1 + zext_ln171_fu_505_p1);

assign add_ln171_3_fu_764_p2 = (trunc_ln171_3_fu_754_p1 + zext_ln171_fu_505_p1);

assign add_ln171_fu_515_p2 = (trunc_ln171_fu_501_p1 + zext_ln171_fu_505_p1);

assign add_ln172_1_fu_626_p2 = (ashr_ln172_1_fu_614_p2 + ap_phi_mux_empty_47_phi_fu_239_p4);

assign add_ln172_2_fu_708_p2 = (ashr_ln172_2_fu_696_p2 + ap_phi_mux_empty_46_phi_fu_228_p4);

assign add_ln172_3_fu_790_p2 = (ashr_ln172_3_fu_778_p2 + ap_phi_mux_empty_45_phi_fu_217_p4);

assign add_ln172_fu_544_p2 = (ashr_ln172_fu_532_p2 + ap_phi_mux_empty_48_phi_fu_250_p4);

assign add_ln173_1_fu_646_p2 = (ashr_ln173_1_fu_640_p2 + empty_40_fu_124);

assign add_ln173_2_fu_728_p2 = (ashr_ln173_2_fu_722_p2 + empty_42_fu_132);

assign add_ln173_3_fu_810_p2 = (ashr_ln173_3_fu_804_p2 + empty_44_fu_140);

assign add_ln173_fu_564_p2 = (ashr_ln173_fu_558_p2 + empty_38_fu_116);

assign and_ln148_fu_311_p2 = (xor_ln148_fu_299_p2 & icmp_ln150_fu_305_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((ap_predicate_op42_read_state1 == 1'b1) & (gamma_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((ap_predicate_op162_write_state4 == 1'b1) & (x_stream_full_n == 1'b0)) | ((ap_predicate_op164_write_state4 == 1'b1) & (y_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_121 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_165 = ~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_condition_166 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_condition_790 = ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln153_reg_1016_pp0_iter0_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter0_reg == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_conv_i400_reg_204 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_1402_reg_195 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_2404_reg_186 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_3406_reg_177 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_45_reg_213 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_46_reg_224 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_47_reg_235 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_48_reg_246 = 'bx;

always @ (*) begin
    ap_predicate_op162_write_state4 = ((icmp_ln180_reg_1045_pp0_iter2_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op164_write_state4 = ((icmp_ln180_reg_1045_pp0_iter2_reg == 1'd1) & (icmp_ln148_reg_1005_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op42_read_state1 = ((icmp_ln153_fu_331_p2 == 1'd1) & (icmp_ln148_fu_278_p2 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign ashr_ln172_1_fu_614_p2 = $signed(empty_40_fu_124) >>> zext_ln172_fu_529_p1;

assign ashr_ln172_2_fu_696_p2 = $signed(empty_42_fu_132) >>> zext_ln172_fu_529_p1;

assign ashr_ln172_3_fu_778_p2 = $signed(empty_44_fu_140) >>> zext_ln172_fu_529_p1;

assign ashr_ln172_fu_532_p2 = $signed(empty_38_fu_116) >>> zext_ln172_fu_529_p1;

assign ashr_ln173_1_fu_640_p2 = $signed(ap_phi_mux_empty_47_phi_fu_239_p4) >>> zext_ln172_fu_529_p1;

assign ashr_ln173_2_fu_722_p2 = $signed(ap_phi_mux_empty_46_phi_fu_228_p4) >>> zext_ln172_fu_529_p1;

assign ashr_ln173_3_fu_804_p2 = $signed(ap_phi_mux_empty_45_phi_fu_217_p4) >>> zext_ln172_fu_529_p1;

assign ashr_ln173_fu_558_p2 = $signed(ap_phi_mux_empty_48_phi_fu_250_p4) >>> zext_ln172_fu_529_p1;

assign icmp_ln148_fu_278_p2 = ((ap_sig_allocacmp_indvar_flatten41_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln148_reg_1005_pp0_iter0_reg = icmp_ln148_reg_1005;

assign icmp_ln149_fu_293_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_305_p2 = ((ap_sig_allocacmp_iter_load == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_331_p2 = ((select_ln149_fu_323_p3 == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln153_reg_1016_pp0_iter0_reg = icmp_ln153_reg_1016;

assign icmp_ln171_1_fu_584_p2 = (($signed(ap_phi_mux_conv_i_1402_phi_fu_198_p4) > $signed(22'd0)) ? 1'b1 : 1'b0);

assign icmp_ln171_2_fu_666_p2 = (($signed(ap_phi_mux_conv_i_2404_phi_fu_189_p4) > $signed(22'd0)) ? 1'b1 : 1'b0);

assign icmp_ln171_3_fu_748_p2 = (($signed(ap_phi_mux_conv_i_3406_phi_fu_180_p4) > $signed(22'd0)) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_495_p2 = (($signed(ap_phi_mux_conv_i400_phi_fu_207_p4) > $signed(22'd0)) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_430_p2 = ((select_ln149_reg_1009 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln149_fu_317_p2 = (icmp_ln149_fu_293_p2 | and_ln148_fu_311_p2);

assign select_ln149_1_fu_383_p3 = ((icmp_ln149_fu_293_p2[0:0] == 1'b1) ? 8'd1 : add_ln149_fu_377_p2);

assign select_ln149_fu_323_p3 = ((or_ln149_fu_317_p2[0:0] == 1'b1) ? 4'd1 : ap_sig_allocacmp_iter_load);

assign sext_ln148_1_fu_468_p0 = conv_i_1403_fu_92;

assign sext_ln148_1_fu_468_p1 = sext_ln148_1_fu_468_p0;

assign sext_ln148_2_fu_473_p0 = conv_i_2405_fu_96;

assign sext_ln148_2_fu_473_p1 = sext_ln148_2_fu_473_p0;

assign sext_ln148_3_fu_478_p0 = conv_i_3407_fu_100;

assign sext_ln148_3_fu_478_p1 = sext_ln148_3_fu_478_p0;

assign sext_ln148_fu_463_p0 = conv_i401_fu_88;

assign sext_ln148_fu_463_p1 = sext_ln148_fu_463_p0;

assign sub_ln171_1_fu_594_p2 = (trunc_ln171_1_fu_590_p1 - zext_ln171_fu_505_p1);

assign sub_ln171_2_fu_676_p2 = (trunc_ln171_2_fu_672_p1 - zext_ln171_fu_505_p1);

assign sub_ln171_3_fu_758_p2 = (trunc_ln171_3_fu_754_p1 - zext_ln171_fu_505_p1);

assign sub_ln171_fu_509_p2 = (trunc_ln171_fu_501_p1 - zext_ln171_fu_505_p1);

assign sub_ln172_1_fu_620_p2 = (ap_phi_mux_empty_47_phi_fu_239_p4 - ashr_ln172_1_fu_614_p2);

assign sub_ln172_2_fu_702_p2 = (ap_phi_mux_empty_46_phi_fu_228_p4 - ashr_ln172_2_fu_696_p2);

assign sub_ln172_3_fu_784_p2 = (ap_phi_mux_empty_45_phi_fu_217_p4 - ashr_ln172_3_fu_778_p2);

assign sub_ln172_fu_538_p2 = (ap_phi_mux_empty_48_phi_fu_250_p4 - ashr_ln172_fu_532_p2);

assign sub_ln173_1_fu_652_p2 = (empty_40_fu_124 - ashr_ln173_1_fu_640_p2);

assign sub_ln173_2_fu_734_p2 = (empty_42_fu_132 - ashr_ln173_2_fu_722_p2);

assign sub_ln173_3_fu_816_p2 = (empty_44_fu_140 - ashr_ln173_3_fu_804_p2);

assign sub_ln173_fu_570_p2 = (empty_38_fu_116 - ashr_ln173_fu_558_p2);

assign trunc_ln164_fu_337_p1 = gamma_stream_dout[21:0];

assign trunc_ln171_1_fu_590_p1 = ap_phi_mux_conv_i_1402_phi_fu_198_p4[15:0];

assign trunc_ln171_2_fu_672_p1 = ap_phi_mux_conv_i_2404_phi_fu_189_p4[15:0];

assign trunc_ln171_3_fu_754_p1 = ap_phi_mux_conv_i_3406_phi_fu_180_p4[15:0];

assign trunc_ln171_fu_501_p1 = ap_phi_mux_conv_i400_phi_fu_207_p4[15:0];

assign x_stream_din = {{{{NEW_X_3_reg_1079}, {NEW_X_2_reg_1069}}, {NEW_X_1_reg_1059}}, {NEW_X_reg_1049}};

assign xor_ln148_fu_299_p2 = (icmp_ln149_fu_293_p2 ^ 1'd1);

assign y_stream_din = {{{{NEW_Y_3_reg_1084}, {NEW_Y_2_reg_1074}}, {NEW_Y_1_reg_1064}}, {NEW_Y_reg_1054}};

assign zext_ln150_fu_406_p1 = select_ln149_reg_1009;

assign zext_ln171_fu_505_p1 = CORDIC_THETAS_q0;

assign zext_ln172_fu_529_p1 = select_ln149_reg_1009_pp0_iter1_reg;

endmodule //ROPE_QK_QUANT_stage2_cordic
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ROPE_QK_QUANT_stage2_cordic_CORDIC_THETAS_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 11;
parameter AddressWidth = 4;
parameter AddressRange = 13;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/ROPE_QK_QUANT/ROPE_QK_QUANT_stage2_cordic_CORDIC_THETAS_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ROPE_QK_QUANT_stage3_postprocess (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        x_stream_dout,
        x_stream_empty_n,
        x_stream_read,
        x_stream_num_data_valid,
        x_stream_fifo_cap,
        y_stream_dout,
        y_stream_empty_n,
        y_stream_read,
        y_stream_num_data_valid,
        y_stream_fifo_cap,
        n_quarter_stream_dout,
        n_quarter_stream_empty_n,
        n_quarter_stream_read,
        n_quarter_stream_num_data_valid,
        n_quarter_stream_fifo_cap,
        cos_sin_stream_din,
        cos_sin_stream_full_n,
        cos_sin_stream_write,
        cos_sin_stream_num_data_valid,
        cos_sin_stream_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] x_stream_dout;
input   x_stream_empty_n;
output   x_stream_read;
input  [2:0] x_stream_num_data_valid;
input  [2:0] x_stream_fifo_cap;
input  [63:0] y_stream_dout;
input   y_stream_empty_n;
output   y_stream_read;
input  [2:0] y_stream_num_data_valid;
input  [2:0] y_stream_fifo_cap;
input  [39:0] n_quarter_stream_dout;
input   n_quarter_stream_empty_n;
output   n_quarter_stream_read;
input  [2:0] n_quarter_stream_num_data_valid;
input  [2:0] n_quarter_stream_fifo_cap;
output  [127:0] cos_sin_stream_din;
input   cos_sin_stream_full_n;
output   cos_sin_stream_write;
input  [2:0] cos_sin_stream_num_data_valid;
input  [2:0] cos_sin_stream_fifo_cap;

reg ap_idle;
reg x_stream_read;
reg y_stream_read;
reg n_quarter_stream_read;
reg cos_sin_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
wire   [0:0] icmp_ln196_fu_365_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln196_reg_664;
reg   [0:0] icmp_ln196_reg_664_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    x_stream_blk_n;
reg    y_stream_blk_n;
reg    n_quarter_stream_blk_n;
reg    cos_sin_stream_blk_n;
reg   [0:0] icmp_ln196_reg_664_pp0_iter1_reg;
wire   [15:0] trunc_ln205_fu_377_p1;
reg  signed [15:0] trunc_ln205_reg_668;
reg  signed [15:0] trunc_ln205_1_reg_673;
reg  signed [15:0] trunc_ln205_2_reg_678;
reg  signed [15:0] trunc_ln205_3_reg_683;
wire   [15:0] trunc_ln206_fu_411_p1;
reg  signed [15:0] trunc_ln206_reg_688;
reg  signed [15:0] trunc_ln206_1_reg_693;
reg  signed [15:0] trunc_ln206_2_reg_698;
reg  signed [15:0] trunc_ln206_3_reg_703;
wire   [9:0] trunc_ln208_fu_445_p1;
reg   [9:0] trunc_ln208_reg_708;
reg   [9:0] trunc_ln208_reg_708_pp0_iter1_reg;
reg   [9:0] trunc_ln208_reg_708_pp0_iter2_reg;
reg   [9:0] trunc_ln208_1_reg_712;
reg   [9:0] trunc_ln208_1_reg_712_pp0_iter1_reg;
reg   [9:0] trunc_ln208_1_reg_712_pp0_iter2_reg;
reg   [9:0] trunc_ln208_2_reg_716;
reg   [9:0] trunc_ln208_2_reg_716_pp0_iter1_reg;
reg   [9:0] trunc_ln208_2_reg_716_pp0_iter2_reg;
reg   [9:0] trunc_ln208_3_reg_720;
reg   [9:0] trunc_ln208_3_reg_720_pp0_iter1_reg;
reg   [9:0] trunc_ln208_3_reg_720_pp0_iter2_reg;
reg   [15:0] trunc_ln3_reg_764;
reg   [15:0] trunc_ln4_reg_773;
reg   [15:0] trunc_ln215_1_reg_782;
reg   [15:0] trunc_ln216_1_reg_791;
reg   [15:0] trunc_ln215_2_reg_800;
reg   [15:0] trunc_ln216_2_reg_809;
reg   [15:0] trunc_ln215_3_reg_818;
reg   [15:0] trunc_ln216_3_reg_827;
reg   [15:0] ap_phi_mux_COS_0_in_phi_fu_120_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_COS_0_in_reg_117;
wire   [15:0] grp_fu_294_p2;
wire   [15:0] grp_fu_285_p2;
reg   [15:0] ap_phi_mux_p_0_0_0_phi_fu_141_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_p_0_0_0_reg_138;
reg   [15:0] ap_phi_mux_phi_ln257_phi_fu_162_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_phi_ln257_reg_159;
wire   [15:0] grp_fu_312_p2;
wire   [15:0] grp_fu_303_p2;
reg   [15:0] ap_phi_mux_p_0_0_0_1_phi_fu_183_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_reg_180;
reg   [15:0] ap_phi_mux_phi_ln257_1_phi_fu_204_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_phi_ln257_1_reg_201;
wire   [15:0] grp_fu_330_p2;
wire   [15:0] grp_fu_321_p2;
reg   [15:0] ap_phi_mux_p_0_0_0_2_phi_fu_225_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_p_0_0_0_2_reg_222;
reg   [15:0] ap_phi_mux_phi_ln257_2_phi_fu_246_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_phi_ln257_2_reg_243;
wire   [15:0] grp_fu_348_p2;
wire   [15:0] grp_fu_339_p2;
reg   [15:0] ap_phi_mux_storemerge888_phi_fu_267_p16;
wire   [15:0] ap_phi_reg_pp0_iter3_storemerge888_reg_264;
reg   [6:0] indvar_flatten_fu_88;
wire   [6:0] add_ln196_fu_371_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [16:0] grp_fu_487_p1;
wire   [16:0] grp_fu_496_p1;
wire   [16:0] grp_fu_505_p1;
wire   [16:0] grp_fu_514_p1;
wire   [16:0] grp_fu_523_p1;
wire   [16:0] grp_fu_532_p1;
wire   [16:0] grp_fu_541_p1;
wire   [16:0] grp_fu_550_p1;
wire   [31:0] grp_fu_487_p2;
wire   [31:0] grp_fu_496_p2;
wire   [31:0] grp_fu_505_p2;
wire   [31:0] grp_fu_514_p2;
wire   [31:0] grp_fu_523_p2;
wire   [31:0] grp_fu_532_p2;
wire   [31:0] grp_fu_541_p2;
wire   [31:0] grp_fu_550_p2;
reg    grp_fu_487_ce;
reg    grp_fu_496_ce;
reg    grp_fu_505_ce;
reg    grp_fu_514_ce;
reg    grp_fu_523_ce;
reg    grp_fu_532_ce;
reg    grp_fu_541_ce;
reg    grp_fu_550_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_119;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_88 = 7'd0;
end

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln205_reg_668),
    .din1(grp_fu_487_p1),
    .ce(grp_fu_487_ce),
    .dout(grp_fu_487_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln206_reg_688),
    .din1(grp_fu_496_p1),
    .ce(grp_fu_496_ce),
    .dout(grp_fu_496_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln205_1_reg_673),
    .din1(grp_fu_505_p1),
    .ce(grp_fu_505_ce),
    .dout(grp_fu_505_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln206_1_reg_693),
    .din1(grp_fu_514_p1),
    .ce(grp_fu_514_ce),
    .dout(grp_fu_514_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln205_2_reg_678),
    .din1(grp_fu_523_p1),
    .ce(grp_fu_523_ce),
    .dout(grp_fu_523_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln206_2_reg_698),
    .din1(grp_fu_532_p1),
    .ce(grp_fu_532_ce),
    .dout(grp_fu_532_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln205_3_reg_683),
    .din1(grp_fu_541_p1),
    .ce(grp_fu_541_ce),
    .dout(grp_fu_541_p2)
);

ROPE_QK_QUANT_mul_16s_17ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_16s_17ns_32_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln206_3_reg_703),
    .din1(grp_fu_550_p1),
    .ce(grp_fu_550_ce),
    .dout(grp_fu_550_p2)
);

ROPE_QK_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_119)) begin
        if ((icmp_ln196_fu_365_p2 == 1'd0)) begin
            indvar_flatten_fu_88 <= add_ln196_fu_371_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln196_reg_664 <= icmp_ln196_fu_365_p2;
        trunc_ln205_1_reg_673 <= {{x_stream_dout[31:16]}};
        trunc_ln205_2_reg_678 <= {{x_stream_dout[47:32]}};
        trunc_ln205_3_reg_683 <= {{x_stream_dout[63:48]}};
        trunc_ln205_reg_668 <= trunc_ln205_fu_377_p1;
        trunc_ln206_1_reg_693 <= {{y_stream_dout[31:16]}};
        trunc_ln206_2_reg_698 <= {{y_stream_dout[47:32]}};
        trunc_ln206_3_reg_703 <= {{y_stream_dout[63:48]}};
        trunc_ln206_reg_688 <= trunc_ln206_fu_411_p1;
        trunc_ln208_1_reg_712 <= {{n_quarter_stream_dout[19:10]}};
        trunc_ln208_2_reg_716 <= {{n_quarter_stream_dout[29:20]}};
        trunc_ln208_3_reg_720 <= {{n_quarter_stream_dout[39:30]}};
        trunc_ln208_reg_708 <= trunc_ln208_fu_445_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln196_reg_664_pp0_iter1_reg <= icmp_ln196_reg_664;
        trunc_ln208_1_reg_712_pp0_iter1_reg <= trunc_ln208_1_reg_712;
        trunc_ln208_2_reg_716_pp0_iter1_reg <= trunc_ln208_2_reg_716;
        trunc_ln208_3_reg_720_pp0_iter1_reg <= trunc_ln208_3_reg_720;
        trunc_ln208_reg_708_pp0_iter1_reg <= trunc_ln208_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln196_reg_664_pp0_iter2_reg <= icmp_ln196_reg_664_pp0_iter1_reg;
        trunc_ln208_1_reg_712_pp0_iter2_reg <= trunc_ln208_1_reg_712_pp0_iter1_reg;
        trunc_ln208_2_reg_716_pp0_iter2_reg <= trunc_ln208_2_reg_716_pp0_iter1_reg;
        trunc_ln208_3_reg_720_pp0_iter2_reg <= trunc_ln208_3_reg_720_pp0_iter1_reg;
        trunc_ln208_reg_708_pp0_iter2_reg <= trunc_ln208_reg_708_pp0_iter1_reg;
        trunc_ln215_1_reg_782 <= {{grp_fu_505_p2[31:16]}};
        trunc_ln215_2_reg_800 <= {{grp_fu_523_p2[31:16]}};
        trunc_ln215_3_reg_818 <= {{grp_fu_541_p2[31:16]}};
        trunc_ln216_1_reg_791 <= {{grp_fu_514_p2[31:16]}};
        trunc_ln216_2_reg_809 <= {{grp_fu_532_p2[31:16]}};
        trunc_ln216_3_reg_827 <= {{grp_fu_550_p2[31:16]}};
        trunc_ln3_reg_764 <= {{grp_fu_487_p2[31:16]}};
        trunc_ln4_reg_773 <= {{grp_fu_496_p2[31:16]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln196_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln208_reg_708_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_COS_0_in_phi_fu_120_p16 = grp_fu_285_p2;
    end else if ((((trunc_ln208_reg_708_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_COS_0_in_phi_fu_120_p16 = grp_fu_294_p2;
    end else if ((((trunc_ln208_reg_708_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_COS_0_in_phi_fu_120_p16 = trunc_ln4_reg_773;
    end else if (((~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_COS_0_in_phi_fu_120_p16 = trunc_ln3_reg_764;
    end else begin
        ap_phi_mux_COS_0_in_phi_fu_120_p16 = ap_phi_reg_pp0_iter3_COS_0_in_reg_117;
    end
end

always @ (*) begin
    if ((((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_1_phi_fu_183_p16 = trunc_ln215_1_reg_782;
    end else if ((((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_1_phi_fu_183_p16 = trunc_ln216_1_reg_791;
    end else if ((((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_1_phi_fu_183_p16 = grp_fu_303_p2;
    end else if (((~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_1_phi_fu_183_p16 = grp_fu_312_p2;
    end else begin
        ap_phi_mux_p_0_0_0_1_phi_fu_183_p16 = ap_phi_reg_pp0_iter3_p_0_0_0_1_reg_180;
    end
end

always @ (*) begin
    if ((((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_2_phi_fu_225_p16 = trunc_ln215_2_reg_800;
    end else if ((((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_2_phi_fu_225_p16 = trunc_ln216_2_reg_809;
    end else if ((((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_2_phi_fu_225_p16 = grp_fu_321_p2;
    end else if (((~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_2_phi_fu_225_p16 = grp_fu_330_p2;
    end else begin
        ap_phi_mux_p_0_0_0_2_phi_fu_225_p16 = ap_phi_reg_pp0_iter3_p_0_0_0_2_reg_222;
    end
end

always @ (*) begin
    if ((((trunc_ln208_reg_708_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_phi_fu_141_p16 = trunc_ln3_reg_764;
    end else if ((((trunc_ln208_reg_708_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_phi_fu_141_p16 = trunc_ln4_reg_773;
    end else if ((((trunc_ln208_reg_708_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_phi_fu_141_p16 = grp_fu_285_p2;
    end else if (((~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_reg_708_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_reg_708_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_p_0_0_0_phi_fu_141_p16 = grp_fu_294_p2;
    end else begin
        ap_phi_mux_p_0_0_0_phi_fu_141_p16 = ap_phi_reg_pp0_iter3_p_0_0_0_reg_138;
    end
end

always @ (*) begin
    if ((((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_1_phi_fu_204_p16 = grp_fu_321_p2;
    end else if ((((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_1_phi_fu_204_p16 = grp_fu_330_p2;
    end else if ((((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_1_phi_fu_204_p16 = trunc_ln216_2_reg_809;
    end else if (((~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_2_reg_716_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_1_phi_fu_204_p16 = trunc_ln215_2_reg_800;
    end else begin
        ap_phi_mux_phi_ln257_1_phi_fu_204_p16 = ap_phi_reg_pp0_iter3_phi_ln257_1_reg_201;
    end
end

always @ (*) begin
    if ((((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_2_phi_fu_246_p16 = grp_fu_339_p2;
    end else if ((((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_2_phi_fu_246_p16 = grp_fu_348_p2;
    end else if ((((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_2_phi_fu_246_p16 = trunc_ln216_3_reg_827;
    end else if (((~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_2_phi_fu_246_p16 = trunc_ln215_3_reg_818;
    end else begin
        ap_phi_mux_phi_ln257_2_phi_fu_246_p16 = ap_phi_reg_pp0_iter3_phi_ln257_2_reg_243;
    end
end

always @ (*) begin
    if ((((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_phi_fu_162_p16 = grp_fu_303_p2;
    end else if ((((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_phi_fu_162_p16 = grp_fu_312_p2;
    end else if ((((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_phi_fu_162_p16 = trunc_ln216_1_reg_791;
    end else if (((~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_1_reg_712_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_phi_ln257_phi_fu_162_p16 = trunc_ln215_1_reg_782;
    end else begin
        ap_phi_mux_phi_ln257_phi_fu_162_p16 = ap_phi_reg_pp0_iter3_phi_ln257_reg_159;
    end
end

always @ (*) begin
    if ((((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd2) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd1) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_storemerge888_phi_fu_267_p16 = trunc_ln215_3_reg_818;
    end else if ((((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd3) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_storemerge888_phi_fu_267_p16 = trunc_ln216_3_reg_827;
    end else if ((((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd6) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd5) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_storemerge888_phi_fu_267_p16 = grp_fu_339_p2;
    end else if (((~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd6) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd5) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd4) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd3) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd2) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd1) & ~(trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)) | ((trunc_ln208_3_reg_720_pp0_iter2_reg == 10'd4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0)))) begin
        ap_phi_mux_storemerge888_phi_fu_267_p16 = grp_fu_348_p2;
    end else begin
        ap_phi_mux_storemerge888_phi_fu_267_p16 = ap_phi_reg_pp0_iter3_storemerge888_reg_264;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0))) begin
        cos_sin_stream_blk_n = cos_sin_stream_full_n;
    end else begin
        cos_sin_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0))) begin
        cos_sin_stream_write = 1'b1;
    end else begin
        cos_sin_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_487_ce = 1'b1;
    end else begin
        grp_fu_487_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_496_ce = 1'b1;
    end else begin
        grp_fu_496_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_505_ce = 1'b1;
    end else begin
        grp_fu_505_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_514_ce = 1'b1;
    end else begin
        grp_fu_514_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_523_ce = 1'b1;
    end else begin
        grp_fu_523_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_532_ce = 1'b1;
    end else begin
        grp_fu_532_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_541_ce = 1'b1;
    end else begin
        grp_fu_541_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_550_ce = 1'b1;
    end else begin
        grp_fu_550_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln196_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        n_quarter_stream_blk_n = n_quarter_stream_empty_n;
    end else begin
        n_quarter_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln196_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        n_quarter_stream_read = 1'b1;
    end else begin
        n_quarter_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln196_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        x_stream_blk_n = x_stream_empty_n;
    end else begin
        x_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln196_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        x_stream_read = 1'b1;
    end else begin
        x_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln196_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        y_stream_blk_n = y_stream_empty_n;
    end else begin
        y_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln196_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        y_stream_read = 1'b1;
    end else begin
        y_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd1)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln196_fu_371_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((n_quarter_stream_empty_n == 1'b0) & (icmp_ln196_fu_365_p2 == 1'd0)) | ((y_stream_empty_n == 1'b0) & (icmp_ln196_fu_365_p2 == 1'd0)) | ((icmp_ln196_fu_365_p2 == 1'd0) & (x_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((cos_sin_stream_full_n == 1'b0) & (icmp_ln196_reg_664_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_condition_119 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter3_COS_0_in_reg_117 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_0_1_reg_180 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_0_2_reg_222 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0_0_0_reg_138 = 'bx;

assign ap_phi_reg_pp0_iter3_phi_ln257_1_reg_201 = 'bx;

assign ap_phi_reg_pp0_iter3_phi_ln257_2_reg_243 = 'bx;

assign ap_phi_reg_pp0_iter3_phi_ln257_reg_159 = 'bx;

assign ap_phi_reg_pp0_iter3_storemerge888_reg_264 = 'bx;

assign ap_ready = ap_ready_sig;

assign cos_sin_stream_din = {{{{{{{{ap_phi_mux_storemerge888_phi_fu_267_p16}, {ap_phi_mux_p_0_0_0_2_phi_fu_225_p16}}, {ap_phi_mux_p_0_0_0_1_phi_fu_183_p16}}, {ap_phi_mux_p_0_0_0_phi_fu_141_p16}}, {ap_phi_mux_phi_ln257_2_phi_fu_246_p16}}, {ap_phi_mux_phi_ln257_1_phi_fu_204_p16}}, {ap_phi_mux_phi_ln257_phi_fu_162_p16}}, {ap_phi_mux_COS_0_in_phi_fu_120_p16}};

assign grp_fu_285_p2 = (16'd0 - trunc_ln3_reg_764);

assign grp_fu_294_p2 = (16'd0 - trunc_ln4_reg_773);

assign grp_fu_303_p2 = (16'd0 - trunc_ln215_1_reg_782);

assign grp_fu_312_p2 = (16'd0 - trunc_ln216_1_reg_791);

assign grp_fu_321_p2 = (16'd0 - trunc_ln215_2_reg_800);

assign grp_fu_330_p2 = (16'd0 - trunc_ln216_2_reg_809);

assign grp_fu_339_p2 = (16'd0 - trunc_ln215_3_reg_818);

assign grp_fu_348_p2 = (16'd0 - trunc_ln216_3_reg_827);

assign grp_fu_487_p1 = 32'd56281;

assign grp_fu_496_p1 = 32'd56281;

assign grp_fu_505_p1 = 32'd56281;

assign grp_fu_514_p1 = 32'd56281;

assign grp_fu_523_p1 = 32'd56281;

assign grp_fu_532_p1 = 32'd56281;

assign grp_fu_541_p1 = 32'd56281;

assign grp_fu_550_p1 = 32'd56281;

assign icmp_ln196_fu_365_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign trunc_ln205_fu_377_p1 = x_stream_dout[15:0];

assign trunc_ln206_fu_411_p1 = y_stream_dout[15:0];

assign trunc_ln208_fu_445_p1 = n_quarter_stream_dout[9:0];

endmodule //ROPE_QK_QUANT_stage3_postprocess
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_start_for_do_quant_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_start_for_do_quant_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_start_for_do_quant_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_start_for_do_quant_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_start_for_do_rope_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_start_for_do_rope_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_start_for_do_rope_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_start_for_do_rope_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_start_for_stage2_apply_rotation_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_start_for_stage2_apply_rotation_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_start_for_stage2_apply_rotation_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_start_for_stage2_apply_rotation_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_start_for_stage2_cordic_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_start_for_stage2_cordic_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_start_for_stage2_cordic_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_start_for_stage2_cordic_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ROPE_QK_QUANT_start_for_stage3_postprocess_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    ROPE_QK_QUANT_start_for_stage3_postprocess_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_ROPE_QK_QUANT_start_for_stage3_postprocess_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module ROPE_QK_QUANT_start_for_stage3_postprocess_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule