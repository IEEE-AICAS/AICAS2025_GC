/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="M_AXI_M_AXI,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.724500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=13832,HLS_SYN_LUT=8288,HLS_VERSION=2024_2}" *)

module M_AXI (
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        ap_clk,
        ap_rst_n,
        l_begin,
        l_close,
        memory_decoder_x,
        memory_decoder_y,
        memory_cls_y,
        memory_decoder_w,
        memory_cls_w,
        x_stream_TDATA,
        wq_stream_TDATA,
        ws1_stream_TDATA,
        ws2_stream_TDATA,
        y_stream_TDATA,
        cls_stream_TDATA,
        ap_start,
        x_stream_TVALID,
        x_stream_TREADY,
        wq_stream_TVALID,
        wq_stream_TREADY,
        ws1_stream_TVALID,
        ws1_stream_TREADY,
        ws2_stream_TVALID,
        ws2_stream_TREADY,
        ap_done,
        y_stream_TVALID,
        y_stream_TREADY,
        cls_stream_TVALID,
        cls_stream_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);

parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 63;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 256;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_GMEM_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   ap_clk;
input   ap_rst_n;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [63:0] memory_decoder_x;
input  [63:0] memory_decoder_y;
input  [63:0] memory_cls_y;
input  [63:0] memory_decoder_w;
input  [63:0] memory_cls_w;
output  [207:0] x_stream_TDATA;
output  [319:0] wq_stream_TDATA;
output  [23:0] ws1_stream_TDATA;
output  [23:0] ws2_stream_TDATA;
input  [207:0] y_stream_TDATA;
input  [135:0] cls_stream_TDATA;
input   ap_start;
output   x_stream_TVALID;
input   x_stream_TREADY;
output   wq_stream_TVALID;
input   wq_stream_TREADY;
output   ws1_stream_TVALID;
input   ws1_stream_TREADY;
output   ws2_stream_TVALID;
input   ws2_stream_TREADY;
output   ap_done;
input   y_stream_TVALID;
output   y_stream_TREADY;
input   cls_stream_TVALID;
output   cls_stream_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

 reg    ap_rst_n_inv;
wire    gmem_0_AWREADY;
wire    gmem_0_WREADY;
wire    gmem_0_ARREADY;
wire    gmem_0_RVALID;
wire   [255:0] gmem_0_RDATA;
wire    gmem_0_RLAST;
wire   [0:0] gmem_0_RID;
wire   [8:0] gmem_0_RFIFONUM;
wire   [0:0] gmem_0_RUSER;
wire   [1:0] gmem_0_RRESP;
wire    gmem_0_BVALID;
wire   [1:0] gmem_0_BRESP;
wire   [0:0] gmem_0_BID;
wire   [0:0] gmem_0_BUSER;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [63:0] entry_proc_U0_memory_decoder_y_c_din;
wire    entry_proc_U0_memory_decoder_y_c_write;
wire   [63:0] entry_proc_U0_memory_cls_y_c_din;
wire    entry_proc_U0_memory_cls_y_c_write;
wire    Block_entry_gmem_rd_proc_U0_ap_start;
wire    Block_entry_gmem_rd_proc_U0_ap_done;
wire    Block_entry_gmem_rd_proc_U0_ap_continue;
wire    Block_entry_gmem_rd_proc_U0_ap_idle;
wire    Block_entry_gmem_rd_proc_U0_ap_ready;
wire    Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWVALID;
wire   [63:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWADDR;
wire   [0:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWID;
wire   [31:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWLEN;
wire   [2:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWSIZE;
wire   [1:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWBURST;
wire   [1:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWLOCK;
wire   [3:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWCACHE;
wire   [2:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWPROT;
wire   [3:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWQOS;
wire   [3:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWREGION;
wire   [0:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWUSER;
wire    Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WVALID;
wire   [255:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WDATA;
wire   [31:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WSTRB;
wire    Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WLAST;
wire   [0:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WID;
wire   [0:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WUSER;
wire    Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARVALID;
wire   [63:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARADDR;
wire   [0:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARID;
wire   [31:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARLEN;
wire   [2:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARSIZE;
wire   [1:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARBURST;
wire   [1:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARLOCK;
wire   [3:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARCACHE;
wire   [2:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARPROT;
wire   [3:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARQOS;
wire   [3:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARREGION;
wire   [0:0] Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARUSER;
wire    Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_RREADY;
wire    Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_BREADY;
wire   [207:0] Block_entry_gmem_rd_proc_U0_x_stream_TDATA;
wire    Block_entry_gmem_rd_proc_U0_x_stream_TVALID;
wire   [319:0] Block_entry_gmem_rd_proc_U0_wq_stream_TDATA;
wire    Block_entry_gmem_rd_proc_U0_wq_stream_TVALID;
wire   [23:0] Block_entry_gmem_rd_proc_U0_ws1_stream_TDATA;
wire    Block_entry_gmem_rd_proc_U0_ws1_stream_TVALID;
wire   [23:0] Block_entry_gmem_rd_proc_U0_ws2_stream_TDATA;
wire    Block_entry_gmem_rd_proc_U0_ws2_stream_TVALID;
wire    ap_sync_continue;
wire    Block_entry_proc_U0_ap_start;
wire    Block_entry_proc_U0_ap_done;
wire    Block_entry_proc_U0_ap_continue;
wire    Block_entry_proc_U0_ap_idle;
wire    Block_entry_proc_U0_ap_ready;
wire   [0:0] Block_entry_proc_U0_ap_return;
wire    cmp1_loc_channel_full_n;
wire    Block_for_end_proc_U0_ap_start;
wire    Block_for_end_proc_U0_ap_done;
wire    Block_for_end_proc_U0_ap_continue;
wire    Block_for_end_proc_U0_ap_idle;
wire    Block_for_end_proc_U0_ap_ready;
wire    Block_for_end_proc_U0_m_axi_gmem_0_AWVALID;
wire   [63:0] Block_for_end_proc_U0_m_axi_gmem_0_AWADDR;
wire   [0:0] Block_for_end_proc_U0_m_axi_gmem_0_AWID;
wire   [31:0] Block_for_end_proc_U0_m_axi_gmem_0_AWLEN;
wire   [2:0] Block_for_end_proc_U0_m_axi_gmem_0_AWSIZE;
wire   [1:0] Block_for_end_proc_U0_m_axi_gmem_0_AWBURST;
wire   [1:0] Block_for_end_proc_U0_m_axi_gmem_0_AWLOCK;
wire   [3:0] Block_for_end_proc_U0_m_axi_gmem_0_AWCACHE;
wire   [2:0] Block_for_end_proc_U0_m_axi_gmem_0_AWPROT;
wire   [3:0] Block_for_end_proc_U0_m_axi_gmem_0_AWQOS;
wire   [3:0] Block_for_end_proc_U0_m_axi_gmem_0_AWREGION;
wire   [0:0] Block_for_end_proc_U0_m_axi_gmem_0_AWUSER;
wire    Block_for_end_proc_U0_m_axi_gmem_0_WVALID;
wire   [255:0] Block_for_end_proc_U0_m_axi_gmem_0_WDATA;
wire   [31:0] Block_for_end_proc_U0_m_axi_gmem_0_WSTRB;
wire    Block_for_end_proc_U0_m_axi_gmem_0_WLAST;
wire   [0:0] Block_for_end_proc_U0_m_axi_gmem_0_WID;
wire   [0:0] Block_for_end_proc_U0_m_axi_gmem_0_WUSER;
wire    Block_for_end_proc_U0_m_axi_gmem_0_ARVALID;
wire   [63:0] Block_for_end_proc_U0_m_axi_gmem_0_ARADDR;
wire   [0:0] Block_for_end_proc_U0_m_axi_gmem_0_ARID;
wire   [31:0] Block_for_end_proc_U0_m_axi_gmem_0_ARLEN;
wire   [2:0] Block_for_end_proc_U0_m_axi_gmem_0_ARSIZE;
wire   [1:0] Block_for_end_proc_U0_m_axi_gmem_0_ARBURST;
wire   [1:0] Block_for_end_proc_U0_m_axi_gmem_0_ARLOCK;
wire   [3:0] Block_for_end_proc_U0_m_axi_gmem_0_ARCACHE;
wire   [2:0] Block_for_end_proc_U0_m_axi_gmem_0_ARPROT;
wire   [3:0] Block_for_end_proc_U0_m_axi_gmem_0_ARQOS;
wire   [3:0] Block_for_end_proc_U0_m_axi_gmem_0_ARREGION;
wire   [0:0] Block_for_end_proc_U0_m_axi_gmem_0_ARUSER;
wire    Block_for_end_proc_U0_m_axi_gmem_0_RREADY;
wire    Block_for_end_proc_U0_m_axi_gmem_0_BREADY;
wire    Block_for_end_proc_U0_memory_decoder_y_read;
wire    Block_for_end_proc_U0_y_stream_TREADY;
wire    Block_for_end_proc_U0_memory_cls_y_read;
wire    Block_for_end_proc_U0_cls_stream_TREADY;
wire    memory_decoder_y_c_full_n;
wire   [63:0] memory_decoder_y_c_dout;
wire    memory_decoder_y_c_empty_n;
wire   [2:0] memory_decoder_y_c_num_data_valid;
wire   [2:0] memory_decoder_y_c_fifo_cap;
wire    memory_cls_y_c_full_n;
wire   [63:0] memory_cls_y_c_dout;
wire    memory_cls_y_c_empty_n;
wire   [2:0] memory_cls_y_c_num_data_valid;
wire   [2:0] memory_cls_y_c_fifo_cap;
wire   [0:0] cmp1_loc_channel_dout;
wire    cmp1_loc_channel_empty_n;
wire   [2:0] cmp1_loc_channel_num_data_valid;
wire   [2:0] cmp1_loc_channel_fifo_cap;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready;
wire    ap_sync_Block_entry_gmem_rd_proc_U0_ap_ready;
reg    ap_sync_reg_Block_entry_proc_U0_ap_ready;
wire    ap_sync_Block_entry_proc_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_Block_entry_proc_U0_ap_ready = 1'b0;
end

M_AXI_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 256 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARVALID),
    .I_CH0_ARREADY(gmem_0_ARREADY),
    .I_CH0_ARADDR(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARADDR),
    .I_CH0_ARLEN(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARLEN),
    .I_CH0_RVALID(gmem_0_RVALID),
    .I_CH0_RREADY(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_RREADY),
    .I_CH0_RDATA(gmem_0_RDATA),
    .I_CH0_RFIFONUM(gmem_0_RFIFONUM),
    .I_CH0_AWVALID(Block_for_end_proc_U0_m_axi_gmem_0_AWVALID),
    .I_CH0_AWREADY(gmem_0_AWREADY),
    .I_CH0_AWADDR(Block_for_end_proc_U0_m_axi_gmem_0_AWADDR),
    .I_CH0_AWLEN(Block_for_end_proc_U0_m_axi_gmem_0_AWLEN),
    .I_CH0_WVALID(Block_for_end_proc_U0_m_axi_gmem_0_WVALID),
    .I_CH0_WREADY(gmem_0_WREADY),
    .I_CH0_WDATA(Block_for_end_proc_U0_m_axi_gmem_0_WDATA),
    .I_CH0_WSTRB(Block_for_end_proc_U0_m_axi_gmem_0_WSTRB),
    .I_CH0_BVALID(gmem_0_BVALID),
    .I_CH0_BREADY(Block_for_end_proc_U0_m_axi_gmem_0_BREADY)
);

M_AXI_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .memory_decoder_y(memory_decoder_y),
    .memory_decoder_y_c_din(entry_proc_U0_memory_decoder_y_c_din),
    .memory_decoder_y_c_full_n(memory_decoder_y_c_full_n),
    .memory_decoder_y_c_write(entry_proc_U0_memory_decoder_y_c_write),
    .memory_decoder_y_c_num_data_valid(memory_decoder_y_c_num_data_valid),
    .memory_decoder_y_c_fifo_cap(memory_decoder_y_c_fifo_cap),
    .memory_cls_y(memory_cls_y),
    .memory_cls_y_c_din(entry_proc_U0_memory_cls_y_c_din),
    .memory_cls_y_c_full_n(memory_cls_y_c_full_n),
    .memory_cls_y_c_write(entry_proc_U0_memory_cls_y_c_write),
    .memory_cls_y_c_num_data_valid(memory_cls_y_c_num_data_valid),
    .memory_cls_y_c_fifo_cap(memory_cls_y_c_fifo_cap)
);

M_AXI_Block_entry_gmem_rd_proc Block_entry_gmem_rd_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_entry_gmem_rd_proc_U0_ap_start),
    .ap_done(Block_entry_gmem_rd_proc_U0_ap_done),
    .ap_continue(Block_entry_gmem_rd_proc_U0_ap_continue),
    .ap_idle(Block_entry_gmem_rd_proc_U0_ap_idle),
    .ap_ready(Block_entry_gmem_rd_proc_U0_ap_ready),
    .m_axi_gmem_0_AWVALID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(gmem_0_RLAST),
    .m_axi_gmem_0_RID(gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(Block_entry_gmem_rd_proc_U0_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .memory_decoder_x(memory_decoder_x),
    .x_stream_TDATA(Block_entry_gmem_rd_proc_U0_x_stream_TDATA),
    .x_stream_TVALID(Block_entry_gmem_rd_proc_U0_x_stream_TVALID),
    .x_stream_TREADY(x_stream_TREADY),
    .l_begin(l_begin),
    .l_close(l_close),
    .memory_decoder_w(memory_decoder_w),
    .memory_cls_w(memory_cls_w),
    .wq_stream_TDATA(Block_entry_gmem_rd_proc_U0_wq_stream_TDATA),
    .wq_stream_TVALID(Block_entry_gmem_rd_proc_U0_wq_stream_TVALID),
    .wq_stream_TREADY(wq_stream_TREADY),
    .ws1_stream_TDATA(Block_entry_gmem_rd_proc_U0_ws1_stream_TDATA),
    .ws1_stream_TVALID(Block_entry_gmem_rd_proc_U0_ws1_stream_TVALID),
    .ws1_stream_TREADY(ws1_stream_TREADY),
    .ws2_stream_TDATA(Block_entry_gmem_rd_proc_U0_ws2_stream_TDATA),
    .ws2_stream_TVALID(Block_entry_gmem_rd_proc_U0_ws2_stream_TVALID),
    .ws2_stream_TREADY(ws2_stream_TREADY)
);

M_AXI_Block_entry_proc Block_entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_entry_proc_U0_ap_start),
    .ap_done(Block_entry_proc_U0_ap_done),
    .ap_continue(Block_entry_proc_U0_ap_continue),
    .ap_idle(Block_entry_proc_U0_ap_idle),
    .ap_ready(Block_entry_proc_U0_ap_ready),
    .l_close(l_close),
    .ap_return(Block_entry_proc_U0_ap_return)
);

M_AXI_Block_for_end_proc Block_for_end_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_for_end_proc_U0_ap_start),
    .ap_done(Block_for_end_proc_U0_ap_done),
    .ap_continue(Block_for_end_proc_U0_ap_continue),
    .ap_idle(Block_for_end_proc_U0_ap_idle),
    .ap_ready(Block_for_end_proc_U0_ap_ready),
    .p_read(cmp1_loc_channel_dout),
    .m_axi_gmem_0_AWVALID(Block_for_end_proc_U0_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(gmem_0_AWREADY),
    .m_axi_gmem_0_AWADDR(Block_for_end_proc_U0_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(Block_for_end_proc_U0_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(Block_for_end_proc_U0_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(Block_for_end_proc_U0_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(Block_for_end_proc_U0_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(Block_for_end_proc_U0_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(Block_for_end_proc_U0_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(Block_for_end_proc_U0_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(Block_for_end_proc_U0_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(Block_for_end_proc_U0_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(Block_for_end_proc_U0_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(Block_for_end_proc_U0_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(gmem_0_WREADY),
    .m_axi_gmem_0_WDATA(Block_for_end_proc_U0_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(Block_for_end_proc_U0_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(Block_for_end_proc_U0_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(Block_for_end_proc_U0_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(Block_for_end_proc_U0_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(Block_for_end_proc_U0_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(1'b0),
    .m_axi_gmem_0_ARADDR(Block_for_end_proc_U0_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(Block_for_end_proc_U0_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(Block_for_end_proc_U0_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(Block_for_end_proc_U0_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(Block_for_end_proc_U0_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(Block_for_end_proc_U0_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(Block_for_end_proc_U0_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(Block_for_end_proc_U0_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(Block_for_end_proc_U0_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(Block_for_end_proc_U0_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(Block_for_end_proc_U0_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(1'b0),
    .m_axi_gmem_0_RREADY(Block_for_end_proc_U0_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(256'd0),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(9'd0),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(gmem_0_BVALID),
    .m_axi_gmem_0_BREADY(Block_for_end_proc_U0_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(gmem_0_BRESP),
    .m_axi_gmem_0_BID(gmem_0_BID),
    .m_axi_gmem_0_BUSER(gmem_0_BUSER),
    .memory_decoder_y_dout(memory_decoder_y_c_dout),
    .memory_decoder_y_empty_n(memory_decoder_y_c_empty_n),
    .memory_decoder_y_read(Block_for_end_proc_U0_memory_decoder_y_read),
    .memory_decoder_y_num_data_valid(memory_decoder_y_c_num_data_valid),
    .memory_decoder_y_fifo_cap(memory_decoder_y_c_fifo_cap),
    .y_stream_TDATA(y_stream_TDATA),
    .y_stream_TVALID(y_stream_TVALID),
    .y_stream_TREADY(Block_for_end_proc_U0_y_stream_TREADY),
    .memory_cls_y_dout(memory_cls_y_c_dout),
    .memory_cls_y_empty_n(memory_cls_y_c_empty_n),
    .memory_cls_y_read(Block_for_end_proc_U0_memory_cls_y_read),
    .memory_cls_y_num_data_valid(memory_cls_y_c_num_data_valid),
    .memory_cls_y_fifo_cap(memory_cls_y_c_fifo_cap),
    .cls_stream_TDATA(cls_stream_TDATA),
    .cls_stream_TVALID(cls_stream_TVALID),
    .cls_stream_TREADY(Block_for_end_proc_U0_cls_stream_TREADY)
);

M_AXI_fifo_w64_d3_S memory_decoder_y_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_memory_decoder_y_c_din),
    .if_full_n(memory_decoder_y_c_full_n),
    .if_write(entry_proc_U0_memory_decoder_y_c_write),
    .if_dout(memory_decoder_y_c_dout),
    .if_empty_n(memory_decoder_y_c_empty_n),
    .if_read(Block_for_end_proc_U0_memory_decoder_y_read),
    .if_num_data_valid(memory_decoder_y_c_num_data_valid),
    .if_fifo_cap(memory_decoder_y_c_fifo_cap)
);

M_AXI_fifo_w64_d3_S memory_cls_y_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_memory_cls_y_c_din),
    .if_full_n(memory_cls_y_c_full_n),
    .if_write(entry_proc_U0_memory_cls_y_c_write),
    .if_dout(memory_cls_y_c_dout),
    .if_empty_n(memory_cls_y_c_empty_n),
    .if_read(Block_for_end_proc_U0_memory_cls_y_read),
    .if_num_data_valid(memory_cls_y_c_num_data_valid),
    .if_fifo_cap(memory_cls_y_c_fifo_cap)
);

M_AXI_fifo_w1_d2_S cmp1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry_proc_U0_ap_return),
    .if_full_n(cmp1_loc_channel_full_n),
    .if_write(Block_entry_proc_U0_ap_done),
    .if_dout(cmp1_loc_channel_dout),
    .if_empty_n(cmp1_loc_channel_empty_n),
    .if_read(Block_for_end_proc_U0_ap_ready),
    .if_num_data_valid(cmp1_loc_channel_num_data_valid),
    .if_fifo_cap(cmp1_loc_channel_fifo_cap)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready <= ap_sync_Block_entry_gmem_rd_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Block_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_entry_proc_U0_ap_ready <= ap_sync_Block_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

assign Block_entry_gmem_rd_proc_U0_ap_continue = ap_sync_continue;

assign Block_entry_gmem_rd_proc_U0_ap_start = ((ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Block_entry_proc_U0_ap_continue = cmp1_loc_channel_full_n;

assign Block_entry_proc_U0_ap_start = ((ap_sync_reg_Block_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Block_for_end_proc_U0_ap_continue = ap_sync_continue;

assign Block_for_end_proc_U0_ap_start = cmp1_loc_channel_empty_n;

assign ap_done = ap_sync_done;

assign ap_idle = ((cmp1_loc_channel_empty_n ^ 1'b1) & entry_proc_U0_ap_idle & Block_for_end_proc_U0_ap_idle & Block_entry_proc_U0_ap_idle & Block_entry_gmem_rd_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_Block_entry_gmem_rd_proc_U0_ap_ready = (ap_sync_reg_Block_entry_gmem_rd_proc_U0_ap_ready | Block_entry_gmem_rd_proc_U0_ap_ready);

assign ap_sync_Block_entry_proc_U0_ap_ready = (ap_sync_reg_Block_entry_proc_U0_ap_ready | Block_entry_proc_U0_ap_ready);

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (Block_for_end_proc_U0_ap_done & Block_entry_gmem_rd_proc_U0_ap_done);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_entry_proc_U0_ap_ready & ap_sync_Block_entry_proc_U0_ap_ready & ap_sync_Block_entry_gmem_rd_proc_U0_ap_ready);

assign cls_stream_TREADY = Block_for_end_proc_U0_cls_stream_TREADY;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign gmem_0_BID = 1'd0;

assign gmem_0_BRESP = 2'd0;

assign gmem_0_BUSER = 1'd0;

assign gmem_0_RID = 1'd0;

assign gmem_0_RLAST = 1'b0;

assign gmem_0_RRESP = 2'd0;

assign gmem_0_RUSER = 1'd0;

assign wq_stream_TDATA = Block_entry_gmem_rd_proc_U0_wq_stream_TDATA;

assign wq_stream_TVALID = Block_entry_gmem_rd_proc_U0_wq_stream_TVALID;

assign ws1_stream_TDATA = Block_entry_gmem_rd_proc_U0_ws1_stream_TDATA;

assign ws1_stream_TVALID = Block_entry_gmem_rd_proc_U0_ws1_stream_TVALID;

assign ws2_stream_TDATA = Block_entry_gmem_rd_proc_U0_ws2_stream_TDATA;

assign ws2_stream_TVALID = Block_entry_gmem_rd_proc_U0_ws2_stream_TVALID;

assign x_stream_TDATA = Block_entry_gmem_rd_proc_U0_x_stream_TDATA;

assign x_stream_TVALID = Block_entry_gmem_rd_proc_U0_x_stream_TVALID;

assign y_stream_TREADY = Block_for_end_proc_U0_y_stream_TREADY;

endmodule //M_AXI
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_Block_entry_gmem_rd_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_decoder_x,
        x_stream_TDATA,
        x_stream_TVALID,
        x_stream_TREADY,
        l_begin,
        l_close,
        memory_decoder_w,
        memory_cls_w,
        wq_stream_TDATA,
        wq_stream_TVALID,
        wq_stream_TREADY,
        ws1_stream_TDATA,
        ws1_stream_TVALID,
        ws1_stream_TREADY,
        ws2_stream_TDATA,
        ws2_stream_TVALID,
        ws2_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_decoder_x;
output  [207:0] x_stream_TDATA;
output   x_stream_TVALID;
input   x_stream_TREADY;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [63:0] memory_decoder_w;
input  [63:0] memory_cls_w;
output  [319:0] wq_stream_TDATA;
output   wq_stream_TVALID;
input   wq_stream_TREADY;
output  [23:0] ws1_stream_TDATA;
output   ws1_stream_TVALID;
input   ws1_stream_TREADY;
output  [23:0] ws2_stream_TDATA;
output   ws2_stream_TVALID;
input   ws2_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_ARVALID;
reg[63:0] m_axi_gmem_0_ARADDR;
reg[0:0] m_axi_gmem_0_ARID;
reg[31:0] m_axi_gmem_0_ARLEN;
reg[2:0] m_axi_gmem_0_ARSIZE;
reg[1:0] m_axi_gmem_0_ARBURST;
reg[1:0] m_axi_gmem_0_ARLOCK;
reg[3:0] m_axi_gmem_0_ARCACHE;
reg[2:0] m_axi_gmem_0_ARPROT;
reg[3:0] m_axi_gmem_0_ARQOS;
reg[3:0] m_axi_gmem_0_ARREGION;
reg[0:0] m_axi_gmem_0_ARUSER;
reg m_axi_gmem_0_RREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] memory_decoder_x_read_reg_145;
reg    ap_block_state1;
reg   [63:0] memory_cls_w_read_reg_150;
wire    ap_CS_fsm_state2;
wire    grp_read_x_fu_90_ap_done;
reg   [63:0] memory_decoder_w_read_reg_155;
reg   [31:0] l_close_read_reg_160;
reg   [31:0] l_7_reg_165;
wire    ap_CS_fsm_state3;
wire    grp_read_x_fu_90_ap_start;
wire    grp_read_x_fu_90_ap_idle;
wire    grp_read_x_fu_90_ap_ready;
wire    grp_read_x_fu_90_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_read_x_fu_90_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_read_x_fu_90_m_axi_gmem_0_AWID;
wire   [31:0] grp_read_x_fu_90_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_read_x_fu_90_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_read_x_fu_90_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_read_x_fu_90_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_read_x_fu_90_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_read_x_fu_90_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_read_x_fu_90_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_read_x_fu_90_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_read_x_fu_90_m_axi_gmem_0_AWUSER;
wire    grp_read_x_fu_90_m_axi_gmem_0_WVALID;
wire   [255:0] grp_read_x_fu_90_m_axi_gmem_0_WDATA;
wire   [31:0] grp_read_x_fu_90_m_axi_gmem_0_WSTRB;
wire    grp_read_x_fu_90_m_axi_gmem_0_WLAST;
wire   [0:0] grp_read_x_fu_90_m_axi_gmem_0_WID;
wire   [0:0] grp_read_x_fu_90_m_axi_gmem_0_WUSER;
wire    grp_read_x_fu_90_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_read_x_fu_90_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_read_x_fu_90_m_axi_gmem_0_ARID;
wire   [31:0] grp_read_x_fu_90_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_read_x_fu_90_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_read_x_fu_90_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_read_x_fu_90_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_read_x_fu_90_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_read_x_fu_90_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_read_x_fu_90_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_read_x_fu_90_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_read_x_fu_90_m_axi_gmem_0_ARUSER;
wire    grp_read_x_fu_90_m_axi_gmem_0_RREADY;
wire    grp_read_x_fu_90_m_axi_gmem_0_BREADY;
wire   [207:0] grp_read_x_fu_90_x_stream_TDATA;
wire    grp_read_x_fu_90_x_stream_TVALID;
wire    grp_read_x_fu_90_x_stream_TREADY;
wire    grp_read_w_fu_100_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_read_w_fu_100_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_read_w_fu_100_m_axi_gmem_0_AWID;
wire   [31:0] grp_read_w_fu_100_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_read_w_fu_100_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_read_w_fu_100_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_read_w_fu_100_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_read_w_fu_100_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_read_w_fu_100_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_read_w_fu_100_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_read_w_fu_100_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_read_w_fu_100_m_axi_gmem_0_AWUSER;
wire    grp_read_w_fu_100_m_axi_gmem_0_WVALID;
wire   [255:0] grp_read_w_fu_100_m_axi_gmem_0_WDATA;
wire   [31:0] grp_read_w_fu_100_m_axi_gmem_0_WSTRB;
wire    grp_read_w_fu_100_m_axi_gmem_0_WLAST;
wire   [0:0] grp_read_w_fu_100_m_axi_gmem_0_WID;
wire   [0:0] grp_read_w_fu_100_m_axi_gmem_0_WUSER;
wire    grp_read_w_fu_100_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_read_w_fu_100_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_read_w_fu_100_m_axi_gmem_0_ARID;
wire   [31:0] grp_read_w_fu_100_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_read_w_fu_100_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_read_w_fu_100_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_read_w_fu_100_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_read_w_fu_100_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_read_w_fu_100_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_read_w_fu_100_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_read_w_fu_100_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_read_w_fu_100_m_axi_gmem_0_ARUSER;
wire    grp_read_w_fu_100_m_axi_gmem_0_RREADY;
wire    grp_read_w_fu_100_m_axi_gmem_0_BREADY;
wire   [319:0] grp_read_w_fu_100_wq_stream_TDATA;
wire   [23:0] grp_read_w_fu_100_ws1_stream_TDATA;
wire   [23:0] grp_read_w_fu_100_ws2_stream_TDATA;
wire    grp_read_w_fu_100_ap_start;
wire    grp_read_w_fu_100_wq_stream_TVALID;
wire    grp_read_w_fu_100_wq_stream_TREADY;
wire    grp_read_w_fu_100_ap_done;
wire    grp_read_w_fu_100_ws1_stream_TVALID;
wire    grp_read_w_fu_100_ws1_stream_TREADY;
wire    grp_read_w_fu_100_ws2_stream_TVALID;
wire    grp_read_w_fu_100_ws2_stream_TREADY;
wire    grp_read_w_fu_100_ap_ready;
wire    grp_read_w_fu_100_ap_idle;
reg    grp_read_w_fu_100_ap_continue;
reg    grp_read_x_fu_90_ap_start_reg;
reg    ap_block_state1_ignore_call11;
reg   [207:0] x_stream_TDATA_reg;
reg    grp_read_w_fu_100_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_sync_reg_grp_read_w_fu_100_ap_ready;
reg    ap_sync_reg_grp_read_w_fu_100_ap_done;
reg    ap_block_state5_on_subcall_done;
wire    ap_sync_grp_read_w_fu_100_ap_ready;
reg   [319:0] wq_stream_TDATA_reg;
reg   [23:0] ws1_stream_TDATA_reg;
reg   [23:0] ws2_stream_TDATA_reg;
reg   [31:0] l_fu_56;
wire   [31:0] l_8_fu_128_p2;
wire   [0:0] icmp_ln362_fu_123_p2;
wire    ap_CS_fsm_state6;
wire    regslice_both_x_stream_U_apdone_blk;
wire    regslice_both_wq_stream_U_apdone_blk;
wire    regslice_both_ws1_stream_U_apdone_blk;
wire    regslice_both_ws2_stream_U_apdone_blk;
reg    ap_block_state6;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg   [207:0] x_stream_TDATA_int_regslice;
wire    x_stream_TREADY_int_regslice;
wire    regslice_both_x_stream_U_vld_out;
reg   [319:0] wq_stream_TDATA_int_regslice;
wire    wq_stream_TREADY_int_regslice;
wire    regslice_both_wq_stream_U_vld_out;
reg   [23:0] ws1_stream_TDATA_int_regslice;
wire    ws1_stream_TREADY_int_regslice;
wire    regslice_both_ws1_stream_U_vld_out;
reg   [23:0] ws2_stream_TDATA_int_regslice;
wire    ws2_stream_TREADY_int_regslice;
wire    regslice_both_ws2_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_read_x_fu_90_ap_start_reg = 1'b0;
//#0 grp_read_w_fu_100_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_read_w_fu_100_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_read_w_fu_100_ap_done = 1'b0;
//#0 l_fu_56 = 32'd0;
end

M_AXI_read_x grp_read_x_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_read_x_fu_90_ap_start),
    .ap_done(grp_read_x_fu_90_ap_done),
    .ap_idle(grp_read_x_fu_90_ap_idle),
    .ap_ready(grp_read_x_fu_90_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_read_x_fu_90_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_read_x_fu_90_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_read_x_fu_90_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_read_x_fu_90_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_read_x_fu_90_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_read_x_fu_90_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_read_x_fu_90_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_read_x_fu_90_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_read_x_fu_90_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_read_x_fu_90_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_read_x_fu_90_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_read_x_fu_90_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_read_x_fu_90_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_read_x_fu_90_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_read_x_fu_90_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_read_x_fu_90_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_read_x_fu_90_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_read_x_fu_90_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_read_x_fu_90_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(m_axi_gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_read_x_fu_90_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_read_x_fu_90_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_read_x_fu_90_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_read_x_fu_90_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_read_x_fu_90_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_read_x_fu_90_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_read_x_fu_90_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_read_x_fu_90_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_read_x_fu_90_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_read_x_fu_90_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_read_x_fu_90_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(m_axi_gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_read_x_fu_90_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(m_axi_gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(m_axi_gmem_0_RLAST),
    .m_axi_gmem_0_RID(m_axi_gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(m_axi_gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(m_axi_gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(m_axi_gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_read_x_fu_90_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .memory_decoder_x(memory_decoder_x_read_reg_145),
    .x_stream_TDATA(grp_read_x_fu_90_x_stream_TDATA),
    .x_stream_TVALID(grp_read_x_fu_90_x_stream_TVALID),
    .x_stream_TREADY(grp_read_x_fu_90_x_stream_TREADY)
);

M_AXI_read_w grp_read_w_fu_100(
    .l(l_7_reg_165),
    .m_axi_gmem_0_AWVALID(grp_read_w_fu_100_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_read_w_fu_100_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_read_w_fu_100_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_read_w_fu_100_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_read_w_fu_100_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_read_w_fu_100_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_read_w_fu_100_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_read_w_fu_100_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_read_w_fu_100_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_read_w_fu_100_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_read_w_fu_100_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_read_w_fu_100_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_read_w_fu_100_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_read_w_fu_100_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_read_w_fu_100_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_read_w_fu_100_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_read_w_fu_100_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_read_w_fu_100_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_read_w_fu_100_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(m_axi_gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_read_w_fu_100_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_read_w_fu_100_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_read_w_fu_100_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_read_w_fu_100_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_read_w_fu_100_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_read_w_fu_100_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_read_w_fu_100_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_read_w_fu_100_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_read_w_fu_100_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_read_w_fu_100_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_read_w_fu_100_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(m_axi_gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_read_w_fu_100_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(m_axi_gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(m_axi_gmem_0_RLAST),
    .m_axi_gmem_0_RID(m_axi_gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(m_axi_gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(m_axi_gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(m_axi_gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_read_w_fu_100_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .memory_decoder_w(memory_decoder_w_read_reg_155),
    .memory_cls_w(memory_cls_w_read_reg_150),
    .wq_stream_TDATA(grp_read_w_fu_100_wq_stream_TDATA),
    .ws1_stream_TDATA(grp_read_w_fu_100_ws1_stream_TDATA),
    .ws2_stream_TDATA(grp_read_w_fu_100_ws2_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .l_ap_vld(1'b1),
    .memory_decoder_w_ap_vld(1'b1),
    .memory_cls_w_ap_vld(1'b1),
    .ap_start(grp_read_w_fu_100_ap_start),
    .wq_stream_TVALID(grp_read_w_fu_100_wq_stream_TVALID),
    .wq_stream_TREADY(grp_read_w_fu_100_wq_stream_TREADY),
    .ap_done(grp_read_w_fu_100_ap_done),
    .ws1_stream_TVALID(grp_read_w_fu_100_ws1_stream_TVALID),
    .ws1_stream_TREADY(grp_read_w_fu_100_ws1_stream_TREADY),
    .ws2_stream_TVALID(grp_read_w_fu_100_ws2_stream_TVALID),
    .ws2_stream_TREADY(grp_read_w_fu_100_ws2_stream_TREADY),
    .ap_ready(grp_read_w_fu_100_ap_ready),
    .ap_idle(grp_read_w_fu_100_ap_idle),
    .ap_continue(grp_read_w_fu_100_ap_continue)
);

M_AXI_regslice_both #(
    .DataWidth( 208 ))
regslice_both_x_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(x_stream_TDATA_int_regslice),
    .vld_in(grp_read_x_fu_90_x_stream_TVALID),
    .ack_in(x_stream_TREADY_int_regslice),
    .data_out(x_stream_TDATA),
    .vld_out(regslice_both_x_stream_U_vld_out),
    .ack_out(x_stream_TREADY),
    .apdone_blk(regslice_both_x_stream_U_apdone_blk)
);

M_AXI_regslice_both #(
    .DataWidth( 320 ))
regslice_both_wq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(wq_stream_TDATA_int_regslice),
    .vld_in(grp_read_w_fu_100_wq_stream_TVALID),
    .ack_in(wq_stream_TREADY_int_regslice),
    .data_out(wq_stream_TDATA),
    .vld_out(regslice_both_wq_stream_U_vld_out),
    .ack_out(wq_stream_TREADY),
    .apdone_blk(regslice_both_wq_stream_U_apdone_blk)
);

M_AXI_regslice_both #(
    .DataWidth( 24 ))
regslice_both_ws1_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ws1_stream_TDATA_int_regslice),
    .vld_in(grp_read_w_fu_100_ws1_stream_TVALID),
    .ack_in(ws1_stream_TREADY_int_regslice),
    .data_out(ws1_stream_TDATA),
    .vld_out(regslice_both_ws1_stream_U_vld_out),
    .ack_out(ws1_stream_TREADY),
    .apdone_blk(regslice_both_ws1_stream_U_apdone_blk)
);

M_AXI_regslice_both #(
    .DataWidth( 24 ))
regslice_both_ws2_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ws2_stream_TDATA_int_regslice),
    .vld_in(grp_read_w_fu_100_ws2_stream_TVALID),
    .ack_in(ws2_stream_TREADY_int_regslice),
    .data_out(ws2_stream_TDATA),
    .vld_out(regslice_both_ws2_stream_U_vld_out),
    .ack_out(ws2_stream_TREADY),
    .apdone_blk(regslice_both_ws2_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_read_w_fu_100_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_read_w_fu_100_ap_done <= 1'b0;
        end else if ((grp_read_w_fu_100_ap_done == 1'b1)) begin
            ap_sync_reg_grp_read_w_fu_100_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_read_w_fu_100_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_read_w_fu_100_ap_ready <= 1'b0;
        end else if ((grp_read_w_fu_100_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_read_w_fu_100_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_w_fu_100_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | ((ap_sync_grp_read_w_fu_100_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_read_w_fu_100_ap_start_reg <= 1'b1;
        end else if ((grp_read_w_fu_100_ap_ready == 1'b1)) begin
            grp_read_w_fu_100_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_x_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call11))) begin
            grp_read_x_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_read_x_fu_90_ap_ready == 1'b1)) begin
            grp_read_x_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        l_fu_56 <= l_begin;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        l_fu_56 <= l_8_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_7_reg_165 <= l_fu_56;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_read_x_fu_90_ap_done == 1'b1))) begin
        l_close_read_reg_160 <= l_close;
        memory_cls_w_read_reg_150 <= memory_cls_w;
        memory_decoder_w_read_reg_155 <= memory_decoder_w;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        memory_decoder_x_read_reg_145 <= memory_decoder_x;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_read_w_fu_100_wq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        wq_stream_TDATA_reg <= grp_read_w_fu_100_wq_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_read_w_fu_100_ws1_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ws1_stream_TDATA_reg <= grp_read_w_fu_100_ws1_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_read_w_fu_100_ws2_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ws2_stream_TDATA_reg <= grp_read_w_fu_100_ws2_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_read_x_fu_90_x_stream_TVALID == 1'b1))) begin
        x_stream_TDATA_reg <= grp_read_x_fu_90_x_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_read_x_fu_90_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        grp_read_w_fu_100_ap_continue = 1'b1;
    end else begin
        grp_read_w_fu_100_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARADDR = grp_read_w_fu_100_m_axi_gmem_0_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARADDR = grp_read_x_fu_90_m_axi_gmem_0_ARADDR;
    end else begin
        m_axi_gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARBURST = grp_read_w_fu_100_m_axi_gmem_0_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARBURST = grp_read_x_fu_90_m_axi_gmem_0_ARBURST;
    end else begin
        m_axi_gmem_0_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARCACHE = grp_read_w_fu_100_m_axi_gmem_0_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARCACHE = grp_read_x_fu_90_m_axi_gmem_0_ARCACHE;
    end else begin
        m_axi_gmem_0_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARID = grp_read_w_fu_100_m_axi_gmem_0_ARID;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARID = grp_read_x_fu_90_m_axi_gmem_0_ARID;
    end else begin
        m_axi_gmem_0_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARLEN = grp_read_w_fu_100_m_axi_gmem_0_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARLEN = grp_read_x_fu_90_m_axi_gmem_0_ARLEN;
    end else begin
        m_axi_gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARLOCK = grp_read_w_fu_100_m_axi_gmem_0_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARLOCK = grp_read_x_fu_90_m_axi_gmem_0_ARLOCK;
    end else begin
        m_axi_gmem_0_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARPROT = grp_read_w_fu_100_m_axi_gmem_0_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARPROT = grp_read_x_fu_90_m_axi_gmem_0_ARPROT;
    end else begin
        m_axi_gmem_0_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARQOS = grp_read_w_fu_100_m_axi_gmem_0_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARQOS = grp_read_x_fu_90_m_axi_gmem_0_ARQOS;
    end else begin
        m_axi_gmem_0_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARREGION = grp_read_w_fu_100_m_axi_gmem_0_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARREGION = grp_read_x_fu_90_m_axi_gmem_0_ARREGION;
    end else begin
        m_axi_gmem_0_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARSIZE = grp_read_w_fu_100_m_axi_gmem_0_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARSIZE = grp_read_x_fu_90_m_axi_gmem_0_ARSIZE;
    end else begin
        m_axi_gmem_0_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARUSER = grp_read_w_fu_100_m_axi_gmem_0_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARUSER = grp_read_x_fu_90_m_axi_gmem_0_ARUSER;
    end else begin
        m_axi_gmem_0_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARVALID = grp_read_w_fu_100_m_axi_gmem_0_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARVALID = grp_read_x_fu_90_m_axi_gmem_0_ARVALID;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_RREADY = grp_read_w_fu_100_m_axi_gmem_0_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_RREADY = grp_read_x_fu_90_m_axi_gmem_0_RREADY;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((grp_read_w_fu_100_wq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        wq_stream_TDATA_int_regslice = grp_read_w_fu_100_wq_stream_TDATA;
    end else begin
        wq_stream_TDATA_int_regslice = wq_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_read_w_fu_100_ws1_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ws1_stream_TDATA_int_regslice = grp_read_w_fu_100_ws1_stream_TDATA;
    end else begin
        ws1_stream_TDATA_int_regslice = ws1_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_read_w_fu_100_ws2_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ws2_stream_TDATA_int_regslice = grp_read_w_fu_100_ws2_stream_TDATA;
    end else begin
        ws2_stream_TDATA_int_regslice = ws2_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_read_x_fu_90_x_stream_TVALID == 1'b1))) begin
        x_stream_TDATA_int_regslice = grp_read_x_fu_90_x_stream_TDATA;
    end else begin
        x_stream_TDATA_int_regslice = x_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_read_x_fu_90_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln362_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call11 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_reg_grp_read_w_fu_100_ap_ready & ap_sync_reg_grp_read_w_fu_100_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state6 = ((regslice_both_ws2_stream_U_apdone_blk == 1'b1) | (regslice_both_ws1_stream_U_apdone_blk == 1'b1) | (regslice_both_wq_stream_U_apdone_blk == 1'b1) | (regslice_both_x_stream_U_apdone_blk == 1'b1));
end

assign ap_sync_grp_read_w_fu_100_ap_ready = (grp_read_w_fu_100_ap_ready | ap_sync_reg_grp_read_w_fu_100_ap_ready);

assign grp_read_w_fu_100_ap_start = grp_read_w_fu_100_ap_start_reg;

assign grp_read_w_fu_100_wq_stream_TREADY = (wq_stream_TREADY_int_regslice & ap_CS_fsm_state5);

assign grp_read_w_fu_100_ws1_stream_TREADY = (ws1_stream_TREADY_int_regslice & ap_CS_fsm_state5);

assign grp_read_w_fu_100_ws2_stream_TREADY = (ws2_stream_TREADY_int_regslice & ap_CS_fsm_state5);

assign grp_read_x_fu_90_ap_start = grp_read_x_fu_90_ap_start_reg;

assign grp_read_x_fu_90_x_stream_TREADY = (x_stream_TREADY_int_regslice & ap_CS_fsm_state2);

assign icmp_ln362_fu_123_p2 = (($signed(l_fu_56) < $signed(l_close_read_reg_160)) ? 1'b1 : 1'b0);

assign l_8_fu_128_p2 = (l_fu_56 + 32'd1);

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign wq_stream_TVALID = regslice_both_wq_stream_U_vld_out;

assign ws1_stream_TVALID = regslice_both_ws1_stream_U_vld_out;

assign ws2_stream_TVALID = regslice_both_ws2_stream_U_vld_out;

assign x_stream_TVALID = regslice_both_x_stream_U_vld_out;

endmodule //M_AXI_Block_entry_gmem_rd_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_Block_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_close,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_close;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [0:0] icmp_ln367_fu_12_p2;
reg   [0:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= icmp_ln367_fu_12_p2;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = icmp_ln367_fu_12_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln367_fu_12_p2 = ((l_close == 32'd25) ? 1'b1 : 1'b0);

endmodule //M_AXI_Block_entry_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_Block_for_end_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_decoder_y_dout,
        memory_decoder_y_empty_n,
        memory_decoder_y_read,
        memory_decoder_y_num_data_valid,
        memory_decoder_y_fifo_cap,
        y_stream_TDATA,
        y_stream_TVALID,
        y_stream_TREADY,
        memory_cls_y_dout,
        memory_cls_y_empty_n,
        memory_cls_y_read,
        memory_cls_y_num_data_valid,
        memory_cls_y_fifo_cap,
        cls_stream_TDATA,
        cls_stream_TVALID,
        cls_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_decoder_y_dout;
input   memory_decoder_y_empty_n;
output   memory_decoder_y_read;
input  [2:0] memory_decoder_y_num_data_valid;
input  [2:0] memory_decoder_y_fifo_cap;
input  [207:0] y_stream_TDATA;
input   y_stream_TVALID;
output   y_stream_TREADY;
input  [63:0] memory_cls_y_dout;
input   memory_cls_y_empty_n;
output   memory_cls_y_read;
input  [2:0] memory_cls_y_num_data_valid;
input  [2:0] memory_cls_y_fifo_cap;
input  [135:0] cls_stream_TDATA;
input   cls_stream_TVALID;
output   cls_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_AWVALID;
reg[63:0] m_axi_gmem_0_AWADDR;
reg[0:0] m_axi_gmem_0_AWID;
reg[31:0] m_axi_gmem_0_AWLEN;
reg[2:0] m_axi_gmem_0_AWSIZE;
reg[1:0] m_axi_gmem_0_AWBURST;
reg[1:0] m_axi_gmem_0_AWLOCK;
reg[3:0] m_axi_gmem_0_AWCACHE;
reg[2:0] m_axi_gmem_0_AWPROT;
reg[3:0] m_axi_gmem_0_AWQOS;
reg[3:0] m_axi_gmem_0_AWREGION;
reg[0:0] m_axi_gmem_0_AWUSER;
reg m_axi_gmem_0_WVALID;
reg[255:0] m_axi_gmem_0_WDATA;
reg[31:0] m_axi_gmem_0_WSTRB;
reg m_axi_gmem_0_WLAST;
reg[0:0] m_axi_gmem_0_WID;
reg[0:0] m_axi_gmem_0_WUSER;
reg m_axi_gmem_0_BREADY;
reg memory_decoder_y_read;
reg memory_cls_y_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    memory_decoder_y_blk_n;
reg    memory_cls_y_blk_n;
wire   [0:0] p_read_1_read_fu_52_p2;
reg   [0:0] p_read_1_reg_88;
reg    ap_block_state1;
reg   [63:0] memory_cls_y_read_reg_92;
reg   [63:0] memory_decoder_y_read_reg_97;
wire    grp_write_y_fu_70_ap_start;
wire    grp_write_y_fu_70_ap_done;
wire    grp_write_y_fu_70_ap_idle;
wire    grp_write_y_fu_70_ap_ready;
wire    grp_write_y_fu_70_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_write_y_fu_70_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_write_y_fu_70_m_axi_gmem_0_AWID;
wire   [31:0] grp_write_y_fu_70_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_write_y_fu_70_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_write_y_fu_70_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_write_y_fu_70_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_write_y_fu_70_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_write_y_fu_70_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_write_y_fu_70_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_write_y_fu_70_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_write_y_fu_70_m_axi_gmem_0_AWUSER;
wire    grp_write_y_fu_70_m_axi_gmem_0_WVALID;
wire   [255:0] grp_write_y_fu_70_m_axi_gmem_0_WDATA;
wire   [31:0] grp_write_y_fu_70_m_axi_gmem_0_WSTRB;
wire    grp_write_y_fu_70_m_axi_gmem_0_WLAST;
wire   [0:0] grp_write_y_fu_70_m_axi_gmem_0_WID;
wire   [0:0] grp_write_y_fu_70_m_axi_gmem_0_WUSER;
wire    grp_write_y_fu_70_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_write_y_fu_70_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_write_y_fu_70_m_axi_gmem_0_ARID;
wire   [31:0] grp_write_y_fu_70_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_write_y_fu_70_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_write_y_fu_70_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_write_y_fu_70_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_write_y_fu_70_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_write_y_fu_70_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_write_y_fu_70_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_write_y_fu_70_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_write_y_fu_70_m_axi_gmem_0_ARUSER;
wire    grp_write_y_fu_70_m_axi_gmem_0_RREADY;
wire    grp_write_y_fu_70_m_axi_gmem_0_BREADY;
wire    grp_write_y_fu_70_y_stream_TREADY;
wire    grp_write_cls_fu_79_ap_start;
wire    grp_write_cls_fu_79_ap_done;
wire    grp_write_cls_fu_79_ap_idle;
wire    grp_write_cls_fu_79_ap_ready;
wire    grp_write_cls_fu_79_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_write_cls_fu_79_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_write_cls_fu_79_m_axi_gmem_0_AWID;
wire   [31:0] grp_write_cls_fu_79_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_write_cls_fu_79_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_write_cls_fu_79_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_write_cls_fu_79_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_write_cls_fu_79_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_write_cls_fu_79_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_write_cls_fu_79_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_write_cls_fu_79_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_write_cls_fu_79_m_axi_gmem_0_AWUSER;
wire    grp_write_cls_fu_79_m_axi_gmem_0_WVALID;
wire   [255:0] grp_write_cls_fu_79_m_axi_gmem_0_WDATA;
wire   [31:0] grp_write_cls_fu_79_m_axi_gmem_0_WSTRB;
wire    grp_write_cls_fu_79_m_axi_gmem_0_WLAST;
wire   [0:0] grp_write_cls_fu_79_m_axi_gmem_0_WID;
wire   [0:0] grp_write_cls_fu_79_m_axi_gmem_0_WUSER;
wire    grp_write_cls_fu_79_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_write_cls_fu_79_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_write_cls_fu_79_m_axi_gmem_0_ARID;
wire   [31:0] grp_write_cls_fu_79_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_write_cls_fu_79_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_write_cls_fu_79_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_write_cls_fu_79_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_write_cls_fu_79_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_write_cls_fu_79_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_write_cls_fu_79_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_write_cls_fu_79_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_write_cls_fu_79_m_axi_gmem_0_ARUSER;
wire    grp_write_cls_fu_79_m_axi_gmem_0_RREADY;
wire    grp_write_cls_fu_79_m_axi_gmem_0_BREADY;
wire    grp_write_cls_fu_79_cls_stream_TREADY;
reg    grp_write_y_fu_70_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_write_cls_fu_79_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_block_state3_on_subcall_done;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    regslice_both_y_stream_U_apdone_blk;
wire   [207:0] y_stream_TDATA_int_regslice;
wire    y_stream_TVALID_int_regslice;
reg    y_stream_TREADY_int_regslice;
wire    regslice_both_y_stream_U_ack_in;
wire    regslice_both_cls_stream_U_apdone_blk;
wire   [135:0] cls_stream_TDATA_int_regslice;
wire    cls_stream_TVALID_int_regslice;
reg    cls_stream_TREADY_int_regslice;
wire    regslice_both_cls_stream_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_write_y_fu_70_ap_start_reg = 1'b0;
//#0 grp_write_cls_fu_79_ap_start_reg = 1'b0;
end

M_AXI_write_y grp_write_y_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_y_fu_70_ap_start),
    .ap_done(grp_write_y_fu_70_ap_done),
    .ap_idle(grp_write_y_fu_70_ap_idle),
    .ap_ready(grp_write_y_fu_70_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_write_y_fu_70_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(m_axi_gmem_0_AWREADY),
    .m_axi_gmem_0_AWADDR(grp_write_y_fu_70_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_write_y_fu_70_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_write_y_fu_70_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_write_y_fu_70_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_write_y_fu_70_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_write_y_fu_70_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_write_y_fu_70_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_write_y_fu_70_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_write_y_fu_70_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_write_y_fu_70_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_write_y_fu_70_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_write_y_fu_70_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(m_axi_gmem_0_WREADY),
    .m_axi_gmem_0_WDATA(grp_write_y_fu_70_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_write_y_fu_70_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_write_y_fu_70_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_write_y_fu_70_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_write_y_fu_70_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_write_y_fu_70_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(1'b0),
    .m_axi_gmem_0_ARADDR(grp_write_y_fu_70_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_write_y_fu_70_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_write_y_fu_70_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_write_y_fu_70_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_write_y_fu_70_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_write_y_fu_70_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_write_y_fu_70_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_write_y_fu_70_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_write_y_fu_70_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_write_y_fu_70_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_write_y_fu_70_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(1'b0),
    .m_axi_gmem_0_RREADY(grp_write_y_fu_70_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(256'd0),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(9'd0),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(m_axi_gmem_0_BVALID),
    .m_axi_gmem_0_BREADY(grp_write_y_fu_70_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(m_axi_gmem_0_BRESP),
    .m_axi_gmem_0_BID(m_axi_gmem_0_BID),
    .m_axi_gmem_0_BUSER(m_axi_gmem_0_BUSER),
    .memory_decoder_y(memory_decoder_y_read_reg_97),
    .y_stream_TDATA(y_stream_TDATA_int_regslice),
    .y_stream_TVALID(y_stream_TVALID_int_regslice),
    .y_stream_TREADY(grp_write_y_fu_70_y_stream_TREADY)
);

M_AXI_write_cls grp_write_cls_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_cls_fu_79_ap_start),
    .ap_done(grp_write_cls_fu_79_ap_done),
    .ap_idle(grp_write_cls_fu_79_ap_idle),
    .ap_ready(grp_write_cls_fu_79_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_write_cls_fu_79_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(m_axi_gmem_0_AWREADY),
    .m_axi_gmem_0_AWADDR(grp_write_cls_fu_79_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_write_cls_fu_79_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_write_cls_fu_79_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_write_cls_fu_79_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_write_cls_fu_79_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_write_cls_fu_79_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_write_cls_fu_79_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_write_cls_fu_79_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_write_cls_fu_79_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_write_cls_fu_79_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_write_cls_fu_79_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_write_cls_fu_79_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(m_axi_gmem_0_WREADY),
    .m_axi_gmem_0_WDATA(grp_write_cls_fu_79_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_write_cls_fu_79_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_write_cls_fu_79_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_write_cls_fu_79_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_write_cls_fu_79_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_write_cls_fu_79_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(1'b0),
    .m_axi_gmem_0_ARADDR(grp_write_cls_fu_79_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_write_cls_fu_79_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_write_cls_fu_79_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_write_cls_fu_79_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_write_cls_fu_79_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_write_cls_fu_79_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_write_cls_fu_79_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_write_cls_fu_79_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_write_cls_fu_79_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_write_cls_fu_79_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_write_cls_fu_79_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(1'b0),
    .m_axi_gmem_0_RREADY(grp_write_cls_fu_79_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(256'd0),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(9'd0),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(m_axi_gmem_0_BVALID),
    .m_axi_gmem_0_BREADY(grp_write_cls_fu_79_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(m_axi_gmem_0_BRESP),
    .m_axi_gmem_0_BID(m_axi_gmem_0_BID),
    .m_axi_gmem_0_BUSER(m_axi_gmem_0_BUSER),
    .memory_cls_y(memory_cls_y_read_reg_92),
    .cls_stream_TDATA(cls_stream_TDATA_int_regslice),
    .cls_stream_TVALID(cls_stream_TVALID_int_regslice),
    .cls_stream_TREADY(grp_write_cls_fu_79_cls_stream_TREADY)
);

M_AXI_regslice_both #(
    .DataWidth( 208 ))
regslice_both_y_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(y_stream_TDATA),
    .vld_in(y_stream_TVALID),
    .ack_in(regslice_both_y_stream_U_ack_in),
    .data_out(y_stream_TDATA_int_regslice),
    .vld_out(y_stream_TVALID_int_regslice),
    .ack_out(y_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_y_stream_U_apdone_blk)
);

M_AXI_regslice_both #(
    .DataWidth( 136 ))
regslice_both_cls_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(cls_stream_TDATA),
    .vld_in(cls_stream_TVALID),
    .ack_in(regslice_both_cls_stream_U_ack_in),
    .data_out(cls_stream_TDATA_int_regslice),
    .vld_out(cls_stream_TVALID_int_regslice),
    .ack_out(cls_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_cls_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_write_cls_fu_79_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_write_cls_fu_79_ap_start_reg <= 1'b1;
        end else if ((grp_write_cls_fu_79_ap_ready == 1'b1)) begin
            grp_write_cls_fu_79_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_write_y_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_write_y_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_write_y_fu_70_ap_ready == 1'b1)) begin
            grp_write_y_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        memory_cls_y_read_reg_92 <= memory_cls_y_dout;
        memory_decoder_y_read_reg_97 <= memory_decoder_y_dout;
        p_read_1_reg_88 <= p_read;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1))) begin
        cls_stream_TREADY_int_regslice = grp_write_cls_fu_79_cls_stream_TREADY;
    end else begin
        cls_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWADDR = grp_write_cls_fu_79_m_axi_gmem_0_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWADDR = grp_write_y_fu_70_m_axi_gmem_0_AWADDR;
    end else begin
        m_axi_gmem_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWBURST = grp_write_cls_fu_79_m_axi_gmem_0_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWBURST = grp_write_y_fu_70_m_axi_gmem_0_AWBURST;
    end else begin
        m_axi_gmem_0_AWBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWCACHE = grp_write_cls_fu_79_m_axi_gmem_0_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWCACHE = grp_write_y_fu_70_m_axi_gmem_0_AWCACHE;
    end else begin
        m_axi_gmem_0_AWCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWID = grp_write_cls_fu_79_m_axi_gmem_0_AWID;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWID = grp_write_y_fu_70_m_axi_gmem_0_AWID;
    end else begin
        m_axi_gmem_0_AWID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWLEN = grp_write_cls_fu_79_m_axi_gmem_0_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWLEN = grp_write_y_fu_70_m_axi_gmem_0_AWLEN;
    end else begin
        m_axi_gmem_0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWLOCK = grp_write_cls_fu_79_m_axi_gmem_0_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWLOCK = grp_write_y_fu_70_m_axi_gmem_0_AWLOCK;
    end else begin
        m_axi_gmem_0_AWLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWPROT = grp_write_cls_fu_79_m_axi_gmem_0_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWPROT = grp_write_y_fu_70_m_axi_gmem_0_AWPROT;
    end else begin
        m_axi_gmem_0_AWPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWQOS = grp_write_cls_fu_79_m_axi_gmem_0_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWQOS = grp_write_y_fu_70_m_axi_gmem_0_AWQOS;
    end else begin
        m_axi_gmem_0_AWQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWREGION = grp_write_cls_fu_79_m_axi_gmem_0_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWREGION = grp_write_y_fu_70_m_axi_gmem_0_AWREGION;
    end else begin
        m_axi_gmem_0_AWREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWSIZE = grp_write_cls_fu_79_m_axi_gmem_0_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWSIZE = grp_write_y_fu_70_m_axi_gmem_0_AWSIZE;
    end else begin
        m_axi_gmem_0_AWSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWUSER = grp_write_cls_fu_79_m_axi_gmem_0_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWUSER = grp_write_y_fu_70_m_axi_gmem_0_AWUSER;
    end else begin
        m_axi_gmem_0_AWUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_AWVALID = grp_write_cls_fu_79_m_axi_gmem_0_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_AWVALID = grp_write_y_fu_70_m_axi_gmem_0_AWVALID;
    end else begin
        m_axi_gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_BREADY = grp_write_cls_fu_79_m_axi_gmem_0_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_BREADY = grp_write_y_fu_70_m_axi_gmem_0_BREADY;
    end else begin
        m_axi_gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_WDATA = grp_write_cls_fu_79_m_axi_gmem_0_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_WDATA = grp_write_y_fu_70_m_axi_gmem_0_WDATA;
    end else begin
        m_axi_gmem_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_WID = grp_write_cls_fu_79_m_axi_gmem_0_WID;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_WID = grp_write_y_fu_70_m_axi_gmem_0_WID;
    end else begin
        m_axi_gmem_0_WID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_WLAST = grp_write_cls_fu_79_m_axi_gmem_0_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_WLAST = grp_write_y_fu_70_m_axi_gmem_0_WLAST;
    end else begin
        m_axi_gmem_0_WLAST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_WSTRB = grp_write_cls_fu_79_m_axi_gmem_0_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_WSTRB = grp_write_y_fu_70_m_axi_gmem_0_WSTRB;
    end else begin
        m_axi_gmem_0_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_WUSER = grp_write_cls_fu_79_m_axi_gmem_0_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_WUSER = grp_write_y_fu_70_m_axi_gmem_0_WUSER;
    end else begin
        m_axi_gmem_0_WUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd1)))) begin
        m_axi_gmem_0_WVALID = grp_write_cls_fu_79_m_axi_gmem_0_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0)))) begin
        m_axi_gmem_0_WVALID = grp_write_y_fu_70_m_axi_gmem_0_WVALID;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        memory_cls_y_blk_n = memory_cls_y_empty_n;
    end else begin
        memory_cls_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        memory_cls_y_read = 1'b1;
    end else begin
        memory_cls_y_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        memory_decoder_y_blk_n = memory_decoder_y_empty_n;
    end else begin
        memory_decoder_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        memory_decoder_y_read = 1'b1;
    end else begin
        memory_decoder_y_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (p_read_1_reg_88 == 1'd0))) begin
        y_stream_TREADY_int_regslice = grp_write_y_fu_70_y_stream_TREADY;
    end else begin
        y_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1) & (p_read_1_read_fu_52_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1) & (p_read_1_read_fu_52_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (memory_cls_y_empty_n == 1'b0) | (memory_decoder_y_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = (((grp_write_cls_fu_79_ap_done == 1'b0) & (p_read_1_reg_88 == 1'd1)) | ((grp_write_y_fu_70_ap_done == 1'b0) & (p_read_1_reg_88 == 1'd0)));
end

assign cls_stream_TREADY = regslice_both_cls_stream_U_ack_in;

assign grp_write_cls_fu_79_ap_start = grp_write_cls_fu_79_ap_start_reg;

assign grp_write_y_fu_70_ap_start = grp_write_y_fu_70_ap_start_reg;

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign p_read_1_read_fu_52_p2 = p_read;

assign y_stream_TREADY = regslice_both_y_stream_U_ack_in;

endmodule //M_AXI_Block_for_end_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_wq_stage1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l_dout,
        l_empty_n,
        l_read,
        l_num_data_valid,
        l_fifo_cap,
        wq_queue_dout,
        wq_queue_empty_n,
        wq_queue_read,
        wq_queue_num_data_valid,
        wq_queue_fifo_cap,
        wq_pack_stream_din,
        wq_pack_stream_full_n,
        wq_pack_stream_write,
        wq_pack_stream_num_data_valid,
        wq_pack_stream_fifo_cap,
        l_c2_din,
        l_c2_full_n,
        l_c2_write,
        l_c2_num_data_valid,
        l_c2_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] l_dout;
input   l_empty_n;
output   l_read;
input  [2:0] l_num_data_valid;
input  [2:0] l_fifo_cap;
input  [255:0] wq_queue_dout;
input   wq_queue_empty_n;
output   wq_queue_read;
input  [2:0] wq_queue_num_data_valid;
input  [2:0] wq_queue_fifo_cap;
output  [1279:0] wq_pack_stream_din;
input   wq_pack_stream_full_n;
output   wq_pack_stream_write;
input  [2:0] wq_pack_stream_num_data_valid;
input  [2:0] wq_pack_stream_fifo_cap;
output  [31:0] l_c2_din;
input   l_c2_full_n;
output   l_c2_write;
input  [2:0] l_c2_num_data_valid;
input  [2:0] l_c2_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg l_read;
reg l_c2_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    l_blk_n;
reg    l_c2_blk_n;
reg   [31:0] l_5_reg_92;
reg    ap_block_state1;
wire   [21:0] bound4_fu_70_p3;
reg   [21:0] bound4_reg_97;
wire    ap_CS_fsm_state2;
wire    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start;
wire    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done;
wire    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_idle;
wire    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_ready;
wire    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_queue_read;
wire   [1279:0] grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_pack_stream_din;
wire    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_pack_stream_write;
reg    grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln203_fu_65_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start_reg = 1'b0;
end

M_AXI_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3 grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start),
    .ap_done(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done),
    .ap_idle(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_idle),
    .ap_ready(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_ready),
    .wq_queue_dout(wq_queue_dout),
    .wq_queue_empty_n(wq_queue_empty_n),
    .wq_queue_read(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_queue_read),
    .wq_queue_num_data_valid(3'd0),
    .wq_queue_fifo_cap(3'd0),
    .wq_pack_stream_din(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_pack_stream_din),
    .wq_pack_stream_full_n(wq_pack_stream_full_n),
    .wq_pack_stream_write(grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_pack_stream_write),
    .wq_pack_stream_num_data_valid(3'd0),
    .wq_pack_stream_fifo_cap(3'd0),
    .bound4(bound4_reg_97)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_ready == 1'b1)) begin
            grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_97[7 : 6] <= bound4_fu_70_p3[7 : 6];
bound4_reg_97[11] <= bound4_fu_70_p3[11];
bound4_reg_97[14] <= bound4_fu_70_p3[14];
bound4_reg_97[19 : 18] <= bound4_fu_70_p3[19 : 18];
bound4_reg_97[21] <= bound4_fu_70_p3[21];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_5_reg_92 <= l_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_blk_n = l_empty_n;
    end else begin
        l_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c2_blk_n = l_c2_full_n;
    end else begin
        l_c2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c2_write = 1'b1;
    end else begin
        l_c2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_read = 1'b1;
    end else begin
        l_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((l_c2_full_n == 1'b0) | (l_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bound4_fu_70_p3 = ((icmp_ln203_fu_65_p2[0:0] == 1'b1) ? 22'd2658880 : 22'd318080);

assign grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start = grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_ap_start_reg;

assign icmp_ln203_fu_65_p2 = ((l_5_reg_92 == 32'd24) ? 1'b1 : 1'b0);

assign l_c2_din = l_dout;

assign start_out = real_start;

assign wq_pack_stream_din = grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_pack_stream_din;

assign wq_pack_stream_write = grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_pack_stream_write;

assign wq_queue_read = grp_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3_fu_56_wq_queue_read;

always @ (posedge ap_clk) begin
    bound4_reg_97[5:0] <= 6'b000000;
    bound4_reg_97[10:8] <= 3'b010;
    bound4_reg_97[13:12] <= 2'b01;
    bound4_reg_97[17:15] <= 3'b001;
    bound4_reg_97[20] <= 1'b0;
end

endmodule //M_AXI_compose_wq_stage1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wq_queue_dout,
        wq_queue_empty_n,
        wq_queue_read,
        wq_queue_num_data_valid,
        wq_queue_fifo_cap,
        wq_pack_stream_din,
        wq_pack_stream_full_n,
        wq_pack_stream_write,
        wq_pack_stream_num_data_valid,
        wq_pack_stream_fifo_cap,
        bound4
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] wq_queue_dout;
input   wq_queue_empty_n;
output   wq_queue_read;
input  [2:0] wq_queue_num_data_valid;
input  [2:0] wq_queue_fifo_cap;
output  [1279:0] wq_pack_stream_din;
input   wq_pack_stream_full_n;
output   wq_pack_stream_write;
input  [2:0] wq_pack_stream_num_data_valid;
input  [2:0] wq_pack_stream_fifo_cap;
input  [21:0] bound4;

reg ap_idle;
reg wq_queue_read;
reg wq_pack_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln204_reg_284;
reg   [0:0] icmp_ln204_reg_284_pp0_iter2_reg;
reg   [0:0] icmp_ln208_1_reg_298;
reg    ap_predicate_op47_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln204_fu_126_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    wq_pack_stream_blk_n;
reg    wq_queue_blk_n;
wire   [0:0] icmp_ln204_reg_284_pp0_iter0_reg;
reg   [0:0] icmp_ln204_reg_284_pp0_iter1_reg;
wire   [0:0] or_ln205_fu_173_p2;
reg   [0:0] or_ln205_reg_288;
reg   [0:0] or_ln205_reg_288_pp0_iter2_reg;
wire   [2:0] i_fu_185_p3;
reg   [2:0] i_reg_293;
wire   [0:0] icmp_ln208_1_fu_217_p2;
reg   [1279:0] pack_01_fu_68;
wire   [1279:0] pack_5_fu_242_p3;
wire    ap_loop_init;
reg   [2:0] i_02_fu_72;
reg   [5:0] indvar_flatten_fu_76;
wire   [5:0] select_ln205_1_fu_199_p3;
reg   [21:0] indvar_flatten11_fu_80;
wire   [21:0] add_ln204_fu_132_p2;
reg   [21:0] ap_sig_allocacmp_indvar_flatten11_load;
wire   [0:0] icmp_ln205_fu_149_p2;
wire   [0:0] icmp_ln208_fu_161_p2;
wire   [0:0] xor_ln204_fu_155_p2;
wire   [0:0] and_ln204_fu_167_p2;
wire   [2:0] add_ln208_fu_179_p2;
wire   [5:0] add_ln205_fu_193_p2;
wire   [1023:0] tmp_fu_225_p4;
wire   [1023:0] select_ln205_fu_235_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_98;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 pack_01_fu_68 = 1280'd0;
//#0 i_02_fu_72 = 3'd0;
//#0 indvar_flatten_fu_76 = 6'd0;
//#0 indvar_flatten11_fu_80 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_02_fu_72 <= 3'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln204_reg_284_pp0_iter0_reg == 1'd0))) begin
        i_02_fu_72 <= i_fu_185_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_98)) begin
        if ((icmp_ln204_fu_126_p2 == 1'd0)) begin
            indvar_flatten11_fu_80 <= add_ln204_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_80 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_76 <= 6'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln204_reg_284_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_76 <= select_ln205_1_fu_199_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        pack_01_fu_68 <= 1280'd0;
    end else if (((icmp_ln204_reg_284_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        pack_01_fu_68 <= pack_5_fu_242_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln204_reg_284 <= icmp_ln204_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_293 <= i_fu_185_p3;
        icmp_ln204_reg_284_pp0_iter1_reg <= icmp_ln204_reg_284;
        or_ln205_reg_288 <= or_ln205_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln204_reg_284_pp0_iter2_reg <= icmp_ln204_reg_284_pp0_iter1_reg;
        icmp_ln208_1_reg_298 <= icmp_ln208_1_fu_217_p2;
        or_ln205_reg_288_pp0_iter2_reg <= or_ln205_reg_288;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln204_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 22'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_80;
    end
end

always @ (*) begin
    if (((ap_predicate_op47_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        wq_pack_stream_blk_n = wq_pack_stream_full_n;
    end else begin
        wq_pack_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op47_write_state4 == 1'b1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        wq_pack_stream_write = 1'b1;
    end else begin
        wq_pack_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln204_reg_284_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        wq_queue_blk_n = wq_queue_empty_n;
    end else begin
        wq_queue_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln204_reg_284_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        wq_queue_read = 1'b1;
    end else begin
        wq_queue_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((icmp_ln204_reg_284_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln204_fu_132_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 22'd1);

assign add_ln205_fu_193_p2 = (indvar_flatten_fu_76 + 6'd1);

assign add_ln208_fu_179_p2 = (i_02_fu_72 + 3'd1);

assign and_ln204_fu_167_p2 = (xor_ln204_fu_155_p2 & icmp_ln208_fu_161_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((ap_predicate_op47_write_state4 == 1'b1) & (wq_pack_stream_full_n == 1'b0)) | ((icmp_ln204_reg_284_pp0_iter2_reg == 1'd0) & (wq_queue_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_98 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op47_write_state4 = ((icmp_ln208_1_reg_298 == 1'd1) & (icmp_ln204_reg_284_pp0_iter2_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign i_fu_185_p3 = ((or_ln205_fu_173_p2[0:0] == 1'b1) ? 3'd1 : add_ln208_fu_179_p2);

assign icmp_ln204_fu_126_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == bound4) ? 1'b1 : 1'b0);

assign icmp_ln204_reg_284_pp0_iter0_reg = icmp_ln204_reg_284;

assign icmp_ln205_fu_149_p2 = ((indvar_flatten_fu_76 == 6'd20) ? 1'b1 : 1'b0);

assign icmp_ln208_1_fu_217_p2 = ((i_reg_293 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_161_p2 = ((i_02_fu_72 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln205_fu_173_p2 = (icmp_ln205_fu_149_p2 | and_ln204_fu_167_p2);

assign pack_5_fu_242_p3 = {{wq_queue_dout}, {select_ln205_fu_235_p3}};

assign select_ln205_1_fu_199_p3 = ((icmp_ln205_fu_149_p2[0:0] == 1'b1) ? 6'd1 : add_ln205_fu_193_p2);

assign select_ln205_fu_235_p3 = ((or_ln205_reg_288_pp0_iter2_reg[0:0] == 1'b1) ? 1024'd0 : tmp_fu_225_p4);

assign tmp_fu_225_p4 = {{pack_01_fu_68[1279:256]}};

assign wq_pack_stream_din = {{wq_queue_dout}, {select_ln205_fu_235_p3}};

assign xor_ln204_fu_155_p2 = (icmp_ln205_fu_149_p2 ^ 1'd1);

endmodule //M_AXI_compose_wq_stage1_Pipeline_VITIS_LOOP_204_1_VITIS_LOOP_205_2_VITIS_LOOP_208_3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_wq_stage2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_dout,
        l_empty_n,
        l_read,
        l_num_data_valid,
        l_fifo_cap,
        wq_pack_stream_dout,
        wq_pack_stream_empty_n,
        wq_pack_stream_read,
        wq_pack_stream_num_data_valid,
        wq_pack_stream_fifo_cap,
        wq_stream_TDATA,
        wq_stream_TVALID,
        wq_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_dout;
input   l_empty_n;
output   l_read;
input  [2:0] l_num_data_valid;
input  [2:0] l_fifo_cap;
input  [1279:0] wq_pack_stream_dout;
input   wq_pack_stream_empty_n;
output   wq_pack_stream_read;
input  [2:0] wq_pack_stream_num_data_valid;
input  [2:0] wq_pack_stream_fifo_cap;
output  [319:0] wq_stream_TDATA;
output   wq_stream_TVALID;
input   wq_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg l_read;
reg[319:0] wq_stream_TDATA;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    l_blk_n;
reg   [31:0] l_4_reg_82;
reg    ap_block_state1;
wire   [21:0] cast3_fu_62_p3;
reg   [21:0] cast3_reg_87;
wire    ap_CS_fsm_state2;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_idle;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_ready;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_pack_stream_read;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TREADY;
wire   [319:0] grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TDATA;
wire    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TVALID;
reg    grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [319:0] wq_stream_TDATA_reg;
wire   [0:0] icmp_ln225_fu_57_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start_reg = 1'b0;
end

M_AXI_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3 grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start),
    .ap_done(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done),
    .ap_idle(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_idle),
    .ap_ready(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_ready),
    .wq_pack_stream_dout(wq_pack_stream_dout),
    .wq_pack_stream_empty_n(wq_pack_stream_empty_n),
    .wq_pack_stream_read(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_pack_stream_read),
    .wq_pack_stream_num_data_valid(3'd0),
    .wq_pack_stream_fifo_cap(3'd0),
    .wq_stream_TREADY(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TREADY),
    .cast3(cast3_reg_87),
    .wq_stream_TDATA(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TDATA),
    .wq_stream_TVALID(grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TVALID)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_ready == 1'b1)) begin
            grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cast3_reg_87[10 : 8] <= cast3_fu_62_p3[10 : 8];
cast3_reg_87[12] <= cast3_fu_62_p3[12];
cast3_reg_87[17 : 15] <= cast3_fu_62_p3[17 : 15];
cast3_reg_87[21] <= cast3_fu_62_p3[21];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_4_reg_82 <= l_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        wq_stream_TDATA_reg <= grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_blk_n = l_empty_n;
    end else begin
        l_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_read = 1'b1;
    end else begin
        l_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        wq_stream_TDATA = grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TDATA;
    end else begin
        wq_stream_TDATA = wq_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (l_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign cast3_fu_62_p3 = ((icmp_ln225_fu_57_p2[0:0] == 1'b1) ? 22'd2127104 : 22'd254464);

assign grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start = grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_ap_start_reg;

assign grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TREADY = (wq_stream_TREADY & ap_CS_fsm_state4);

assign icmp_ln225_fu_57_p2 = ((l_4_reg_82 == 32'd24) ? 1'b1 : 1'b0);

assign wq_pack_stream_read = grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_pack_stream_read;

assign wq_stream_TVALID = grp_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3_fu_48_wq_stream_TVALID;

always @ (posedge ap_clk) begin
    cast3_reg_87[7:0] <= 8'b00000000;
    cast3_reg_87[11:11] <= 1'b0;
    cast3_reg_87[14:13] <= 2'b11;
    cast3_reg_87[20:18] <= 3'b000;
end

endmodule //M_AXI_compose_wq_stage2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wq_pack_stream_dout,
        wq_pack_stream_empty_n,
        wq_pack_stream_read,
        wq_pack_stream_num_data_valid,
        wq_pack_stream_fifo_cap,
        wq_stream_TREADY,
        cast3,
        wq_stream_TDATA,
        wq_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1279:0] wq_pack_stream_dout;
input   wq_pack_stream_empty_n;
output   wq_pack_stream_read;
input  [2:0] wq_pack_stream_num_data_valid;
input  [2:0] wq_pack_stream_fifo_cap;
input   wq_stream_TREADY;
input  [21:0] cast3;
output  [319:0] wq_stream_TDATA;
output   wq_stream_TVALID;

reg ap_idle;
reg wq_pack_stream_read;
reg wq_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln226_reg_301;
reg   [0:0] icmp_ln226_reg_301_pp0_iter1_reg;
reg   [0:0] or_ln227_reg_305;
reg    ap_predicate_op40_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln226_reg_301_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln226_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    wq_stream_TDATA_blk_n;
reg    wq_pack_stream_blk_n;
reg   [0:0] first_iter_0_reg_103;
wire   [0:0] icmp_ln226_reg_301_pp0_iter0_reg;
wire   [0:0] or_ln227_fu_196_p2;
reg   [0:0] or_ln227_reg_305_pp0_iter2_reg;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_108_p4;
wire    ap_loop_init;
reg   [1279:0] ap_phi_mux_pack1_phi_fu_119_p4;
wire   [1279:0] zext_ln221_fu_249_p1;
reg   [1279:0] ap_phi_reg_pp0_iter3_pack1_reg_116;
wire   [1279:0] ap_phi_reg_pp0_iter0_pack1_reg_116;
reg   [1279:0] ap_phi_reg_pp0_iter1_pack1_reg_116;
reg   [1279:0] ap_phi_reg_pp0_iter2_pack1_reg_116;
reg   [959:0] pack_03_fu_68;
reg   [2:0] i_fu_72;
wire   [2:0] i_6_fu_214_p3;
reg   [5:0] indvar_flatten_fu_76;
wire   [5:0] select_ln227_fu_228_p3;
reg   [21:0] indvar_flatten13_fu_80;
wire   [21:0] add_ln226_fu_149_p2;
reg   [21:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [0:0] icmp_ln227_fu_166_p2;
wire   [0:0] icmp_ln230_fu_184_p2;
wire   [0:0] xor_ln226_fu_178_p2;
wire   [0:0] and_ln226_fu_190_p2;
wire   [0:0] or_ln226_fu_172_p2;
wire   [0:0] or_ln230_fu_208_p2;
wire   [2:0] add_ln230_fu_202_p2;
wire   [5:0] add_ln227_fu_222_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_131;
reg    ap_condition_103;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 pack_03_fu_68 = 960'd0;
//#0 i_fu_72 = 3'd0;
//#0 indvar_flatten_fu_76 = 6'd0;
//#0 indvar_flatten13_fu_80 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if (((or_ln227_reg_305 == 1'd1) & (icmp_ln226_reg_301_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_pack1_reg_116 <= wq_pack_stream_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_pack1_reg_116 <= ap_phi_reg_pp0_iter2_pack1_reg_116;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln226_reg_301_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        first_iter_0_reg_103 <= 1'd0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        first_iter_0_reg_103 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_72 <= 3'd0;
    end else if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln226_reg_301_pp0_iter0_reg == 1'd0))) begin
        i_fu_72 <= i_6_fu_214_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_103)) begin
        if ((icmp_ln226_fu_143_p2 == 1'd0)) begin
            indvar_flatten13_fu_80 <= add_ln226_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_80 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_76 <= 6'd0;
    end else if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln226_reg_301_pp0_iter0_reg == 1'd0))) begin
        indvar_flatten_fu_76 <= select_ln227_fu_228_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_pack1_reg_116 <= ap_phi_reg_pp0_iter0_pack1_reg_116;
        icmp_ln226_reg_301 <= icmp_ln226_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_pack1_reg_116 <= ap_phi_reg_pp0_iter1_pack1_reg_116;
        icmp_ln226_reg_301_pp0_iter1_reg <= icmp_ln226_reg_301;
        or_ln227_reg_305 <= or_ln227_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln226_reg_301_pp0_iter2_reg <= icmp_ln226_reg_301_pp0_iter1_reg;
        or_ln227_reg_305_pp0_iter2_reg <= or_ln227_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_reg_301_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        pack_03_fu_68 <= {{ap_phi_mux_pack1_phi_fu_119_p4[1279:320]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln226_fu_143_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln226_reg_301_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_phi_mux_first_iter_0_phi_fu_108_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_108_p4 = first_iter_0_reg_103;
    end
end

always @ (*) begin
    if (((icmp_ln226_reg_301_pp0_iter2_reg == 1'd0) & (or_ln227_reg_305_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_pack1_phi_fu_119_p4 = zext_ln221_fu_249_p1;
    end else begin
        ap_phi_mux_pack1_phi_fu_119_p4 = ap_phi_reg_pp0_iter3_pack1_reg_116;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 22'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_80;
    end
end

always @ (*) begin
    if (((ap_predicate_op40_read_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        wq_pack_stream_blk_n = wq_pack_stream_empty_n;
    end else begin
        wq_pack_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (ap_predicate_op40_read_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        wq_pack_stream_read = 1'b1;
    end else begin
        wq_pack_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln226_reg_301_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        wq_stream_TDATA_blk_n = wq_stream_TREADY;
    end else begin
        wq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln226_reg_301_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        wq_stream_TVALID = 1'b1;
    end else begin
        wq_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_pp0_stage0_iter3) & ((1'b0 == ap_CS_iter2_fsm_state3) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((icmp_ln226_reg_301_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b1 == ap_CS_iter3_fsm_state4)) | ((1'b0 == ap_block_state4_pp0_stage0_iter3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln226_fu_149_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 22'd1);

assign add_ln227_fu_222_p2 = (indvar_flatten_fu_76 + 6'd1);

assign add_ln230_fu_202_p2 = (i_fu_72 + 3'd1);

assign and_ln226_fu_190_p2 = (xor_ln226_fu_178_p2 & icmp_ln230_fu_184_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op40_read_state3 == 1'b1) & (wq_pack_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln226_reg_301_pp0_iter2_reg == 1'd0) & (wq_stream_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_103 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_131 = (~((1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_pack1_reg_116 = 'bx;

always @ (*) begin
    ap_predicate_op40_read_state3 = ((or_ln227_reg_305 == 1'd1) & (icmp_ln226_reg_301_pp0_iter1_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign i_6_fu_214_p3 = ((or_ln230_fu_208_p2[0:0] == 1'b1) ? 3'd1 : add_ln230_fu_202_p2);

assign icmp_ln226_fu_143_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == cast3) ? 1'b1 : 1'b0);

assign icmp_ln226_reg_301_pp0_iter0_reg = icmp_ln226_reg_301;

assign icmp_ln227_fu_166_p2 = ((indvar_flatten_fu_76 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln230_fu_184_p2 = ((i_fu_72 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln226_fu_172_p2 = (icmp_ln227_fu_166_p2 | ap_phi_mux_first_iter_0_phi_fu_108_p4);

assign or_ln227_fu_196_p2 = (or_ln226_fu_172_p2 | and_ln226_fu_190_p2);

assign or_ln230_fu_208_p2 = (icmp_ln227_fu_166_p2 | and_ln226_fu_190_p2);

assign select_ln227_fu_228_p3 = ((icmp_ln227_fu_166_p2[0:0] == 1'b1) ? 6'd1 : add_ln227_fu_222_p2);

assign wq_stream_TDATA = ap_phi_mux_pack1_phi_fu_119_p4[319:0];

assign xor_ln226_fu_178_p2 = (icmp_ln227_fu_166_p2 ^ 1'd1);

assign zext_ln221_fu_249_p1 = pack_03_fu_68;

endmodule //M_AXI_compose_wq_stage2_Pipeline_VITIS_LOOP_226_1_VITIS_LOOP_227_2_VITIS_LOOP_230_3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_ws_stage1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l_dout,
        l_empty_n,
        l_read,
        l_num_data_valid,
        l_fifo_cap,
        ws_queue_dout,
        ws_queue_empty_n,
        ws_queue_read,
        ws_queue_num_data_valid,
        ws_queue_fifo_cap,
        ws_pack_stream_din,
        ws_pack_stream_full_n,
        ws_pack_stream_write,
        ws_pack_stream_num_data_valid,
        ws_pack_stream_fifo_cap,
        l_c_din,
        l_c_full_n,
        l_c_write,
        l_c_num_data_valid,
        l_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] l_dout;
input   l_empty_n;
output   l_read;
input  [2:0] l_num_data_valid;
input  [2:0] l_fifo_cap;
input  [255:0] ws_queue_dout;
input   ws_queue_empty_n;
output   ws_queue_read;
input  [2:0] ws_queue_num_data_valid;
input  [2:0] ws_queue_fifo_cap;
output  [767:0] ws_pack_stream_din;
input   ws_pack_stream_full_n;
output   ws_pack_stream_write;
input  [2:0] ws_pack_stream_num_data_valid;
input  [2:0] ws_pack_stream_fifo_cap;
output  [31:0] l_c_din;
input   l_c_full_n;
output   l_c_write;
input  [2:0] l_c_num_data_valid;
input  [2:0] l_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg l_read;
reg l_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    l_blk_n;
reg    l_c_blk_n;
reg   [31:0] l_3_reg_92;
reg    ap_block_state1;
wire   [17:0] bound_fu_70_p3;
reg   [17:0] bound_reg_97;
wire    ap_CS_fsm_state2;
wire    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start;
wire    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done;
wire    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_idle;
wire    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_ready;
wire    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_queue_read;
wire   [767:0] grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_pack_stream_din;
wire    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_pack_stream_write;
reg    grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln154_fu_65_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start_reg = 1'b0;
end

M_AXI_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3 grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start),
    .ap_done(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done),
    .ap_idle(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_idle),
    .ap_ready(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_ready),
    .ws_queue_dout(ws_queue_dout),
    .ws_queue_empty_n(ws_queue_empty_n),
    .ws_queue_read(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_queue_read),
    .ws_queue_num_data_valid(3'd0),
    .ws_queue_fifo_cap(3'd0),
    .ws_pack_stream_din(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_pack_stream_din),
    .ws_pack_stream_full_n(ws_pack_stream_full_n),
    .ws_pack_stream_write(grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_pack_stream_write),
    .ws_pack_stream_num_data_valid(3'd0),
    .ws_pack_stream_fifo_cap(3'd0),
    .bound(bound_reg_97)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_ready == 1'b1)) begin
            grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_97[4] <= bound_fu_70_p3[4];
bound_reg_97[11 : 7] <= bound_fu_70_p3[11 : 7];
bound_reg_97[13] <= bound_fu_70_p3[13];
bound_reg_97[15] <= bound_fu_70_p3[15];
bound_reg_97[17] <= bound_fu_70_p3[17];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_3_reg_92 <= l_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_blk_n = l_empty_n;
    end else begin
        l_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c_blk_n = l_c_full_n;
    end else begin
        l_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c_write = 1'b1;
    end else begin
        l_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_read = 1'b1;
    end else begin
        l_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((l_c_full_n == 1'b0) | (l_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bound_fu_70_p3 = ((icmp_ln154_fu_65_p2[0:0] == 1'b1) ? 18'd136688 : 18'd47712);

assign grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start = grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ap_start_reg;

assign icmp_ln154_fu_65_p2 = ((l_3_reg_92 == 32'd24) ? 1'b1 : 1'b0);

assign l_c_din = l_dout;

assign start_out = real_start;

assign ws_pack_stream_din = grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_pack_stream_din;

assign ws_pack_stream_write = grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_pack_stream_write;

assign ws_queue_read = grp_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3_fu_56_ws_queue_read;

always @ (posedge ap_clk) begin
    bound_reg_97[3:0] <= 4'b0000;
    bound_reg_97[6:5] <= 2'b11;
    bound_reg_97[12:12] <= 1'b1;
    bound_reg_97[14:14] <= 1'b0;
    bound_reg_97[16] <= 1'b0;
end

endmodule //M_AXI_compose_ws_stage1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ws_queue_dout,
        ws_queue_empty_n,
        ws_queue_read,
        ws_queue_num_data_valid,
        ws_queue_fifo_cap,
        ws_pack_stream_din,
        ws_pack_stream_full_n,
        ws_pack_stream_write,
        ws_pack_stream_num_data_valid,
        ws_pack_stream_fifo_cap,
        bound
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] ws_queue_dout;
input   ws_queue_empty_n;
output   ws_queue_read;
input  [2:0] ws_queue_num_data_valid;
input  [2:0] ws_queue_fifo_cap;
output  [767:0] ws_pack_stream_din;
input   ws_pack_stream_full_n;
output   ws_pack_stream_write;
input  [2:0] ws_pack_stream_num_data_valid;
input  [2:0] ws_pack_stream_fifo_cap;
input  [17:0] bound;

reg ap_idle;
reg ws_queue_read;
reg ws_pack_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln155_reg_219;
wire   [0:0] icmp_ln155_reg_219_pp0_iter0_reg;
reg   [0:0] icmp_ln159_1_reg_228;
reg    ap_predicate_op36_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln155_fu_113_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ws_pack_stream_blk_n;
reg    ws_queue_blk_n;
wire   [0:0] icmp_ln159_fu_128_p2;
reg   [0:0] icmp_ln159_reg_223;
wire   [0:0] icmp_ln159_1_fu_148_p2;
reg   [767:0] pack_01_fu_60;
wire   [767:0] pack_3_fu_184_p3;
wire    ap_loop_init;
reg   [1:0] i_fu_64;
wire   [1:0] i_4_fu_140_p3;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [18:0] indvar_flatten_fu_68;
wire   [18:0] add_ln155_fu_119_p2;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
wire  signed [18:0] bound_cast_fu_91_p1;
wire   [1:0] add_ln159_fu_134_p2;
wire   [511:0] tmp_fu_167_p4;
wire   [511:0] pack_fu_177_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 pack_01_fu_60 = 768'd0;
//#0 i_fu_64 = 2'd0;
//#0 indvar_flatten_fu_68 = 19'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln155_fu_113_p2 == 1'd0)) begin
            i_fu_64 <= i_4_fu_140_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln155_fu_113_p2 == 1'd0)) begin
            indvar_flatten_fu_68 <= add_ln155_fu_119_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        pack_01_fu_60 <= 768'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln155_reg_219 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        pack_01_fu_60 <= pack_3_fu_184_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln155_reg_219 <= icmp_ln155_fu_113_p2;
        icmp_ln159_1_reg_228 <= icmp_ln159_1_fu_148_p2;
        icmp_ln159_reg_223 <= icmp_ln159_fu_128_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln155_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((ap_predicate_op36_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ws_pack_stream_blk_n = ws_pack_stream_full_n;
    end else begin
        ws_pack_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_predicate_op36_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ws_pack_stream_write = 1'b1;
    end else begin
        ws_pack_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln155_reg_219 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ws_queue_blk_n = ws_queue_empty_n;
    end else begin
        ws_queue_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln155_reg_219 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ws_queue_read = 1'b1;
    end else begin
        ws_queue_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1)) | ((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln155_reg_219_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign add_ln155_fu_119_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign add_ln159_fu_134_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op36_write_state2 == 1'b1) & (ws_pack_stream_full_n == 1'b0)) | ((icmp_ln155_reg_219 == 1'd0) & (ws_queue_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op36_write_state2 = ((icmp_ln159_1_reg_228 == 1'd1) & (icmp_ln155_reg_219 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign bound_cast_fu_91_p1 = $signed(bound);

assign i_4_fu_140_p3 = ((icmp_ln159_fu_128_p2[0:0] == 1'b1) ? 2'd1 : add_ln159_fu_134_p2);

assign icmp_ln155_fu_113_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound_cast_fu_91_p1) ? 1'b1 : 1'b0);

assign icmp_ln155_reg_219_pp0_iter0_reg = icmp_ln155_reg_219;

assign icmp_ln159_1_fu_148_p2 = ((i_4_fu_140_p3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_128_p2 = ((ap_sig_allocacmp_i_load == 2'd3) ? 1'b1 : 1'b0);

assign pack_3_fu_184_p3 = {{ws_queue_dout}, {pack_fu_177_p3}};

assign pack_fu_177_p3 = ((icmp_ln159_reg_223[0:0] == 1'b1) ? 512'd0 : tmp_fu_167_p4);

assign tmp_fu_167_p4 = {{pack_01_fu_60[767:256]}};

assign ws_pack_stream_din = {{ws_queue_dout}, {pack_fu_177_p3}};

endmodule //M_AXI_compose_ws_stage1_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_159_3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_ws_stage2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_dout,
        l_empty_n,
        l_read,
        l_num_data_valid,
        l_fifo_cap,
        ws_pack_stream_dout,
        ws_pack_stream_empty_n,
        ws_pack_stream_read,
        ws_pack_stream_num_data_valid,
        ws_pack_stream_fifo_cap,
        ws1_stream_TDATA,
        ws1_stream_TVALID,
        ws1_stream_TREADY,
        ws2_stream_TDATA,
        ws2_stream_TVALID,
        ws2_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_dout;
input   l_empty_n;
output   l_read;
input  [2:0] l_num_data_valid;
input  [2:0] l_fifo_cap;
input  [767:0] ws_pack_stream_dout;
input   ws_pack_stream_empty_n;
output   ws_pack_stream_read;
input  [2:0] ws_pack_stream_num_data_valid;
input  [2:0] ws_pack_stream_fifo_cap;
output  [23:0] ws1_stream_TDATA;
output   ws1_stream_TVALID;
input   ws1_stream_TREADY;
output  [23:0] ws2_stream_TDATA;
output   ws2_stream_TVALID;
input   ws2_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg l_read;
reg[23:0] ws1_stream_TDATA;
reg[23:0] ws2_stream_TDATA;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    l_blk_n;
reg   [31:0] l_2_reg_88;
reg    ap_block_state1;
wire   [21:0] cast_fu_66_p3;
reg   [21:0] cast_reg_93;
wire    ap_CS_fsm_state2;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_idle;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_ready;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws_pack_stream_read;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TREADY;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TREADY;
wire   [23:0] grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TDATA;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TVALID;
wire   [23:0] grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TDATA;
wire    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TVALID;
reg    grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [23:0] ws1_stream_TDATA_reg;
reg   [23:0] ws2_stream_TDATA_reg;
wire   [0:0] icmp_ln176_fu_61_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start_reg = 1'b0;
end

M_AXI_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3 grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start),
    .ap_done(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done),
    .ap_idle(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_idle),
    .ap_ready(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_ready),
    .ws_pack_stream_dout(ws_pack_stream_dout),
    .ws_pack_stream_empty_n(ws_pack_stream_empty_n),
    .ws_pack_stream_read(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws_pack_stream_read),
    .ws_pack_stream_num_data_valid(3'd0),
    .ws_pack_stream_fifo_cap(3'd0),
    .ws1_stream_TREADY(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TREADY),
    .ws2_stream_TREADY(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TREADY),
    .cast(cast_reg_93),
    .ws1_stream_TDATA(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TDATA),
    .ws1_stream_TVALID(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TVALID),
    .ws2_stream_TDATA(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TDATA),
    .ws2_stream_TVALID(grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TVALID)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start_reg <= 1'b1;
        end else if ((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_ready == 1'b1)) begin
            grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cast_reg_93[10 : 8] <= cast_fu_66_p3[10 : 8];
cast_reg_93[12] <= cast_fu_66_p3[12];
cast_reg_93[17 : 15] <= cast_fu_66_p3[17 : 15];
cast_reg_93[21] <= cast_fu_66_p3[21];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_2_reg_88 <= l_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ws1_stream_TDATA_reg <= grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ws2_stream_TDATA_reg <= grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_blk_n = l_empty_n;
    end else begin
        l_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_read = 1'b1;
    end else begin
        l_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ws1_stream_TDATA = grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TDATA;
    end else begin
        ws1_stream_TDATA = ws1_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ws2_stream_TDATA = grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TDATA;
    end else begin
        ws2_stream_TDATA = ws2_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (l_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign cast_fu_66_p3 = ((icmp_ln176_fu_61_p2[0:0] == 1'b1) ? 22'd2127104 : 22'd254464);

assign grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start = grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ap_start_reg;

assign grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TREADY = (ws1_stream_TREADY & ap_CS_fsm_state4);

assign grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TREADY = (ws2_stream_TREADY & ap_CS_fsm_state4);

assign icmp_ln176_fu_61_p2 = ((l_2_reg_88 == 32'd24) ? 1'b1 : 1'b0);

assign ws1_stream_TVALID = grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws1_stream_TVALID;

assign ws2_stream_TVALID = grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws2_stream_TVALID;

assign ws_pack_stream_read = grp_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_fu_50_ws_pack_stream_read;

always @ (posedge ap_clk) begin
    cast_reg_93[7:0] <= 8'b00000000;
    cast_reg_93[11:11] <= 1'b0;
    cast_reg_93[14:13] <= 2'b11;
    cast_reg_93[20:18] <= 3'b000;
end

endmodule //M_AXI_compose_ws_stage2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ws_pack_stream_dout,
        ws_pack_stream_empty_n,
        ws_pack_stream_read,
        ws_pack_stream_num_data_valid,
        ws_pack_stream_fifo_cap,
        ws1_stream_TREADY,
        ws2_stream_TREADY,
        cast,
        ws1_stream_TDATA,
        ws1_stream_TVALID,
        ws2_stream_TDATA,
        ws2_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [767:0] ws_pack_stream_dout;
input   ws_pack_stream_empty_n;
output   ws_pack_stream_read;
input  [2:0] ws_pack_stream_num_data_valid;
input  [2:0] ws_pack_stream_fifo_cap;
input   ws1_stream_TREADY;
input   ws2_stream_TREADY;
input  [21:0] cast;
output  [23:0] ws1_stream_TDATA;
output   ws1_stream_TVALID;
output  [23:0] ws2_stream_TDATA;
output   ws2_stream_TVALID;

reg ap_idle;
reg ws_pack_stream_read;
reg ws1_stream_TVALID;
reg ws2_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln177_reg_490;
reg   [0:0] icmp_ln177_reg_490_pp0_iter1_reg;
reg   [0:0] or_ln177_reg_494;
wire   [0:0] or_ln177_reg_494_pp0_iter1_reg;
reg    ap_predicate_op34_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln177_fu_202_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ws1_stream_TDATA_blk_n;
reg    ws2_stream_TDATA_blk_n;
reg    ws_pack_stream_blk_n;
reg   [0:0] first_iter_0_reg_166;
wire   [0:0] icmp_ln177_reg_490_pp0_iter0_reg;
wire   [0:0] or_ln177_fu_228_p2;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_171_p4;
wire    ap_loop_init;
reg   [767:0] ap_phi_mux_pack1_phi_fu_182_p4;
wire   [767:0] zext_ln171_fu_256_p1;
wire   [767:0] ap_phi_reg_pp0_iter2_pack1_reg_179;
reg   [719:0] pack_fu_128;
reg   [4:0] i_fu_132;
wire   [4:0] i_3_fu_240_p3;
reg   [21:0] indvar_flatten_fu_136;
wire   [21:0] add_ln177_fu_208_p2;
reg   [21:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln181_fu_222_p2;
wire   [4:0] add_ln181_fu_234_p2;
wire   [2:0] tmp_5_fu_343_p4;
wire   [2:0] tmp_4_fu_333_p4;
wire   [2:0] tmp_3_fu_323_p4;
wire   [2:0] tmp_2_fu_313_p4;
wire   [2:0] tmp_1_fu_303_p4;
wire   [2:0] tmp_9_fu_293_p4;
wire   [2:0] tmp_8_fu_283_p4;
wire   [2:0] trunc_ln186_fu_261_p1;
wire   [2:0] tmp_14_fu_434_p4;
wire   [2:0] tmp_13_fu_424_p4;
wire   [2:0] tmp_12_fu_414_p4;
wire   [2:0] tmp_11_fu_404_p4;
wire   [2:0] tmp_10_fu_394_p4;
wire   [2:0] tmp_7_fu_384_p4;
wire   [2:0] tmp_6_fu_374_p4;
wire   [2:0] tmp_s_fu_265_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_84;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 pack_fu_128 = 720'd0;
//#0 i_fu_132 = 5'd0;
//#0 indvar_flatten_fu_136 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        first_iter_0_reg_166 <= 1'd0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        first_iter_0_reg_166 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_132 <= 5'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln177_reg_490_pp0_iter0_reg == 1'd0))) begin
        i_fu_132 <= i_3_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_84)) begin
        if ((icmp_ln177_fu_202_p2 == 1'd0)) begin
            indvar_flatten_fu_136 <= add_ln177_fu_208_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_136 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln177_reg_490 <= icmp_ln177_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln177_reg_490_pp0_iter1_reg <= icmp_ln177_reg_490;
        or_ln177_reg_494 <= or_ln177_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        pack_fu_128 <= {{ap_phi_mux_pack1_phi_fu_182_p4[767:48]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln177_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_phi_mux_first_iter_0_phi_fu_171_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_171_p4 = first_iter_0_reg_166;
    end
end

always @ (*) begin
    if ((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0)) begin
        if ((or_ln177_reg_494 == 1'd1)) begin
            ap_phi_mux_pack1_phi_fu_182_p4 = ws_pack_stream_dout;
        end else if ((or_ln177_reg_494_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_pack1_phi_fu_182_p4 = zext_ln171_fu_256_p1;
        end else begin
            ap_phi_mux_pack1_phi_fu_182_p4 = ap_phi_reg_pp0_iter2_pack1_reg_179;
        end
    end else begin
        ap_phi_mux_pack1_phi_fu_182_p4 = ap_phi_reg_pp0_iter2_pack1_reg_179;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 22'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_136;
    end
end

always @ (*) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ws1_stream_TDATA_blk_n = ws1_stream_TREADY;
    end else begin
        ws1_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ws1_stream_TVALID = 1'b1;
    end else begin
        ws1_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ws2_stream_TDATA_blk_n = ws2_stream_TREADY;
    end else begin
        ws2_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln177_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ws2_stream_TVALID = 1'b1;
    end else begin
        ws2_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op34_read_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ws_pack_stream_blk_n = ws_pack_stream_empty_n;
    end else begin
        ws_pack_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op34_read_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ws_pack_stream_read = 1'b1;
    end else begin
        ws_pack_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((icmp_ln177_reg_490_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten_load + 22'd1);

assign add_ln181_fu_234_p2 = (i_fu_132 + 5'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ws2_stream_TREADY == 1'b0) & (icmp_ln177_reg_490_pp0_iter1_reg == 1'd0)) | ((ws1_stream_TREADY == 1'b0) & (icmp_ln177_reg_490_pp0_iter1_reg == 1'd0)) | ((ap_predicate_op34_read_state3 == 1'b1) & (ws_pack_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_84 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_pack1_reg_179 = 'bx;

always @ (*) begin
    ap_predicate_op34_read_state3 = ((or_ln177_reg_494 == 1'd1) & (icmp_ln177_reg_490_pp0_iter1_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign i_3_fu_240_p3 = ((icmp_ln181_fu_222_p2[0:0] == 1'b1) ? 5'd1 : add_ln181_fu_234_p2);

assign icmp_ln177_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten_load == cast) ? 1'b1 : 1'b0);

assign icmp_ln177_reg_490_pp0_iter0_reg = icmp_ln177_reg_490;

assign icmp_ln181_fu_222_p2 = ((i_fu_132 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln177_fu_228_p2 = (icmp_ln181_fu_222_p2 | ap_phi_mux_first_iter_0_phi_fu_171_p4);

assign or_ln177_reg_494_pp0_iter1_reg = or_ln177_reg_494;

assign tmp_10_fu_394_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[23:21]}};

assign tmp_11_fu_404_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[29:27]}};

assign tmp_12_fu_414_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[35:33]}};

assign tmp_13_fu_424_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[41:39]}};

assign tmp_14_fu_434_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[47:45]}};

assign tmp_1_fu_303_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[20:18]}};

assign tmp_2_fu_313_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[26:24]}};

assign tmp_3_fu_323_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[32:30]}};

assign tmp_4_fu_333_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[38:36]}};

assign tmp_5_fu_343_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[44:42]}};

assign tmp_6_fu_374_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[11:9]}};

assign tmp_7_fu_384_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[17:15]}};

assign tmp_8_fu_283_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[8:6]}};

assign tmp_9_fu_293_p4 = {{ap_phi_mux_pack1_phi_fu_182_p4[14:12]}};

assign tmp_s_fu_265_p3 = {{ap_phi_mux_pack1_phi_fu_182_p4[5:3]}};

assign trunc_ln186_fu_261_p1 = ap_phi_mux_pack1_phi_fu_182_p4[2:0];

assign ws1_stream_TDATA = {{{{{{{{tmp_5_fu_343_p4}, {tmp_4_fu_333_p4}}, {tmp_3_fu_323_p4}}, {tmp_2_fu_313_p4}}, {tmp_1_fu_303_p4}}, {tmp_9_fu_293_p4}}, {tmp_8_fu_283_p4}}, {trunc_ln186_fu_261_p1}};

assign ws2_stream_TDATA = {{{{{{{{tmp_14_fu_434_p4}, {tmp_13_fu_424_p4}}, {tmp_12_fu_414_p4}}, {tmp_11_fu_404_p4}}, {tmp_10_fu_394_p4}}, {tmp_7_fu_384_p4}}, {tmp_6_fu_374_p4}}, {tmp_s_fu_265_p3}};

assign zext_ln171_fu_256_p1 = pack_fu_128;

endmodule //M_AXI_compose_ws_stage2_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        memory_decoder_y,
        memory_decoder_y_c_din,
        memory_decoder_y_c_full_n,
        memory_decoder_y_c_write,
        memory_decoder_y_c_num_data_valid,
        memory_decoder_y_c_fifo_cap,
        memory_cls_y,
        memory_cls_y_c_din,
        memory_cls_y_c_full_n,
        memory_cls_y_c_write,
        memory_cls_y_c_num_data_valid,
        memory_cls_y_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] memory_decoder_y;
output  [63:0] memory_decoder_y_c_din;
input   memory_decoder_y_c_full_n;
output   memory_decoder_y_c_write;
input  [2:0] memory_decoder_y_c_num_data_valid;
input  [2:0] memory_decoder_y_c_fifo_cap;
input  [63:0] memory_cls_y;
output  [63:0] memory_cls_y_c_din;
input   memory_cls_y_c_full_n;
output   memory_cls_y_c_write;
input  [2:0] memory_cls_y_c_num_data_valid;
input  [2:0] memory_cls_y_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg memory_decoder_y_c_write;
reg memory_cls_y_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    memory_decoder_y_c_blk_n;
reg    memory_cls_y_c_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        memory_cls_y_c_blk_n = memory_cls_y_c_full_n;
    end else begin
        memory_cls_y_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        memory_cls_y_c_write = 1'b1;
    end else begin
        memory_cls_y_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        memory_decoder_y_c_blk_n = memory_decoder_y_c_full_n;
    end else begin
        memory_decoder_y_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        memory_decoder_y_c_write = 1'b1;
    end else begin
        memory_decoder_y_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (memory_cls_y_c_full_n == 1'b0) | (memory_decoder_y_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign memory_cls_y_c_din = memory_cls_y;

assign memory_decoder_y_c_din = memory_decoder_y;

endmodule //M_AXI_entry_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_fifo_w1280_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1280,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_fifo_w1280_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_fifo_w1280_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_fifo_w1280_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 1280,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_fifo_w1_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_fifo_w1_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_fifo_w1_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_fifo_w1_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_fifo_w256_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 256,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_fifo_w256_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_fifo_w256_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_fifo_w256_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 256,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_fifo_w32_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_fifo_w32_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_fifo_w32_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_fifo_w32_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_fifo_w64_d3_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 64,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_fifo_w64_d3_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_fifo_w64_d3_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_fifo_w64_d3_S_ShiftReg
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_fifo_w768_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 768,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_fifo_w768_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_fifo_w768_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_fifo_w768_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 768,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module M_AXI_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not M_AXI module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not M_AXI module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
`default_nettype none


module M_AXI_gmem_m_axi
#(parameter
    CONSERVATIVE            = 0,
    MAX_READ_BURST_LENGTH   = 16,
    MAX_WRITE_BURST_LENGTH  = 16,
    C_M_AXI_ID_WIDTH        = 1,
    C_M_AXI_ADDR_WIDTH      = 32,
    C_M_AXI_DATA_WIDTH      = 32, // power of 2 & range: 2 to 1024
    C_M_AXI_AWUSER_WIDTH    = 1,
    C_M_AXI_ARUSER_WIDTH    = 1,
    C_M_AXI_WUSER_WIDTH     = 1,
    C_M_AXI_RUSER_WIDTH     = 1,
    C_M_AXI_BUSER_WIDTH     = 1,
    C_TARGET_ADDR           = 32'h00000000,
    C_USER_VALUE            = 1'b0,
    C_PROT_VALUE            = 3'b000,
    C_CACHE_VALUE           = 4'b0011,
    NUM_READ_OUTSTANDING    = 16,
    NUM_WRITE_OUTSTANDING   = 16,
    USER_MAXREQS            = 16,
    // channel configuration
    CH0_USER_DW             = 32,
    CH0_USER_AW             = 32,
    CH0_USER_RFIFONUM_WIDTH = 6,
    MAXI_BUFFER_IMPL        = "block"
)(
    // system signal
    input  wire                               ACLK,
    input  wire                               ARESET,
    input  wire                               ACLK_EN,
    // write address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]        AWID,
    output wire [C_M_AXI_ADDR_WIDTH-1:0]      AWADDR,
    output wire [7:0]                         AWLEN,
    output wire [2:0]                         AWSIZE,
    output wire [1:0]                         AWBURST,
    output wire [1:0]                         AWLOCK,
    output wire [3:0]                         AWCACHE,
    output wire [2:0]                         AWPROT,
    output wire [3:0]                         AWQOS,
    output wire [3:0]                         AWREGION,
    output wire [C_M_AXI_AWUSER_WIDTH-1:0]    AWUSER,
    output wire                               AWVALID,
    input  wire                               AWREADY,
    // write data channel
    output wire [C_M_AXI_ID_WIDTH-1:0]        WID,
    output wire [C_M_AXI_DATA_WIDTH-1:0]      WDATA,
    output wire [C_M_AXI_DATA_WIDTH/8-1:0]    WSTRB,
    output wire                               WLAST,
    output wire [C_M_AXI_WUSER_WIDTH-1:0]     WUSER,
    output wire                               WVALID,
    input  wire                               WREADY,
    // write response channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]        BID,
    input  wire [1:0]                         BRESP,
    input  wire [C_M_AXI_BUSER_WIDTH-1:0]     BUSER,
    input  wire                               BVALID,
    output wire                               BREADY,
    // read address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]        ARID,
    output wire [C_M_AXI_ADDR_WIDTH-1:0]      ARADDR,
    output wire [7:0]                         ARLEN,
    output wire [2:0]                         ARSIZE,
    output wire [1:0]                         ARBURST,
    output wire [1:0]                         ARLOCK,
    output wire [3:0]                         ARCACHE,
    output wire [2:0]                         ARPROT,
    output wire [3:0]                         ARQOS,
    output wire [3:0]                         ARREGION,
    output wire [C_M_AXI_ARUSER_WIDTH-1:0]    ARUSER,
    output wire                               ARVALID,
    input  wire                               ARREADY,
    // read data channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]        RID,
    input  wire [C_M_AXI_DATA_WIDTH-1:0]      RDATA,
    input  wire [1:0]                         RRESP,
    input  wire                               RLAST,
    input  wire [C_M_AXI_RUSER_WIDTH-1:0]     RUSER,
    input  wire                               RVALID,
    output wire                               RREADY,
    // internal channel 0 READ-WRITE 
    input  wire [CH0_USER_AW-1:0]             I_CH0_AWADDR,
    input  wire [31:0]                        I_CH0_AWLEN,
    input  wire                               I_CH0_AWVALID,
    output wire                               I_CH0_AWREADY,
    input  wire [CH0_USER_DW-1:0]             I_CH0_WDATA,
    input  wire [CH0_USER_DW/8-1:0]           I_CH0_WSTRB,
    input  wire                               I_CH0_WVALID,
    output wire                               I_CH0_WREADY,
    output wire                               I_CH0_BVALID,
    input  wire                               I_CH0_BREADY,
    input  wire [CH0_USER_AW-1:0]             I_CH0_ARADDR,
    input  wire [31:0]                        I_CH0_ARLEN,
    input  wire                               I_CH0_ARVALID,
    output wire                               I_CH0_ARREADY,
    output wire [CH0_USER_DW-1:0]             I_CH0_RDATA,
    output wire                               I_CH0_RVALID,
    input  wire                               I_CH0_RREADY,
    output wire [CH0_USER_RFIFONUM_WIDTH-1:0] I_CH0_RFIFONUM
    );
//------------------------Local signal-------------------
    // AW/W/B channel signals 
    wire [C_M_AXI_ADDR_WIDTH-1:0]   AWADDR_Dummy;
    wire [31:0]                     AWLEN_Dummy;
    wire                            AWVALID_Dummy;
    wire                            AWREADY_Dummy;
    wire [C_M_AXI_DATA_WIDTH-1:0]   WDATA_Dummy;
    wire [C_M_AXI_DATA_WIDTH/8-1:0] WSTRB_Dummy;
    wire                            WVALID_Dummy;
    wire                            WREADY_Dummy;
    wire                            BVALID_Dummy;
    wire                            BREADY_Dummy;
    // AR/R channel signals 
    wire [C_M_AXI_ADDR_WIDTH-1:0]   ARADDR_Dummy;
    wire [31:0]                     ARLEN_Dummy;
    wire                            ARVALID_Dummy;
    wire                            ARREADY_Dummy;
    wire [C_M_AXI_DATA_WIDTH-1:0]   RDATA_Dummy;
    wire [1:0]                      RLAST_Dummy;
    wire                            RVALID_Dummy;
    wire                            RREADY_Dummy;
    wire                            RBURST_READY_Dummy;
    // flush logic 

    // AXI Ports Initialization 
    // Kernel Ports Initialization 
    // flush logic 
//------------------------Instantiation------------------
    // ================== STORE UNITS ================== 
    // store_unit for channel 0
    M_AXI_gmem_m_axi_store #(
        .C_TARGET_ADDR           ( C_TARGET_ADDR ),
        .NUM_WRITE_OUTSTANDING   ( NUM_WRITE_OUTSTANDING ),
        .MAX_WRITE_BURST_LENGTH  ( MAX_WRITE_BURST_LENGTH ),
        .BUS_ADDR_WIDTH          ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH          ( C_M_AXI_DATA_WIDTH ),
        .USER_DW                 ( CH0_USER_DW ),
        .USER_AW                 ( CH0_USER_AW ),
        .USER_MAXREQS            ( USER_MAXREQS ),
        .BUFFER_IMPL             ( MAXI_BUFFER_IMPL )
    ) store_unit_0 (
        .ACLK                    ( ACLK ),
        .ARESET                  ( ARESET ),
        .ACLK_EN                 ( ACLK_EN ),
        .out_AXI_AWADDR          ( AWADDR_Dummy ),
        .out_AXI_AWLEN           ( AWLEN_Dummy ),
        .out_AXI_AWVALID         ( AWVALID_Dummy ),
        .in_AXI_AWREADY          ( AWREADY_Dummy ),
        .out_AXI_WDATA           ( WDATA_Dummy ),
        .out_AXI_WSTRB           ( WSTRB_Dummy ),
        .out_AXI_WVALID          ( WVALID_Dummy ),
        .in_AXI_WREADY           ( WREADY_Dummy ),
        .in_AXI_BVALID           ( BVALID_Dummy ),
        .out_AXI_BREADY          ( BREADY_Dummy ),
        .in_HLS_AWADDR           ( I_CH0_AWADDR ),
        .in_HLS_AWLEN            ( I_CH0_AWLEN ),
        .in_HLS_AWVALID          ( I_CH0_AWVALID ),
        .out_HLS_AWREADY         ( I_CH0_AWREADY ),
        .in_HLS_WDATA            ( I_CH0_WDATA ),
        .in_HLS_WSTRB            ( I_CH0_WSTRB ),
        .in_HLS_WVALID           ( I_CH0_WVALID ),
        .out_HLS_WREADY          ( I_CH0_WREADY ),
        .out_HLS_BVALID          ( I_CH0_BVALID ),
        .in_HLS_BREADY           ( I_CH0_BREADY )
    );

    // ================== LOAD UNITS ================== 
    // load_unit for channel 0
    M_AXI_gmem_m_axi_load #(
        .C_TARGET_ADDR           ( C_TARGET_ADDR ),
        .NUM_READ_OUTSTANDING    ( NUM_READ_OUTSTANDING ),
        .MAX_READ_BURST_LENGTH   ( MAX_READ_BURST_LENGTH ),
        .BUS_ADDR_WIDTH          ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH          ( C_M_AXI_DATA_WIDTH ),
        .USER_DW                 ( CH0_USER_DW ),
        .USER_AW                 ( CH0_USER_AW ),
        .USER_MAXREQS            ( USER_MAXREQS ),
        .USER_RFIFONUM_WIDTH     ( CH0_USER_RFIFONUM_WIDTH ),
        .BUFFER_IMPL             ( MAXI_BUFFER_IMPL )
    ) load_unit_0 (
        .ACLK                    ( ACLK ),
        .ARESET                  ( ARESET ),
        .ACLK_EN                 ( ACLK_EN ),
        .out_AXI_ARADDR          ( ARADDR_Dummy ),
        .out_AXI_ARLEN           ( ARLEN_Dummy ),
        .out_AXI_ARVALID         ( ARVALID_Dummy ),
        .in_AXI_ARREADY          ( ARREADY_Dummy ),
        .in_AXI_RDATA            ( RDATA_Dummy ),
        .in_AXI_RLAST            ( RLAST_Dummy ),
        .in_AXI_RVALID           ( RVALID_Dummy ),
        .out_AXI_RREADY          ( RREADY_Dummy ),
        .out_AXI_RBURST_READY    ( RBURST_READY_Dummy),
        .in_HLS_ARADDR           ( I_CH0_ARADDR ),
        .in_HLS_ARLEN            ( I_CH0_ARLEN ),
        .in_HLS_ARVALID          ( I_CH0_ARVALID ),
        .out_HLS_ARREADY         ( I_CH0_ARREADY ),
        .out_HLS_RDATA           ( I_CH0_RDATA ),
        .out_HLS_RVALID          ( I_CH0_RVALID ),
        .in_HLS_RREADY           ( I_CH0_RREADY ),
        .out_HLS_RFIFONUM        ( I_CH0_RFIFONUM )
    );

    // ================== AXI BUS READ/WRITE ================== 
    // M_AXI_gmem_m_axi_write
    M_AXI_gmem_m_axi_write #(
        .CONSERVATIVE            ( CONSERVATIVE),
        .C_M_AXI_ID_WIDTH        ( C_M_AXI_ID_WIDTH ),
        .C_M_AXI_AWUSER_WIDTH    ( C_M_AXI_AWUSER_WIDTH ),
        .C_M_AXI_WUSER_WIDTH     ( C_M_AXI_WUSER_WIDTH ),
        .C_M_AXI_BUSER_WIDTH     ( C_M_AXI_BUSER_WIDTH ),
        .C_USER_VALUE            ( C_USER_VALUE ),
        .C_PROT_VALUE            ( C_PROT_VALUE ),
        .C_CACHE_VALUE           ( C_CACHE_VALUE ),
        .BUS_ADDR_WIDTH          ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH          ( C_M_AXI_DATA_WIDTH ),
        .MAX_WRITE_BURST_LENGTH  ( MAX_WRITE_BURST_LENGTH ),
        .NUM_WRITE_OUTSTANDING   ( NUM_WRITE_OUTSTANDING )
    ) bus_write (
        .ACLK                    ( ACLK ),
        .ARESET                  ( ARESET ),
        .ACLK_EN                 ( ACLK_EN ),
        .out_BUS_AWID            ( AWID ),
        .out_BUS_AWSIZE          ( AWSIZE ),
        .out_BUS_AWBURST         ( AWBURST ),
        .out_BUS_AWLOCK          ( AWLOCK ),
        .out_BUS_AWCACHE         ( AWCACHE ),
        .out_BUS_AWPROT          ( AWPROT ),
        .out_BUS_AWQOS           ( AWQOS ),
        .out_BUS_AWREGION        ( AWREGION ),
        .out_BUS_AWUSER          ( AWUSER ),
        .out_BUS_AWADDR          ( AWADDR ),
        .out_BUS_AWLEN           ( AWLEN ),
        .out_BUS_AWVALID         ( AWVALID ),
        .in_BUS_AWREADY          ( AWREADY ),
        .out_BUS_WID             ( WID),
        .out_BUS_WUSER           ( WUSER),
        .out_BUS_WDATA           ( WDATA ),
        .out_BUS_WSTRB           ( WSTRB ),
        .out_BUS_WLAST           ( WLAST ),
        .out_BUS_WVALID          ( WVALID ),
        .in_BUS_WREADY           ( WREADY ),
        .in_BUS_BID              ( BID ),
        .in_BUS_BRESP            ( BRESP ),
        .in_BUS_BUSER            ( BUSER ),
        .in_BUS_BVALID           ( BVALID ),
        .out_BUS_BREADY          ( BREADY ),
        .in_HLS_AWVALID          ( AWVALID_Dummy ),
        .out_HLS_AWREADY         ( AWREADY_Dummy ),
        .in_HLS_AWADDR           ( AWADDR_Dummy ),
        .in_HLS_AWLEN            ( AWLEN_Dummy ),
        .in_HLS_WVALID           ( WVALID_Dummy ),
        .out_HLS_WREADY          ( WREADY_Dummy ),
        .in_HLS_WSTRB            ( WSTRB_Dummy ),
        .in_HLS_WDATA            ( WDATA_Dummy ),
        .out_HLS_BVALID          ( BVALID_Dummy ),
        .in_HLS_BREADY           ( BREADY_Dummy )
    );
    // M_AXI_gmem_m_axi_read
    M_AXI_gmem_m_axi_read #(
        .C_M_AXI_ID_WIDTH         ( C_M_AXI_ID_WIDTH ),
        .C_M_AXI_ARUSER_WIDTH     ( C_M_AXI_ARUSER_WIDTH ),
        .C_M_AXI_RUSER_WIDTH      ( C_M_AXI_RUSER_WIDTH ),
        .C_USER_VALUE             ( C_USER_VALUE ),
        .C_PROT_VALUE             ( C_PROT_VALUE ),
        .C_CACHE_VALUE            ( C_CACHE_VALUE ),
        .BUS_ADDR_WIDTH           ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH           ( C_M_AXI_DATA_WIDTH ),
        .MAX_READ_BURST_LENGTH    ( MAX_READ_BURST_LENGTH ),
        .NUM_READ_OUTSTANDING     ( NUM_READ_OUTSTANDING )
    ) bus_read (
        .ACLK                     ( ACLK ),
        .ARESET                   ( ARESET ),
        .ACLK_EN                  ( ACLK_EN ),
        .out_BUS_ARID             ( ARID ),
        .out_BUS_ARADDR           ( ARADDR ),
        .out_BUS_ARLEN            ( ARLEN ),
        .out_BUS_ARSIZE           ( ARSIZE ),
        .out_BUS_ARBURST          ( ARBURST ),
        .out_BUS_ARLOCK           ( ARLOCK ),
        .out_BUS_ARCACHE          ( ARCACHE ),
        .out_BUS_ARPROT           ( ARPROT ),
        .out_BUS_ARQOS            ( ARQOS ),
        .out_BUS_ARREGION         ( ARREGION ),
        .out_BUS_ARUSER           ( ARUSER ),
        .out_BUS_ARVALID          ( ARVALID ),
        .in_BUS_ARREADY           ( ARREADY ),
        .in_BUS_RID               ( RID ),
        .in_BUS_RDATA             ( RDATA ),
        .in_BUS_RRESP             ( RRESP ),
        .in_BUS_RLAST             ( RLAST ),
        .in_BUS_RUSER             ( RUSER ),
        .in_BUS_RVALID            ( RVALID ),
        .out_BUS_RREADY           ( RREADY ),
        .in_HLS_ARVALID           ( ARVALID_Dummy ),
        .out_HLS_ARREADY          ( ARREADY_Dummy ),
        .in_HLS_ARADDR            ( ARADDR_Dummy ),
        .in_HLS_ARLEN             ( ARLEN_Dummy ),
        .out_HLS_RVALID           ( RVALID_Dummy ),
        .in_HLS_RREADY            ( RREADY_Dummy ),
        .in_HLS_RBUST_READY       ( RBURST_READY_Dummy),
        .out_HLS_RDATA            ( RDATA_Dummy ),
        .out_HLS_RLAST            ( RLAST_Dummy )
    );

    

endmodule
`default_nettype wire
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns/1ps

module M_AXI_gmem_m_axi_load
#(parameter
    C_TARGET_ADDR                         = 32'h00000000,
    NUM_READ_OUTSTANDING                  = 2,
    MAX_READ_BURST_LENGTH                 = 16,
    BUS_ADDR_WIDTH                        = 32,
    BUS_DATA_WIDTH                        = 32,
    USER_DW                               = 16,
    USER_AW                               = 32,
    USER_MAXREQS                          = 16,
    USER_RFIFONUM_WIDTH                   = 6,
    BUFFER_IMPL                           = "auto"
)(
    // system signal
    input  wire                           ACLK,
    input  wire                           ARESET,
    input  wire                           ACLK_EN,

    // read address channel
    output wire [BUS_ADDR_WIDTH-1:0]      out_AXI_ARADDR,
    output wire [31:0]                    out_AXI_ARLEN,
    output wire                           out_AXI_ARVALID,
    input  wire                           in_AXI_ARREADY,
    // read data channel
    input  wire [BUS_DATA_WIDTH-1:0]      in_AXI_RDATA,
    input  wire [1:0]                     in_AXI_RLAST,
    input  wire                           in_AXI_RVALID,
    output wire                           out_AXI_RREADY,
    output wire                           out_AXI_RBURST_READY,

    // internal bus ports
    // read address
    input  wire [USER_AW-1:0]             in_HLS_ARADDR,
    input  wire [31:0]                    in_HLS_ARLEN,
    input  wire                           in_HLS_ARVALID,
    output wire                           out_HLS_ARREADY,
    // read data
    output wire [USER_DW-1:0]             out_HLS_RDATA,
    output wire                           out_HLS_RVALID,
    input  wire                           in_HLS_RREADY,
    output wire [USER_RFIFONUM_WIDTH-1:0] out_HLS_RFIFONUM
);

//------------------------Parameter----------------------
    localparam
        USER_DATA_WIDTH = calc_data_width(USER_DW),
        USER_DATA_BYTES = USER_DATA_WIDTH / 8,
        USER_ADDR_ALIGN = log2(USER_DATA_BYTES),
        BUS_ADDR_ALIGN  = log2(BUS_DATA_WIDTH/8),
        // rdata buffer size 
        RBUFF_DEPTH     = NUM_READ_OUTSTANDING * MAX_READ_BURST_LENGTH,
        TARGET_ADDR     = C_TARGET_ADDR & (32'hffffffff << USER_ADDR_ALIGN);

//------------------------Task and function--------------
    function integer calc_data_width;
        input integer x;
        integer y;
    begin
        y = 8;
        while (y < x) y = y * 2;
        calc_data_width = y;
    end
    endfunction

    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------

    wire                           next_rreq;
    wire                           ready_for_rreq;
    wire                           rreq_ready;

    wire [USER_AW-1 : 0]           rreq_addr;
    wire [31:0]                    rreq_len;
    wire                           rreq_valid;

    wire                           valid_length;

    reg  [BUS_ADDR_WIDTH-1 : 0]    tmp_addr;
    reg  [31:0]                    tmp_len;
    reg                            tmp_valid;

    wire                           burst_ready;
    wire                           beat_valid;
    wire                           next_beat;
    wire                           last_beat;
    wire [BUS_DATA_WIDTH-1 : 0]    beat_data;
    wire [log2(RBUFF_DEPTH) : 0]   beat_nvalid;

    reg                            ready_for_outstanding;
    
    // regslice io ?  no 
    
    // enable regslice on R channel  no 

//------------------------Instantiation------------------

    

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH        (USER_AW + 32),
        .ADDR_WIDTH        (log2(USER_MAXREQS)),
        .DEPTH             (USER_MAXREQS)
    ) fifo_rreq (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (out_HLS_ARREADY),
        .if_write          (in_HLS_ARVALID),
        .if_din            ({in_HLS_ARLEN, in_HLS_ARADDR}),
        .if_empty_n        (rreq_valid),
        .if_read           (next_rreq),
        .if_dout           ({rreq_len, rreq_addr}),
        .if_num_data_valid ());

    // ===================================================================
    // start of ARADDR PREPROCESSOR
    
    assign next_rreq       = rreq_valid && ready_for_rreq;
    assign ready_for_rreq  = ~tmp_valid || (in_AXI_ARREADY && rreq_ready);
    assign valid_length    = (rreq_len != 32'b0) && !rreq_len[31];

    assign out_AXI_ARLEN   = tmp_len;   // Byte length
    assign out_AXI_ARADDR  = tmp_addr;  // Byte address
    assign out_AXI_ARVALID = tmp_valid && rreq_ready;

    always @(posedge ACLK)
    begin
        if (ARESET) begin
            tmp_len  <= 0;
            tmp_addr <= 0;
        end
        else if (ACLK_EN) begin
            if(next_rreq) begin
                tmp_len  <= (rreq_len << USER_ADDR_ALIGN) - 1;            // byte length
                tmp_addr <= TARGET_ADDR + (rreq_addr << USER_ADDR_ALIGN); // byte address
            end
        end
    end
 
    always @(posedge ACLK) 
    begin
        if (ARESET)
            tmp_valid <= 1'b0;
        else if (ACLK_EN) begin
            if (next_rreq && valid_length)
                tmp_valid <= 1'b1;
            else if (in_AXI_ARREADY && rreq_ready)
                tmp_valid <= 1'b0;
        end
    end

    // end of ARADDR PREPROCESSOR
    // ===================================================================

    

    
    M_AXI_gmem_m_axi_fifo #(
        .MEM_STYLE         (BUFFER_IMPL),
        .DATA_WIDTH        (BUS_DATA_WIDTH + 2),
        .ADDR_WIDTH        (log2(RBUFF_DEPTH)),
        .DEPTH             (RBUFF_DEPTH)
    ) buff_rdata (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (out_AXI_RREADY),
        .if_write          (in_AXI_RVALID),
        .if_din            ({in_AXI_RLAST, in_AXI_RDATA}),
        .if_empty_n        (beat_valid),
        .if_read           (next_beat),
        .if_dout           ({burst_ready, last_beat, beat_data}),
        .if_num_data_valid (beat_nvalid));

    assign out_AXI_RBURST_READY = ready_for_outstanding;

    always @(posedge ACLK) 
    begin
        if (ARESET)
            ready_for_outstanding <= 1'b0;
        else if (ACLK_EN) begin
            if (next_beat && beat_valid)
                ready_for_outstanding <= burst_ready;
            else
                ready_for_outstanding <= 1'b0;
        end
    end
    // ===================================================================
    // start of RDATA PREPROCESSOR
    generate
    if (USER_DATA_WIDTH == BUS_DATA_WIDTH) begin : bus_equal_gen

        assign rreq_ready       = 1'b1; 
        // regslice io ?  no
        assign next_beat        = in_HLS_RREADY;
        assign out_HLS_RDATA    = beat_data[USER_DW-1 : 0];
        assign out_HLS_RVALID   = beat_valid;
        assign out_HLS_RFIFONUM = beat_nvalid; // 

    end
    else if (USER_DATA_WIDTH < BUS_DATA_WIDTH) begin : bus_wide_gen
        localparam
            TOTAL_SPLIT  = BUS_DATA_WIDTH / USER_DATA_WIDTH,
            SPLIT_ALIGN  = log2(TOTAL_SPLIT);

        wire [USER_AW - 1:0]        tmp_addr_end;

        wire                        offset_full_n;
        wire                        offset_write;
        wire [SPLIT_ALIGN-1 : 0]    start_offset;
        wire [SPLIT_ALIGN-1 : 0]    end_offset;

        wire                        offset_valid;
        wire                        next_offset;
        wire [SPLIT_ALIGN-1 : 0]    head_offset;
        wire [SPLIT_ALIGN-1 : 0]    tail_offset;

        reg                         first_beat;

        wire                        first_data;
        wire                        last_data;
        wire                        ready_for_data;
    
        wire [BUS_DATA_WIDTH-1:0]   tmp_rdata;
        wire                        tmp_rlast;
        wire                        tmp_rvalid;

        reg  [BUS_DATA_WIDTH-1 : 0] data_buf;
        reg                         data_valid;

        reg  [USER_RFIFONUM_WIDTH-1:0] rdata_nvalid; 
        reg  [SPLIT_ALIGN : 0]      data_nvalid;
        wire [SPLIT_ALIGN : 0]      split_nvalid;
        
        wire [SPLIT_ALIGN-1 : 0]    split_cnt_end;
        wire [SPLIT_ALIGN-1 : 0]    split_cnt;
        reg  [SPLIT_ALIGN-1 : 0]    split_cnt_buf;

        wire                        first_split;
        wire                        next_split;
        wire                        last_split;
        wire                        ready_for_split;

        // Recording the offset of start & end address to extract the expect data from beats when USER_DW < BUS_DW.
        M_AXI_gmem_m_axi_fifo #(
            .DATA_WIDTH         (2*SPLIT_ALIGN),
            .ADDR_WIDTH         (log2(NUM_READ_OUTSTANDING)),
            .DEPTH              (NUM_READ_OUTSTANDING)
        ) rreq_offset (
            .clk                (ACLK),
            .reset              (ARESET),
            .clk_en             (ACLK_EN),
            .if_full_n          (offset_full_n),
            .if_write           (offset_write),
            .if_din             ({start_offset, end_offset}),
            .if_empty_n         (offset_valid),
            .if_read            (next_offset),
            .if_dout            ({head_offset, tail_offset}),
            .if_num_data_valid  ());

        M_AXI_gmem_m_axi_reg_slice #(
            .DATA_WIDTH         (BUS_DATA_WIDTH + 1)
        ) rs_tmp_rdata (
            .clk               (ACLK),
            .reset             (ARESET),
            .s_data            ({last_beat, beat_data}),
            .s_valid           (beat_valid),
            .s_ready           (next_beat),
            .m_data            ({tmp_rlast, tmp_rdata}),
            .m_valid           (tmp_rvalid),
            .m_ready           (last_split));

        assign rreq_ready       = offset_full_n | ~offset_write;
        assign tmp_addr_end     = tmp_addr + tmp_len;

        assign start_offset     = tmp_addr[BUS_ADDR_ALIGN - 1 : 0] >> USER_ADDR_ALIGN;
        assign end_offset       = tmp_addr_end[BUS_ADDR_ALIGN - 1 : 0] >> USER_ADDR_ALIGN;
        assign offset_write     = tmp_valid & in_AXI_ARREADY;

        assign next_offset      = (tmp_rlast & tmp_rvalid) & last_split;

        // regslice io ?  no
        assign out_HLS_RDATA    = data_buf[USER_DW-1 : 0];
        assign out_HLS_RVALID   = data_valid;
        assign out_HLS_RFIFONUM = rdata_nvalid + data_nvalid;
        assign ready_for_data   = ~data_valid | in_HLS_RREADY; // 

        assign first_data       = first_beat && ready_for_split;
        assign last_data        = tmp_rlast && ready_for_split;

        assign ready_for_split  = tmp_rvalid && offset_valid;
        assign next_split       = ready_for_split && ready_for_data;
        assign first_split      = (split_cnt_buf == 0) && next_split;
        assign last_split       = (split_cnt == split_cnt_end) && next_split;

        assign split_cnt        = (first_data && (split_cnt_buf == 0)) ? head_offset : split_cnt_buf;
        assign split_cnt_end    = (~last_data) ? (TOTAL_SPLIT - 1) : tail_offset;

        assign split_nvalid     = (first_data && last_data)  ? tail_offset - head_offset + 1 :
                                   first_data                ? TOTAL_SPLIT - head_offset     :
                                   last_data                 ? tail_offset + 1               :
                                   TOTAL_SPLIT;
        always @(posedge ACLK)
        begin
            if (ARESET)
                split_cnt_buf <= 0;
            else if (ACLK_EN) begin 
                if (last_split)
                    split_cnt_buf <= 0;
                else if (next_split)
                    split_cnt_buf <= split_cnt + 1;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                first_beat <= 1'b1;
            else if (ACLK_EN) begin
                if (next_offset)
                    first_beat <= 1'b1;
                else if (first_beat && last_split)
                    first_beat <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ACLK_EN) begin
                if (first_split & first_data)
                    data_buf <= tmp_rdata >> (head_offset * USER_DATA_WIDTH);
                else if (first_split)
                    data_buf <= tmp_rdata;
                else if (next_split)
                    data_buf <= data_buf >> USER_DATA_WIDTH;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (first_split)
                    data_valid <= 1'b1;
                else if (~ready_for_split && ready_for_data)
                    data_valid <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_nvalid <= 0;
            else if (ACLK_EN) begin
                if (first_split)
                    data_nvalid <= split_nvalid;
                else if (next_split)
                    data_nvalid <= data_nvalid - 1;
                else if (~ready_for_split && ready_for_data)
                    data_nvalid <= 0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                rdata_nvalid <= 0;
            else if (ACLK_EN) begin
                if (~tmp_rvalid)
                    rdata_nvalid <= 0;
                else if (~next_beat)
                    rdata_nvalid <= ((beat_nvalid + 1) << SPLIT_ALIGN);
                else
                    rdata_nvalid <= (beat_nvalid << SPLIT_ALIGN);
            end
        end
        
    end
    else begin : bus_narrow_gen
        localparam
            TOTAL_PADS      = USER_DATA_WIDTH / BUS_DATA_WIDTH,
            PAD_ALIGN       = log2(TOTAL_PADS);

        reg [USER_DATA_WIDTH-1 : 0] data_buf;
        reg                         data_valid;
        reg [PAD_ALIGN:0]           data_nvalid;
        wire                        ready_for_data;
        wire [USER_RFIFONUM_WIDTH-1 : 0] rdata_num_vld;

        wire [TOTAL_PADS - 1:0]     pad_oh;
        reg  [TOTAL_PADS - 1:0]     pad_oh_reg;

        reg                         first_pad;
        wire                        last_pad;
        wire                        next_pad;

        assign rreq_ready       = 1'b1; 
        assign next_beat        = next_pad;
        assign rdata_num_vld    = beat_nvalid[log2(RBUFF_DEPTH) : PAD_ALIGN] + (beat_nvalid[PAD_ALIGN-1:0] + data_nvalid) >> PAD_ALIGN;
        
        // regslice io ?  no
        assign out_HLS_RDATA    = data_buf[USER_DW-1 : 0];
        assign out_HLS_RVALID   = data_valid;
        assign out_HLS_RFIFONUM = rdata_num_vld;
        assign ready_for_data   = ~data_valid | in_HLS_RREADY;// 

        assign next_pad         = beat_valid && ready_for_data;
        assign last_pad         = pad_oh[TOTAL_PADS - 1];

        always @(posedge ACLK)
        begin
            if (ARESET)
                first_pad <= 1'b1;
            else if (ACLK_EN) begin
                if (next_pad && ~last_pad)
                    first_pad <= 1'b0;
                else if (next_pad && last_pad)
                    first_pad <= 1'b1;
            end
        end

        assign pad_oh = (~beat_valid) ?  0 :
                        (first_pad)   ?  1 :
                        pad_oh_reg;
 
        always @(posedge ACLK)
        begin
            if (ARESET)
                pad_oh_reg <= 0;
            else if (ACLK_EN) begin
                if (next_pad)
                    pad_oh_reg <= {pad_oh[TOTAL_PADS - 2:0], 1'b0};
            end
        end

        genvar  i;
        for (i = 0; i < TOTAL_PADS; i = i + 1) begin : data_gen
            always @(posedge ACLK)
            begin
                if (ACLK_EN) begin
                    if (pad_oh[i] == 1'b1 && ready_for_data)
                        data_buf[i*BUS_DATA_WIDTH +: BUS_DATA_WIDTH] <= beat_data;
                end
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (next_pad && last_pad)
                    data_valid <= 1'b1;
                else if (ready_for_data)
                    data_valid <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_nvalid <= 0;
            else if (ACLK_EN) begin
                if (first_pad)
                    data_nvalid <= 1;
                else if (next_pad)
                    data_nvalid <= data_nvalid + 1;
            end
        end

    end
    endgenerate
    // end of RDATA PREPROCESSOR
    // ===================================================================

endmodule


module M_AXI_gmem_m_axi_store
#(parameter
    C_TARGET_ADDR           = 32'h00000000,
    NUM_WRITE_OUTSTANDING   = 2,
    MAX_WRITE_BURST_LENGTH  = 16,
    BUS_ADDR_WIDTH          = 32,
    BUS_DATA_WIDTH          = 32,
    USER_DW                 = 16,
    USER_AW                 = 32,
    USER_MAXREQS            = 16,
    BUFFER_IMPL             = "auto"
)(
    // system signal
    input  wire                        ACLK,
    input  wire                        ARESET,
    input  wire                        ACLK_EN,
    // write address channel
    output wire [BUS_ADDR_WIDTH-1:0]   out_AXI_AWADDR,
    output wire [31:0]                 out_AXI_AWLEN,
    output wire                        out_AXI_AWVALID,
    input  wire                        in_AXI_AWREADY,
    // write data channel
    output wire [BUS_DATA_WIDTH-1:0]   out_AXI_WDATA,
    output wire [BUS_DATA_WIDTH/8-1:0] out_AXI_WSTRB,
    output wire                        out_AXI_WVALID,
    input  wire                        in_AXI_WREADY,
    // write response channel
    input  wire                        in_AXI_BVALID,
    output wire                        out_AXI_BREADY,

    // internal bus ports
    // write address
    input  wire [USER_AW-1:0]          in_HLS_AWADDR,
    input  wire [31:0]                 in_HLS_AWLEN,
    input  wire                        in_HLS_AWVALID,
    output wire                        out_HLS_AWREADY,
    // write data
    input  wire [USER_DW-1:0]          in_HLS_WDATA,
    input  wire [USER_DW/8-1:0]        in_HLS_WSTRB,
    input  wire                        in_HLS_WVALID,
    output wire                        out_HLS_WREADY,
    // write response
    output wire                        out_HLS_BVALID,
    input  wire                        in_HLS_BREADY
);

//------------------------Parameter----------------------
    localparam
        USER_DATA_WIDTH = calc_data_width(USER_DW),
        USER_DATA_BYTES = USER_DATA_WIDTH / 8,
        USER_ADDR_ALIGN = log2(USER_DATA_BYTES),
        BUS_DATA_BYTES  = BUS_DATA_WIDTH / 8,
        BUS_ADDR_ALIGN  = log2(BUS_DATA_BYTES),
        // wdata buffer size 
        WBUFF_DEPTH     = max(MAX_WRITE_BURST_LENGTH * BUS_DATA_WIDTH / USER_DATA_WIDTH, 1), 
        TARGET_ADDR     = C_TARGET_ADDR & (32'hffffffff << USER_ADDR_ALIGN); 

//------------------------Task and function--------------

    function integer max;
        input integer x;
        input integer y;
    begin
        max = (x > y) ? x : y;
    end
    endfunction

    function integer calc_data_width;
        input integer x;
        integer y;
    begin
        y = 8;
        while (y < x) y = y * 2;
        calc_data_width = y;
    end
    endfunction

    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------

    wire                                next_wreq;
    wire                                ready_for_wreq;
    wire                                wreq_ready;

    wire [USER_AW-1 : 0]                wreq_addr;
    wire [31:0]                         wreq_len;
    wire                                wreq_valid;

    wire                                valid_length;

    reg  [USER_AW-1 : 0]                tmp_addr;
    reg  [31:0]                         tmp_len;
    reg                                 tmp_valid;

    wire                                next_wdata;
    wire                                wdata_valid;
    wire [USER_DW-1 : 0]                tmp_wdata;
    wire [USER_DW/8-1 : 0]              tmp_wstrb;

    wire                                wrsp_ready;
    wire                                wrsp_valid;
    wire                                wrsp_read;
    wire                                wrsp_type;

    wire                                ursp_ready;
    wire                                ursp_write;

    // regslice io ?  no 

//------------------------Instantiation------------------
    

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH     (USER_AW + 32),
        .ADDR_WIDTH     (log2(USER_MAXREQS)),
        .DEPTH          (USER_MAXREQS)
    ) fifo_wreq (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (out_HLS_AWREADY),
        .if_write       (in_HLS_AWVALID),
        .if_din         ({in_HLS_AWLEN, in_HLS_AWADDR}),
        .if_empty_n     (wreq_valid),
        .if_read        (next_wreq),
        .if_dout        ({wreq_len, wreq_addr}),
        .if_num_data_valid());

    assign next_wreq = wreq_valid && ready_for_wreq && wrsp_ready;
    assign ready_for_wreq  = ~tmp_valid || (in_AXI_AWREADY && wreq_ready);

    assign valid_length    = (wreq_len != 32'b0) && !wreq_len[31];

    assign out_AXI_AWLEN   = tmp_len;   // Byte length
    assign out_AXI_AWADDR  = tmp_addr;  // Byte address
    assign out_AXI_AWVALID = tmp_valid && wreq_ready;

    always @(posedge ACLK)
    begin
        if (ARESET) begin
            tmp_len  <= 0;
            tmp_addr <= 0;
        end
        else if (ACLK_EN) begin
            if(next_wreq) begin
                tmp_len  <= (wreq_len << USER_ADDR_ALIGN) - 1;
                tmp_addr <= TARGET_ADDR + (wreq_addr << USER_ADDR_ALIGN);
            end
        end
    end
 
    always @(posedge ACLK) 
    begin
        if (ARESET)
            tmp_valid <= 1'b0;
        else if (next_wreq && valid_length)
            tmp_valid <= 1'b1;
        else if (in_AXI_AWREADY && wreq_ready)
            tmp_valid <= 1'b0;
    end

    // ===================================================================

    

    
    M_AXI_gmem_m_axi_fifo #(
        .MEM_STYLE         (BUFFER_IMPL),
        .DATA_WIDTH        (USER_DW + USER_DW/8),
        .ADDR_WIDTH        (log2(WBUFF_DEPTH)),
        .DEPTH             (WBUFF_DEPTH)
    ) buff_wdata (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (out_HLS_WREADY),
        .if_write          (in_HLS_WVALID),
        .if_din            ({in_HLS_WSTRB , in_HLS_WDATA}),
        .if_empty_n        (wdata_valid),
        .if_read           (next_wdata),
        .if_dout           ({tmp_wstrb, tmp_wdata}),
        .if_num_data_valid ());

    generate
    if (USER_DATA_WIDTH == BUS_DATA_WIDTH) begin : bus_equal_gen
        assign next_wdata       = in_AXI_WREADY;
        assign out_AXI_WVALID   = wdata_valid;
        assign out_AXI_WDATA    = tmp_wdata;
        assign out_AXI_WSTRB    = tmp_wstrb;

        assign wreq_ready   = 1'b1;

    end
    else if (USER_DATA_WIDTH < BUS_DATA_WIDTH) begin : bus_wide_gen
        localparam
            TOTAL_PADS      = BUS_DATA_WIDTH / USER_DATA_WIDTH,
            PAD_ALIGN       = log2(TOTAL_PADS),
            BEAT_LEN_WIDTH  = 32 - BUS_ADDR_ALIGN;

        function [TOTAL_PADS-1 : 0] decoder;
            input [PAD_ALIGN-1 : 0] din;
            reg  [TOTAL_PADS-1 : 0] dout;
            integer i;
        begin
            dout = {TOTAL_PADS{1'b0}};
            for (i = 0; i < din; i = i + 1)
                dout[i] = 1'b1;
            decoder = dout;
        end
        endfunction

        wire [USER_AW - 1:0]        tmp_addr_end;

        wire                        offset_full_n;
        wire                        offset_write;
        wire [PAD_ALIGN-1 : 0]      start_offset;
        wire [PAD_ALIGN-1 : 0]      end_offset;
        wire [BEAT_LEN_WIDTH-1 : 0] beat_total;

        wire                        offset_empty_n;
        wire                        offset_read;
        wire [2*PAD_ALIGN+BEAT_LEN_WIDTH-1 : 0] offset_pack;
        reg  [2*PAD_ALIGN+BEAT_LEN_WIDTH-1 : 0] offset_pack_reg;

        reg                         offset_valid;
        wire                        next_offset;
        wire [PAD_ALIGN-1 : 0]      head_offset;
        wire [PAD_ALIGN-1 : 0]      tail_offset;

        wire [BEAT_LEN_WIDTH-1 : 0] beat_len;
        reg  [BEAT_LEN_WIDTH-1:0]   len_cnt_buf;
        wire [BEAT_LEN_WIDTH-1:0]   len_cnt_tmp;

        wire [TOTAL_PADS - 1:0]     add_head;
        wire [TOTAL_PADS - 1:0]     add_tail;
        wire [TOTAL_PADS - 1:0]     pad_oh;
        reg  [TOTAL_PADS - 1:0]     pad_oh_reg;

        wire [TOTAL_PADS-1 : 0]     head_pad_sel;
        wire [0 : TOTAL_PADS-1]     tail_pad_sel; // reverse
        wire                        ready_for_data;
        wire                        next_pad;
        reg                         first_pad;
        wire                        last_pad;

        reg                         first_beat_set;
        reg                         last_beat_set;
        reg                         single_beat;
        wire                        first_beat;
        wire                        last_beat;
        wire                        next_beat;

        reg  [BUS_DATA_WIDTH - 1:0] data_buf;
        reg  [BUS_DATA_BYTES - 1:0] strb_buf;
        reg                         data_valid;

        // Recording the offset of start & end address to align beats from data USER_DW < BUS_DW.
        M_AXI_gmem_m_axi_fifo #(
            .DATA_WIDTH             (2*PAD_ALIGN + BEAT_LEN_WIDTH),
            .ADDR_WIDTH             (log2(NUM_WRITE_OUTSTANDING)),
            .DEPTH                  (NUM_WRITE_OUTSTANDING)
        ) wreq_offset (
            .clk                    (ACLK),
            .reset                  (ARESET),
            .clk_en                 (ACLK_EN),
            .if_full_n              (offset_full_n),
            .if_write               (offset_write),
            .if_din                 ({start_offset, end_offset, beat_total}),
            .if_empty_n             (offset_empty_n),
            .if_read                (offset_read),
            .if_dout                (offset_pack),
            .if_num_data_valid      ());

        assign wreq_ready     = offset_full_n | ~offset_write;
        assign tmp_addr_end   = tmp_addr + tmp_len;

        assign start_offset   = tmp_addr[BUS_ADDR_ALIGN-1 : 0] >> USER_ADDR_ALIGN;
        assign end_offset     = ~tmp_addr_end[BUS_ADDR_ALIGN-1 : 0] >> USER_ADDR_ALIGN;
        assign beat_total     = (tmp_len + tmp_addr[BUS_ADDR_ALIGN-1 : 0]) >> BUS_ADDR_ALIGN;

        assign offset_write   = tmp_valid & in_AXI_AWREADY;
        assign offset_read    = ~offset_valid | next_offset;

        assign {head_offset, tail_offset, beat_len} = offset_pack_reg;

        assign out_AXI_WDATA  = data_buf;
        assign out_AXI_WSTRB  = strb_buf;
        assign out_AXI_WVALID = data_valid;

        assign next_wdata     = next_pad;
        assign next_offset    = last_beat && next_beat;
        assign ready_for_data = ~data_valid || in_AXI_WREADY;

        assign len_cnt_tmp    = first_beat ? beat_len : len_cnt_buf;
        assign first_beat     = first_beat_set && offset_valid;
        assign last_beat      = (single_beat || last_beat_set) && offset_valid;
        assign next_beat      = offset_valid && last_pad && ready_for_data;

        assign next_pad       = offset_valid && wdata_valid && ready_for_data;
        assign last_pad       = (last_beat) ? pad_oh[TOTAL_PADS-tail_offset-1] : pad_oh[TOTAL_PADS-1];

        assign head_pad_sel   = decoder(head_offset);
        assign tail_pad_sel   = decoder(tail_offset);

        always @(posedge ACLK)
        begin
            if (ARESET) begin
                single_beat <= 1'b0;
                offset_pack_reg <= 0;
            end
            else if (ACLK_EN) begin
                if (offset_empty_n && offset_read) begin
                    single_beat     <= (offset_pack[BEAT_LEN_WIDTH-1:0] == 0);
                    offset_pack_reg <= offset_pack;
                end
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                offset_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (offset_empty_n && offset_read)
                    offset_valid <= 1'b1;
                else if (next_offset)
                    offset_valid <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                len_cnt_buf <= 0;
            else if (ACLK_EN) begin
                if (next_beat)
                    len_cnt_buf <= len_cnt_tmp - 1;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET) begin
                first_beat_set <= 1'b1;
                last_beat_set  <= 1'b0;
            end
            else if (ACLK_EN) begin
                if (next_offset) begin
                    first_beat_set <= 1'b1;
                    last_beat_set  <= 1'b0;
                end
                else if (next_beat) begin
                    first_beat_set <= 1'b0;
                    last_beat_set  <= (len_cnt_tmp == 1);
                end
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                first_pad <= 1'b1;
            else if (ACLK_EN) begin
                if (next_pad && ~last_pad)
                    first_pad <= 1'b0;
                else if (next_pad && last_pad)
                    first_pad <= 1'b1;
            end
        end 
        
        assign pad_oh = (~wdata_valid)            ? 0                :
                        (first_pad && first_beat) ? 1 << head_offset :
                        (first_pad)?                1                :
                        pad_oh_reg;

        always @(posedge ACLK)
        begin
            if (ARESET)
                pad_oh_reg <= 0;
            else if (ACLK_EN) begin
                if (next_pad)
                    pad_oh_reg <= {pad_oh[TOTAL_PADS - 2:0], 1'b0};
            end
        end

        genvar  i;
        for (i = 0; i < TOTAL_PADS; i = i + 1) begin : data_gen
            assign add_head[i] = head_pad_sel[i] && first_beat;
            assign add_tail[i] = tail_pad_sel[i] && last_beat;

            always @(posedge ACLK)
            begin
                if (ARESET)
                    data_buf[i*USER_DATA_WIDTH +: USER_DATA_WIDTH] <= {USER_DATA_WIDTH{1'b0}};
                else if (ACLK_EN) begin
                    if ((add_head[i] || add_tail[i]) && ready_for_data)
                        data_buf[i*USER_DATA_WIDTH +: USER_DATA_WIDTH] <= {USER_DATA_WIDTH{1'b0}};
                    else if (pad_oh[i] == 1'b1 && ready_for_data)
                        data_buf[i*USER_DATA_WIDTH +: USER_DATA_WIDTH] <= tmp_wdata;
                end
            end

            always @(posedge ACLK)
            begin
                if (ARESET)
                    strb_buf[i*USER_DATA_BYTES +: USER_DATA_BYTES] <= {USER_DATA_BYTES{1'b0}};
                else if (ACLK_EN) begin
                    if ((add_head[i] || add_tail[i]) && ready_for_data)
                        strb_buf[i*USER_DATA_BYTES +: USER_DATA_BYTES] <= {USER_DATA_BYTES{1'b0}};
                    else if (pad_oh[i] == 1'b1 && ready_for_data)
                        strb_buf[i*USER_DATA_BYTES +: USER_DATA_BYTES] <= tmp_wstrb;
                end
            end

        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (next_beat)
                    data_valid <= 1'b1;
                else if (ready_for_data)
                    data_valid <= 1'b0;
            end
        end

    end
    else begin : bus_narrow_gen
        localparam
            TOTAL_SPLIT       = USER_DATA_WIDTH / BUS_DATA_WIDTH,
            SPLIT_ALIGN       = log2(TOTAL_SPLIT),
            BEAT_LEN_WIDTH    = 32 - BUS_ADDR_ALIGN;


        wire [USER_AW - 1:0]        tmp_addr_end;

        wire                        offset_full_n;
        wire                        offset_write;
        wire  [BEAT_LEN_WIDTH-1 : 0] beat_total;

        wire                        offset_valid;
        wire                        next_offset;

        wire [BEAT_LEN_WIDTH-1 : 0] beat_len;
        reg  [BEAT_LEN_WIDTH-1 : 0] len_cnt;

        wire                        ready_for_data;
        reg  [USER_DATA_WIDTH - 1:0] data_buf;
        reg  [USER_DATA_BYTES - 1:0] strb_buf;
        reg                         data_valid;

        reg [SPLIT_ALIGN-1 : 0]     split_cnt;

        wire                        first_split;
        wire                        next_split;
        wire                        last_split;

        // Recording the offset of start & end address to align beats from data USER_DW < BUS_DW.
        M_AXI_gmem_m_axi_fifo #(
            .DATA_WIDTH        (BEAT_LEN_WIDTH),
            .ADDR_WIDTH        (log2(NUM_WRITE_OUTSTANDING)),
            .DEPTH             (NUM_WRITE_OUTSTANDING)
        ) wreq_offset (
            .clk               (ACLK),
            .reset             (ARESET),
            .clk_en            (ACLK_EN),
            .if_full_n         (offset_full_n),
            .if_write          (offset_write),
            .if_din            (beat_total),
            .if_empty_n        (offset_valid),
            .if_read           (next_offset),
            .if_dout           (beat_len),
            .if_num_data_valid ());

        assign wreq_ready     = offset_full_n | ~offset_write;
        assign beat_total     = (tmp_len + tmp_addr[BUS_ADDR_ALIGN-1 : 0]) >> BUS_ADDR_ALIGN;

        assign offset_write   = tmp_valid & in_AXI_AWREADY;

        assign out_AXI_WDATA  = data_buf[BUS_DATA_WIDTH - 1:0];
        assign out_AXI_WSTRB  = strb_buf[BUS_DATA_BYTES - 1:0];
        assign out_AXI_WVALID = data_valid;

        assign next_wdata     = first_split;
        assign next_offset    = (len_cnt == beat_len) && offset_valid && last_split;
        assign ready_for_data = ~data_valid | in_AXI_WREADY;

        assign first_split    = (split_cnt == 0) && wdata_valid && offset_valid && ready_for_data;
        assign last_split     = (split_cnt == (TOTAL_SPLIT - 1)) && ready_for_data;
        assign next_split     = (split_cnt != 0) && ready_for_data;
        
        always @(posedge ACLK)
        begin
            if (ARESET)
                split_cnt <= 0;
            else if (ACLK_EN) begin
                if (last_split)
                    split_cnt <= 0;
                else if (first_split || next_split)
                    split_cnt <= split_cnt + 1;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                len_cnt <= 0;
            else if (ACLK_EN) begin
                if (next_offset)
                    len_cnt <= 0;
                else if (next_wdata || next_split)
                    len_cnt <= len_cnt + 1;
            end
        end
 
        always @(posedge ACLK)
        begin
            if (ARESET)
                data_buf <= {USER_DATA_WIDTH{1'b0}};
            else if (ACLK_EN) begin
                if (next_wdata)
                    data_buf <= tmp_wdata;
                else if (next_split)
                    data_buf <= data_buf >> BUS_DATA_WIDTH;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                strb_buf <= {USER_DATA_BYTES{1'b0}};
            else if (ACLK_EN) begin
                if (next_wdata)
                    strb_buf <= tmp_wstrb;
                else if (next_split)
                    strb_buf <= strb_buf >> BUS_DATA_BYTES;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 0;
            else if (ACLK_EN) begin
                if (next_wdata)
                    data_valid <= 1;
                else if (~(first_split || next_split) && ready_for_data)
                    data_valid <= 0;
            end
        end
    end
    endgenerate

    // ===================================================================

    // generate response for all request (including request with invalid length)
    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH        (1),
        .ADDR_WIDTH        (log2(NUM_WRITE_OUTSTANDING)),
        .DEPTH             (NUM_WRITE_OUTSTANDING)
    ) fifo_wrsp (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (wrsp_ready),
        .if_write          (next_wreq),
        .if_din            (valid_length),
        .if_empty_n        (wrsp_valid),
        .if_read           (wrsp_read),
        .if_dout           (wrsp_type), // 1 - valid length request, 0 - invalid length request
        .if_num_data_valid ());

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH        (1),
        .ADDR_WIDTH        (log2(USER_MAXREQS)),
        .DEPTH             (USER_MAXREQS)
    ) user_resp (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (ursp_ready),
        .if_write          (ursp_write),
        .if_din            (1'b1),
        .if_empty_n        (out_HLS_BVALID),
        .if_read           (in_HLS_BREADY),
        .if_dout           (),
        .if_num_data_valid ());

    

    assign ursp_write  = wrsp_valid && (!wrsp_type || in_AXI_BVALID);
    assign wrsp_read   = ursp_ready && ursp_write;

    assign out_AXI_BREADY = wrsp_type && ursp_ready;

endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps

//


module M_AXI_gmem_m_axi_read
#(parameter
    C_M_AXI_ID_WIDTH          = 1,
    C_M_AXI_ARUSER_WIDTH      = 1,
    C_M_AXI_RUSER_WIDTH       = 1,
    C_USER_VALUE              = 1'b0,
    C_PROT_VALUE              = 3'b000,
    C_CACHE_VALUE             = 4'b0011,
    BUS_ADDR_WIDTH            = 32,
    BUS_DATA_WIDTH            = 32,
    NUM_READ_OUTSTANDING      = 2,
    MAX_READ_BURST_LENGTH     = 16
)(
    // system signal
    input  wire                            ACLK,
    input  wire                            ARESET,
    input  wire                            ACLK_EN,
    // read address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]     out_BUS_ARID,
    output wire [BUS_ADDR_WIDTH-1:0]       out_BUS_ARADDR,
    output wire [7:0]                      out_BUS_ARLEN,
    output wire [2:0]                      out_BUS_ARSIZE,
    output wire [1:0]                      out_BUS_ARBURST,
    output wire [1:0]                      out_BUS_ARLOCK,
    output wire [3:0]                      out_BUS_ARCACHE,
    output wire [2:0]                      out_BUS_ARPROT,
    output wire [3:0]                      out_BUS_ARQOS,
    output wire [3:0]                      out_BUS_ARREGION,
    output wire [C_M_AXI_ARUSER_WIDTH-1:0] out_BUS_ARUSER,
    output wire                            out_BUS_ARVALID,
    input  wire                            in_BUS_ARREADY,
    // read data channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]     in_BUS_RID,
    input  wire [BUS_DATA_WIDTH-1:0]       in_BUS_RDATA,
    input  wire [1:0]                      in_BUS_RRESP,
    input  wire                            in_BUS_RLAST,
    input  wire [C_M_AXI_RUSER_WIDTH-1:0]  in_BUS_RUSER,
    input  wire                            in_BUS_RVALID,
    output wire                            out_BUS_RREADY,

    // HLS internal read request channel
    input  wire [BUS_ADDR_WIDTH-1:0]       in_HLS_ARADDR,
    input  wire [31:0]                     in_HLS_ARLEN,
    input  wire                            in_HLS_ARVALID,
    output wire                            out_HLS_ARREADY,
    output wire [BUS_DATA_WIDTH-1:0]       out_HLS_RDATA,
    output wire [1:0]                      out_HLS_RLAST,
    output wire                            out_HLS_RVALID,
    input  wire                            in_HLS_RREADY,
    input  wire                            in_HLS_RBUST_READY);

//------------------------Parameter----------------------
    localparam
        BUS_DATA_BYTES  = BUS_DATA_WIDTH / 8,
        BUS_ADDR_ALIGN  = log2(BUS_DATA_BYTES);

//------------------------Task and function--------------
    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------
    // AR channel
    wire                          ost_ctrl_info;
    wire                          ost_ctrl_valid;
    wire                          ost_ctrl_ready;

    // R channel
    wire [BUS_DATA_WIDTH-1:0]     tmp_data;
    wire                          tmp_last;
    wire                          data_valid;
    wire                          data_ready;
    wire                          next_ctrl;
    wire                          need_rlast;
    wire                          burst_valid;
    wire                          last_burst;
    wire                          fifo_rctl_ready;
    wire                          next_burst;
    wire                          burst_end;

    // regslice io ?  no 

//------------------------AR channel begin---------------
//------------------------Instantiation------------------
    M_AXI_gmem_m_axi_burst_converter #(
        .DATA_WIDTH        (BUS_DATA_WIDTH),
        .ADDR_WIDTH        (BUS_ADDR_WIDTH),
        .MAX_BURST_LEN     (MAX_READ_BURST_LENGTH)
    ) rreq_burst_conv (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),

        .in_REQ_ADDR       (in_HLS_ARADDR),
        .in_REQ_LEN        (in_HLS_ARLEN),
        .in_REQ_VALID      (in_HLS_ARVALID),
        .out_REQ_READY     (out_HLS_ARREADY),
         
        .out_BURST_ADDR    (out_BUS_ARADDR),
        .out_BURST_LEN     (out_BUS_ARLEN),
        .out_BURST_VALID   (out_BUS_ARVALID),
        .in_BURST_READY    (in_BUS_ARREADY),

        .out_CTRL_INFO     (ost_ctrl_info),
        .out_CTRL_LEN      (),
        .out_CTRL_VALID    (ost_ctrl_valid),
        .in_CTRL_READY     (ost_ctrl_ready)
    );
    
    
//------------------------Body---------------------------

    assign out_BUS_ARID     = 0;
    assign out_BUS_ARSIZE   = BUS_ADDR_ALIGN;
    assign out_BUS_ARBURST  = 2'b01;
    assign out_BUS_ARLOCK   = 2'b00;
    assign out_BUS_ARCACHE  = C_CACHE_VALUE;
    assign out_BUS_ARPROT   = C_PROT_VALUE;
    assign out_BUS_ARUSER   = C_USER_VALUE;
    assign out_BUS_ARQOS    = 4'b0000;
    assign out_BUS_ARREGION = 4'b0000;

//------------------------AR channel end-----------------

//------------------------R channel begin----------------
//------------------------Instantiation------------------
    M_AXI_gmem_m_axi_reg_slice #(
        .DATA_WIDTH     (BUS_DATA_WIDTH + 1)
    ) rs_rdata (
        .clk            (ACLK),
        .reset          (ARESET),
        .s_data         ({in_BUS_RLAST, in_BUS_RDATA}),
        .s_valid        (in_BUS_RVALID),
        .s_ready        (out_BUS_RREADY),
        .m_data         ({tmp_last, tmp_data}),
        .m_valid        (data_valid),
        .m_ready        (data_ready));

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH     (1),
        .ADDR_WIDTH     (log2(NUM_READ_OUTSTANDING)),
        .DEPTH          (NUM_READ_OUTSTANDING)
    ) fifo_rctl (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (ost_ctrl_ready),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_info),
        .if_empty_n     (need_rlast),
        .if_read        (next_ctrl),
        .if_dout        (),
        .if_num_data_valid());

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH     (1),
        .ADDR_WIDTH     (log2(NUM_READ_OUTSTANDING)),
        .DEPTH          (NUM_READ_OUTSTANDING)
    ) fifo_burst (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_info),
        .if_empty_n     (burst_valid),
        .if_read        (next_burst),
        .if_dout        (last_burst),
        .if_num_data_valid());

//------------------------Body---------------------------
    assign next_ctrl      = in_HLS_RBUST_READY && need_rlast;
    assign next_burst     = burst_end && data_valid && data_ready;

    assign burst_end      = tmp_last === 1'b1;
    assign out_HLS_RLAST  = {burst_end, burst_end && last_burst && burst_valid};
    assign out_HLS_RDATA  = tmp_data;
    assign out_HLS_RVALID = data_valid;
    assign data_ready     = in_HLS_RREADY;
//------------------------R channel end------------------
endmodule

module M_AXI_gmem_m_axi_write
#(parameter
    CONSERVATIVE              = 0,
    C_M_AXI_ID_WIDTH          = 1,
    C_M_AXI_AWUSER_WIDTH      = 1,
    C_M_AXI_WUSER_WIDTH       = 1,
    C_M_AXI_BUSER_WIDTH       = 1,
    C_USER_VALUE              = 1'b0,
    C_PROT_VALUE              = 3'b000,
    C_CACHE_VALUE             = 4'b0011,
    BUS_ADDR_WIDTH            = 32,
    BUS_DATA_WIDTH            = 32,
    NUM_WRITE_OUTSTANDING     = 2,
    MAX_WRITE_BURST_LENGTH    = 16
)(
    // system signal
    input  wire                             ACLK,
    input  wire                             ARESET,
    input  wire                             ACLK_EN,
    // write address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]      out_BUS_AWID,
    output wire [2:0]                       out_BUS_AWSIZE,
    output wire [1:0]                       out_BUS_AWBURST,
    output wire [1:0]                       out_BUS_AWLOCK,
    output wire [3:0]                       out_BUS_AWCACHE,
    output wire [2:0]                       out_BUS_AWPROT,
    output wire [3:0]                       out_BUS_AWQOS,
    output wire [3:0]                       out_BUS_AWREGION,
    output wire [C_M_AXI_AWUSER_WIDTH-1:0]  out_BUS_AWUSER,
    output wire [BUS_ADDR_WIDTH-1:0]        out_BUS_AWADDR,
    output wire [7:0]                       out_BUS_AWLEN,
    output wire                             out_BUS_AWVALID,
    input  wire                             in_BUS_AWREADY,
    // write data channel
    output wire [C_M_AXI_ID_WIDTH-1:0]      out_BUS_WID,
    output wire [C_M_AXI_WUSER_WIDTH-1:0]   out_BUS_WUSER,
    output wire [BUS_DATA_WIDTH-1:0]        out_BUS_WDATA,
    output wire [BUS_DATA_WIDTH/8-1:0]      out_BUS_WSTRB,
    output wire                             out_BUS_WLAST,
    output wire                             out_BUS_WVALID,
    input  wire                             in_BUS_WREADY,
    // write response channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]      in_BUS_BID,
    input  wire [1:0]                       in_BUS_BRESP,
    input  wire [C_M_AXI_BUSER_WIDTH-1:0]   in_BUS_BUSER,
    input  wire                             in_BUS_BVALID,
    output wire                             out_BUS_BREADY,
    // write request
    input  wire [BUS_ADDR_WIDTH-1:0]        in_HLS_AWADDR,
    input  wire [31:0]                      in_HLS_AWLEN,
    input  wire                             in_HLS_AWVALID,
    output wire                             out_HLS_AWREADY,

    input  wire [BUS_DATA_WIDTH-1:0]        in_HLS_WDATA,
    input  wire [BUS_DATA_WIDTH/8-1:0]      in_HLS_WSTRB,
    input  wire                             in_HLS_WVALID,
    output wire                             out_HLS_WREADY,
    output wire                             out_HLS_BVALID,
    input  wire                             in_HLS_BREADY);

//------------------------Parameter----------------------
    localparam
        BUS_DATA_BYTES  = BUS_DATA_WIDTH / 8,
        BUS_ADDR_ALIGN  = log2(BUS_DATA_BYTES);

//------------------------Task and function--------------
    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------
    // AW channel
    wire [C_M_AXI_ID_WIDTH-1:0]         AWID_Dummy;
    wire [BUS_ADDR_WIDTH - 1:0]         AWADDR_Dummy;
    wire [7:0]                          AWLEN_Dummy;
    wire                                AWVALID_Dummy;
    wire                                AWREADY_Dummy;
 
    wire                                ost_ctrl_info;
    wire [7:0]                          ost_ctrl_len;
    wire                                ost_ctrl_valid;
    wire                                ost_ctrl_ready;

    // W channel
    wire                                next_data;
    wire                                data_valid;
    wire                                data_ready;
    reg  [BUS_DATA_WIDTH - 1:0]         data_buf;
    reg  [BUS_DATA_BYTES - 1:0]         strb_buf;
    wire                                ready_for_data;

    reg  [7:0]                          len_cnt;
    wire [7:0]                          burst_len;
    wire                                fifo_burst_ready;
    wire                                next_burst;
    wire                                burst_valid;
    reg                                 WVALID_Dummy;
    wire                                WREADY_Dummy;
    reg                                 WLAST_Dummy;
    //B channel
    wire                                next_resp;
    wire                                last_resp;
    wire                                need_wrsp;
    wire                                resp_valid;
    wire                                resp_ready;

    // regslice io ?  no 

//------------------------AW channel begin---------------
//------------------------Instantiation------------------
    M_AXI_gmem_m_axi_burst_converter #(
        .DATA_WIDTH        (BUS_DATA_WIDTH),
        .ADDR_WIDTH        (BUS_ADDR_WIDTH),
        .MAX_BURST_LEN     (MAX_WRITE_BURST_LENGTH)
    ) wreq_burst_conv (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        
        .in_REQ_ADDR       (in_HLS_AWADDR),
        .in_REQ_LEN        (in_HLS_AWLEN),
        .in_REQ_VALID      (in_HLS_AWVALID),
        .out_REQ_READY     (out_HLS_AWREADY),

        .out_BURST_ADDR    (AWADDR_Dummy),
        .out_BURST_LEN     (AWLEN_Dummy),
        .out_BURST_VALID   (AWVALID_Dummy),
        .in_BURST_READY    (AWREADY_Dummy),

        .out_CTRL_INFO     (ost_ctrl_info),
        .out_CTRL_LEN      (ost_ctrl_len),
        .out_CTRL_VALID    (ost_ctrl_valid),
        .in_CTRL_READY     (ost_ctrl_ready)
    );

    // burst converter
    assign out_BUS_AWID     = 0;
    assign out_BUS_AWSIZE   = BUS_ADDR_ALIGN;
    assign out_BUS_AWBURST  = 2'b01;
    assign out_BUS_AWLOCK   = 2'b00;
    assign out_BUS_AWCACHE  = C_CACHE_VALUE;
    assign out_BUS_AWPROT   = C_PROT_VALUE;
    assign out_BUS_AWUSER   = C_USER_VALUE;
    assign out_BUS_AWQOS    = 4'b0000;
    assign out_BUS_AWREGION = 4'b0000;

//------------------------AW channel end-----------------

//------------------------W channel begin----------------
//------------------------Instantiation------------------

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH     (8),
        .ADDR_WIDTH     (log2(NUM_WRITE_OUTSTANDING)),
        .DEPTH          (NUM_WRITE_OUTSTANDING)
    ) fifo_burst (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_len),
        .if_empty_n     (burst_valid),
        .if_read        (next_burst),
        .if_dout        (burst_len),
        .if_num_data_valid());

//------------------------Body---------------------------

    assign out_BUS_WUSER    = C_USER_VALUE;
    assign out_BUS_WID      = 0;
    assign out_HLS_WREADY   = data_ready;

    assign data_valid       = in_HLS_WVALID;
    assign data_ready       = burst_valid && ready_for_data;
    assign next_data        = data_ready && data_valid;
    assign next_burst       = (len_cnt == burst_len) && next_data;
    assign ready_for_data   = ~WVALID_Dummy || WREADY_Dummy;

    always @(posedge ACLK)
    begin
        if (ARESET) begin
            strb_buf <= 0;
            data_buf <= 0;
        end
        if (ACLK_EN) begin
            if (next_data) begin
                data_buf <= in_HLS_WDATA;
                strb_buf <= in_HLS_WSTRB;
            end
        end
    end

    always @(posedge ACLK)
    begin
        if (ARESET)
            WVALID_Dummy <= 1'b0;
        else if (ACLK_EN) begin
            if (next_data)
                WVALID_Dummy <= 1'b1;
            else if (ready_for_data)
                WVALID_Dummy <= 1'b0;
        end
    end

    always @(posedge ACLK)
    begin
        if (ARESET)
            WLAST_Dummy <= 0;
        else if (ACLK_EN) begin
            if (next_burst)
                WLAST_Dummy <= 1;
            else if (ready_for_data)
                WLAST_Dummy <= 0;
        end
    end

    always @(posedge ACLK)
    begin
        if (ARESET)
            len_cnt <= 0;
        else if (ACLK_EN) begin
            if (next_burst)
                len_cnt <= 0;
            else if (next_data)
                len_cnt <= len_cnt + 1;
        end
    end
//------------------------W channel end------------------

    // Write throttling unit
    M_AXI_gmem_m_axi_throttle #(
        .CONSERVATIVE    (CONSERVATIVE),
        .USED_FIX        (0),
        .ADDR_WIDTH      (BUS_ADDR_WIDTH),
        .DATA_WIDTH      (BUS_DATA_WIDTH),
        .DEPTH           (MAX_WRITE_BURST_LENGTH),
        .MAXREQS         (NUM_WRITE_OUTSTANDING),
        .AVERAGE_MODE    (0)
    ) wreq_throttle (
        .clk             (ACLK),
        .reset           (ARESET),
        .clk_en          (ACLK_EN),
        // internal 
        .in_TOP_AWADDR   (AWADDR_Dummy),
        .in_TOP_AWLEN    (AWLEN_Dummy),
        .in_TOP_AWVALID  (AWVALID_Dummy),
        .out_TOP_AWREADY (AWREADY_Dummy),

        .in_TOP_WDATA    (data_buf),
        .in_TOP_WSTRB    (strb_buf),
        .in_TOP_WLAST    (WLAST_Dummy),
        .in_TOP_WVALID   (WVALID_Dummy),
        .out_TOP_WREADY  (WREADY_Dummy),

        // AXI BUS 
        .out_BUS_AWADDR  (out_BUS_AWADDR),
        .out_BUS_AWLEN   (out_BUS_AWLEN),
        .out_BUS_AWVALID (out_BUS_AWVALID),
        .in_BUS_AWREADY  (in_BUS_AWREADY),

        .out_BUS_WDATA   (out_BUS_WDATA),
        .out_BUS_WSTRB   (out_BUS_WSTRB),
        .out_BUS_WLAST   (out_BUS_WLAST),
        .out_BUS_WVALID  (out_BUS_WVALID),
        .in_BUS_WREADY   (in_BUS_WREADY)
    );

    
    
//------------------------B channel begin----------------
//------------------------Instantiation------------------
    M_AXI_gmem_m_axi_reg_slice #(
        .DATA_WIDTH     (1)
    ) rs_resp (
        .clk            (ACLK),
        .reset          (ARESET),
        .s_data         (1'b1),
        .s_valid        (in_BUS_BVALID),
        .s_ready        (out_BUS_BREADY),
        .m_data         (),
        .m_valid        (resp_valid),
        .m_ready        (resp_ready));

    M_AXI_gmem_m_axi_fifo #(
        .DATA_WIDTH     (1),
        .ADDR_WIDTH     (log2(NUM_WRITE_OUTSTANDING)),
        .DEPTH          (NUM_WRITE_OUTSTANDING)
    ) fifo_resp (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (ost_ctrl_ready),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_info),
        .if_empty_n     (need_wrsp),
        .if_read        (next_resp),
        .if_dout        (last_resp),
        .if_num_data_valid());
//------------------------Body---------------------------

    assign resp_ready = need_wrsp && (in_HLS_BREADY || (last_resp === 1'b0));
    assign next_resp  = resp_ready && resp_valid;

    assign out_HLS_BVALID = resp_valid && (last_resp === 1'b1 ) ;

//------------------------B channel end------------------
endmodule


module M_AXI_gmem_m_axi_burst_converter
#(parameter
    DATA_WIDTH                   = 32,
    ADDR_WIDTH                   = 32,
    MAX_BURST_LEN                = 16
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  clk_en,

    input  wire [ADDR_WIDTH-1:0] in_REQ_ADDR,
    input  wire [31:0]           in_REQ_LEN,
    input  wire                  in_REQ_VALID,
    output wire                  out_REQ_READY,

    output wire [ADDR_WIDTH-1:0] out_BURST_ADDR,
    output wire [7:0]            out_BURST_LEN,
    output wire                  out_BURST_VALID,
    input  wire                  in_BURST_READY,

    output wire                  out_CTRL_INFO,
    output wire [7:0]            out_CTRL_LEN,
    output wire                  out_CTRL_VALID,
    input  wire                  in_CTRL_READY
);
//------------------------Parameter----------------------
    localparam
        DATA_BYTES      = DATA_WIDTH / 8,
        ADDR_ALIGN      = log2(DATA_BYTES),
        BOUNDARY_BEATS  = {12-ADDR_ALIGN{1'b1}},
        NUM_BEAT_WIDTH  = log2(MAX_BURST_LEN);
//------------------------Task and function--------------
    function integer log2;
        input integer x;
        integer n, m;
        begin
            n = 0;
            m = 1;
            while (m < x) begin
                n = n + 1;
                m = m * 2;
            end
            log2 = n;
        end
    endfunction
//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0]       tmp_addr;
    wire [31:0]                 tmp_len;

    wire                        req_valid;
    wire                        read_req;
    wire                        next_req;

    reg  [ADDR_WIDTH - 1:0]     start_addr;
    wire [ADDR_WIDTH - 1:0]     sect_addr;
    reg  [ADDR_WIDTH - 1:0]     sect_addr_buf;
    reg                         req_handling;

    reg  [11 - ADDR_ALIGN:0]    start_to_4k;
    reg  [11 - ADDR_ALIGN:0]    end_from_4k;
    wire [11 - ADDR_ALIGN:0]    sect_len;
    reg  [11 - ADDR_ALIGN:0]    sect_len_buf;
    reg  [11 - ADDR_ALIGN:0]    beat_len;
    
    reg  [ADDR_WIDTH - 13:0]    sect_cnt;
    reg  [19:0]                 sect_total;
    reg  [19:0]                 sect_total_buf;
    wire [19:0]                 sect_total_tmp;
    wire                        ready_for_sect;

    wire                        single_sect;
    reg                         first_sect;
    reg                         last_sect;
    wire                        last_sect_tmp;
    reg                         last_sect_buf;
    wire                        next_sect;

    reg                         burst_valid;

    wire                        ost_ctrl_info;
    wire [7:0]                  ost_ctrl_len;
    wire                        ost_ctrl_valid;
//------------------------Instantiation------------------
    M_AXI_gmem_m_axi_reg_slice #(
        .DATA_WIDTH     (ADDR_WIDTH + 32)
    ) rs_req (
        .clk            (clk),
        .reset          (reset),
        .s_data         ({in_REQ_LEN, in_REQ_ADDR}),
        .s_valid        (in_REQ_VALID),
        .s_ready        (out_REQ_READY),
        .m_data         ({tmp_len, tmp_addr}),
        .m_valid        (req_valid),
        .m_ready        (next_req));

//------------------------Body---------------------------
    assign read_req      = last_sect_tmp & next_sect | ~req_handling;
    assign next_req      = req_valid & read_req;

    always @(posedge clk)
    begin
        if (reset) begin
            start_addr  <= 0;
            beat_len    <= 0;
            sect_total  <= 0;
            end_from_4k <= 0;
            start_to_4k <= 0;
        end
        else if (clk_en) begin
            if (next_req) begin
                start_addr  <= {tmp_addr[ADDR_WIDTH-1:ADDR_ALIGN], {ADDR_ALIGN{1'b0}}};
                beat_len    <= (tmp_len[11:0] + tmp_addr[ADDR_ALIGN-1:0]) >> ADDR_ALIGN;
                sect_total  <= (tmp_len + tmp_addr[11:0]) >> 12;
                end_from_4k <= (tmp_addr[11:0] + tmp_len[11:0]) >> ADDR_ALIGN; 
                start_to_4k <= BOUNDARY_BEATS - tmp_addr[11:ADDR_ALIGN];
            end
        end
    end

    always @(posedge clk)
    begin
        if (reset)
            req_handling <= 1'b0;
        else if (clk_en) begin
            if (next_req)
                req_handling <= 1'b1;
            else if (~req_valid && last_sect_tmp & next_sect)
                req_handling <= 1'b0;
        end
    end

    // 4k boundary
    assign last_sect_tmp  = single_sect || last_sect;

    assign sect_total_tmp = first_sect ? sect_total : sect_total_buf;
    
    assign single_sect  = (sect_total == 0);

    assign next_sect  = req_handling && ready_for_sect;

    assign sect_addr  = (first_sect)? start_addr : {sect_cnt, {12{1'b0}}};
    
    assign sect_len   = single_sect              ? beat_len :
                        ( first_sect && ~last_sect)? start_to_4k :
                        (~first_sect &&  last_sect)? end_from_4k :
                                                     BOUNDARY_BEATS;

    always @(posedge clk)
    begin
        if (reset) begin
            first_sect <= 1'b0;
            last_sect <= 1'b0;
            sect_cnt <= 0;
        end
        else if (clk_en) begin
            if (next_req) begin
                first_sect <= 1'b1;
                last_sect <= 1'b0;
                sect_cnt <= tmp_addr[ADDR_WIDTH-1:12];
            end
            else if (next_sect) begin
                first_sect <= 1'b0;
                last_sect <= (sect_total_tmp == 1);
                sect_cnt <= sect_cnt + 1;
            end
        end
    end

    always @(posedge clk)
    begin
        if (reset) begin
            sect_addr_buf  <= 0;
            sect_len_buf   <= 0;
            last_sect_buf  <= 1'b0;
            sect_total_buf <= 0;
        end
        else if (clk_en) begin
            if (next_sect) begin
                sect_addr_buf  <= sect_addr;
                sect_len_buf   <= sect_len;
                last_sect_buf  <= last_sect_tmp;
                sect_total_buf <= sect_total_tmp - 1;
            end
        end
    end

    generate
    if (DATA_BYTES >= 4096/MAX_BURST_LEN) begin : must_one_burst
        assign out_BURST_ADDR  = sect_addr_buf;
        assign out_BURST_LEN   = sect_len_buf;
        assign out_BURST_VALID = burst_valid;

        assign out_CTRL_VALID  = next_sect;
        assign out_CTRL_INFO   = last_sect_tmp;
        assign out_CTRL_LEN    = sect_len;

        assign ready_for_sect = ~(burst_valid && ~in_BURST_READY) && in_CTRL_READY;

        always @(posedge clk)
        begin
            if (reset)
                burst_valid <= 1'b0;
            else if (clk_en) begin
                if (next_sect)
                    burst_valid <= 1'b1;
                else if (in_BURST_READY)
                    burst_valid <= 1'b0;
            end
        end

    end
    else begin : could_multi_bursts
        wire [ADDR_WIDTH - 1:0]                   addr_tmp;
        reg  [ADDR_WIDTH - 1:0]                   addr_buf;
        reg  [ADDR_ALIGN + 8:0]                   addr_step;
        wire [7:0]                                len_tmp;
        reg  [7:0]                                len_buf;
        reg                                       sect_handling;
        reg  [11 - NUM_BEAT_WIDTH - ADDR_ALIGN:0] loop_cnt;
        reg                                       first_loop;
        reg                                       last_loop;
        wire                                      next_loop;
        wire                                      ready_for_loop;

        assign out_BURST_ADDR  = addr_buf;
        assign out_BURST_LEN   = len_buf;
        assign out_BURST_VALID = burst_valid;

        assign out_CTRL_VALID  = next_loop;
        assign out_CTRL_INFO   = last_loop && last_sect_buf;
        assign out_CTRL_LEN    = len_tmp;

        assign next_loop       = sect_handling && ready_for_loop;
        assign ready_for_sect  = ~sect_handling || (last_loop && next_loop);
        assign ready_for_loop  = ~(burst_valid && ~in_BURST_READY) && in_CTRL_READY;

        always @(posedge clk)
        begin
            if (reset)
                burst_valid <= 1'b0;
            else if (clk_en) begin
                if (next_loop)
                    burst_valid <= 1'b1;
                else if (in_BURST_READY)
                    burst_valid <= 1'b0;
            end
        end

        always @(posedge clk)
        begin
            if (reset)
                sect_handling <= 1'b0;
            else if (clk_en) begin
                if (req_handling && ~sect_handling)
                    sect_handling <= 1'b1;
                else if (~req_handling && last_loop && next_loop)
                    sect_handling <= 1'b0;
            end
        end

        always @(posedge clk)
        begin
            if (reset) begin
                first_loop <= 1'b0;
                last_loop <= 1'b0;
                loop_cnt <= 0;
            end
            else if (clk_en) begin
                if (next_sect) begin
                    first_loop <= 1'b1;
                    last_loop <= (sect_len[11 - ADDR_ALIGN : NUM_BEAT_WIDTH] == 0);
                    loop_cnt <= sect_len[11 - ADDR_ALIGN : NUM_BEAT_WIDTH];
                end
                else if (next_loop) begin
                    first_loop <= 1'b0;
                    last_loop <= (loop_cnt == 1);
                    loop_cnt <= loop_cnt - 1;
                end
            end
        end

        assign addr_tmp = first_loop ? sect_addr_buf : (addr_buf + addr_step);
        assign len_tmp  = (NUM_BEAT_WIDTH == 0) ? 0 :
                          last_loop ? sect_len_buf[NUM_BEAT_WIDTH - 1:0] : 
                                      { NUM_BEAT_WIDTH{1'b1} };
        always @(posedge clk)
        begin
            if (reset) begin
                addr_buf  <= 0;
                addr_step <= 0;
                len_buf   <= 0;
            end
            else if (clk_en) begin
                if (next_loop) begin
                    addr_buf  <= addr_tmp;
                    addr_step <= (len_tmp + 1) << ADDR_ALIGN;
                    len_buf   <= len_tmp;
                end
            end
        end

    end
    endgenerate

endmodule

module M_AXI_gmem_m_axi_throttle
#(parameter
    CONSERVATIVE   = 0,
    USED_FIX       = 0,
    FIX_VALUE      = 4,
    ADDR_WIDTH     = 32,
    DATA_WIDTH     = 32,
    DEPTH          = 16,
    MAXREQS        = 16,
    AVERAGE_MODE   = 0 
)(
    input  wire                      clk,
    input  wire                      reset,
    input  wire                      clk_en,

    input  wire [ADDR_WIDTH-1:0]     in_TOP_AWADDR,
    input  wire [7:0]                in_TOP_AWLEN,
    input  wire                      in_TOP_AWVALID,
    output wire                      out_TOP_AWREADY,
    input  wire [DATA_WIDTH-1:0]     in_TOP_WDATA,
    input  wire [DATA_WIDTH/8-1:0]   in_TOP_WSTRB,
    input  wire                      in_TOP_WLAST,
    input  wire                      in_TOP_WVALID,
    output wire                      out_TOP_WREADY,

    output wire [ADDR_WIDTH-1:0]     out_BUS_AWADDR,
    output wire [7:0]                out_BUS_AWLEN,
    output wire                      out_BUS_AWVALID,
    input  wire                      in_BUS_AWREADY,
    output wire [DATA_WIDTH-1:0]     out_BUS_WDATA,
    output wire [DATA_WIDTH/8-1:0]   out_BUS_WSTRB,
    output wire                      out_BUS_WLAST,
    output wire                      out_BUS_WVALID,
    input  wire                      in_BUS_WREADY);

    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction
// aggressive mode
    generate
    if (CONSERVATIVE == 0) begin
        localparam threshold = (USED_FIX)? FIX_VALUE-1 : 0;

        wire                req_en;
        wire                handshake;
        wire  [7:0]         load_init;
        reg   [8:0]         throttl_cnt;

        // AW Channel
        assign out_BUS_AWADDR = in_TOP_AWADDR;
        assign out_BUS_AWLEN  = in_TOP_AWLEN;

        // W Channel
        assign out_BUS_WDATA  = in_TOP_WDATA;
        assign out_BUS_WSTRB  = in_TOP_WSTRB;
        assign out_BUS_WLAST  = in_TOP_WLAST;
        assign out_BUS_WVALID = in_TOP_WVALID & (throttl_cnt > 0);
        assign out_TOP_WREADY = in_BUS_WREADY & (throttl_cnt > 0);

        if (USED_FIX) begin
            assign load_init = FIX_VALUE-1;
            assign handshake = 1'b1;
        end else if (AVERAGE_MODE) begin
            assign load_init = in_TOP_AWLEN;
            assign handshake = 1'b1;
        end else begin
            assign load_init = in_TOP_AWLEN;
            assign handshake = out_BUS_WVALID & in_BUS_WREADY;
        end

        assign out_BUS_AWVALID = in_TOP_AWVALID & req_en;
        assign out_TOP_AWREADY = in_BUS_AWREADY & req_en;
        assign req_en = (throttl_cnt == 0) | (throttl_cnt == 1 & handshake);

        always @(posedge clk)
        begin
            if (reset)
                throttl_cnt <= 0;
            else if (clk_en) begin
                if (in_TOP_AWLEN >= threshold && req_en && in_TOP_AWVALID && in_BUS_AWREADY)
                    throttl_cnt <= load_init + 1'b1; //load
                else if (throttl_cnt > 0 && handshake)
                    throttl_cnt <= throttl_cnt - 1'b1;
            end
        end

    end
// conservative mode
    else begin
        localparam CNT_WIDTH = ((DEPTH < 4)? 2 : log2(DEPTH)) + 1;

        // Instantiation for reg slice for AW channel
        wire                        rs_req_ready;
        wire                        rs_req_valid;
        wire [ADDR_WIDTH + 7 : 0]   rs_req_in;
        wire [ADDR_WIDTH + 7 : 0]   rs_req_out;

        M_AXI_gmem_m_axi_reg_slice #(
            .DATA_WIDTH     (ADDR_WIDTH + 8)
        ) rs_req (
            .clk            (clk),
            .reset          (reset),
            .s_data         (rs_req_in),
            .s_valid        (rs_req_valid),
            .s_ready        (rs_req_ready),
            .m_data         (rs_req_out),
            .m_valid        (out_BUS_AWVALID),
            .m_ready        (in_BUS_AWREADY));

        wire  [DATA_WIDTH + DATA_WIDTH/8 : 0]   data_in;
        wire  [DATA_WIDTH + DATA_WIDTH/8 : 0]   data_out;
        wire  [ADDR_WIDTH + 7 : 0]              req_in;
        reg                                     req_en;
        wire                                    data_en;
        wire                                    fifo_valid;
        wire                                    read_fifo;
        wire                                    req_fifo_valid;
        wire                                    read_req;
        wire                                    data_push;
        wire                                    data_pop;
        reg                                     flying_req;
        reg   [CNT_WIDTH-1 : 0]                 last_cnt;

        //AW Channel
        assign req_in   = {in_TOP_AWLEN, in_TOP_AWADDR};
        assign out_BUS_AWADDR = rs_req_out[ADDR_WIDTH-1 : 0];
        assign out_BUS_AWLEN  = rs_req_out[ADDR_WIDTH+7 : ADDR_WIDTH];
        assign rs_req_valid = req_fifo_valid & req_en;

        assign read_req      = rs_req_ready & req_en;

        always @(*)
        begin
            if (~flying_req & data_en)
                req_en <= 1;
            else if (flying_req & (out_BUS_WLAST & data_pop) & (last_cnt[CNT_WIDTH-1:1] != 0))
                req_en <= 1;
            else
                req_en <= 0;
        end

        always @(posedge clk)
        begin
            if (reset)
                flying_req <= 0;
            else if (clk_en) begin
                if (rs_req_valid & rs_req_ready)
                    flying_req <= 1;
                else if (out_BUS_WLAST & data_pop)
                    flying_req <= 0;
            end
        end

        M_AXI_gmem_m_axi_fifo #(
            .DATA_WIDTH     (ADDR_WIDTH + 8),
            .ADDR_WIDTH     (log2(MAXREQS)),
            .DEPTH          (MAXREQS)
        ) req_fifo (
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .if_full_n      (out_TOP_AWREADY),
            .if_write       (in_TOP_AWVALID),
            .if_din         (req_in),
            .if_empty_n     (req_fifo_valid),
            .if_read        (read_req),
            .if_dout        (rs_req_in),
            .if_num_data_valid());

        //W Channel
        assign data_in  = {in_TOP_WLAST, in_TOP_WSTRB, in_TOP_WDATA};
        assign out_BUS_WDATA = data_out[DATA_WIDTH-1 : 0];
        assign out_BUS_WSTRB = data_out[DATA_WIDTH+DATA_WIDTH/8-1 : DATA_WIDTH];
        assign out_BUS_WLAST = data_out[DATA_WIDTH+DATA_WIDTH/8];
        assign out_BUS_WVALID = fifo_valid & data_en & flying_req;

        assign data_en   = last_cnt != 0;
        assign data_push = in_TOP_WVALID & out_TOP_WREADY;
        assign data_pop  = fifo_valid & read_fifo;
        assign read_fifo = in_BUS_WREADY & data_en & flying_req;

        always @(posedge clk)
        begin
            if (reset)
                last_cnt <= 0;
            else if (clk_en) begin
                if ((in_TOP_WLAST & data_push) && ~(out_BUS_WLAST & data_pop))
                    last_cnt <= last_cnt + 1;
                else if (~(in_TOP_WLAST & data_push) && (out_BUS_WLAST & data_pop))
                    last_cnt <= last_cnt - 1;
            end
        end
            
        M_AXI_gmem_m_axi_fifo #(
            .DATA_WIDTH     (DATA_WIDTH + DATA_WIDTH/8 + 1),
            .ADDR_WIDTH     (log2(DEPTH)),
            .DEPTH          (DEPTH)
        ) data_fifo (
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .if_full_n      (out_TOP_WREADY),
            .if_write       (in_TOP_WVALID),
            .if_din         (data_in),
            .if_empty_n     (fifo_valid),
            .if_read        (read_fifo),
            .if_dout        (data_out),
            .if_num_data_valid());

        end
    endgenerate

endmodule



module M_AXI_gmem_m_axi_reg_slice
#(parameter
    DATA_WIDTH = 8
) (
    // system signals
    input  wire                  clk,
    input  wire                  reset,
    // slave side
    input  wire [DATA_WIDTH-1:0] s_data,
    input  wire                  s_valid,
    output wire                  s_ready,
    // master side
    output wire [DATA_WIDTH-1:0] m_data,
    output wire                  m_valid,
    input  wire                  m_ready);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DATA_WIDTH-1:0] data_p1;
    reg  [DATA_WIDTH-1:0] data_p2;
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          s_ready_t;
    reg  [1:0]   state;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign s_ready = s_ready_t;
    assign m_data  = data_p1;
    assign m_valid = state[0];

    assign load_p1 = (state == ZERO && s_valid) ||
                    (state == ONE && s_valid && m_ready) ||
                    (state == TWO && m_ready);
    assign load_p2 = s_valid & s_ready;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= s_data;
        end
    end

    // data_p2
    always @(posedge clk) begin
        if (load_p2) data_p2 <= s_data;
    end

    // s_ready_t
    always @(posedge clk) begin
        if (reset)
            s_ready_t <= 1'b0;
        else if (state == ZERO)
            s_ready_t <= 1'b1;
        else if (state == ONE && next == TWO)
            s_ready_t <= 1'b0;
        else if (state == TWO && next == ONE)
            s_ready_t <= 1'b1;
    end

    // state
    always @(posedge clk) begin
        if (reset)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (s_valid & s_ready)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~s_valid & m_ready)
                    next = ZERO;
                else if (s_valid & ~m_ready)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (m_ready)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule

module M_AXI_gmem_m_axi_fifo
#(parameter
    MEM_STYLE   = "shiftreg",
    DATA_WIDTH = 32,
    ADDR_WIDTH = 5,
    DEPTH      = 32
) (
    // system signal
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  clk_en,

    // write
    output wire                  if_full_n,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout,
    output wire [ADDR_WIDTH:0]   if_num_data_valid);

//------------------------Local signal-------------------

    wire                  push;
    wire                  pop;
    reg                   full_n = 1'b1;
    reg                   empty_n = 1'b0;
    reg                   dout_vld = 1'b0;
    reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;

//------------------------Instantiation------------------
    generate 
    if ((MEM_STYLE == "shiftreg") || (DEPTH == 1)) begin
        reg  [ADDR_WIDTH-1:0] raddr = 1'b0;

        M_AXI_gmem_m_axi_srl
        #(  .DATA_WIDTH     (DATA_WIDTH),
            .ADDR_WIDTH     (ADDR_WIDTH),
            .DEPTH          (DEPTH))
        U_fifo_srl(
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .we             (push),
            .din            (if_din),
            .raddr          (raddr),
            .re             (pop),
            .dout           (if_dout)
        );

        // raddr
        always @(posedge clk) begin
            if (reset == 1'b1)
                raddr <= 1'b0;
            else if (clk_en) begin
                if (push & ~pop & empty_n)
                    raddr <= raddr + 1'b1;
                else if (~push & pop && raddr != 0)
                    raddr <= raddr - 1'b1;
            end
        end

    end else begin
        reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
        reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
        wire [ADDR_WIDTH-1:0] wnext;
        wire [ADDR_WIDTH-1:0] rnext;

        M_AXI_gmem_m_axi_mem
        #(  .MEM_STYLE      (MEM_STYLE),
            .DATA_WIDTH     (DATA_WIDTH),
            .ADDR_WIDTH     (ADDR_WIDTH),
            .DEPTH          (DEPTH))
        U_fifo_mem(
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .we             (push),
            .waddr          (waddr),
            .din            (if_din),
            .raddr          (rnext),
            .re             (pop),
            .dout           (if_dout)
        );

        assign wnext =  !push                ? waddr :
                        (waddr == DEPTH - 2) ? 1'b0  :
                        waddr + 1'b1;
        assign rnext =  !pop                 ? raddr :
                        (raddr == DEPTH - 2) ? 1'b0  :
                        raddr + 1'b1;

        // waddr
        always @(posedge clk) begin
            if (reset == 1'b1)
                waddr <= 1'b0;
            else if (clk_en)
                waddr <= wnext;
        end

        // raddr
        always @(posedge clk) begin
            if (reset == 1'b1)
                raddr <= 1'b0;
            else if (clk_en)
                raddr <= rnext;
        end
    end
    endgenerate

//------------------------Body---------------------------
    assign if_num_data_valid = dout_vld ? mOutPtr + 1'b1 : 'b0;

    generate if (DEPTH == 1) begin
        assign if_full_n  = !dout_vld;
        assign if_empty_n = dout_vld;
        assign push = !dout_vld & if_write;
        assign pop  = !dout_vld & if_write;
    
    end else begin

        assign if_full_n  = full_n;
        assign if_empty_n = dout_vld;
        assign push = full_n & if_write;
        assign pop  = empty_n & (if_read | ~dout_vld);

        // mOutPtr
        always @(posedge clk) begin
            if (reset == 1'b1)
                mOutPtr <= 'b0;
            else if (clk_en)
                if (push & ~pop)
                    mOutPtr <= mOutPtr + 1'b1;
                else if (~push & pop)
                    mOutPtr <= mOutPtr - 1'b1;
        end

        // full_n
        always @(posedge clk) begin
            if (reset == 1'b1)
                full_n <= 1'b1;
            else if (clk_en)
                if (push & ~pop)
                    full_n <= (mOutPtr != DEPTH - 2);
                else if (~push & pop)
                    full_n <= 1'b1;
        end

        // empty_n
        always @(posedge clk)
        begin
            if (reset)
                empty_n <= 1'b0;
            else if (clk_en) begin
                if (push & ~pop)
                    empty_n <= 1'b1;
                else if (~push & pop)
                    empty_n <= (mOutPtr != 1'b1);
            end
        end
    end
    endgenerate

    // dout_vld
    always @(posedge clk) begin
        if (reset == 1'b1)
            dout_vld <= 1'b0;
        else if (clk_en)
            if (pop)
                dout_vld <= 1'b1;
            else if (if_read)
                dout_vld <= 1'b0;
    end

endmodule

module M_AXI_gmem_m_axi_srl
#(parameter
        DATA_WIDTH  = 32,
        ADDR_WIDTH  = 6,
        DEPTH       = 63
    )(
        input  wire                  clk,
        input  wire                  reset,
        input  wire                  clk_en,
        input  wire                  we,
        input  wire [DATA_WIDTH-1:0] din,
        input  wire [ADDR_WIDTH-1:0] raddr,
        input  wire                  re,
        output reg  [DATA_WIDTH-1:0] dout
    );

    generate
    if (DEPTH > 1) begin
        reg  [DATA_WIDTH-1:0] mem[0:DEPTH-2];

        integer i;
        always @(posedge clk)
        begin
            if (clk_en & we) begin
                for (i = 0; i < DEPTH - 2; i = i + 1) begin
                    mem[i+1] <= mem[i];
                end
                mem[0] <= din;
            end
        end

        always @(posedge clk)
        begin
            if (reset)
                dout <= 0;
            else if (clk_en & re) begin
                dout <= mem[raddr];
            end
        end
    end
    else begin
        always @(posedge clk)
        begin
            if (reset)
                dout <= 0;
            else if (clk_en & we) begin
                dout <= din;
            end
        end
    end
    endgenerate

endmodule

module M_AXI_gmem_m_axi_mem
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 6,
    DEPTH       = 63
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  clk_en,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  re,
    output reg  [DATA_WIDTH-1:0] dout);

    (* ram_style = MEM_STYLE, rw_addr_collision = "yes" *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-2];
    reg  [ADDR_WIDTH-1:0] raddr_reg;

    //write to ram
    always @(posedge clk) begin
        if (clk_en & we)
            mem[waddr] <= din;
    end

    //buffer the raddr
    always @(posedge clk) begin
        if (clk_en)
            raddr_reg <= raddr;
    end

    //read from ram
    always @(posedge clk) begin
        if (reset)
            dout <= 0;
        else if (clk_en & re)
            dout <= mem[raddr_reg];
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_read_w (
        l,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_decoder_w,
        memory_cls_w,
        wq_stream_TDATA,
        ws1_stream_TDATA,
        ws2_stream_TDATA,
        ap_clk,
        ap_rst,
        l_ap_vld,
        memory_decoder_w_ap_vld,
        memory_cls_w_ap_vld,
        ap_start,
        wq_stream_TVALID,
        wq_stream_TREADY,
        ap_done,
        ws1_stream_TVALID,
        ws1_stream_TREADY,
        ws2_stream_TVALID,
        ws2_stream_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] l;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_decoder_w;
input  [63:0] memory_cls_w;
output  [319:0] wq_stream_TDATA;
output  [23:0] ws1_stream_TDATA;
output  [23:0] ws2_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   l_ap_vld;
input   memory_decoder_w_ap_vld;
input   memory_cls_w_ap_vld;
input   ap_start;
output   wq_stream_TVALID;
input   wq_stream_TREADY;
output   ap_done;
output   ws1_stream_TVALID;
input   ws1_stream_TREADY;
output   ws2_stream_TVALID;
input   ws2_stream_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    weight_producer_U0_ap_start;
wire    weight_producer_U0_ap_done;
wire    weight_producer_U0_ap_continue;
wire    weight_producer_U0_ap_idle;
wire    weight_producer_U0_ap_ready;
wire    weight_producer_U0_start_out;
wire    weight_producer_U0_start_write;
wire    weight_producer_U0_m_axi_gmem_0_AWVALID;
wire   [63:0] weight_producer_U0_m_axi_gmem_0_AWADDR;
wire   [0:0] weight_producer_U0_m_axi_gmem_0_AWID;
wire   [31:0] weight_producer_U0_m_axi_gmem_0_AWLEN;
wire   [2:0] weight_producer_U0_m_axi_gmem_0_AWSIZE;
wire   [1:0] weight_producer_U0_m_axi_gmem_0_AWBURST;
wire   [1:0] weight_producer_U0_m_axi_gmem_0_AWLOCK;
wire   [3:0] weight_producer_U0_m_axi_gmem_0_AWCACHE;
wire   [2:0] weight_producer_U0_m_axi_gmem_0_AWPROT;
wire   [3:0] weight_producer_U0_m_axi_gmem_0_AWQOS;
wire   [3:0] weight_producer_U0_m_axi_gmem_0_AWREGION;
wire   [0:0] weight_producer_U0_m_axi_gmem_0_AWUSER;
wire    weight_producer_U0_m_axi_gmem_0_WVALID;
wire   [255:0] weight_producer_U0_m_axi_gmem_0_WDATA;
wire   [31:0] weight_producer_U0_m_axi_gmem_0_WSTRB;
wire    weight_producer_U0_m_axi_gmem_0_WLAST;
wire   [0:0] weight_producer_U0_m_axi_gmem_0_WID;
wire   [0:0] weight_producer_U0_m_axi_gmem_0_WUSER;
wire    weight_producer_U0_m_axi_gmem_0_ARVALID;
wire   [63:0] weight_producer_U0_m_axi_gmem_0_ARADDR;
wire   [0:0] weight_producer_U0_m_axi_gmem_0_ARID;
wire   [31:0] weight_producer_U0_m_axi_gmem_0_ARLEN;
wire   [2:0] weight_producer_U0_m_axi_gmem_0_ARSIZE;
wire   [1:0] weight_producer_U0_m_axi_gmem_0_ARBURST;
wire   [1:0] weight_producer_U0_m_axi_gmem_0_ARLOCK;
wire   [3:0] weight_producer_U0_m_axi_gmem_0_ARCACHE;
wire   [2:0] weight_producer_U0_m_axi_gmem_0_ARPROT;
wire   [3:0] weight_producer_U0_m_axi_gmem_0_ARQOS;
wire   [3:0] weight_producer_U0_m_axi_gmem_0_ARREGION;
wire   [0:0] weight_producer_U0_m_axi_gmem_0_ARUSER;
wire    weight_producer_U0_m_axi_gmem_0_RREADY;
wire    weight_producer_U0_m_axi_gmem_0_BREADY;
wire   [255:0] weight_producer_U0_mem_stream_din;
wire    weight_producer_U0_mem_stream_write;
wire   [31:0] weight_producer_U0_l_c4_din;
wire    weight_producer_U0_l_c4_write;
wire    weight_distributor_U0_ap_start;
wire    weight_distributor_U0_start_full_n;
wire    weight_distributor_U0_ap_done;
wire    weight_distributor_U0_ap_continue;
wire    weight_distributor_U0_ap_idle;
wire    weight_distributor_U0_ap_ready;
wire    weight_distributor_U0_start_out;
wire    weight_distributor_U0_start_write;
wire    weight_distributor_U0_l_read;
wire    weight_distributor_U0_mem_stream_read;
wire   [255:0] weight_distributor_U0_wq_queue_din;
wire    weight_distributor_U0_wq_queue_write;
wire   [255:0] weight_distributor_U0_ws_queue_din;
wire    weight_distributor_U0_ws_queue_write;
wire   [31:0] weight_distributor_U0_l_c1_din;
wire    weight_distributor_U0_l_c1_write;
wire   [31:0] weight_distributor_U0_l_c3_din;
wire    weight_distributor_U0_l_c3_write;
wire    compose_wq_stage1_U0_ap_start;
wire    compose_wq_stage1_U0_ap_done;
wire    compose_wq_stage1_U0_ap_continue;
wire    compose_wq_stage1_U0_ap_idle;
wire    compose_wq_stage1_U0_ap_ready;
wire    compose_wq_stage1_U0_start_out;
wire    compose_wq_stage1_U0_start_write;
wire    compose_wq_stage1_U0_l_read;
wire    compose_wq_stage1_U0_wq_queue_read;
wire   [1279:0] compose_wq_stage1_U0_wq_pack_stream_din;
wire    compose_wq_stage1_U0_wq_pack_stream_write;
wire   [31:0] compose_wq_stage1_U0_l_c2_din;
wire    compose_wq_stage1_U0_l_c2_write;
wire    compose_wq_stage2_U0_ap_start;
wire    compose_wq_stage2_U0_ap_done;
wire    compose_wq_stage2_U0_ap_continue;
wire    compose_wq_stage2_U0_ap_idle;
wire    compose_wq_stage2_U0_ap_ready;
wire    compose_wq_stage2_U0_l_read;
wire    compose_wq_stage2_U0_wq_pack_stream_read;
wire   [319:0] compose_wq_stage2_U0_wq_stream_TDATA;
wire    compose_wq_stage2_U0_wq_stream_TVALID;
wire    ap_sync_continue;
wire    compose_ws_stage1_U0_ap_start;
wire    compose_ws_stage1_U0_ap_done;
wire    compose_ws_stage1_U0_ap_continue;
wire    compose_ws_stage1_U0_ap_idle;
wire    compose_ws_stage1_U0_ap_ready;
wire    compose_ws_stage1_U0_start_out;
wire    compose_ws_stage1_U0_start_write;
wire    compose_ws_stage1_U0_l_read;
wire    compose_ws_stage1_U0_ws_queue_read;
wire   [767:0] compose_ws_stage1_U0_ws_pack_stream_din;
wire    compose_ws_stage1_U0_ws_pack_stream_write;
wire   [31:0] compose_ws_stage1_U0_l_c_din;
wire    compose_ws_stage1_U0_l_c_write;
wire    compose_ws_stage2_U0_ap_start;
wire    compose_ws_stage2_U0_ap_done;
wire    compose_ws_stage2_U0_ap_continue;
wire    compose_ws_stage2_U0_ap_idle;
wire    compose_ws_stage2_U0_ap_ready;
wire    compose_ws_stage2_U0_l_read;
wire    compose_ws_stage2_U0_ws_pack_stream_read;
wire   [23:0] compose_ws_stage2_U0_ws1_stream_TDATA;
wire    compose_ws_stage2_U0_ws1_stream_TVALID;
wire   [23:0] compose_ws_stage2_U0_ws2_stream_TDATA;
wire    compose_ws_stage2_U0_ws2_stream_TVALID;
wire    mem_stream_full_n;
wire   [255:0] mem_stream_dout;
wire    mem_stream_empty_n;
wire   [2:0] mem_stream_num_data_valid;
wire   [2:0] mem_stream_fifo_cap;
wire    l_c4_full_n;
wire   [31:0] l_c4_dout;
wire    l_c4_empty_n;
wire   [2:0] l_c4_num_data_valid;
wire   [2:0] l_c4_fifo_cap;
wire    wq_queue_full_n;
wire   [255:0] wq_queue_dout;
wire    wq_queue_empty_n;
wire   [2:0] wq_queue_num_data_valid;
wire   [2:0] wq_queue_fifo_cap;
wire    ws_queue_full_n;
wire   [255:0] ws_queue_dout;
wire    ws_queue_empty_n;
wire   [2:0] ws_queue_num_data_valid;
wire   [2:0] ws_queue_fifo_cap;
wire    l_c1_full_n;
wire   [31:0] l_c1_dout;
wire    l_c1_empty_n;
wire   [2:0] l_c1_num_data_valid;
wire   [2:0] l_c1_fifo_cap;
wire    l_c3_full_n;
wire   [31:0] l_c3_dout;
wire    l_c3_empty_n;
wire   [2:0] l_c3_num_data_valid;
wire   [2:0] l_c3_fifo_cap;
wire    wq_pack_stream_full_n;
wire   [1279:0] wq_pack_stream_dout;
wire    wq_pack_stream_empty_n;
wire   [2:0] wq_pack_stream_num_data_valid;
wire   [2:0] wq_pack_stream_fifo_cap;
wire    l_c2_full_n;
wire   [31:0] l_c2_dout;
wire    l_c2_empty_n;
wire   [2:0] l_c2_num_data_valid;
wire   [2:0] l_c2_fifo_cap;
wire    ws_pack_stream_full_n;
wire   [767:0] ws_pack_stream_dout;
wire    ws_pack_stream_empty_n;
wire   [2:0] ws_pack_stream_num_data_valid;
wire   [2:0] ws_pack_stream_fifo_cap;
wire    l_c_full_n;
wire   [31:0] l_c_dout;
wire    l_c_empty_n;
wire   [2:0] l_c_num_data_valid;
wire   [2:0] l_c_fifo_cap;
wire    ap_sync_done;
wire   [0:0] start_for_weight_distributor_U0_din;
wire    start_for_weight_distributor_U0_full_n;
wire   [0:0] start_for_weight_distributor_U0_dout;
wire    start_for_weight_distributor_U0_empty_n;
wire   [0:0] start_for_compose_wq_stage1_U0_din;
wire    start_for_compose_wq_stage1_U0_full_n;
wire   [0:0] start_for_compose_wq_stage1_U0_dout;
wire    start_for_compose_wq_stage1_U0_empty_n;
wire   [0:0] start_for_compose_ws_stage1_U0_din;
wire    start_for_compose_ws_stage1_U0_full_n;
wire   [0:0] start_for_compose_ws_stage1_U0_dout;
wire    start_for_compose_ws_stage1_U0_empty_n;
wire   [0:0] start_for_compose_wq_stage2_U0_din;
wire    start_for_compose_wq_stage2_U0_full_n;
wire   [0:0] start_for_compose_wq_stage2_U0_dout;
wire    start_for_compose_wq_stage2_U0_empty_n;
wire   [0:0] start_for_compose_ws_stage2_U0_din;
wire    start_for_compose_ws_stage2_U0_full_n;
wire   [0:0] start_for_compose_ws_stage2_U0_dout;
wire    start_for_compose_ws_stage2_U0_empty_n;

M_AXI_weight_producer weight_producer_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(weight_producer_U0_ap_start),
    .start_full_n(start_for_weight_distributor_U0_full_n),
    .ap_done(weight_producer_U0_ap_done),
    .ap_continue(weight_producer_U0_ap_continue),
    .ap_idle(weight_producer_U0_ap_idle),
    .ap_ready(weight_producer_U0_ap_ready),
    .start_out(weight_producer_U0_start_out),
    .start_write(weight_producer_U0_start_write),
    .l(l),
    .m_axi_gmem_0_AWVALID(weight_producer_U0_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(weight_producer_U0_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(weight_producer_U0_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(weight_producer_U0_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(weight_producer_U0_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(weight_producer_U0_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(weight_producer_U0_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(weight_producer_U0_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(weight_producer_U0_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(weight_producer_U0_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(weight_producer_U0_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(weight_producer_U0_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(weight_producer_U0_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(weight_producer_U0_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(weight_producer_U0_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(weight_producer_U0_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(weight_producer_U0_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(weight_producer_U0_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(weight_producer_U0_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(m_axi_gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(weight_producer_U0_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(weight_producer_U0_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(weight_producer_U0_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(weight_producer_U0_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(weight_producer_U0_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(weight_producer_U0_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(weight_producer_U0_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(weight_producer_U0_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(weight_producer_U0_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(weight_producer_U0_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(weight_producer_U0_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(m_axi_gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(weight_producer_U0_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(m_axi_gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(m_axi_gmem_0_RLAST),
    .m_axi_gmem_0_RID(m_axi_gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(m_axi_gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(m_axi_gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(m_axi_gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(weight_producer_U0_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .memory_decoder_w(memory_decoder_w),
    .memory_cls_w(memory_cls_w),
    .mem_stream_din(weight_producer_U0_mem_stream_din),
    .mem_stream_full_n(mem_stream_full_n),
    .mem_stream_write(weight_producer_U0_mem_stream_write),
    .mem_stream_num_data_valid(mem_stream_num_data_valid),
    .mem_stream_fifo_cap(mem_stream_fifo_cap),
    .l_c4_din(weight_producer_U0_l_c4_din),
    .l_c4_full_n(l_c4_full_n),
    .l_c4_write(weight_producer_U0_l_c4_write),
    .l_c4_num_data_valid(l_c4_num_data_valid),
    .l_c4_fifo_cap(l_c4_fifo_cap)
);

M_AXI_weight_distributor weight_distributor_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(weight_distributor_U0_ap_start),
    .start_full_n(weight_distributor_U0_start_full_n),
    .ap_done(weight_distributor_U0_ap_done),
    .ap_continue(weight_distributor_U0_ap_continue),
    .ap_idle(weight_distributor_U0_ap_idle),
    .ap_ready(weight_distributor_U0_ap_ready),
    .start_out(weight_distributor_U0_start_out),
    .start_write(weight_distributor_U0_start_write),
    .l_dout(l_c4_dout),
    .l_empty_n(l_c4_empty_n),
    .l_read(weight_distributor_U0_l_read),
    .l_num_data_valid(l_c4_num_data_valid),
    .l_fifo_cap(l_c4_fifo_cap),
    .mem_stream_dout(mem_stream_dout),
    .mem_stream_empty_n(mem_stream_empty_n),
    .mem_stream_read(weight_distributor_U0_mem_stream_read),
    .mem_stream_num_data_valid(mem_stream_num_data_valid),
    .mem_stream_fifo_cap(mem_stream_fifo_cap),
    .wq_queue_din(weight_distributor_U0_wq_queue_din),
    .wq_queue_full_n(wq_queue_full_n),
    .wq_queue_write(weight_distributor_U0_wq_queue_write),
    .wq_queue_num_data_valid(wq_queue_num_data_valid),
    .wq_queue_fifo_cap(wq_queue_fifo_cap),
    .ws_queue_din(weight_distributor_U0_ws_queue_din),
    .ws_queue_full_n(ws_queue_full_n),
    .ws_queue_write(weight_distributor_U0_ws_queue_write),
    .ws_queue_num_data_valid(ws_queue_num_data_valid),
    .ws_queue_fifo_cap(ws_queue_fifo_cap),
    .l_c1_din(weight_distributor_U0_l_c1_din),
    .l_c1_full_n(l_c1_full_n),
    .l_c1_write(weight_distributor_U0_l_c1_write),
    .l_c1_num_data_valid(l_c1_num_data_valid),
    .l_c1_fifo_cap(l_c1_fifo_cap),
    .l_c3_din(weight_distributor_U0_l_c3_din),
    .l_c3_full_n(l_c3_full_n),
    .l_c3_write(weight_distributor_U0_l_c3_write),
    .l_c3_num_data_valid(l_c3_num_data_valid),
    .l_c3_fifo_cap(l_c3_fifo_cap)
);

M_AXI_compose_wq_stage1 compose_wq_stage1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compose_wq_stage1_U0_ap_start),
    .start_full_n(start_for_compose_wq_stage2_U0_full_n),
    .ap_done(compose_wq_stage1_U0_ap_done),
    .ap_continue(compose_wq_stage1_U0_ap_continue),
    .ap_idle(compose_wq_stage1_U0_ap_idle),
    .ap_ready(compose_wq_stage1_U0_ap_ready),
    .start_out(compose_wq_stage1_U0_start_out),
    .start_write(compose_wq_stage1_U0_start_write),
    .l_dout(l_c3_dout),
    .l_empty_n(l_c3_empty_n),
    .l_read(compose_wq_stage1_U0_l_read),
    .l_num_data_valid(l_c3_num_data_valid),
    .l_fifo_cap(l_c3_fifo_cap),
    .wq_queue_dout(wq_queue_dout),
    .wq_queue_empty_n(wq_queue_empty_n),
    .wq_queue_read(compose_wq_stage1_U0_wq_queue_read),
    .wq_queue_num_data_valid(wq_queue_num_data_valid),
    .wq_queue_fifo_cap(wq_queue_fifo_cap),
    .wq_pack_stream_din(compose_wq_stage1_U0_wq_pack_stream_din),
    .wq_pack_stream_full_n(wq_pack_stream_full_n),
    .wq_pack_stream_write(compose_wq_stage1_U0_wq_pack_stream_write),
    .wq_pack_stream_num_data_valid(wq_pack_stream_num_data_valid),
    .wq_pack_stream_fifo_cap(wq_pack_stream_fifo_cap),
    .l_c2_din(compose_wq_stage1_U0_l_c2_din),
    .l_c2_full_n(l_c2_full_n),
    .l_c2_write(compose_wq_stage1_U0_l_c2_write),
    .l_c2_num_data_valid(l_c2_num_data_valid),
    .l_c2_fifo_cap(l_c2_fifo_cap)
);

M_AXI_compose_wq_stage2 compose_wq_stage2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compose_wq_stage2_U0_ap_start),
    .ap_done(compose_wq_stage2_U0_ap_done),
    .ap_continue(compose_wq_stage2_U0_ap_continue),
    .ap_idle(compose_wq_stage2_U0_ap_idle),
    .ap_ready(compose_wq_stage2_U0_ap_ready),
    .l_dout(l_c2_dout),
    .l_empty_n(l_c2_empty_n),
    .l_read(compose_wq_stage2_U0_l_read),
    .l_num_data_valid(l_c2_num_data_valid),
    .l_fifo_cap(l_c2_fifo_cap),
    .wq_pack_stream_dout(wq_pack_stream_dout),
    .wq_pack_stream_empty_n(wq_pack_stream_empty_n),
    .wq_pack_stream_read(compose_wq_stage2_U0_wq_pack_stream_read),
    .wq_pack_stream_num_data_valid(wq_pack_stream_num_data_valid),
    .wq_pack_stream_fifo_cap(wq_pack_stream_fifo_cap),
    .wq_stream_TDATA(compose_wq_stage2_U0_wq_stream_TDATA),
    .wq_stream_TVALID(compose_wq_stage2_U0_wq_stream_TVALID),
    .wq_stream_TREADY(wq_stream_TREADY)
);

M_AXI_compose_ws_stage1 compose_ws_stage1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compose_ws_stage1_U0_ap_start),
    .start_full_n(start_for_compose_ws_stage2_U0_full_n),
    .ap_done(compose_ws_stage1_U0_ap_done),
    .ap_continue(compose_ws_stage1_U0_ap_continue),
    .ap_idle(compose_ws_stage1_U0_ap_idle),
    .ap_ready(compose_ws_stage1_U0_ap_ready),
    .start_out(compose_ws_stage1_U0_start_out),
    .start_write(compose_ws_stage1_U0_start_write),
    .l_dout(l_c1_dout),
    .l_empty_n(l_c1_empty_n),
    .l_read(compose_ws_stage1_U0_l_read),
    .l_num_data_valid(l_c1_num_data_valid),
    .l_fifo_cap(l_c1_fifo_cap),
    .ws_queue_dout(ws_queue_dout),
    .ws_queue_empty_n(ws_queue_empty_n),
    .ws_queue_read(compose_ws_stage1_U0_ws_queue_read),
    .ws_queue_num_data_valid(ws_queue_num_data_valid),
    .ws_queue_fifo_cap(ws_queue_fifo_cap),
    .ws_pack_stream_din(compose_ws_stage1_U0_ws_pack_stream_din),
    .ws_pack_stream_full_n(ws_pack_stream_full_n),
    .ws_pack_stream_write(compose_ws_stage1_U0_ws_pack_stream_write),
    .ws_pack_stream_num_data_valid(ws_pack_stream_num_data_valid),
    .ws_pack_stream_fifo_cap(ws_pack_stream_fifo_cap),
    .l_c_din(compose_ws_stage1_U0_l_c_din),
    .l_c_full_n(l_c_full_n),
    .l_c_write(compose_ws_stage1_U0_l_c_write),
    .l_c_num_data_valid(l_c_num_data_valid),
    .l_c_fifo_cap(l_c_fifo_cap)
);

M_AXI_compose_ws_stage2 compose_ws_stage2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compose_ws_stage2_U0_ap_start),
    .ap_done(compose_ws_stage2_U0_ap_done),
    .ap_continue(compose_ws_stage2_U0_ap_continue),
    .ap_idle(compose_ws_stage2_U0_ap_idle),
    .ap_ready(compose_ws_stage2_U0_ap_ready),
    .l_dout(l_c_dout),
    .l_empty_n(l_c_empty_n),
    .l_read(compose_ws_stage2_U0_l_read),
    .l_num_data_valid(l_c_num_data_valid),
    .l_fifo_cap(l_c_fifo_cap),
    .ws_pack_stream_dout(ws_pack_stream_dout),
    .ws_pack_stream_empty_n(ws_pack_stream_empty_n),
    .ws_pack_stream_read(compose_ws_stage2_U0_ws_pack_stream_read),
    .ws_pack_stream_num_data_valid(ws_pack_stream_num_data_valid),
    .ws_pack_stream_fifo_cap(ws_pack_stream_fifo_cap),
    .ws1_stream_TDATA(compose_ws_stage2_U0_ws1_stream_TDATA),
    .ws1_stream_TVALID(compose_ws_stage2_U0_ws1_stream_TVALID),
    .ws1_stream_TREADY(ws1_stream_TREADY),
    .ws2_stream_TDATA(compose_ws_stage2_U0_ws2_stream_TDATA),
    .ws2_stream_TVALID(compose_ws_stage2_U0_ws2_stream_TVALID),
    .ws2_stream_TREADY(ws2_stream_TREADY)
);

M_AXI_fifo_w256_d2_S mem_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(weight_producer_U0_mem_stream_din),
    .if_full_n(mem_stream_full_n),
    .if_write(weight_producer_U0_mem_stream_write),
    .if_dout(mem_stream_dout),
    .if_empty_n(mem_stream_empty_n),
    .if_read(weight_distributor_U0_mem_stream_read),
    .if_num_data_valid(mem_stream_num_data_valid),
    .if_fifo_cap(mem_stream_fifo_cap)
);

M_AXI_fifo_w32_d2_S l_c4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(weight_producer_U0_l_c4_din),
    .if_full_n(l_c4_full_n),
    .if_write(weight_producer_U0_l_c4_write),
    .if_dout(l_c4_dout),
    .if_empty_n(l_c4_empty_n),
    .if_read(weight_distributor_U0_l_read),
    .if_num_data_valid(l_c4_num_data_valid),
    .if_fifo_cap(l_c4_fifo_cap)
);

M_AXI_fifo_w256_d2_S wq_queue_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(weight_distributor_U0_wq_queue_din),
    .if_full_n(wq_queue_full_n),
    .if_write(weight_distributor_U0_wq_queue_write),
    .if_dout(wq_queue_dout),
    .if_empty_n(wq_queue_empty_n),
    .if_read(compose_wq_stage1_U0_wq_queue_read),
    .if_num_data_valid(wq_queue_num_data_valid),
    .if_fifo_cap(wq_queue_fifo_cap)
);

M_AXI_fifo_w256_d2_S ws_queue_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(weight_distributor_U0_ws_queue_din),
    .if_full_n(ws_queue_full_n),
    .if_write(weight_distributor_U0_ws_queue_write),
    .if_dout(ws_queue_dout),
    .if_empty_n(ws_queue_empty_n),
    .if_read(compose_ws_stage1_U0_ws_queue_read),
    .if_num_data_valid(ws_queue_num_data_valid),
    .if_fifo_cap(ws_queue_fifo_cap)
);

M_AXI_fifo_w32_d2_S l_c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(weight_distributor_U0_l_c1_din),
    .if_full_n(l_c1_full_n),
    .if_write(weight_distributor_U0_l_c1_write),
    .if_dout(l_c1_dout),
    .if_empty_n(l_c1_empty_n),
    .if_read(compose_ws_stage1_U0_l_read),
    .if_num_data_valid(l_c1_num_data_valid),
    .if_fifo_cap(l_c1_fifo_cap)
);

M_AXI_fifo_w32_d2_S l_c3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(weight_distributor_U0_l_c3_din),
    .if_full_n(l_c3_full_n),
    .if_write(weight_distributor_U0_l_c3_write),
    .if_dout(l_c3_dout),
    .if_empty_n(l_c3_empty_n),
    .if_read(compose_wq_stage1_U0_l_read),
    .if_num_data_valid(l_c3_num_data_valid),
    .if_fifo_cap(l_c3_fifo_cap)
);

M_AXI_fifo_w1280_d2_S wq_pack_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(compose_wq_stage1_U0_wq_pack_stream_din),
    .if_full_n(wq_pack_stream_full_n),
    .if_write(compose_wq_stage1_U0_wq_pack_stream_write),
    .if_dout(wq_pack_stream_dout),
    .if_empty_n(wq_pack_stream_empty_n),
    .if_read(compose_wq_stage2_U0_wq_pack_stream_read),
    .if_num_data_valid(wq_pack_stream_num_data_valid),
    .if_fifo_cap(wq_pack_stream_fifo_cap)
);

M_AXI_fifo_w32_d2_S l_c2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(compose_wq_stage1_U0_l_c2_din),
    .if_full_n(l_c2_full_n),
    .if_write(compose_wq_stage1_U0_l_c2_write),
    .if_dout(l_c2_dout),
    .if_empty_n(l_c2_empty_n),
    .if_read(compose_wq_stage2_U0_l_read),
    .if_num_data_valid(l_c2_num_data_valid),
    .if_fifo_cap(l_c2_fifo_cap)
);

M_AXI_fifo_w768_d2_S ws_pack_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(compose_ws_stage1_U0_ws_pack_stream_din),
    .if_full_n(ws_pack_stream_full_n),
    .if_write(compose_ws_stage1_U0_ws_pack_stream_write),
    .if_dout(ws_pack_stream_dout),
    .if_empty_n(ws_pack_stream_empty_n),
    .if_read(compose_ws_stage2_U0_ws_pack_stream_read),
    .if_num_data_valid(ws_pack_stream_num_data_valid),
    .if_fifo_cap(ws_pack_stream_fifo_cap)
);

M_AXI_fifo_w32_d2_S l_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(compose_ws_stage1_U0_l_c_din),
    .if_full_n(l_c_full_n),
    .if_write(compose_ws_stage1_U0_l_c_write),
    .if_dout(l_c_dout),
    .if_empty_n(l_c_empty_n),
    .if_read(compose_ws_stage2_U0_l_read),
    .if_num_data_valid(l_c_num_data_valid),
    .if_fifo_cap(l_c_fifo_cap)
);

M_AXI_start_for_weight_distributor_U0 start_for_weight_distributor_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_weight_distributor_U0_din),
    .if_full_n(start_for_weight_distributor_U0_full_n),
    .if_write(weight_producer_U0_start_write),
    .if_dout(start_for_weight_distributor_U0_dout),
    .if_empty_n(start_for_weight_distributor_U0_empty_n),
    .if_read(weight_distributor_U0_ap_ready)
);

M_AXI_start_for_compose_wq_stage1_U0 start_for_compose_wq_stage1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compose_wq_stage1_U0_din),
    .if_full_n(start_for_compose_wq_stage1_U0_full_n),
    .if_write(weight_distributor_U0_start_write),
    .if_dout(start_for_compose_wq_stage1_U0_dout),
    .if_empty_n(start_for_compose_wq_stage1_U0_empty_n),
    .if_read(compose_wq_stage1_U0_ap_ready)
);

M_AXI_start_for_compose_ws_stage1_U0 start_for_compose_ws_stage1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compose_ws_stage1_U0_din),
    .if_full_n(start_for_compose_ws_stage1_U0_full_n),
    .if_write(weight_distributor_U0_start_write),
    .if_dout(start_for_compose_ws_stage1_U0_dout),
    .if_empty_n(start_for_compose_ws_stage1_U0_empty_n),
    .if_read(compose_ws_stage1_U0_ap_ready)
);

M_AXI_start_for_compose_wq_stage2_U0 start_for_compose_wq_stage2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compose_wq_stage2_U0_din),
    .if_full_n(start_for_compose_wq_stage2_U0_full_n),
    .if_write(compose_wq_stage1_U0_start_write),
    .if_dout(start_for_compose_wq_stage2_U0_dout),
    .if_empty_n(start_for_compose_wq_stage2_U0_empty_n),
    .if_read(compose_wq_stage2_U0_ap_ready)
);

M_AXI_start_for_compose_ws_stage2_U0 start_for_compose_ws_stage2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compose_ws_stage2_U0_din),
    .if_full_n(start_for_compose_ws_stage2_U0_full_n),
    .if_write(compose_ws_stage1_U0_start_write),
    .if_dout(start_for_compose_ws_stage2_U0_dout),
    .if_empty_n(start_for_compose_ws_stage2_U0_empty_n),
    .if_read(compose_ws_stage2_U0_ap_ready)
);

assign ap_done = ap_sync_done;

assign ap_idle = (weight_producer_U0_ap_idle & weight_distributor_U0_ap_idle & compose_ws_stage2_U0_ap_idle & compose_ws_stage1_U0_ap_idle & compose_wq_stage2_U0_ap_idle & compose_wq_stage1_U0_ap_idle);

assign ap_ready = weight_producer_U0_ap_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (compose_ws_stage2_U0_ap_done & compose_wq_stage2_U0_ap_done);

assign compose_wq_stage1_U0_ap_continue = 1'b1;

assign compose_wq_stage1_U0_ap_start = start_for_compose_wq_stage1_U0_empty_n;

assign compose_wq_stage2_U0_ap_continue = ap_sync_continue;

assign compose_wq_stage2_U0_ap_start = start_for_compose_wq_stage2_U0_empty_n;

assign compose_ws_stage1_U0_ap_continue = 1'b1;

assign compose_ws_stage1_U0_ap_start = start_for_compose_ws_stage1_U0_empty_n;

assign compose_ws_stage2_U0_ap_continue = ap_sync_continue;

assign compose_ws_stage2_U0_ap_start = start_for_compose_ws_stage2_U0_empty_n;

assign m_axi_gmem_0_ARADDR = weight_producer_U0_m_axi_gmem_0_ARADDR;

assign m_axi_gmem_0_ARBURST = weight_producer_U0_m_axi_gmem_0_ARBURST;

assign m_axi_gmem_0_ARCACHE = weight_producer_U0_m_axi_gmem_0_ARCACHE;

assign m_axi_gmem_0_ARID = weight_producer_U0_m_axi_gmem_0_ARID;

assign m_axi_gmem_0_ARLEN = weight_producer_U0_m_axi_gmem_0_ARLEN;

assign m_axi_gmem_0_ARLOCK = weight_producer_U0_m_axi_gmem_0_ARLOCK;

assign m_axi_gmem_0_ARPROT = weight_producer_U0_m_axi_gmem_0_ARPROT;

assign m_axi_gmem_0_ARQOS = weight_producer_U0_m_axi_gmem_0_ARQOS;

assign m_axi_gmem_0_ARREGION = weight_producer_U0_m_axi_gmem_0_ARREGION;

assign m_axi_gmem_0_ARSIZE = weight_producer_U0_m_axi_gmem_0_ARSIZE;

assign m_axi_gmem_0_ARUSER = weight_producer_U0_m_axi_gmem_0_ARUSER;

assign m_axi_gmem_0_ARVALID = weight_producer_U0_m_axi_gmem_0_ARVALID;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_RREADY = weight_producer_U0_m_axi_gmem_0_RREADY;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign start_for_compose_wq_stage1_U0_din = 1'b1;

assign start_for_compose_wq_stage2_U0_din = 1'b1;

assign start_for_compose_ws_stage1_U0_din = 1'b1;

assign start_for_compose_ws_stage2_U0_din = 1'b1;

assign start_for_weight_distributor_U0_din = 1'b1;

assign weight_distributor_U0_ap_continue = 1'b1;

assign weight_distributor_U0_ap_start = start_for_weight_distributor_U0_empty_n;

assign weight_distributor_U0_start_full_n = (start_for_compose_ws_stage1_U0_full_n & start_for_compose_wq_stage1_U0_full_n);

assign weight_producer_U0_ap_continue = 1'b1;

assign weight_producer_U0_ap_start = ap_start;

assign wq_stream_TDATA = compose_wq_stage2_U0_wq_stream_TDATA;

assign wq_stream_TVALID = compose_wq_stage2_U0_wq_stream_TVALID;

assign ws1_stream_TDATA = compose_ws_stage2_U0_ws1_stream_TDATA;

assign ws1_stream_TVALID = compose_ws_stage2_U0_ws1_stream_TVALID;

assign ws2_stream_TDATA = compose_ws_stage2_U0_ws2_stream_TDATA;

assign ws2_stream_TVALID = compose_ws_stage2_U0_ws2_stream_TVALID;

endmodule //M_AXI_read_w
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_read_x (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_decoder_x,
        x_stream_TDATA,
        x_stream_TVALID,
        x_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_decoder_x;
output  [207:0] x_stream_TDATA;
output   x_stream_TVALID;
input   x_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_ARVALID;
reg[63:0] m_axi_gmem_0_ARADDR;
reg[0:0] m_axi_gmem_0_ARID;
reg[31:0] m_axi_gmem_0_ARLEN;
reg[2:0] m_axi_gmem_0_ARSIZE;
reg[1:0] m_axi_gmem_0_ARBURST;
reg[1:0] m_axi_gmem_0_ARLOCK;
reg[3:0] m_axi_gmem_0_ARCACHE;
reg[2:0] m_axi_gmem_0_ARPROT;
reg[3:0] m_axi_gmem_0_ARQOS;
reg[3:0] m_axi_gmem_0_ARREGION;
reg[0:0] m_axi_gmem_0_ARUSER;
reg m_axi_gmem_0_RREADY;
reg[207:0] x_stream_TDATA;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [58:0] trunc_ln_reg_92;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_done;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_idle;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_ready;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWID;
wire   [31:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWUSER;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WVALID;
wire   [255:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WDATA;
wire   [31:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WSTRB;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WLAST;
wire   [0:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WID;
wire   [0:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WUSER;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARID;
wire   [31:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARUSER;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_RREADY;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_BREADY;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TREADY;
wire   [207:0] grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TDATA;
wire    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TVALID;
reg    grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start_reg;
wire    ap_CS_fsm_state10;
reg   [207:0] x_stream_TDATA_reg;
wire    ap_CS_fsm_state11;
wire  signed [63:0] sext_ln88_fu_82_p1;
wire   [63:0] add_ln88_fu_66_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 11'd1;
//#0 grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start_reg = 1'b0;
end

M_AXI_read_x_Pipeline_VITIS_LOOP_88_1 grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start),
    .ap_done(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_done),
    .ap_idle(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_idle),
    .ap_ready(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(m_axi_gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(m_axi_gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(m_axi_gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(m_axi_gmem_0_RLAST),
    .m_axi_gmem_0_RID(m_axi_gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(m_axi_gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(m_axi_gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(m_axi_gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .x_stream_TREADY(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TREADY),
    .x_stream_TDATA(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TDATA),
    .x_stream_TVALID(grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TVALID),
    .sext_ln88(trunc_ln_reg_92)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start_reg <= 1'b1;
        end else if ((grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_ready == 1'b1)) begin
            grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln_reg_92 <= {{add_ln88_fu_66_p2[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TVALID == 1'b1))) begin
        x_stream_TDATA_reg <= grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & (grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARADDR = sext_ln88_fu_82_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARADDR = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARADDR;
    end else begin
        m_axi_gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARBURST = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARBURST;
    end else begin
        m_axi_gmem_0_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARCACHE = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARCACHE;
    end else begin
        m_axi_gmem_0_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARID = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARID;
    end else begin
        m_axi_gmem_0_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARLEN = 64'd900;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARLEN = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARLEN;
    end else begin
        m_axi_gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARLOCK = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARLOCK;
    end else begin
        m_axi_gmem_0_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARPROT = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARPROT;
    end else begin
        m_axi_gmem_0_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARQOS = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARQOS;
    end else begin
        m_axi_gmem_0_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARREGION = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARREGION;
    end else begin
        m_axi_gmem_0_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARSIZE = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARSIZE;
    end else begin
        m_axi_gmem_0_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARUSER = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARUSER;
    end else begin
        m_axi_gmem_0_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_ARVALID = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_ARVALID;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_gmem_0_RREADY = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_m_axi_gmem_0_RREADY;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TVALID == 1'b1))) begin
        x_stream_TDATA = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TDATA;
    end else begin
        x_stream_TDATA = x_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln88_fu_66_p2 = ($signed(memory_decoder_x) + $signed(64'd18446744073709551488));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_ap_start_reg;

assign grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TREADY = (x_stream_TREADY & ap_CS_fsm_state11);

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign sext_ln88_fu_82_p1 = $signed(trunc_ln_reg_92);

assign x_stream_TVALID = grp_read_x_Pipeline_VITIS_LOOP_88_1_fu_57_x_stream_TVALID;

endmodule //M_AXI_read_x
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_read_x_Pipeline_VITIS_LOOP_88_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        x_stream_TREADY,
        x_stream_TDATA,
        x_stream_TVALID,
        sext_ln88
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input   x_stream_TREADY;
output  [207:0] x_stream_TDATA;
output   x_stream_TVALID;
input  [58:0] sext_ln88;

reg ap_idle;
reg m_axi_gmem_0_RREADY;
reg x_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln88_reg_251;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln88_reg_251_pp0_iter1_reg;
reg   [0:0] tmp_reg_255;
reg   [0:0] tmp_reg_255_pp0_iter1_reg;
reg    ap_predicate_op35_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln88_fu_122_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    x_stream_TDATA_blk_n;
reg    gmem_blk_n_R;
wire   [10:0] add_ln88_fu_136_p2;
reg   [10:0] add_ln88_reg_259;
wire   [25:0] trunc_ln95_fu_148_p1;
reg   [25:0] trunc_ln95_reg_264;
reg   [25:0] tmp_1_reg_269;
reg   [25:0] tmp_2_reg_274;
reg   [25:0] tmp_3_reg_279;
reg   [25:0] tmp_4_reg_284;
reg   [25:0] tmp_5_reg_289;
reg   [25:0] tmp_6_reg_294;
reg   [25:0] tmp_7_reg_299;
reg   [10:0] n_tile_fu_88;
reg   [10:0] ap_sig_allocacmp_n_tile_3;
wire    ap_loop_init;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 n_tile_fu_88 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        n_tile_fu_88 <= 11'd2044;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln88_reg_251 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        n_tile_fu_88 <= add_ln88_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln88_reg_259 <= add_ln88_fu_136_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln88_reg_251 <= icmp_ln88_fu_122_p2;
        tmp_reg_255 <= ap_sig_allocacmp_n_tile_3[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln88_reg_251_pp0_iter1_reg <= icmp_ln88_reg_251;
        tmp_1_reg_269 <= {{m_axi_gmem_0_RDATA[57:32]}};
        tmp_2_reg_274 <= {{m_axi_gmem_0_RDATA[89:64]}};
        tmp_3_reg_279 <= {{m_axi_gmem_0_RDATA[121:96]}};
        tmp_4_reg_284 <= {{m_axi_gmem_0_RDATA[153:128]}};
        tmp_5_reg_289 <= {{m_axi_gmem_0_RDATA[185:160]}};
        tmp_6_reg_294 <= {{m_axi_gmem_0_RDATA[217:192]}};
        tmp_7_reg_299 <= {{m_axi_gmem_0_RDATA[249:224]}};
        tmp_reg_255_pp0_iter1_reg <= tmp_reg_255;
        trunc_ln95_reg_264 <= trunc_ln95_fu_148_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln88_fu_122_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_tile_3 = 11'd2044;
    end else if (((icmp_ln88_reg_251 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_n_tile_3 = add_ln88_reg_259;
    end else begin
        ap_sig_allocacmp_n_tile_3 = n_tile_fu_88;
    end
end

always @ (*) begin
    if (((icmp_ln88_reg_251 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln88_reg_251 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_predicate_op35_write_state3 == 1'b1))) begin
        x_stream_TDATA_blk_n = x_stream_TREADY;
    end else begin
        x_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (ap_predicate_op35_write_state3 == 1'b1))) begin
        x_stream_TVALID = 1'b1;
    end else begin
        x_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage0_iter2) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln88_reg_251_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln88_fu_136_p2 = (ap_sig_allocacmp_n_tile_3 + 11'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln88_reg_251 == 1'd0) & (m_axi_gmem_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op35_write_state3 == 1'b1) & (x_stream_TREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op35_write_state3 = ((tmp_reg_255_pp0_iter1_reg == 1'd0) & (icmp_ln88_reg_251_pp0_iter1_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln88_fu_122_p2 = ((ap_sig_allocacmp_n_tile_3 == 11'd896) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign trunc_ln95_fu_148_p1 = m_axi_gmem_0_RDATA[25:0];

assign x_stream_TDATA = {{{{{{{{tmp_7_reg_299}, {tmp_6_reg_294}}, {tmp_5_reg_289}}, {tmp_4_reg_284}}, {tmp_3_reg_279}}, {tmp_2_reg_274}}, {tmp_1_reg_269}}, {trunc_ln95_reg_264}};

endmodule //M_AXI_read_x_Pipeline_VITIS_LOOP_88_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module M_AXI_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_start_for_compose_wq_stage1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_start_for_compose_wq_stage1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_start_for_compose_wq_stage1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_start_for_compose_wq_stage1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_start_for_compose_wq_stage2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_start_for_compose_wq_stage2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_start_for_compose_wq_stage2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_start_for_compose_wq_stage2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_start_for_compose_ws_stage1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_start_for_compose_ws_stage1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_start_for_compose_ws_stage1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_start_for_compose_ws_stage1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_start_for_compose_ws_stage2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_start_for_compose_ws_stage2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_start_for_compose_ws_stage2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_start_for_compose_ws_stage2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module M_AXI_start_for_weight_distributor_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    M_AXI_start_for_weight_distributor_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_M_AXI_start_for_weight_distributor_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module M_AXI_start_for_weight_distributor_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_weight_distributor (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l_dout,
        l_empty_n,
        l_read,
        l_num_data_valid,
        l_fifo_cap,
        mem_stream_dout,
        mem_stream_empty_n,
        mem_stream_read,
        mem_stream_num_data_valid,
        mem_stream_fifo_cap,
        wq_queue_din,
        wq_queue_full_n,
        wq_queue_write,
        wq_queue_num_data_valid,
        wq_queue_fifo_cap,
        ws_queue_din,
        ws_queue_full_n,
        ws_queue_write,
        ws_queue_num_data_valid,
        ws_queue_fifo_cap,
        l_c1_din,
        l_c1_full_n,
        l_c1_write,
        l_c1_num_data_valid,
        l_c1_fifo_cap,
        l_c3_din,
        l_c3_full_n,
        l_c3_write,
        l_c3_num_data_valid,
        l_c3_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] l_dout;
input   l_empty_n;
output   l_read;
input  [2:0] l_num_data_valid;
input  [2:0] l_fifo_cap;
input  [255:0] mem_stream_dout;
input   mem_stream_empty_n;
output   mem_stream_read;
input  [2:0] mem_stream_num_data_valid;
input  [2:0] mem_stream_fifo_cap;
output  [255:0] wq_queue_din;
input   wq_queue_full_n;
output   wq_queue_write;
input  [2:0] wq_queue_num_data_valid;
input  [2:0] wq_queue_fifo_cap;
output  [255:0] ws_queue_din;
input   ws_queue_full_n;
output   ws_queue_write;
input  [2:0] ws_queue_num_data_valid;
input  [2:0] ws_queue_fifo_cap;
output  [31:0] l_c1_din;
input   l_c1_full_n;
output   l_c1_write;
input  [2:0] l_c1_num_data_valid;
input  [2:0] l_c1_fifo_cap;
output  [31:0] l_c3_din;
input   l_c3_full_n;
output   l_c3_write;
input  [2:0] l_c3_num_data_valid;
input  [2:0] l_c3_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg l_read;
reg l_c1_write;
reg l_c3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    l_blk_n;
reg    l_c1_blk_n;
reg    l_c3_blk_n;
reg   [31:0] l_1_reg_110;
reg    ap_block_state1;
wire   [21:0] bound_fu_84_p3;
reg   [21:0] bound_reg_115;
wire    ap_CS_fsm_state2;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_idle;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_ready;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_mem_stream_read;
wire   [255:0] grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ws_queue_din;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ws_queue_write;
wire   [255:0] grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_wq_queue_din;
wire    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_wq_queue_write;
reg    grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln136_fu_79_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start_reg = 1'b0;
end

M_AXI_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2 grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start),
    .ap_done(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done),
    .ap_idle(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_idle),
    .ap_ready(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_ready),
    .mem_stream_dout(mem_stream_dout),
    .mem_stream_empty_n(mem_stream_empty_n),
    .mem_stream_read(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_mem_stream_read),
    .mem_stream_num_data_valid(3'd0),
    .mem_stream_fifo_cap(3'd0),
    .ws_queue_din(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ws_queue_din),
    .ws_queue_full_n(ws_queue_full_n),
    .ws_queue_write(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ws_queue_write),
    .ws_queue_num_data_valid(3'd0),
    .ws_queue_fifo_cap(3'd0),
    .wq_queue_din(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_wq_queue_din),
    .wq_queue_full_n(wq_queue_full_n),
    .wq_queue_write(grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_wq_queue_write),
    .wq_queue_num_data_valid(3'd0),
    .wq_queue_fifo_cap(3'd0),
    .bound(bound_reg_115)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start_reg <= 1'b1;
        end else if ((grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_ready == 1'b1)) begin
            grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_115[4] <= bound_fu_84_p3[4];
bound_reg_115[7 : 6] <= bound_fu_84_p3[7 : 6];
bound_reg_115[13 : 10] <= bound_fu_84_p3[13 : 10];
bound_reg_115[17 : 16] <= bound_fu_84_p3[17 : 16];
bound_reg_115[19] <= bound_fu_84_p3[19];
bound_reg_115[21] <= bound_fu_84_p3[21];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_1_reg_110 <= l_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_blk_n = l_empty_n;
    end else begin
        l_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c1_blk_n = l_c1_full_n;
    end else begin
        l_c1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c1_write = 1'b1;
    end else begin
        l_c1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c3_blk_n = l_c3_full_n;
    end else begin
        l_c3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c3_write = 1'b1;
    end else begin
        l_c3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_read = 1'b1;
    end else begin
        l_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((l_c3_full_n == 1'b0) | (l_c1_full_n == 1'b0) | (l_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bound_fu_84_p3 = ((icmp_ln136_fu_79_p2[0:0] == 1'b1) ? 22'd3057712 : 22'd365792);

assign grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start = grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ap_start_reg;

assign icmp_ln136_fu_79_p2 = ((l_1_reg_110 == 32'd24) ? 1'b1 : 1'b0);

assign l_c1_din = l_dout;

assign l_c3_din = l_dout;

assign mem_stream_read = grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_mem_stream_read;

assign start_out = real_start;

assign wq_queue_din = grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_wq_queue_din;

assign wq_queue_write = grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_wq_queue_write;

assign ws_queue_din = grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ws_queue_din;

assign ws_queue_write = grp_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2_fu_68_ws_queue_write;

always @ (posedge ap_clk) begin
    bound_reg_115[3:0] <= 4'b0000;
    bound_reg_115[5:5] <= 1'b1;
    bound_reg_115[9:8] <= 2'b00;
    bound_reg_115[15:14] <= 2'b10;
    bound_reg_115[18:18] <= 1'b1;
    bound_reg_115[20] <= 1'b0;
end

endmodule //M_AXI_weight_distributor
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mem_stream_dout,
        mem_stream_empty_n,
        mem_stream_read,
        mem_stream_num_data_valid,
        mem_stream_fifo_cap,
        ws_queue_din,
        ws_queue_full_n,
        ws_queue_write,
        ws_queue_num_data_valid,
        ws_queue_fifo_cap,
        wq_queue_din,
        wq_queue_full_n,
        wq_queue_write,
        wq_queue_num_data_valid,
        wq_queue_fifo_cap,
        bound
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] mem_stream_dout;
input   mem_stream_empty_n;
output   mem_stream_read;
input  [2:0] mem_stream_num_data_valid;
input  [2:0] mem_stream_fifo_cap;
output  [255:0] ws_queue_din;
input   ws_queue_full_n;
output   ws_queue_write;
input  [2:0] ws_queue_num_data_valid;
input  [2:0] ws_queue_fifo_cap;
output  [255:0] wq_queue_din;
input   wq_queue_full_n;
output   wq_queue_write;
input  [2:0] wq_queue_num_data_valid;
input  [2:0] wq_queue_fifo_cap;
input  [21:0] bound;

reg ap_idle;
reg mem_stream_read;
reg ws_queue_write;
reg wq_queue_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln138_reg_166;
reg   [0:0] icmp_ln138_reg_166_pp0_iter1_reg;
reg   [0:0] icmp_ln142_reg_170;
reg    ap_predicate_op32_write_state3;
reg    ap_predicate_op34_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln138_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    wq_queue_blk_n;
reg    mem_stream_blk_n;
reg    ws_queue_blk_n;
wire   [0:0] icmp_ln138_reg_166_pp0_iter0_reg;
wire   [0:0] icmp_ln142_fu_135_p2;
reg   [4:0] cyc_fu_52;
wire   [4:0] cyc_1_fu_141_p2;
wire    ap_loop_init;
reg   [21:0] indvar_flatten_fu_56;
wire   [21:0] add_ln138_fu_107_p2;
reg   [21:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln139_fu_121_p2;
wire   [4:0] select_ln138_fu_127_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_98;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 cyc_fu_52 = 5'd0;
//#0 indvar_flatten_fu_56 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        cyc_fu_52 <= 5'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln138_reg_166_pp0_iter0_reg == 1'd0))) begin
        cyc_fu_52 <= cyc_1_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_98)) begin
        if ((icmp_ln138_fu_101_p2 == 1'd0)) begin
            indvar_flatten_fu_56 <= add_ln138_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_56 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln138_reg_166 <= icmp_ln138_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln138_reg_166_pp0_iter1_reg <= icmp_ln138_reg_166;
        icmp_ln142_reg_170 <= icmp_ln142_fu_135_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln138_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 22'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_56;
    end
end

always @ (*) begin
    if (((icmp_ln138_reg_166_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        mem_stream_blk_n = mem_stream_empty_n;
    end else begin
        mem_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln138_reg_166_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        mem_stream_read = 1'b1;
    end else begin
        mem_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op34_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        wq_queue_blk_n = wq_queue_full_n;
    end else begin
        wq_queue_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op34_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        wq_queue_write = 1'b1;
    end else begin
        wq_queue_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op32_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ws_queue_blk_n = ws_queue_full_n;
    end else begin
        ws_queue_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op32_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ws_queue_write = 1'b1;
    end else begin
        ws_queue_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((icmp_ln138_reg_166_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln138_fu_107_p2 = (ap_sig_allocacmp_indvar_flatten_load + 22'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op34_write_state3 == 1'b1) & (wq_queue_full_n == 1'b0)) | ((ap_predicate_op32_write_state3 == 1'b1) & (ws_queue_full_n == 1'b0)) | ((icmp_ln138_reg_166_pp0_iter1_reg == 1'd0) & (mem_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_98 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op32_write_state3 = ((icmp_ln142_reg_170 == 1'd0) & (icmp_ln138_reg_166_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_write_state3 = ((icmp_ln142_reg_170 == 1'd1) & (icmp_ln138_reg_166_pp0_iter1_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign cyc_1_fu_141_p2 = (select_ln138_fu_127_p3 + 5'd1);

assign icmp_ln138_fu_101_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound) ? 1'b1 : 1'b0);

assign icmp_ln138_reg_166_pp0_iter0_reg = icmp_ln138_reg_166;

assign icmp_ln139_fu_121_p2 = ((cyc_fu_52 == 5'd23) ? 1'b1 : 1'b0);

assign icmp_ln142_fu_135_p2 = ((select_ln138_fu_127_p3 < 5'd20) ? 1'b1 : 1'b0);

assign select_ln138_fu_127_p3 = ((icmp_ln139_fu_121_p2[0:0] == 1'b1) ? 5'd0 : cyc_fu_52);

assign wq_queue_din = mem_stream_dout;

assign ws_queue_din = mem_stream_dout;

endmodule //M_AXI_weight_distributor_Pipeline_VITIS_LOOP_138_1_VITIS_LOOP_139_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_weight_producer (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_decoder_w,
        memory_cls_w,
        mem_stream_din,
        mem_stream_full_n,
        mem_stream_write,
        mem_stream_num_data_valid,
        mem_stream_fifo_cap,
        l_c4_din,
        l_c4_full_n,
        l_c4_write,
        l_c4_num_data_valid,
        l_c4_fifo_cap
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] l;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_decoder_w;
input  [63:0] memory_cls_w;
output  [255:0] mem_stream_din;
input   mem_stream_full_n;
output   mem_stream_write;
input  [2:0] mem_stream_num_data_valid;
input  [2:0] mem_stream_fifo_cap;
output  [31:0] l_c4_din;
input   l_c4_full_n;
output   l_c4_write;
input  [2:0] l_c4_num_data_valid;
input  [2:0] l_c4_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_gmem_0_ARVALID;
reg[63:0] m_axi_gmem_0_ARADDR;
reg[0:0] m_axi_gmem_0_ARID;
reg[31:0] m_axi_gmem_0_ARLEN;
reg[2:0] m_axi_gmem_0_ARSIZE;
reg[1:0] m_axi_gmem_0_ARBURST;
reg[1:0] m_axi_gmem_0_ARLOCK;
reg[3:0] m_axi_gmem_0_ARCACHE;
reg[2:0] m_axi_gmem_0_ARPROT;
reg[3:0] m_axi_gmem_0_ARQOS;
reg[3:0] m_axi_gmem_0_ARREGION;
reg[0:0] m_axi_gmem_0_ARUSER;
reg m_axi_gmem_0_RREADY;
reg[255:0] mem_stream_din;
reg mem_stream_write;
reg l_c4_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state4;
reg    l_c4_blk_n;
reg   [63:0] memory_decoder_w_read_reg_285;
reg    ap_block_state1;
reg   [31:0] l_read_reg_290;
wire   [0:0] run_cls_fu_150_p2;
reg   [0:0] run_cls_reg_298;
wire   [31:0] p_sub12_fu_180_p2;
reg   [31:0] p_sub12_reg_302;
reg   [58:0] trunc_ln_reg_307;
wire   [31:0] mul_fu_233_p2;
reg   [31:0] mul_reg_313;
wire    ap_CS_fsm_state2;
reg   [58:0] trunc_ln3_reg_318;
wire    ap_CS_fsm_state3;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_done;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_idle;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_ready;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWID;
wire   [31:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWUSER;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WVALID;
wire   [255:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WDATA;
wire   [31:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WSTRB;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WLAST;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WID;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WUSER;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARID;
wire   [31:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARUSER;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_RREADY;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_BREADY;
wire   [255:0] grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_mem_stream_din;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_mem_stream_write;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_done;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_idle;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_ready;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWID;
wire   [31:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWUSER;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WVALID;
wire   [255:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WDATA;
wire   [31:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WSTRB;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WLAST;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WID;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WUSER;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARID;
wire   [31:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARUSER;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_RREADY;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_BREADY;
wire   [255:0] grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_din;
wire    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_write;
reg    grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire  signed [63:0] sext_ln121_1_fu_265_p1;
wire  signed [63:0] sext_ln115_fu_275_p1;
wire   [31:0] empty_38_fu_156_p2;
wire   [31:0] empty_39_fu_162_p2;
wire   [31:0] p_sub_fu_168_p2;
wire   [31:0] empty_40_fu_174_p2;
wire   [31:0] empty_41_fu_196_p2;
wire   [31:0] p_add_fu_201_p2;
wire   [31:0] empty_42_fu_206_p2;
wire   [31:0] p_add15_fu_211_p2;
wire   [31:0] empty_43_fu_217_p2;
wire   [31:0] p_add17_fu_222_p2;
wire   [31:0] empty_44_fu_228_p2;
wire   [36:0] shl_ln_fu_239_p3;
wire  signed [63:0] sext_ln121_fu_246_p1;
wire   [63:0] add_ln121_fu_250_p2;
reg    ap_block_state13_on_subcall_done;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 23'd1;
//#0 grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start_reg = 1'b0;
//#0 grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start_reg = 1'b0;
end

M_AXI_weight_producer_Pipeline_VITIS_LOOP_121_2 grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start),
    .ap_done(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_done),
    .ap_idle(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_idle),
    .ap_ready(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(m_axi_gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(m_axi_gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(m_axi_gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(m_axi_gmem_0_RLAST),
    .m_axi_gmem_0_RID(m_axi_gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(m_axi_gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(m_axi_gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(m_axi_gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .mem_stream_din(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_mem_stream_din),
    .mem_stream_full_n(mem_stream_full_n),
    .mem_stream_write(grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_mem_stream_write),
    .mem_stream_num_data_valid(3'd0),
    .mem_stream_fifo_cap(3'd0),
    .sext_ln121_1(trunc_ln3_reg_318)
);

M_AXI_weight_producer_Pipeline_VITIS_LOOP_115_1 grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start),
    .ap_done(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_done),
    .ap_idle(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_idle),
    .ap_ready(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_ready),
    .m_axi_gmem_0_AWVALID(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(m_axi_gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(m_axi_gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(m_axi_gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(m_axi_gmem_0_RLAST),
    .m_axi_gmem_0_RID(m_axi_gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(m_axi_gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(m_axi_gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(m_axi_gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .mem_stream_din(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_din),
    .mem_stream_full_n(mem_stream_full_n),
    .mem_stream_write(grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_write),
    .mem_stream_num_data_valid(3'd0),
    .mem_stream_fifo_cap(3'd0),
    .sext_ln115(trunc_ln_reg_307)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start_reg <= 1'b1;
        end else if ((grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_ready == 1'b1)) begin
            grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start_reg <= 1'b1;
        end else if ((grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_ready == 1'b1)) begin
            grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        l_read_reg_290 <= l;
        memory_decoder_w_read_reg_285 <= memory_decoder_w;
        p_sub12_reg_302 <= p_sub12_fu_180_p2;
        run_cls_reg_298 <= run_cls_fu_150_p2;
        trunc_ln_reg_307 <= {{memory_cls_w[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_reg_313 <= mul_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln3_reg_318 <= {{add_ln121_fu_250_p2[63:5]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state13_on_subcall_done)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_done == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state14))) begin
        gmem_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_c4_blk_n = l_c4_full_n;
    end else begin
        l_c4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        l_c4_write = 1'b1;
    end else begin
        l_c4_write = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_gmem_0_ARADDR = sext_ln115_fu_275_p1;
    end else if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARADDR = sext_ln121_1_fu_265_p1;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARADDR = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARADDR = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARADDR;
    end else begin
        m_axi_gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARBURST = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARBURST = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARBURST;
    end else begin
        m_axi_gmem_0_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARCACHE = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARCACHE = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARCACHE;
    end else begin
        m_axi_gmem_0_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARID = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARID;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARID = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARID;
    end else begin
        m_axi_gmem_0_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_gmem_0_ARLEN = 64'd3057712;
    end else if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_0_ARLEN = 64'd365792;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARLEN = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARLEN = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARLEN;
    end else begin
        m_axi_gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARLOCK = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARLOCK = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARLOCK;
    end else begin
        m_axi_gmem_0_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARPROT = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARPROT = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARPROT;
    end else begin
        m_axi_gmem_0_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARQOS = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARQOS = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARQOS;
    end else begin
        m_axi_gmem_0_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARREGION = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARREGION = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARREGION;
    end else begin
        m_axi_gmem_0_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARSIZE = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARSIZE = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARSIZE;
    end else begin
        m_axi_gmem_0_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARUSER = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARUSER = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARUSER;
    end else begin
        m_axi_gmem_0_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        m_axi_gmem_0_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_ARVALID = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_ARVALID = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_ARVALID;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        m_axi_gmem_0_RREADY = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_m_axi_gmem_0_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_0_RREADY = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_m_axi_gmem_0_RREADY;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mem_stream_din = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_din;
    end else if (((1'b1 == ap_CS_fsm_state13) & (run_cls_reg_298 == 1'd0))) begin
        mem_stream_din = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_mem_stream_din;
    end else begin
        mem_stream_din = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_din;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mem_stream_write = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_mem_stream_write;
    end else if (((1'b1 == ap_CS_fsm_state13) & (run_cls_reg_298 == 1'd0))) begin
        mem_stream_write = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_mem_stream_write;
    end else begin
        mem_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (run_cls_fu_150_p2 == 1'd1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state1) & (run_cls_fu_150_p2 == 1'd0) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_fu_250_p2 = ($signed(sext_ln121_fu_246_p1) + $signed(memory_decoder_w_read_reg_285));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (l_c4_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state13_on_subcall_done = ((grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_done == 1'b0) & (run_cls_reg_298 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign empty_38_fu_156_p2 = l << 32'd19;

assign empty_39_fu_162_p2 = l << 32'd17;

assign empty_40_fu_174_p2 = l << 32'd15;

assign empty_41_fu_196_p2 = l_read_reg_290 << 32'd12;

assign empty_42_fu_206_p2 = l_read_reg_290 << 32'd10;

assign empty_43_fu_217_p2 = l_read_reg_290 << 32'd8;

assign empty_44_fu_228_p2 = l_read_reg_290 << 32'd5;

assign grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start = grp_weight_producer_Pipeline_VITIS_LOOP_115_1_fu_131_ap_start_reg;

assign grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start = grp_weight_producer_Pipeline_VITIS_LOOP_121_2_fu_122_ap_start_reg;

assign l_c4_din = l;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign mul_fu_233_p2 = (p_add17_fu_222_p2 - empty_44_fu_228_p2);

assign p_add15_fu_211_p2 = (p_add_fu_201_p2 + empty_42_fu_206_p2);

assign p_add17_fu_222_p2 = (p_add15_fu_211_p2 + empty_43_fu_217_p2);

assign p_add_fu_201_p2 = (p_sub12_reg_302 + empty_41_fu_196_p2);

assign p_sub12_fu_180_p2 = (p_sub_fu_168_p2 - empty_40_fu_174_p2);

assign p_sub_fu_168_p2 = (empty_38_fu_156_p2 - empty_39_fu_162_p2);

assign run_cls_fu_150_p2 = ((l == 32'd24) ? 1'b1 : 1'b0);

assign sext_ln115_fu_275_p1 = $signed(trunc_ln_reg_307);

assign sext_ln121_1_fu_265_p1 = $signed(trunc_ln3_reg_318);

assign sext_ln121_fu_246_p1 = $signed(shl_ln_fu_239_p3);

assign shl_ln_fu_239_p3 = {{mul_reg_313}, {5'd0}};

assign start_out = real_start;

endmodule //M_AXI_weight_producer
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_weight_producer_Pipeline_VITIS_LOOP_115_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        mem_stream_din,
        mem_stream_full_n,
        mem_stream_write,
        mem_stream_num_data_valid,
        mem_stream_fifo_cap,
        sext_ln115
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
output  [255:0] mem_stream_din;
input   mem_stream_full_n;
output   mem_stream_write;
input  [2:0] mem_stream_num_data_valid;
input  [2:0] mem_stream_fifo_cap;
input  [58:0] sext_ln115;

reg ap_idle;
reg m_axi_gmem_0_RREADY;
reg mem_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln115_reg_119;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln115_reg_119_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln115_fu_84_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
reg    mem_stream_blk_n;
reg   [255:0] gmem_addr_read_reg_123;
reg   [21:0] n_fu_50;
wire   [21:0] add_ln115_fu_90_p2;
wire    ap_loop_init;
reg   [21:0] ap_sig_allocacmp_n_2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 n_fu_50 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if ((icmp_ln115_fu_84_p2 == 1'd0)) begin
            n_fu_50 <= add_ln115_fu_90_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_50 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln115_reg_119 <= icmp_ln115_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem_addr_read_reg_123 <= m_axi_gmem_0_RDATA;
        icmp_ln115_reg_119_pp0_iter1_reg <= icmp_ln115_reg_119;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln115_fu_84_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_2 = 22'd0;
    end else begin
        ap_sig_allocacmp_n_2 = n_fu_50;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_119 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln115_reg_119 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln115_reg_119_pp0_iter1_reg == 1'd0))) begin
        mem_stream_blk_n = mem_stream_full_n;
    end else begin
        mem_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln115_reg_119_pp0_iter1_reg == 1'd0))) begin
        mem_stream_write = 1'b1;
    end else begin
        mem_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage0_iter2) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln115_reg_119_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_90_p2 = (ap_sig_allocacmp_n_2 + 22'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln115_reg_119 == 1'd0) & (m_axi_gmem_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln115_reg_119_pp0_iter1_reg == 1'd0) & (mem_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_134 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln115_fu_84_p2 = ((ap_sig_allocacmp_n_2 == 22'd3057712) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign mem_stream_din = gmem_addr_read_reg_123;

endmodule //M_AXI_weight_producer_Pipeline_VITIS_LOOP_115_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_weight_producer_Pipeline_VITIS_LOOP_121_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        mem_stream_din,
        mem_stream_full_n,
        mem_stream_write,
        mem_stream_num_data_valid,
        mem_stream_fifo_cap,
        sext_ln121_1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
output  [255:0] mem_stream_din;
input   mem_stream_full_n;
output   mem_stream_write;
input  [2:0] mem_stream_num_data_valid;
input  [2:0] mem_stream_fifo_cap;
input  [58:0] sext_ln121_1;

reg ap_idle;
reg m_axi_gmem_0_RREADY;
reg mem_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln121_reg_119;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln121_reg_119_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln121_fu_84_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
reg    mem_stream_blk_n;
reg   [255:0] gmem_addr_read_reg_123;
reg   [18:0] n_fu_50;
wire   [18:0] add_ln121_fu_90_p2;
wire    ap_loop_init;
reg   [18:0] ap_sig_allocacmp_n_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 n_fu_50 = 19'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if ((icmp_ln121_fu_84_p2 == 1'd0)) begin
            n_fu_50 <= add_ln121_fu_90_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_50 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln121_reg_119 <= icmp_ln121_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem_addr_read_reg_123 <= m_axi_gmem_0_RDATA;
        icmp_ln121_reg_119_pp0_iter1_reg <= icmp_ln121_reg_119;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln121_fu_84_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_1 = 19'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_50;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_119 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln121_reg_119 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln121_reg_119_pp0_iter1_reg == 1'd0))) begin
        mem_stream_blk_n = mem_stream_full_n;
    end else begin
        mem_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln121_reg_119_pp0_iter1_reg == 1'd0))) begin
        mem_stream_write = 1'b1;
    end else begin
        mem_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage0_iter2) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln121_reg_119_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln121_fu_90_p2 = (ap_sig_allocacmp_n_1 + 19'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln121_reg_119 == 1'd0) & (m_axi_gmem_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln121_reg_119_pp0_iter1_reg == 1'd0) & (mem_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_134 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln121_fu_84_p2 = ((ap_sig_allocacmp_n_1 == 19'd365792) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 256'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign mem_stream_din = gmem_addr_read_reg_123;

endmodule //M_AXI_weight_producer_Pipeline_VITIS_LOOP_121_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_write_cls (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_cls_y,
        cls_stream_TDATA,
        cls_stream_TVALID,
        cls_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_cls_y;
input  [135:0] cls_stream_TDATA;
input   cls_stream_TVALID;
output   cls_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_AWVALID;
reg[63:0] m_axi_gmem_0_AWADDR;
reg[0:0] m_axi_gmem_0_AWID;
reg[31:0] m_axi_gmem_0_AWLEN;
reg[2:0] m_axi_gmem_0_AWSIZE;
reg[1:0] m_axi_gmem_0_AWBURST;
reg[1:0] m_axi_gmem_0_AWLOCK;
reg[3:0] m_axi_gmem_0_AWCACHE;
reg[2:0] m_axi_gmem_0_AWPROT;
reg[3:0] m_axi_gmem_0_AWQOS;
reg[3:0] m_axi_gmem_0_AWREGION;
reg[0:0] m_axi_gmem_0_AWUSER;
reg m_axi_gmem_0_WVALID;
reg m_axi_gmem_0_BREADY;
reg cls_stream_TREADY;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state8;
wire  signed [58:0] trunc_ln_fu_67_p4;
reg   [58:0] trunc_ln_reg_88;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_done;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_idle;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_ready;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWID;
wire   [31:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWUSER;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WVALID;
wire   [255:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WDATA;
wire   [31:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WSTRB;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WLAST;
wire   [0:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WID;
wire   [0:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WUSER;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARID;
wire   [31:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARUSER;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_RREADY;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_BREADY;
wire    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_cls_stream_TREADY;
reg    grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln274_fu_77_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 8'd1;
//#0 grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start_reg = 1'b0;
end

M_AXI_write_cls_Pipeline_VITIS_LOOP_274_1 grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start),
    .ap_done(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_done),
    .ap_idle(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_idle),
    .ap_ready(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_ready),
    .cls_stream_TVALID(cls_stream_TVALID),
    .m_axi_gmem_0_AWVALID(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(m_axi_gmem_0_AWREADY),
    .m_axi_gmem_0_AWADDR(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(m_axi_gmem_0_WREADY),
    .m_axi_gmem_0_WDATA(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(1'b0),
    .m_axi_gmem_0_ARADDR(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(1'b0),
    .m_axi_gmem_0_RREADY(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(256'd0),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(9'd0),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(m_axi_gmem_0_BVALID),
    .m_axi_gmem_0_BREADY(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(m_axi_gmem_0_BRESP),
    .m_axi_gmem_0_BID(m_axi_gmem_0_BID),
    .m_axi_gmem_0_BUSER(m_axi_gmem_0_BUSER),
    .sext_ln274(trunc_ln_reg_88),
    .cls_stream_TDATA(cls_stream_TDATA),
    .cls_stream_TREADY(grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_cls_stream_TREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_ready == 1'b1)) begin
            grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln_reg_88 <= {{memory_cls_y[63:5]}};
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cls_stream_TREADY = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_cls_stream_TREADY;
    end else begin
        cls_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_0_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        gmem_blk_n_B = m_axi_gmem_0_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_0_AWADDR = sext_ln274_fu_77_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWADDR = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWADDR;
    end else begin
        m_axi_gmem_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWBURST = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWBURST;
    end else begin
        m_axi_gmem_0_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWCACHE = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWCACHE;
    end else begin
        m_axi_gmem_0_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWID = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWID;
    end else begin
        m_axi_gmem_0_AWID = 1'd0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_0_AWLEN = 64'd151936;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWLEN = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWLEN;
    end else begin
        m_axi_gmem_0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWLOCK = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWLOCK;
    end else begin
        m_axi_gmem_0_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWPROT = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWPROT;
    end else begin
        m_axi_gmem_0_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWQOS = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWQOS;
    end else begin
        m_axi_gmem_0_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWREGION = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWREGION;
    end else begin
        m_axi_gmem_0_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWSIZE = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWSIZE;
    end else begin
        m_axi_gmem_0_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWUSER = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWUSER;
    end else begin
        m_axi_gmem_0_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_0_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWVALID = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_AWVALID;
    end else begin
        m_axi_gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_gmem_0_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_BREADY = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_BREADY;
    end else begin
        m_axi_gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_WVALID = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WVALID;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_ap_start_reg;

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign m_axi_gmem_0_WDATA = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WDATA;

assign m_axi_gmem_0_WID = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WID;

assign m_axi_gmem_0_WLAST = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WLAST;

assign m_axi_gmem_0_WSTRB = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WSTRB;

assign m_axi_gmem_0_WUSER = grp_write_cls_Pipeline_VITIS_LOOP_274_1_fu_58_m_axi_gmem_0_WUSER;

assign sext_ln274_fu_77_p1 = trunc_ln_fu_67_p4;

assign trunc_ln_fu_67_p4 = {{memory_cls_y[63:5]}};

endmodule //M_AXI_write_cls
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_write_cls_Pipeline_VITIS_LOOP_274_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cls_stream_TVALID,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        sext_ln274,
        cls_stream_TDATA,
        cls_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   cls_stream_TVALID;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [58:0] sext_ln274;
input  [135:0] cls_stream_TDATA;
output   cls_stream_TREADY;

reg ap_idle;
reg m_axi_gmem_0_WVALID;
reg cls_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln274_reg_273;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln274_reg_273_pp0_iter1_reg;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln274_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_W;
reg    cls_stream_TDATA_blk_n;
wire   [17:0] add_ln274_fu_126_p2;
reg   [17:0] add_ln274_reg_277;
wire   [16:0] trunc_ln278_fu_132_p1;
reg   [16:0] trunc_ln278_reg_282;
reg   [16:0] trunc_ln278_1_reg_287;
reg   [16:0] trunc_ln278_2_reg_292;
reg   [16:0] trunc_ln278_3_reg_297;
reg   [16:0] trunc_ln278_4_reg_302;
reg   [16:0] trunc_ln278_5_reg_307;
reg   [16:0] trunc_ln278_6_reg_312;
reg   [16:0] packet_reg_317;
reg   [17:0] n_tile_fu_84;
reg   [17:0] ap_sig_allocacmp_n_tile_2;
wire    ap_loop_init;
wire  signed [31:0] sext_ln291_fu_216_p1;
wire  signed [31:0] sext_ln291_1_fu_219_p1;
wire  signed [31:0] sext_ln291_2_fu_222_p1;
wire  signed [31:0] sext_ln291_3_fu_225_p1;
wire  signed [31:0] sext_ln291_4_fu_228_p1;
wire  signed [31:0] sext_ln291_5_fu_231_p1;
wire  signed [31:0] sext_ln291_6_fu_234_p1;
wire   [240:0] packet_2_fu_237_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 n_tile_fu_84 = 18'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_io))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_io))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        n_tile_fu_84 <= 18'd0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (icmp_ln274_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        n_tile_fu_84 <= add_ln274_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln274_reg_277 <= add_ln274_fu_126_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln274_reg_273 <= icmp_ln274_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln274_reg_273_pp0_iter1_reg <= icmp_ln274_reg_273;
        packet_reg_317 <= {{cls_stream_TDATA[135:119]}};
        trunc_ln278_1_reg_287 <= {{cls_stream_TDATA[33:17]}};
        trunc_ln278_2_reg_292 <= {{cls_stream_TDATA[50:34]}};
        trunc_ln278_3_reg_297 <= {{cls_stream_TDATA[67:51]}};
        trunc_ln278_4_reg_302 <= {{cls_stream_TDATA[84:68]}};
        trunc_ln278_5_reg_307 <= {{cls_stream_TDATA[101:85]}};
        trunc_ln278_6_reg_312 <= {{cls_stream_TDATA[118:102]}};
        trunc_ln278_reg_282 <= trunc_ln278_fu_132_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_io)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln274_fu_120_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_io))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_tile_2 = 18'd0;
    end else if (((icmp_ln274_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_n_tile_2 = add_ln274_reg_277;
    end else begin
        ap_sig_allocacmp_n_tile_2 = n_tile_fu_84;
    end
end

always @ (*) begin
    if (((icmp_ln274_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cls_stream_TDATA_blk_n = cls_stream_TVALID;
    end else begin
        cls_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (icmp_ln274_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        cls_stream_TREADY = 1'b1;
    end else begin
        cls_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln274_reg_273_pp0_iter1_reg == 1'd0))) begin
        gmem_blk_n_W = m_axi_gmem_0_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_io) & (icmp_ln274_reg_273_pp0_iter1_reg == 1'd0))) begin
        m_axi_gmem_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state3_io)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_io) & (icmp_ln274_reg_273_pp0_iter1_reg == 1'd1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln274_fu_126_p2 = (ap_sig_allocacmp_n_tile_2 + 18'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln274_reg_273 == 1'd0) & (cls_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_0_WREADY == 1'b0) & (icmp_ln274_reg_273_pp0_iter1_reg == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln274_fu_120_p2 = ((ap_sig_allocacmp_n_tile_2 == 18'd151936) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign m_axi_gmem_0_WDATA = $signed(packet_2_fu_237_p9);

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd4294967295;

assign m_axi_gmem_0_WUSER = 1'd0;

assign packet_2_fu_237_p9 = {{{{{{{{packet_reg_317}, {sext_ln291_fu_216_p1}}, {sext_ln291_1_fu_219_p1}}, {sext_ln291_2_fu_222_p1}}, {sext_ln291_3_fu_225_p1}}, {sext_ln291_4_fu_228_p1}}, {sext_ln291_5_fu_231_p1}}, {sext_ln291_6_fu_234_p1}};

assign sext_ln291_1_fu_219_p1 = $signed(trunc_ln278_5_reg_307);

assign sext_ln291_2_fu_222_p1 = $signed(trunc_ln278_4_reg_302);

assign sext_ln291_3_fu_225_p1 = $signed(trunc_ln278_3_reg_297);

assign sext_ln291_4_fu_228_p1 = $signed(trunc_ln278_2_reg_292);

assign sext_ln291_5_fu_231_p1 = $signed(trunc_ln278_1_reg_287);

assign sext_ln291_6_fu_234_p1 = $signed(trunc_ln278_reg_282);

assign sext_ln291_fu_216_p1 = $signed(trunc_ln278_6_reg_312);

assign trunc_ln278_fu_132_p1 = cls_stream_TDATA[16:0];

endmodule //M_AXI_write_cls_Pipeline_VITIS_LOOP_274_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_write_y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        memory_decoder_y,
        y_stream_TDATA,
        y_stream_TVALID,
        y_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] memory_decoder_y;
input  [207:0] y_stream_TDATA;
input   y_stream_TVALID;
output   y_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_AWVALID;
reg[63:0] m_axi_gmem_0_AWADDR;
reg[0:0] m_axi_gmem_0_AWID;
reg[31:0] m_axi_gmem_0_AWLEN;
reg[2:0] m_axi_gmem_0_AWSIZE;
reg[1:0] m_axi_gmem_0_AWBURST;
reg[1:0] m_axi_gmem_0_AWLOCK;
reg[3:0] m_axi_gmem_0_AWCACHE;
reg[2:0] m_axi_gmem_0_AWPROT;
reg[3:0] m_axi_gmem_0_AWQOS;
reg[3:0] m_axi_gmem_0_AWREGION;
reg[0:0] m_axi_gmem_0_AWUSER;
reg m_axi_gmem_0_WVALID;
reg m_axi_gmem_0_BREADY;
reg y_stream_TREADY;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state8;
wire  signed [58:0] trunc_ln_fu_67_p4;
reg   [58:0] trunc_ln_reg_88;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_done;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_idle;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_ready;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWID;
wire   [31:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWUSER;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WVALID;
wire   [255:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WDATA;
wire   [31:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WSTRB;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WLAST;
wire   [0:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WID;
wire   [0:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WUSER;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARID;
wire   [31:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARUSER;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_RREADY;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_BREADY;
wire    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_y_stream_TREADY;
reg    grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln302_fu_77_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 8'd1;
//#0 grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start_reg = 1'b0;
end

M_AXI_write_y_Pipeline_VITIS_LOOP_302_1 grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start),
    .ap_done(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_done),
    .ap_idle(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_idle),
    .ap_ready(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_ready),
    .y_stream_TVALID(y_stream_TVALID),
    .m_axi_gmem_0_AWVALID(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(m_axi_gmem_0_AWREADY),
    .m_axi_gmem_0_AWADDR(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(m_axi_gmem_0_WREADY),
    .m_axi_gmem_0_WDATA(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(1'b0),
    .m_axi_gmem_0_ARADDR(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(1'b0),
    .m_axi_gmem_0_RREADY(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(256'd0),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(9'd0),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(m_axi_gmem_0_BVALID),
    .m_axi_gmem_0_BREADY(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(m_axi_gmem_0_BRESP),
    .m_axi_gmem_0_BID(m_axi_gmem_0_BID),
    .m_axi_gmem_0_BUSER(m_axi_gmem_0_BUSER),
    .sext_ln302(trunc_ln_reg_88),
    .y_stream_TDATA(y_stream_TDATA),
    .y_stream_TREADY(grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_y_stream_TREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_ready == 1'b1)) begin
            grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln_reg_88 <= {{memory_decoder_y[63:5]}};
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_0_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        gmem_blk_n_B = m_axi_gmem_0_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_0_AWADDR = sext_ln302_fu_77_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWADDR = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWADDR;
    end else begin
        m_axi_gmem_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWBURST = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWBURST;
    end else begin
        m_axi_gmem_0_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWCACHE = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWCACHE;
    end else begin
        m_axi_gmem_0_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWID = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWID;
    end else begin
        m_axi_gmem_0_AWID = 1'd0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_0_AWLEN = 64'd896;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWLEN = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWLEN;
    end else begin
        m_axi_gmem_0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWLOCK = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWLOCK;
    end else begin
        m_axi_gmem_0_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWPROT = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWPROT;
    end else begin
        m_axi_gmem_0_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWQOS = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWQOS;
    end else begin
        m_axi_gmem_0_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWREGION = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWREGION;
    end else begin
        m_axi_gmem_0_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWSIZE = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWSIZE;
    end else begin
        m_axi_gmem_0_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWUSER = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWUSER;
    end else begin
        m_axi_gmem_0_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_0_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_AWVALID = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_AWVALID;
    end else begin
        m_axi_gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_gmem_0_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_BREADY = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_BREADY;
    end else begin
        m_axi_gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_0_WVALID = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WVALID;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_stream_TREADY = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_y_stream_TREADY;
    end else begin
        y_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem_0_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_gmem_0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_ap_start_reg;

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign m_axi_gmem_0_WDATA = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WDATA;

assign m_axi_gmem_0_WID = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WID;

assign m_axi_gmem_0_WLAST = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WLAST;

assign m_axi_gmem_0_WSTRB = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WSTRB;

assign m_axi_gmem_0_WUSER = grp_write_y_Pipeline_VITIS_LOOP_302_1_fu_58_m_axi_gmem_0_WUSER;

assign sext_ln302_fu_77_p1 = trunc_ln_fu_67_p4;

assign trunc_ln_fu_67_p4 = {{memory_decoder_y[63:5]}};

endmodule //M_AXI_write_y
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module M_AXI_write_y_Pipeline_VITIS_LOOP_302_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_stream_TVALID,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        sext_ln302,
        y_stream_TDATA,
        y_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   y_stream_TVALID;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [58:0] sext_ln302;
input  [207:0] y_stream_TDATA;
output   y_stream_TREADY;

reg ap_idle;
reg m_axi_gmem_0_WVALID;
reg y_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln302_reg_273;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln302_reg_273_pp0_iter1_reg;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln302_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_W;
reg    y_stream_TDATA_blk_n;
wire   [9:0] add_ln302_fu_126_p2;
reg   [9:0] add_ln302_reg_277;
wire   [25:0] trunc_ln303_fu_132_p1;
reg   [25:0] trunc_ln303_reg_282;
reg   [25:0] trunc_ln303_1_reg_287;
reg   [25:0] trunc_ln303_2_reg_292;
reg   [25:0] trunc_ln303_3_reg_297;
reg   [25:0] trunc_ln303_4_reg_302;
reg   [25:0] trunc_ln303_5_reg_307;
reg   [25:0] trunc_ln303_6_reg_312;
reg   [25:0] packet_reg_317;
reg   [9:0] n_tile_fu_84;
reg   [9:0] ap_sig_allocacmp_n_tile_1;
wire    ap_loop_init;
wire  signed [31:0] sext_ln310_fu_216_p1;
wire  signed [31:0] sext_ln310_1_fu_219_p1;
wire  signed [31:0] sext_ln310_2_fu_222_p1;
wire  signed [31:0] sext_ln310_3_fu_225_p1;
wire  signed [31:0] sext_ln310_4_fu_228_p1;
wire  signed [31:0] sext_ln310_5_fu_231_p1;
wire  signed [31:0] sext_ln310_6_fu_234_p1;
wire   [249:0] packet_1_fu_237_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 n_tile_fu_84 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

M_AXI_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_io))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_io))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        n_tile_fu_84 <= 10'd0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (icmp_ln302_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        n_tile_fu_84 <= add_ln302_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln302_reg_277 <= add_ln302_fu_126_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln302_reg_273 <= icmp_ln302_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln302_reg_273_pp0_iter1_reg <= icmp_ln302_reg_273;
        packet_reg_317 <= {{y_stream_TDATA[207:182]}};
        trunc_ln303_1_reg_287 <= {{y_stream_TDATA[51:26]}};
        trunc_ln303_2_reg_292 <= {{y_stream_TDATA[77:52]}};
        trunc_ln303_3_reg_297 <= {{y_stream_TDATA[103:78]}};
        trunc_ln303_4_reg_302 <= {{y_stream_TDATA[129:104]}};
        trunc_ln303_5_reg_307 <= {{y_stream_TDATA[155:130]}};
        trunc_ln303_6_reg_312 <= {{y_stream_TDATA[181:156]}};
        trunc_ln303_reg_282 <= trunc_ln303_fu_132_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_io)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln302_fu_120_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_io))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_tile_1 = 10'd0;
    end else if (((icmp_ln302_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_n_tile_1 = add_ln302_reg_277;
    end else begin
        ap_sig_allocacmp_n_tile_1 = n_tile_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln302_reg_273_pp0_iter1_reg == 1'd0))) begin
        gmem_blk_n_W = m_axi_gmem_0_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_io) & (icmp_ln302_reg_273_pp0_iter1_reg == 1'd0))) begin
        m_axi_gmem_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        y_stream_TDATA_blk_n = y_stream_TVALID;
    end else begin
        y_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (icmp_ln302_reg_273 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        y_stream_TREADY = 1'b1;
    end else begin
        y_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state3_io)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_io) & (icmp_ln302_reg_273_pp0_iter1_reg == 1'd1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln302_fu_126_p2 = (ap_sig_allocacmp_n_tile_1 + 10'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln302_reg_273 == 1'd0) & (y_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_0_WREADY == 1'b0) & (icmp_ln302_reg_273_pp0_iter1_reg == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln302_fu_120_p2 = ((ap_sig_allocacmp_n_tile_1 == 10'd896) ? 1'b1 : 1'b0);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign m_axi_gmem_0_WDATA = $signed(packet_1_fu_237_p9);

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd4294967295;

assign m_axi_gmem_0_WUSER = 1'd0;

assign packet_1_fu_237_p9 = {{{{{{{{packet_reg_317}, {sext_ln310_fu_216_p1}}, {sext_ln310_1_fu_219_p1}}, {sext_ln310_2_fu_222_p1}}, {sext_ln310_3_fu_225_p1}}, {sext_ln310_4_fu_228_p1}}, {sext_ln310_5_fu_231_p1}}, {sext_ln310_6_fu_234_p1}};

assign sext_ln310_1_fu_219_p1 = $signed(trunc_ln303_5_reg_307);

assign sext_ln310_2_fu_222_p1 = $signed(trunc_ln303_4_reg_302);

assign sext_ln310_3_fu_225_p1 = $signed(trunc_ln303_3_reg_297);

assign sext_ln310_4_fu_228_p1 = $signed(trunc_ln303_2_reg_292);

assign sext_ln310_5_fu_231_p1 = $signed(trunc_ln303_1_reg_287);

assign sext_ln310_6_fu_234_p1 = $signed(trunc_ln303_reg_282);

assign sext_ln310_fu_216_p1 = $signed(trunc_ln303_6_reg_312);

assign trunc_ln303_fu_132_p1 = y_stream_TDATA[25:0];

endmodule //M_AXI_write_y_Pipeline_VITIS_LOOP_302_1
