/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="KV_CACHE_KV_CACHE,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.925875,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=3587,HLS_SYN_LUT=4767,HLS_VERSION=2024_2}" *)

module KV_CACHE (
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        ap_clk,
        ap_rst_n,
        l_begin,
        l_close,
        pos_id,
        memory_k_cache,
        kq_cache_i_stream_TDATA,
        kq_cache_o_stream_TDATA,
        ks_cache_i_stream_TDATA,
        ks_cache_o_stream_TDATA,
        vq_cache_i_stream_TDATA,
        vq_cache_o_stream_TDATA,
        vs_cache_i_stream_TDATA,
        vs_cache_o_stream_TDATA,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        ap_start,
        ap_done,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);

parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 63;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
input   ap_clk;
input   ap_rst_n;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [31:0] pos_id;
input  [63:0] memory_k_cache;
output  [63:0] kq_cache_i_stream_TDATA;
input  [63:0] kq_cache_o_stream_TDATA;
output  [7:0] ks_cache_i_stream_TDATA;
input  [7:0] ks_cache_o_stream_TDATA;
output  [63:0] vq_cache_i_stream_TDATA;
input  [63:0] vq_cache_o_stream_TDATA;
output  [7:0] vs_cache_i_stream_TDATA;
input  [7:0] vs_cache_o_stream_TDATA;
output   kq_cache_i_stream_TVALID;
input   kq_cache_i_stream_TREADY;
output   ks_cache_i_stream_TVALID;
input   ks_cache_i_stream_TREADY;
output   vq_cache_i_stream_TVALID;
input   vq_cache_i_stream_TREADY;
output   vs_cache_i_stream_TVALID;
input   vs_cache_i_stream_TREADY;
input   ap_start;
output   ap_done;
input   kq_cache_o_stream_TVALID;
output   kq_cache_o_stream_TREADY;
input   ks_cache_o_stream_TVALID;
output   ks_cache_o_stream_TREADY;
input   vq_cache_o_stream_TVALID;
output   vq_cache_o_stream_TREADY;
input   vs_cache_o_stream_TVALID;
output   vs_cache_o_stream_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

 reg    ap_rst_n_inv;
wire    gmem1_0_AWREADY;
wire    gmem1_0_WREADY;
wire    gmem1_0_ARREADY;
wire    gmem1_0_RVALID;
wire   [127:0] gmem1_0_RDATA;
wire    gmem1_0_RLAST;
wire   [0:0] gmem1_0_RID;
wire   [8:0] gmem1_0_RFIFONUM;
wire   [0:0] gmem1_0_RUSER;
wire   [1:0] gmem1_0_RRESP;
wire    gmem1_0_BVALID;
wire   [1:0] gmem1_0_BRESP;
wire   [0:0] gmem1_0_BID;
wire   [0:0] gmem1_0_BUSER;
wire    rd_kv_cache_U0_ap_start;
wire    rd_kv_cache_U0_ap_done;
wire    rd_kv_cache_U0_ap_continue;
wire    rd_kv_cache_U0_ap_idle;
wire    rd_kv_cache_U0_ap_ready;
wire    rd_kv_cache_U0_m_axi_gmem1_0_AWVALID;
wire   [63:0] rd_kv_cache_U0_m_axi_gmem1_0_AWADDR;
wire   [0:0] rd_kv_cache_U0_m_axi_gmem1_0_AWID;
wire   [31:0] rd_kv_cache_U0_m_axi_gmem1_0_AWLEN;
wire   [2:0] rd_kv_cache_U0_m_axi_gmem1_0_AWSIZE;
wire   [1:0] rd_kv_cache_U0_m_axi_gmem1_0_AWBURST;
wire   [1:0] rd_kv_cache_U0_m_axi_gmem1_0_AWLOCK;
wire   [3:0] rd_kv_cache_U0_m_axi_gmem1_0_AWCACHE;
wire   [2:0] rd_kv_cache_U0_m_axi_gmem1_0_AWPROT;
wire   [3:0] rd_kv_cache_U0_m_axi_gmem1_0_AWQOS;
wire   [3:0] rd_kv_cache_U0_m_axi_gmem1_0_AWREGION;
wire   [0:0] rd_kv_cache_U0_m_axi_gmem1_0_AWUSER;
wire    rd_kv_cache_U0_m_axi_gmem1_0_WVALID;
wire   [127:0] rd_kv_cache_U0_m_axi_gmem1_0_WDATA;
wire   [15:0] rd_kv_cache_U0_m_axi_gmem1_0_WSTRB;
wire    rd_kv_cache_U0_m_axi_gmem1_0_WLAST;
wire   [0:0] rd_kv_cache_U0_m_axi_gmem1_0_WID;
wire   [0:0] rd_kv_cache_U0_m_axi_gmem1_0_WUSER;
wire    rd_kv_cache_U0_m_axi_gmem1_0_ARVALID;
wire   [63:0] rd_kv_cache_U0_m_axi_gmem1_0_ARADDR;
wire   [0:0] rd_kv_cache_U0_m_axi_gmem1_0_ARID;
wire   [31:0] rd_kv_cache_U0_m_axi_gmem1_0_ARLEN;
wire   [2:0] rd_kv_cache_U0_m_axi_gmem1_0_ARSIZE;
wire   [1:0] rd_kv_cache_U0_m_axi_gmem1_0_ARBURST;
wire   [1:0] rd_kv_cache_U0_m_axi_gmem1_0_ARLOCK;
wire   [3:0] rd_kv_cache_U0_m_axi_gmem1_0_ARCACHE;
wire   [2:0] rd_kv_cache_U0_m_axi_gmem1_0_ARPROT;
wire   [3:0] rd_kv_cache_U0_m_axi_gmem1_0_ARQOS;
wire   [3:0] rd_kv_cache_U0_m_axi_gmem1_0_ARREGION;
wire   [0:0] rd_kv_cache_U0_m_axi_gmem1_0_ARUSER;
wire    rd_kv_cache_U0_m_axi_gmem1_0_RREADY;
wire    rd_kv_cache_U0_m_axi_gmem1_0_BREADY;
wire   [63:0] rd_kv_cache_U0_kq_cache_i_stream_TDATA;
wire    rd_kv_cache_U0_kq_cache_i_stream_TVALID;
wire   [7:0] rd_kv_cache_U0_ks_cache_i_stream_TDATA;
wire    rd_kv_cache_U0_ks_cache_i_stream_TVALID;
wire   [63:0] rd_kv_cache_U0_vq_cache_i_stream_TDATA;
wire    rd_kv_cache_U0_vq_cache_i_stream_TVALID;
wire   [7:0] rd_kv_cache_U0_vs_cache_i_stream_TDATA;
wire    rd_kv_cache_U0_vs_cache_i_stream_TVALID;
wire    ap_sync_continue;
wire    wr_kv_cache_U0_ap_start;
wire    wr_kv_cache_U0_ap_done;
wire    wr_kv_cache_U0_ap_continue;
wire    wr_kv_cache_U0_ap_idle;
wire    wr_kv_cache_U0_ap_ready;
wire    wr_kv_cache_U0_m_axi_gmem1_0_AWVALID;
wire   [63:0] wr_kv_cache_U0_m_axi_gmem1_0_AWADDR;
wire   [0:0] wr_kv_cache_U0_m_axi_gmem1_0_AWID;
wire   [31:0] wr_kv_cache_U0_m_axi_gmem1_0_AWLEN;
wire   [2:0] wr_kv_cache_U0_m_axi_gmem1_0_AWSIZE;
wire   [1:0] wr_kv_cache_U0_m_axi_gmem1_0_AWBURST;
wire   [1:0] wr_kv_cache_U0_m_axi_gmem1_0_AWLOCK;
wire   [3:0] wr_kv_cache_U0_m_axi_gmem1_0_AWCACHE;
wire   [2:0] wr_kv_cache_U0_m_axi_gmem1_0_AWPROT;
wire   [3:0] wr_kv_cache_U0_m_axi_gmem1_0_AWQOS;
wire   [3:0] wr_kv_cache_U0_m_axi_gmem1_0_AWREGION;
wire   [0:0] wr_kv_cache_U0_m_axi_gmem1_0_AWUSER;
wire    wr_kv_cache_U0_m_axi_gmem1_0_WVALID;
wire   [127:0] wr_kv_cache_U0_m_axi_gmem1_0_WDATA;
wire   [15:0] wr_kv_cache_U0_m_axi_gmem1_0_WSTRB;
wire    wr_kv_cache_U0_m_axi_gmem1_0_WLAST;
wire   [0:0] wr_kv_cache_U0_m_axi_gmem1_0_WID;
wire   [0:0] wr_kv_cache_U0_m_axi_gmem1_0_WUSER;
wire    wr_kv_cache_U0_m_axi_gmem1_0_ARVALID;
wire   [63:0] wr_kv_cache_U0_m_axi_gmem1_0_ARADDR;
wire   [0:0] wr_kv_cache_U0_m_axi_gmem1_0_ARID;
wire   [31:0] wr_kv_cache_U0_m_axi_gmem1_0_ARLEN;
wire   [2:0] wr_kv_cache_U0_m_axi_gmem1_0_ARSIZE;
wire   [1:0] wr_kv_cache_U0_m_axi_gmem1_0_ARBURST;
wire   [1:0] wr_kv_cache_U0_m_axi_gmem1_0_ARLOCK;
wire   [3:0] wr_kv_cache_U0_m_axi_gmem1_0_ARCACHE;
wire   [2:0] wr_kv_cache_U0_m_axi_gmem1_0_ARPROT;
wire   [3:0] wr_kv_cache_U0_m_axi_gmem1_0_ARQOS;
wire   [3:0] wr_kv_cache_U0_m_axi_gmem1_0_ARREGION;
wire   [0:0] wr_kv_cache_U0_m_axi_gmem1_0_ARUSER;
wire    wr_kv_cache_U0_m_axi_gmem1_0_RREADY;
wire    wr_kv_cache_U0_m_axi_gmem1_0_BREADY;
wire    wr_kv_cache_U0_kq_cache_o_stream_TREADY;
wire    wr_kv_cache_U0_ks_cache_o_stream_TREADY;
wire    wr_kv_cache_U0_vq_cache_o_stream_TREADY;
wire    wr_kv_cache_U0_vs_cache_o_stream_TREADY;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_rd_kv_cache_U0_ap_ready;
wire    ap_sync_rd_kv_cache_U0_ap_ready;
reg    ap_sync_reg_wr_kv_cache_U0_ap_ready;
wire    ap_sync_wr_kv_cache_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_rd_kv_cache_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_wr_kv_cache_U0_ap_ready = 1'b0;
end

KV_CACHE_gmem1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 128 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(rd_kv_cache_U0_m_axi_gmem1_0_ARVALID),
    .I_CH0_ARREADY(gmem1_0_ARREADY),
    .I_CH0_ARADDR(rd_kv_cache_U0_m_axi_gmem1_0_ARADDR),
    .I_CH0_ARLEN(rd_kv_cache_U0_m_axi_gmem1_0_ARLEN),
    .I_CH0_RVALID(gmem1_0_RVALID),
    .I_CH0_RREADY(rd_kv_cache_U0_m_axi_gmem1_0_RREADY),
    .I_CH0_RDATA(gmem1_0_RDATA),
    .I_CH0_RFIFONUM(gmem1_0_RFIFONUM),
    .I_CH0_AWVALID(wr_kv_cache_U0_m_axi_gmem1_0_AWVALID),
    .I_CH0_AWREADY(gmem1_0_AWREADY),
    .I_CH0_AWADDR(wr_kv_cache_U0_m_axi_gmem1_0_AWADDR),
    .I_CH0_AWLEN(wr_kv_cache_U0_m_axi_gmem1_0_AWLEN),
    .I_CH0_WVALID(wr_kv_cache_U0_m_axi_gmem1_0_WVALID),
    .I_CH0_WREADY(gmem1_0_WREADY),
    .I_CH0_WDATA(wr_kv_cache_U0_m_axi_gmem1_0_WDATA),
    .I_CH0_WSTRB(wr_kv_cache_U0_m_axi_gmem1_0_WSTRB),
    .I_CH0_BVALID(gmem1_0_BVALID),
    .I_CH0_BREADY(wr_kv_cache_U0_m_axi_gmem1_0_BREADY)
);

KV_CACHE_rd_kv_cache rd_kv_cache_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(rd_kv_cache_U0_ap_start),
    .ap_done(rd_kv_cache_U0_ap_done),
    .ap_continue(rd_kv_cache_U0_ap_continue),
    .ap_idle(rd_kv_cache_U0_ap_idle),
    .ap_ready(rd_kv_cache_U0_ap_ready),
    .l_begin(l_begin),
    .l_close(l_close),
    .m_axi_gmem1_0_AWVALID(rd_kv_cache_U0_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(rd_kv_cache_U0_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(rd_kv_cache_U0_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(rd_kv_cache_U0_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(rd_kv_cache_U0_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(rd_kv_cache_U0_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(rd_kv_cache_U0_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(rd_kv_cache_U0_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(rd_kv_cache_U0_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(rd_kv_cache_U0_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(rd_kv_cache_U0_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(rd_kv_cache_U0_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(rd_kv_cache_U0_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(rd_kv_cache_U0_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(rd_kv_cache_U0_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(rd_kv_cache_U0_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(rd_kv_cache_U0_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(rd_kv_cache_U0_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(rd_kv_cache_U0_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(rd_kv_cache_U0_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(rd_kv_cache_U0_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(rd_kv_cache_U0_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(rd_kv_cache_U0_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(rd_kv_cache_U0_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(rd_kv_cache_U0_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(rd_kv_cache_U0_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(rd_kv_cache_U0_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(rd_kv_cache_U0_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(rd_kv_cache_U0_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(rd_kv_cache_U0_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(rd_kv_cache_U0_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(rd_kv_cache_U0_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .memory_k_cache(memory_k_cache),
    .kq_cache_i_stream_TDATA(rd_kv_cache_U0_kq_cache_i_stream_TDATA),
    .kq_cache_i_stream_TVALID(rd_kv_cache_U0_kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(kq_cache_i_stream_TREADY),
    .ks_cache_i_stream_TDATA(rd_kv_cache_U0_ks_cache_i_stream_TDATA),
    .ks_cache_i_stream_TVALID(rd_kv_cache_U0_ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(ks_cache_i_stream_TREADY),
    .vq_cache_i_stream_TDATA(rd_kv_cache_U0_vq_cache_i_stream_TDATA),
    .vq_cache_i_stream_TVALID(rd_kv_cache_U0_vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TDATA(rd_kv_cache_U0_vs_cache_i_stream_TDATA),
    .vs_cache_i_stream_TVALID(rd_kv_cache_U0_vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(vs_cache_i_stream_TREADY)
);

KV_CACHE_wr_kv_cache wr_kv_cache_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(wr_kv_cache_U0_ap_start),
    .ap_done(wr_kv_cache_U0_ap_done),
    .ap_continue(wr_kv_cache_U0_ap_continue),
    .ap_idle(wr_kv_cache_U0_ap_idle),
    .ap_ready(wr_kv_cache_U0_ap_ready),
    .l_begin(l_begin),
    .l_close(l_close),
    .pos_id(pos_id),
    .m_axi_gmem1_0_AWVALID(wr_kv_cache_U0_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(gmem1_0_AWREADY),
    .m_axi_gmem1_0_AWADDR(wr_kv_cache_U0_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(wr_kv_cache_U0_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(wr_kv_cache_U0_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(wr_kv_cache_U0_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(wr_kv_cache_U0_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(wr_kv_cache_U0_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(wr_kv_cache_U0_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(wr_kv_cache_U0_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(wr_kv_cache_U0_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(wr_kv_cache_U0_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(wr_kv_cache_U0_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(wr_kv_cache_U0_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(gmem1_0_WREADY),
    .m_axi_gmem1_0_WDATA(wr_kv_cache_U0_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(wr_kv_cache_U0_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(wr_kv_cache_U0_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(wr_kv_cache_U0_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(wr_kv_cache_U0_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(wr_kv_cache_U0_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(1'b0),
    .m_axi_gmem1_0_ARADDR(wr_kv_cache_U0_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(wr_kv_cache_U0_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(wr_kv_cache_U0_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(wr_kv_cache_U0_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(wr_kv_cache_U0_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(wr_kv_cache_U0_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(wr_kv_cache_U0_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(wr_kv_cache_U0_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(wr_kv_cache_U0_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(wr_kv_cache_U0_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(wr_kv_cache_U0_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(1'b0),
    .m_axi_gmem1_0_RREADY(wr_kv_cache_U0_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(128'd0),
    .m_axi_gmem1_0_RLAST(1'b0),
    .m_axi_gmem1_0_RID(1'd0),
    .m_axi_gmem1_0_RFIFONUM(9'd0),
    .m_axi_gmem1_0_RUSER(1'd0),
    .m_axi_gmem1_0_RRESP(2'd0),
    .m_axi_gmem1_0_BVALID(gmem1_0_BVALID),
    .m_axi_gmem1_0_BREADY(wr_kv_cache_U0_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(gmem1_0_BRESP),
    .m_axi_gmem1_0_BID(gmem1_0_BID),
    .m_axi_gmem1_0_BUSER(gmem1_0_BUSER),
    .memory_k_cache(memory_k_cache),
    .kq_cache_o_stream_TDATA(kq_cache_o_stream_TDATA),
    .kq_cache_o_stream_TVALID(kq_cache_o_stream_TVALID),
    .kq_cache_o_stream_TREADY(wr_kv_cache_U0_kq_cache_o_stream_TREADY),
    .ks_cache_o_stream_TDATA(ks_cache_o_stream_TDATA),
    .ks_cache_o_stream_TVALID(ks_cache_o_stream_TVALID),
    .ks_cache_o_stream_TREADY(wr_kv_cache_U0_ks_cache_o_stream_TREADY),
    .vq_cache_o_stream_TDATA(vq_cache_o_stream_TDATA),
    .vq_cache_o_stream_TVALID(vq_cache_o_stream_TVALID),
    .vq_cache_o_stream_TREADY(wr_kv_cache_U0_vq_cache_o_stream_TREADY),
    .vs_cache_o_stream_TDATA(vs_cache_o_stream_TDATA),
    .vs_cache_o_stream_TVALID(vs_cache_o_stream_TVALID),
    .vs_cache_o_stream_TREADY(wr_kv_cache_U0_vs_cache_o_stream_TREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_rd_kv_cache_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_rd_kv_cache_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_rd_kv_cache_U0_ap_ready <= ap_sync_rd_kv_cache_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_wr_kv_cache_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_wr_kv_cache_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_wr_kv_cache_U0_ap_ready <= ap_sync_wr_kv_cache_U0_ap_ready;
        end
    end
end

assign ap_done = ap_sync_done;

assign ap_idle = (wr_kv_cache_U0_ap_idle & rd_kv_cache_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (wr_kv_cache_U0_ap_done & rd_kv_cache_U0_ap_done);

assign ap_sync_rd_kv_cache_U0_ap_ready = (rd_kv_cache_U0_ap_ready | ap_sync_reg_rd_kv_cache_U0_ap_ready);

assign ap_sync_ready = (ap_sync_wr_kv_cache_U0_ap_ready & ap_sync_rd_kv_cache_U0_ap_ready);

assign ap_sync_wr_kv_cache_U0_ap_ready = (wr_kv_cache_U0_ap_ready | ap_sync_reg_wr_kv_cache_U0_ap_ready);

assign gmem1_0_BID = 1'd0;

assign gmem1_0_BRESP = 2'd0;

assign gmem1_0_BUSER = 1'd0;

assign gmem1_0_RID = 1'd0;

assign gmem1_0_RLAST = 1'b0;

assign gmem1_0_RRESP = 2'd0;

assign gmem1_0_RUSER = 1'd0;

assign kq_cache_i_stream_TDATA = rd_kv_cache_U0_kq_cache_i_stream_TDATA;

assign kq_cache_i_stream_TVALID = rd_kv_cache_U0_kq_cache_i_stream_TVALID;

assign kq_cache_o_stream_TREADY = wr_kv_cache_U0_kq_cache_o_stream_TREADY;

assign ks_cache_i_stream_TDATA = rd_kv_cache_U0_ks_cache_i_stream_TDATA;

assign ks_cache_i_stream_TVALID = rd_kv_cache_U0_ks_cache_i_stream_TVALID;

assign ks_cache_o_stream_TREADY = wr_kv_cache_U0_ks_cache_o_stream_TREADY;

assign rd_kv_cache_U0_ap_continue = ap_sync_continue;

assign rd_kv_cache_U0_ap_start = ((ap_sync_reg_rd_kv_cache_U0_ap_ready ^ 1'b1) & ap_start);

assign vq_cache_i_stream_TDATA = rd_kv_cache_U0_vq_cache_i_stream_TDATA;

assign vq_cache_i_stream_TVALID = rd_kv_cache_U0_vq_cache_i_stream_TVALID;

assign vq_cache_o_stream_TREADY = wr_kv_cache_U0_vq_cache_o_stream_TREADY;

assign vs_cache_i_stream_TDATA = rd_kv_cache_U0_vs_cache_i_stream_TDATA;

assign vs_cache_i_stream_TVALID = rd_kv_cache_U0_vs_cache_i_stream_TVALID;

assign vs_cache_o_stream_TREADY = wr_kv_cache_U0_vs_cache_o_stream_TREADY;

assign wr_kv_cache_U0_ap_continue = ap_sync_continue;

assign wr_kv_cache_U0_ap_start = ((ap_sync_reg_wr_kv_cache_U0_ap_ready ^ 1'b1) & ap_start);

endmodule //KV_CACHE
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1 (
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        h,
        indvar,
        l_begin,
        memory_k_cache,
        kq_cache_i_stream_TDATA,
        ks_cache_i_stream_TDATA,
        vq_cache_i_stream_TDATA,
        vs_cache_i_stream_TDATA,
        ap_clk,
        ap_rst,
        h_ap_vld,
        indvar_ap_vld,
        l_begin_ap_vld,
        memory_k_cache_ap_vld,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [3:0] h;
input  [59:0] indvar;
input  [31:0] l_begin;
input  [63:0] memory_k_cache;
output  [63:0] kq_cache_i_stream_TDATA;
output  [7:0] ks_cache_i_stream_TDATA;
output  [63:0] vq_cache_i_stream_TDATA;
output  [7:0] vs_cache_i_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   h_ap_vld;
input   indvar_ap_vld;
input   l_begin_ap_vld;
input   memory_k_cache_ap_vld;
output   kq_cache_i_stream_TVALID;
input   kq_cache_i_stream_TREADY;
output   ks_cache_i_stream_TVALID;
input   ks_cache_i_stream_TREADY;
output   vq_cache_i_stream_TVALID;
input   vq_cache_i_stream_TREADY;
output   vs_cache_i_stream_TVALID;
input   vs_cache_i_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_start;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_done;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_continue;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_idle;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_ready;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWVALID;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWADDR;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWID;
wire   [31:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWLEN;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWSIZE;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWBURST;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWLOCK;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWCACHE;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWPROT;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWQOS;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWREGION;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWUSER;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WVALID;
wire   [127:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WDATA;
wire   [15:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WSTRB;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WLAST;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WID;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WUSER;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARVALID;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARADDR;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARID;
wire   [31:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARLEN;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARSIZE;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARBURST;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARLOCK;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARCACHE;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARPROT;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARQOS;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARREGION;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARUSER;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_RREADY;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_BREADY;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_kq_cache_i_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_kq_cache_i_stream_TVALID;
wire   [7:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ks_cache_i_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ks_cache_i_stream_TVALID;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vq_cache_i_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vq_cache_i_stream_TVALID;
wire   [7:0] dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vs_cache_i_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vs_cache_i_stream_TVALID;

KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32 dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_start),
    .ap_done(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_done),
    .ap_continue(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_continue),
    .ap_idle(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_idle),
    .ap_ready(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_ready),
    .h(h),
    .indvar(indvar),
    .l_begin(l_begin),
    .memory_k_cache(memory_k_cache),
    .m_axi_gmem1_0_AWVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(m_axi_gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(m_axi_gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(m_axi_gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(m_axi_gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(m_axi_gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(m_axi_gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(m_axi_gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(m_axi_gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .kq_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_kq_cache_i_stream_TDATA),
    .kq_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(kq_cache_i_stream_TREADY),
    .ks_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ks_cache_i_stream_TDATA),
    .ks_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(ks_cache_i_stream_TREADY),
    .vq_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vq_cache_i_stream_TDATA),
    .vq_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vs_cache_i_stream_TDATA),
    .vs_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(vs_cache_i_stream_TREADY)
);

assign ap_done = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_done;

assign ap_idle = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_idle;

assign ap_ready = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_ready;

assign dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_continue = ap_continue;

assign dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ap_start = ap_start;

assign kq_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_kq_cache_i_stream_TDATA;

assign kq_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_kq_cache_i_stream_TVALID;

assign ks_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ks_cache_i_stream_TDATA;

assign ks_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_ks_cache_i_stream_TVALID;

assign m_axi_gmem1_0_ARADDR = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARADDR;

assign m_axi_gmem1_0_ARBURST = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARBURST;

assign m_axi_gmem1_0_ARCACHE = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARCACHE;

assign m_axi_gmem1_0_ARID = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARID;

assign m_axi_gmem1_0_ARLEN = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARLEN;

assign m_axi_gmem1_0_ARLOCK = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARLOCK;

assign m_axi_gmem1_0_ARPROT = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARPROT;

assign m_axi_gmem1_0_ARQOS = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARQOS;

assign m_axi_gmem1_0_ARREGION = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARREGION;

assign m_axi_gmem1_0_ARSIZE = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARSIZE;

assign m_axi_gmem1_0_ARUSER = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARUSER;

assign m_axi_gmem1_0_ARVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_ARVALID;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_RREADY = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_m_axi_gmem1_0_RREADY;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign vq_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vq_cache_i_stream_TDATA;

assign vq_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vq_cache_i_stream_TVALID;

assign vs_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vs_cache_i_stream_TDATA;

assign vs_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_U0_vs_cache_i_stream_TVALID;

endmodule //KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        h,
        indvar,
        l_begin,
        memory_k_cache,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        kq_cache_i_stream_TDATA,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TDATA,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        vq_cache_i_stream_TDATA,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TDATA,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [3:0] h;
input  [59:0] indvar;
input  [31:0] l_begin;
input  [63:0] memory_k_cache;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
output  [63:0] kq_cache_i_stream_TDATA;
output   kq_cache_i_stream_TVALID;
input   kq_cache_i_stream_TREADY;
output  [7:0] ks_cache_i_stream_TDATA;
output   ks_cache_i_stream_TVALID;
input   ks_cache_i_stream_TREADY;
output  [63:0] vq_cache_i_stream_TDATA;
output   vq_cache_i_stream_TVALID;
input   vq_cache_i_stream_TREADY;
output  [7:0] vs_cache_i_stream_TDATA;
output   vs_cache_i_stream_TVALID;
input   vs_cache_i_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem1_0_ARVALID;
reg[63:0] m_axi_gmem1_0_ARADDR;
reg[0:0] m_axi_gmem1_0_ARID;
reg[31:0] m_axi_gmem1_0_ARLEN;
reg[2:0] m_axi_gmem1_0_ARSIZE;
reg[1:0] m_axi_gmem1_0_ARBURST;
reg[1:0] m_axi_gmem1_0_ARLOCK;
reg[3:0] m_axi_gmem1_0_ARCACHE;
reg[2:0] m_axi_gmem1_0_ARPROT;
reg[3:0] m_axi_gmem1_0_ARQOS;
reg[3:0] m_axi_gmem1_0_ARREGION;
reg[0:0] m_axi_gmem1_0_ARUSER;
reg m_axi_gmem1_0_RREADY;
reg[63:0] kq_cache_i_stream_TDATA;
reg[7:0] ks_cache_i_stream_TDATA;
reg[63:0] vq_cache_i_stream_TDATA;
reg[7:0] vs_cache_i_stream_TDATA;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state15;
wire   [14:0] sub_ln55_fu_164_p2;
reg   [14:0] sub_ln55_reg_326;
reg    ap_block_state1;
wire   [59:0] add_ln54_fu_174_p2;
reg   [59:0] add_ln54_reg_332;
wire   [59:0] add_ln54_2_fu_204_p2;
reg   [59:0] add_ln54_2_reg_339;
wire    ap_CS_fsm_state2;
wire   [19:0] add_ln55_2_fu_210_p2;
reg   [19:0] add_ln55_2_reg_345;
wire   [59:0] add_ln55_fu_219_p2;
reg   [59:0] add_ln55_reg_350;
wire    ap_CS_fsm_state3;
wire   [59:0] add_ln55_3_fu_227_p2;
reg   [59:0] add_ln55_3_reg_355;
reg   [59:0] trunc_ln_i_reg_360;
wire    ap_CS_fsm_state4;
reg   [59:0] trunc_ln6_i_reg_366;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_done;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_idle;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_ready;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWVALID;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWADDR;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWID;
wire   [31:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWLEN;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWSIZE;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWBURST;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWLOCK;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWCACHE;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWPROT;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWQOS;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWREGION;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWUSER;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WVALID;
wire   [127:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WDATA;
wire   [15:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WSTRB;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WLAST;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WID;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WUSER;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARVALID;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARADDR;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARID;
wire   [31:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARLEN;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARSIZE;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARBURST;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARLOCK;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARCACHE;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARPROT;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARQOS;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARREGION;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARUSER;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_RREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_BREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TREADY;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TVALID;
wire   [7:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_idle;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_ready;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWVALID;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWADDR;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWID;
wire   [31:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWLEN;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWSIZE;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWBURST;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWLOCK;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWCACHE;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWPROT;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWQOS;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWREGION;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWUSER;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WVALID;
wire   [127:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WDATA;
wire   [15:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WSTRB;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WLAST;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WID;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WUSER;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARVALID;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARADDR;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARID;
wire   [31:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARLEN;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARSIZE;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARBURST;
wire   [1:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARLOCK;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARCACHE;
wire   [2:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARPROT;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARQOS;
wire   [3:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARREGION;
wire   [0:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARUSER;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_RREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_BREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TREADY;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TVALID;
wire   [7:0] grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TVALID;
reg    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [63:0] kq_cache_i_stream_TDATA_reg;
reg   [7:0] ks_cache_i_stream_TDATA_reg;
reg    grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg   [63:0] vq_cache_i_stream_TDATA_reg;
reg   [7:0] vs_cache_i_stream_TDATA_reg;
wire  signed [63:0] sext_ln58_fu_278_p1;
wire  signed [63:0] sext_ln75_fu_302_p1;
wire   [12:0] tmp_fu_152_p3;
wire   [14:0] p_shl8_fu_144_p3;
wire   [14:0] zext_ln55_fu_160_p1;
wire  signed [59:0] sext_ln54_fu_170_p1;
wire   [59:0] shl_ln54_fu_183_p2;
wire   [59:0] shl_ln54_1_fu_188_p2;
wire   [59:0] add_ln54_1_fu_193_p2;
wire   [59:0] shl_ln54_2_fu_199_p2;
wire   [19:0] zext_ln54_1_fu_180_p1;
wire   [59:0] zext_ln54_fu_216_p1;
wire   [59:0] zext_ln55_1_fu_224_p1;
wire   [63:0] shl_ln55_1_i_fu_232_p3;
wire   [63:0] shl_ln_i_fu_245_p3;
wire   [63:0] add_ln55_1_fu_239_p2;
wire   [63:0] add_ln55_4_fu_252_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 24'd1;
//#0 grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start_reg = 1'b0;
//#0 grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start_reg = 1'b0;
end

KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1 grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start),
    .ap_done(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_done),
    .ap_idle(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_idle),
    .ap_ready(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_ready),
    .m_axi_gmem1_0_AWVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(m_axi_gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(m_axi_gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(m_axi_gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(m_axi_gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(m_axi_gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(m_axi_gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(m_axi_gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(m_axi_gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .kq_cache_i_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TREADY),
    .ks_cache_i_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TREADY),
    .sext_ln58_i(trunc_ln_i_reg_360),
    .kq_cache_i_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TDATA),
    .kq_cache_i_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TVALID),
    .ks_cache_i_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TDATA),
    .ks_cache_i_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TVALID)
);

KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start),
    .ap_done(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done),
    .ap_idle(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_idle),
    .ap_ready(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_ready),
    .m_axi_gmem1_0_AWVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(m_axi_gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(m_axi_gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(m_axi_gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(m_axi_gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(m_axi_gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(m_axi_gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(m_axi_gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(m_axi_gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .vq_cache_i_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TREADY),
    .sext_ln75_i(trunc_ln6_i_reg_366),
    .vq_cache_i_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TDATA),
    .vq_cache_i_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TVALID),
    .vs_cache_i_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TDATA),
    .vs_cache_i_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TVALID)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_ready == 1'b1)) begin
            grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_ready == 1'b1)) begin
            grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln54_2_reg_339 <= add_ln54_2_fu_204_p2;
        add_ln55_2_reg_345[19 : 9] <= add_ln55_2_fu_210_p2[19 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        add_ln54_reg_332 <= add_ln54_fu_174_p2;
        sub_ln55_reg_326[14 : 9] <= sub_ln55_fu_164_p2[14 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln55_3_reg_355 <= add_ln55_3_fu_227_p2;
        add_ln55_reg_350 <= add_ln55_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        kq_cache_i_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ks_cache_i_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln6_i_reg_366 <= {{add_ln55_4_fu_252_p2[63:4]}};
        trunc_ln_i_reg_360 <= {{add_ln55_1_fu_239_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        vq_cache_i_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        vs_cache_i_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem1_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem1_blk_n_AR = m_axi_gmem1_0_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        kq_cache_i_stream_TDATA = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TDATA;
    end else begin
        kq_cache_i_stream_TDATA = kq_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ks_cache_i_stream_TDATA = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TDATA;
    end else begin
        ks_cache_i_stream_TDATA = ks_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_gmem1_0_ARADDR = sext_ln75_fu_302_p1;
    end else if (((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_gmem1_0_ARADDR = sext_ln58_fu_278_p1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARADDR = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARADDR = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARADDR;
    end else begin
        m_axi_gmem1_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARBURST = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARBURST = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARBURST;
    end else begin
        m_axi_gmem1_0_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARCACHE = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARCACHE = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARCACHE;
    end else begin
        m_axi_gmem1_0_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARID;
    end else begin
        m_axi_gmem1_0_ARID = 1'd0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_gmem1_0_ARLEN = 64'd1536;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARLEN = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARLEN = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARLEN;
    end else begin
        m_axi_gmem1_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARLOCK = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARLOCK = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARLOCK;
    end else begin
        m_axi_gmem1_0_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARPROT = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARPROT = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARPROT;
    end else begin
        m_axi_gmem1_0_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARQOS = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARQOS = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARQOS;
    end else begin
        m_axi_gmem1_0_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARREGION = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARREGION = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARREGION;
    end else begin
        m_axi_gmem1_0_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARSIZE = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARSIZE = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARSIZE;
    end else begin
        m_axi_gmem1_0_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARUSER = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARUSER = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARUSER;
    end else begin
        m_axi_gmem1_0_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_gmem1_0_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_ARVALID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_ARVALID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_ARVALID;
    end else begin
        m_axi_gmem1_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_RREADY = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_m_axi_gmem1_0_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_gmem1_0_RREADY = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_m_axi_gmem1_0_RREADY;
    end else begin
        m_axi_gmem1_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        vq_cache_i_stream_TDATA = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TDATA;
    end else begin
        vq_cache_i_stream_TDATA = vq_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        vs_cache_i_stream_TDATA = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TDATA;
    end else begin
        vs_cache_i_stream_TDATA = vs_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_gmem1_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_193_p2 = (shl_ln54_fu_183_p2 + shl_ln54_1_fu_188_p2);

assign add_ln54_2_fu_204_p2 = (add_ln54_1_fu_193_p2 + shl_ln54_2_fu_199_p2);

assign add_ln54_fu_174_p2 = ($signed(sext_ln54_fu_170_p1) + $signed(indvar));

assign add_ln55_1_fu_239_p2 = (shl_ln55_1_i_fu_232_p3 + memory_k_cache);

assign add_ln55_2_fu_210_p2 = (zext_ln54_1_fu_180_p1 + 20'd516096);

assign add_ln55_3_fu_227_p2 = (zext_ln55_1_fu_224_p1 + add_ln54_2_reg_339);

assign add_ln55_4_fu_252_p2 = (shl_ln_i_fu_245_p3 + memory_k_cache);

assign add_ln55_fu_219_p2 = (add_ln54_2_reg_339 + zext_ln54_fu_216_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ap_start_reg;

assign grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TREADY = (kq_cache_i_stream_TREADY & ap_CS_fsm_state14);

assign grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TREADY = (ks_cache_i_stream_TREADY & ap_CS_fsm_state14);

assign grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_ap_start_reg;

assign grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TREADY = (vq_cache_i_stream_TREADY & ap_CS_fsm_state24);

assign grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TREADY = (vs_cache_i_stream_TREADY & ap_CS_fsm_state24);

assign kq_cache_i_stream_TVALID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_kq_cache_i_stream_TVALID;

assign ks_cache_i_stream_TVALID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1_fu_122_ks_cache_i_stream_TVALID;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign p_shl8_fu_144_p3 = {{h}, {11'd0}};

assign sext_ln54_fu_170_p1 = $signed(l_begin);

assign sext_ln58_fu_278_p1 = $signed(trunc_ln_i_reg_360);

assign sext_ln75_fu_302_p1 = $signed(trunc_ln6_i_reg_366);

assign shl_ln54_1_fu_188_p2 = add_ln54_reg_332 << 60'd12;

assign shl_ln54_2_fu_199_p2 = add_ln54_reg_332 << 60'd10;

assign shl_ln54_fu_183_p2 = add_ln54_reg_332 << 60'd14;

assign shl_ln55_1_i_fu_232_p3 = {{add_ln55_reg_350}, {4'd0}};

assign shl_ln_i_fu_245_p3 = {{add_ln55_3_reg_355}, {4'd0}};

assign sub_ln55_fu_164_p2 = (p_shl8_fu_144_p3 - zext_ln55_fu_160_p1);

assign tmp_fu_152_p3 = {{h}, {9'd0}};

assign vq_cache_i_stream_TVALID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vq_cache_i_stream_TVALID;

assign vs_cache_i_stream_TVALID = grp_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s_fu_133_vs_cache_i_stream_TVALID;

assign zext_ln54_1_fu_180_p1 = sub_ln55_reg_326;

assign zext_ln54_fu_216_p1 = sub_ln55_reg_326;

assign zext_ln55_1_fu_224_p1 = add_ln55_2_reg_345;

assign zext_ln55_fu_160_p1 = tmp_fu_152_p3;

always @ (posedge ap_clk) begin
    sub_ln55_reg_326[8:0] <= 9'b000000000;
    add_ln55_2_reg_345[8:0] <= 9'b000000000;
end

endmodule //KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TREADY,
        sext_ln58_i,
        kq_cache_i_stream_TDATA,
        kq_cache_i_stream_TVALID,
        ks_cache_i_stream_TDATA,
        ks_cache_i_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input   kq_cache_i_stream_TREADY;
input   ks_cache_i_stream_TREADY;
input  [59:0] sext_ln58_i;
output  [63:0] kq_cache_i_stream_TDATA;
output   kq_cache_i_stream_TVALID;
output  [7:0] ks_cache_i_stream_TDATA;
output   ks_cache_i_stream_TVALID;

reg ap_idle;
reg m_axi_gmem1_0_RREADY;
reg kq_cache_i_stream_TVALID;
reg ks_cache_i_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln58_reg_152;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln58_reg_152_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln58_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
reg    kq_cache_i_stream_TDATA_blk_n;
reg    ks_cache_i_stream_TDATA_blk_n;
reg   [3:0] tmp_i_i_reg_156;
wire   [63:0] trunc_ln70_fu_132_p1;
reg   [63:0] trunc_ln70_reg_161;
reg   [10:0] indvar_flatten_i_fu_60;
wire   [10:0] add_ln58_fu_107_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_i_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_131;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 indvar_flatten_i_fu_60 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

KV_CACHE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((icmp_ln58_fu_101_p2 == 1'd0)) begin
            indvar_flatten_i_fu_60 <= add_ln58_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_i_fu_60 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln58_reg_152 <= icmp_ln58_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln58_reg_152_pp0_iter1_reg <= icmp_ln58_reg_152;
        tmp_i_i_reg_156 <= {{m_axi_gmem1_0_RDATA[67:64]}};
        trunc_ln70_reg_161 <= trunc_ln70_fu_132_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln58_fu_101_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_i_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_i_load = indvar_flatten_i_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln58_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem1_blk_n_R = m_axi_gmem1_0_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln58_reg_152_pp0_iter1_reg == 1'd0))) begin
        kq_cache_i_stream_TDATA_blk_n = kq_cache_i_stream_TREADY;
    end else begin
        kq_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln58_reg_152_pp0_iter1_reg == 1'd0))) begin
        kq_cache_i_stream_TVALID = 1'b1;
    end else begin
        kq_cache_i_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln58_reg_152_pp0_iter1_reg == 1'd0))) begin
        ks_cache_i_stream_TDATA_blk_n = ks_cache_i_stream_TREADY;
    end else begin
        ks_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln58_reg_152_pp0_iter1_reg == 1'd0))) begin
        ks_cache_i_stream_TVALID = 1'b1;
    end else begin
        ks_cache_i_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln58_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        m_axi_gmem1_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage0_iter2) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln58_reg_152_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln58_fu_107_p2 = (ap_sig_allocacmp_indvar_flatten_i_load + 11'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln58_reg_152 == 1'd0) & (m_axi_gmem1_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ks_cache_i_stream_TREADY == 1'b0) & (icmp_ln58_reg_152_pp0_iter1_reg == 1'd0)) | ((icmp_ln58_reg_152_pp0_iter1_reg == 1'd0) & (kq_cache_i_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_131 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln58_fu_101_p2 = ((ap_sig_allocacmp_indvar_flatten_i_load == 11'd1536) ? 1'b1 : 1'b0);

assign kq_cache_i_stream_TDATA = trunc_ln70_reg_161;

assign ks_cache_i_stream_TDATA = tmp_i_i_reg_156;

assign m_axi_gmem1_0_ARADDR = 64'd0;

assign m_axi_gmem1_0_ARBURST = 2'd0;

assign m_axi_gmem1_0_ARCACHE = 4'd0;

assign m_axi_gmem1_0_ARID = 1'd0;

assign m_axi_gmem1_0_ARLEN = 32'd0;

assign m_axi_gmem1_0_ARLOCK = 2'd0;

assign m_axi_gmem1_0_ARPROT = 3'd0;

assign m_axi_gmem1_0_ARQOS = 4'd0;

assign m_axi_gmem1_0_ARREGION = 4'd0;

assign m_axi_gmem1_0_ARSIZE = 3'd0;

assign m_axi_gmem1_0_ARUSER = 1'd0;

assign m_axi_gmem1_0_ARVALID = 1'b0;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign trunc_ln70_fu_132_p1 = m_axi_gmem1_0_RDATA[63:0];

endmodule //KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TREADY,
        sext_ln75_i,
        vq_cache_i_stream_TDATA,
        vq_cache_i_stream_TVALID,
        vs_cache_i_stream_TDATA,
        vs_cache_i_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input   vq_cache_i_stream_TREADY;
input   vs_cache_i_stream_TREADY;
input  [59:0] sext_ln75_i;
output  [63:0] vq_cache_i_stream_TDATA;
output   vq_cache_i_stream_TVALID;
output  [7:0] vs_cache_i_stream_TDATA;
output   vs_cache_i_stream_TVALID;

reg ap_idle;
reg m_axi_gmem1_0_RREADY;
reg vq_cache_i_stream_TVALID;
reg vs_cache_i_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln75_reg_152;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln75_reg_152_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln75_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
reg    vq_cache_i_stream_TDATA_blk_n;
reg    vs_cache_i_stream_TDATA_blk_n;
reg   [3:0] tmp_1_i_i_reg_156;
wire   [63:0] trunc_ln87_fu_132_p1;
reg   [63:0] trunc_ln87_reg_161;
reg   [10:0] indvar_flatten6_i_fu_60;
wire   [10:0] add_ln75_fu_107_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_indvar_flatten6_i_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_131;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 indvar_flatten6_i_fu_60 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

KV_CACHE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((icmp_ln75_fu_101_p2 == 1'd0)) begin
            indvar_flatten6_i_fu_60 <= add_ln75_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_i_fu_60 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln75_reg_152 <= icmp_ln75_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln75_reg_152_pp0_iter1_reg <= icmp_ln75_reg_152;
        tmp_1_i_i_reg_156 <= {{m_axi_gmem1_0_RDATA[67:64]}};
        trunc_ln87_reg_161 <= trunc_ln87_fu_132_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln75_fu_101_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_i_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_i_load = indvar_flatten6_i_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        gmem1_blk_n_R = m_axi_gmem1_0_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln75_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        m_axi_gmem1_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_152_pp0_iter1_reg == 1'd0))) begin
        vq_cache_i_stream_TDATA_blk_n = vq_cache_i_stream_TREADY;
    end else begin
        vq_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln75_reg_152_pp0_iter1_reg == 1'd0))) begin
        vq_cache_i_stream_TVALID = 1'b1;
    end else begin
        vq_cache_i_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_152_pp0_iter1_reg == 1'd0))) begin
        vs_cache_i_stream_TDATA_blk_n = vs_cache_i_stream_TREADY;
    end else begin
        vs_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln75_reg_152_pp0_iter1_reg == 1'd0))) begin
        vs_cache_i_stream_TVALID = 1'b1;
    end else begin
        vs_cache_i_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage0_iter2) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln75_reg_152_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln75_fu_107_p2 = (ap_sig_allocacmp_indvar_flatten6_i_load + 11'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln75_reg_152 == 1'd0) & (m_axi_gmem1_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((vs_cache_i_stream_TREADY == 1'b0) & (icmp_ln75_reg_152_pp0_iter1_reg == 1'd0)) | ((icmp_ln75_reg_152_pp0_iter1_reg == 1'd0) & (vq_cache_i_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_131 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln75_fu_101_p2 = ((ap_sig_allocacmp_indvar_flatten6_i_load == 11'd1536) ? 1'b1 : 1'b0);

assign m_axi_gmem1_0_ARADDR = 64'd0;

assign m_axi_gmem1_0_ARBURST = 2'd0;

assign m_axi_gmem1_0_ARCACHE = 4'd0;

assign m_axi_gmem1_0_ARID = 1'd0;

assign m_axi_gmem1_0_ARLEN = 32'd0;

assign m_axi_gmem1_0_ARLOCK = 2'd0;

assign m_axi_gmem1_0_ARPROT = 3'd0;

assign m_axi_gmem1_0_ARQOS = 4'd0;

assign m_axi_gmem1_0_ARREGION = 4'd0;

assign m_axi_gmem1_0_ARSIZE = 3'd0;

assign m_axi_gmem1_0_ARUSER = 1'd0;

assign m_axi_gmem1_0_ARVALID = 1'b0;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign trunc_ln87_fu_132_p1 = m_axi_gmem1_0_RDATA[63:0];

assign vq_cache_i_stream_TDATA = trunc_ln87_reg_161;

assign vs_cache_i_stream_TDATA = tmp_1_i_i_reg_156;

endmodule //KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1_Block_newFuncRoot_proc32_Pipeline_VITIS_LOOP_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_dataflow_parent_loop_proc (
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        indvar,
        l_begin,
        memory_k_cache,
        kq_cache_i_stream_TDATA,
        ks_cache_i_stream_TDATA,
        vq_cache_i_stream_TDATA,
        vs_cache_i_stream_TDATA,
        ap_clk,
        ap_rst,
        indvar_ap_vld,
        l_begin_ap_vld,
        memory_k_cache_ap_vld,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [63:0] indvar;
input  [31:0] l_begin;
input  [63:0] memory_k_cache;
output  [63:0] kq_cache_i_stream_TDATA;
output  [7:0] ks_cache_i_stream_TDATA;
output  [63:0] vq_cache_i_stream_TDATA;
output  [7:0] vs_cache_i_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   indvar_ap_vld;
input   l_begin_ap_vld;
input   memory_k_cache_ap_vld;
output   kq_cache_i_stream_TVALID;
input   kq_cache_i_stream_TREADY;
output   ks_cache_i_stream_TVALID;
input   ks_cache_i_stream_TREADY;
output   vq_cache_i_stream_TVALID;
input   vq_cache_i_stream_TREADY;
output   vs_cache_i_stream_TVALID;
input   vs_cache_i_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWVALID;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWADDR;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWID;
wire   [31:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWLEN;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWSIZE;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWBURST;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWLOCK;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWCACHE;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWPROT;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWQOS;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWREGION;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWUSER;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WVALID;
wire   [127:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WDATA;
wire   [15:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WSTRB;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WLAST;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WID;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WUSER;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARVALID;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARADDR;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARID;
wire   [31:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARLEN;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARSIZE;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARBURST;
wire   [1:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARLOCK;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARCACHE;
wire   [2:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARPROT;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARQOS;
wire   [3:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARREGION;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARUSER;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_RREADY;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_BREADY;
wire   [59:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_indvar;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_kq_cache_i_stream_TDATA;
wire   [7:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ks_cache_i_stream_TDATA;
wire   [63:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vq_cache_i_stream_TDATA;
wire   [7:0] dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vs_cache_i_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_kq_cache_i_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ks_cache_i_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vq_cache_i_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vs_cache_i_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_start;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_done;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_ready;
wire    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_idle;
reg    dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_continue;
reg   [3:0] loop_dataflow_input_count;
reg   [3:0] loop_dataflow_output_count;
wire   [3:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 loop_dataflow_input_count = 4'd0;
//#0 loop_dataflow_output_count = 4'd0;
end

KV_CACHE_dataflow_in_loop_VITIS_LOOP_55_2_1 dataflow_in_loop_VITIS_LOOP_55_2_1_U0(
    .m_axi_gmem1_0_AWVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(m_axi_gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(m_axi_gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(m_axi_gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(m_axi_gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(m_axi_gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(m_axi_gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(m_axi_gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(m_axi_gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .h(loop_dataflow_input_count),
    .indvar(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_indvar),
    .l_begin(l_begin),
    .memory_k_cache(memory_k_cache),
    .kq_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_kq_cache_i_stream_TDATA),
    .ks_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ks_cache_i_stream_TDATA),
    .vq_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vq_cache_i_stream_TDATA),
    .vs_cache_i_stream_TDATA(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vs_cache_i_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .h_ap_vld(1'b0),
    .indvar_ap_vld(indvar_ap_vld),
    .l_begin_ap_vld(l_begin_ap_vld),
    .memory_k_cache_ap_vld(memory_k_cache_ap_vld),
    .kq_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(kq_cache_i_stream_TREADY),
    .ks_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(ks_cache_i_stream_TREADY),
    .vq_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TVALID(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(vs_cache_i_stream_TREADY),
    .ap_start(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_start),
    .ap_done(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_done),
    .ap_ready(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_ready),
    .ap_idle(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_idle),
    .ap_continue(dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 4'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 4'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 4'd0) & (ap_start == 1'b0) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (4'd14 - 4'd1);

assign dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ap_start = ap_start;

assign dataflow_in_loop_VITIS_LOOP_55_2_1_U0_indvar = {{indvar[(60 - 64'd1):0]}};

assign kq_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_kq_cache_i_stream_TDATA;

assign kq_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_kq_cache_i_stream_TVALID;

assign ks_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ks_cache_i_stream_TDATA;

assign ks_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_ks_cache_i_stream_TVALID;

assign m_axi_gmem1_0_ARADDR = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARADDR;

assign m_axi_gmem1_0_ARBURST = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARBURST;

assign m_axi_gmem1_0_ARCACHE = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARCACHE;

assign m_axi_gmem1_0_ARID = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARID;

assign m_axi_gmem1_0_ARLEN = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARLEN;

assign m_axi_gmem1_0_ARLOCK = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARLOCK;

assign m_axi_gmem1_0_ARPROT = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARPROT;

assign m_axi_gmem1_0_ARQOS = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARQOS;

assign m_axi_gmem1_0_ARREGION = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARREGION;

assign m_axi_gmem1_0_ARSIZE = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARSIZE;

assign m_axi_gmem1_0_ARUSER = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARUSER;

assign m_axi_gmem1_0_ARVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_ARVALID;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_RREADY = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_m_axi_gmem1_0_RREADY;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign vq_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vq_cache_i_stream_TDATA;

assign vq_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vq_cache_i_stream_TVALID;

assign vs_cache_i_stream_TDATA = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vs_cache_i_stream_TDATA;

assign vs_cache_i_stream_TVALID = dataflow_in_loop_VITIS_LOOP_55_2_1_U0_vs_cache_i_stream_TVALID;

endmodule //KV_CACHE_dataflow_parent_loop_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_dataflow_parent_loop_proc2 (
        xor_ln54_cast,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        l_begin,
        memory_k_cache,
        kq_cache_i_stream_TDATA,
        ks_cache_i_stream_TDATA,
        vq_cache_i_stream_TDATA,
        vs_cache_i_stream_TDATA,
        ap_clk,
        ap_rst,
        l_begin_ap_vld,
        memory_k_cache_ap_vld,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [32:0] xor_ln54_cast;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [31:0] l_begin;
input  [63:0] memory_k_cache;
output  [63:0] kq_cache_i_stream_TDATA;
output  [7:0] ks_cache_i_stream_TDATA;
output  [63:0] vq_cache_i_stream_TDATA;
output  [7:0] vs_cache_i_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   l_begin_ap_vld;
input   memory_k_cache_ap_vld;
output   kq_cache_i_stream_TVALID;
input   kq_cache_i_stream_TREADY;
output   ks_cache_i_stream_TVALID;
input   ks_cache_i_stream_TREADY;
output   vq_cache_i_stream_TVALID;
input   vq_cache_i_stream_TREADY;
output   vs_cache_i_stream_TVALID;
input   vs_cache_i_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire    dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWVALID;
wire   [63:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWADDR;
wire   [0:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWID;
wire   [31:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWLEN;
wire   [2:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWSIZE;
wire   [1:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWBURST;
wire   [1:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWLOCK;
wire   [3:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWCACHE;
wire   [2:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWPROT;
wire   [3:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWQOS;
wire   [3:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWREGION;
wire   [0:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWUSER;
wire    dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WVALID;
wire   [127:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WDATA;
wire   [15:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WSTRB;
wire    dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WLAST;
wire   [0:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WID;
wire   [0:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WUSER;
wire    dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARVALID;
wire   [63:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARADDR;
wire   [0:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARID;
wire   [31:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARLEN;
wire   [2:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARSIZE;
wire   [1:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARBURST;
wire   [1:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARLOCK;
wire   [3:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARCACHE;
wire   [2:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARPROT;
wire   [3:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARQOS;
wire   [3:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARREGION;
wire   [0:0] dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARUSER;
wire    dataflow_parent_loop_proc_U0_m_axi_gmem1_0_RREADY;
wire    dataflow_parent_loop_proc_U0_m_axi_gmem1_0_BREADY;
wire   [63:0] dataflow_parent_loop_proc_U0_indvar;
wire   [63:0] dataflow_parent_loop_proc_U0_kq_cache_i_stream_TDATA;
wire   [7:0] dataflow_parent_loop_proc_U0_ks_cache_i_stream_TDATA;
wire   [63:0] dataflow_parent_loop_proc_U0_vq_cache_i_stream_TDATA;
wire   [7:0] dataflow_parent_loop_proc_U0_vs_cache_i_stream_TDATA;
wire    dataflow_parent_loop_proc_U0_kq_cache_i_stream_TVALID;
wire    dataflow_parent_loop_proc_U0_ks_cache_i_stream_TVALID;
wire    dataflow_parent_loop_proc_U0_vq_cache_i_stream_TVALID;
wire    dataflow_parent_loop_proc_U0_vs_cache_i_stream_TVALID;
wire    dataflow_parent_loop_proc_U0_ap_start;
wire    dataflow_parent_loop_proc_U0_ap_done;
wire    dataflow_parent_loop_proc_U0_ap_ready;
wire    dataflow_parent_loop_proc_U0_ap_idle;
reg    dataflow_parent_loop_proc_U0_ap_continue;
reg   [32:0] loop_dataflow_input_count;
reg   [32:0] loop_dataflow_output_count;
wire   [32:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 loop_dataflow_input_count = 33'd0;
//#0 loop_dataflow_output_count = 33'd0;
end

KV_CACHE_dataflow_parent_loop_proc dataflow_parent_loop_proc_U0(
    .m_axi_gmem1_0_AWVALID(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(m_axi_gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(m_axi_gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(m_axi_gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(m_axi_gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(m_axi_gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(m_axi_gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(m_axi_gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(m_axi_gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(dataflow_parent_loop_proc_U0_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .indvar(dataflow_parent_loop_proc_U0_indvar),
    .l_begin(l_begin),
    .memory_k_cache(memory_k_cache),
    .kq_cache_i_stream_TDATA(dataflow_parent_loop_proc_U0_kq_cache_i_stream_TDATA),
    .ks_cache_i_stream_TDATA(dataflow_parent_loop_proc_U0_ks_cache_i_stream_TDATA),
    .vq_cache_i_stream_TDATA(dataflow_parent_loop_proc_U0_vq_cache_i_stream_TDATA),
    .vs_cache_i_stream_TDATA(dataflow_parent_loop_proc_U0_vs_cache_i_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .indvar_ap_vld(1'b0),
    .l_begin_ap_vld(l_begin_ap_vld),
    .memory_k_cache_ap_vld(memory_k_cache_ap_vld),
    .kq_cache_i_stream_TVALID(dataflow_parent_loop_proc_U0_kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(kq_cache_i_stream_TREADY),
    .ks_cache_i_stream_TVALID(dataflow_parent_loop_proc_U0_ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(ks_cache_i_stream_TREADY),
    .vq_cache_i_stream_TVALID(dataflow_parent_loop_proc_U0_vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TVALID(dataflow_parent_loop_proc_U0_vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(vs_cache_i_stream_TREADY),
    .ap_start(dataflow_parent_loop_proc_U0_ap_start),
    .ap_done(dataflow_parent_loop_proc_U0_ap_done),
    .ap_ready(dataflow_parent_loop_proc_U0_ap_ready),
    .ap_idle(dataflow_parent_loop_proc_U0_ap_idle),
    .ap_continue(dataflow_parent_loop_proc_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 33'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 33'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 33'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 33'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 33'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 33'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 33'd0) & (ap_start == 1'b0) & (dataflow_parent_loop_proc_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b1;
    end else begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (xor_ln54_cast - 33'd1);

assign dataflow_parent_loop_proc_U0_ap_start = ap_start;

assign dataflow_parent_loop_proc_U0_indvar = loop_dataflow_input_count;

assign kq_cache_i_stream_TDATA = dataflow_parent_loop_proc_U0_kq_cache_i_stream_TDATA;

assign kq_cache_i_stream_TVALID = dataflow_parent_loop_proc_U0_kq_cache_i_stream_TVALID;

assign ks_cache_i_stream_TDATA = dataflow_parent_loop_proc_U0_ks_cache_i_stream_TDATA;

assign ks_cache_i_stream_TVALID = dataflow_parent_loop_proc_U0_ks_cache_i_stream_TVALID;

assign m_axi_gmem1_0_ARADDR = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARADDR;

assign m_axi_gmem1_0_ARBURST = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARBURST;

assign m_axi_gmem1_0_ARCACHE = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARCACHE;

assign m_axi_gmem1_0_ARID = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARID;

assign m_axi_gmem1_0_ARLEN = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARLEN;

assign m_axi_gmem1_0_ARLOCK = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARLOCK;

assign m_axi_gmem1_0_ARPROT = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARPROT;

assign m_axi_gmem1_0_ARQOS = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARQOS;

assign m_axi_gmem1_0_ARREGION = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARREGION;

assign m_axi_gmem1_0_ARSIZE = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARSIZE;

assign m_axi_gmem1_0_ARUSER = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARUSER;

assign m_axi_gmem1_0_ARVALID = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_ARVALID;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_RREADY = dataflow_parent_loop_proc_U0_m_axi_gmem1_0_RREADY;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign vq_cache_i_stream_TDATA = dataflow_parent_loop_proc_U0_vq_cache_i_stream_TDATA;

assign vq_cache_i_stream_TVALID = dataflow_parent_loop_proc_U0_vq_cache_i_stream_TVALID;

assign vs_cache_i_stream_TDATA = dataflow_parent_loop_proc_U0_vs_cache_i_stream_TDATA;

assign vs_cache_i_stream_TVALID = dataflow_parent_loop_proc_U0_vs_cache_i_stream_TVALID;

endmodule //KV_CACHE_dataflow_parent_loop_proc2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module KV_CACHE_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not KV_CACHE module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not KV_CACHE module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
`default_nettype none


module KV_CACHE_gmem1_m_axi
#(parameter
    CONSERVATIVE            = 0,
    MAX_READ_BURST_LENGTH   = 16,
    MAX_WRITE_BURST_LENGTH  = 16,
    C_M_AXI_ID_WIDTH        = 1,
    C_M_AXI_ADDR_WIDTH      = 32,
    C_M_AXI_DATA_WIDTH      = 32, // power of 2 & range: 2 to 1024
    C_M_AXI_AWUSER_WIDTH    = 1,
    C_M_AXI_ARUSER_WIDTH    = 1,
    C_M_AXI_WUSER_WIDTH     = 1,
    C_M_AXI_RUSER_WIDTH     = 1,
    C_M_AXI_BUSER_WIDTH     = 1,
    C_TARGET_ADDR           = 32'h00000000,
    C_USER_VALUE            = 1'b0,
    C_PROT_VALUE            = 3'b000,
    C_CACHE_VALUE           = 4'b0011,
    NUM_READ_OUTSTANDING    = 16,
    NUM_WRITE_OUTSTANDING   = 16,
    USER_MAXREQS            = 16,
    // channel configuration
    CH0_USER_DW             = 32,
    CH0_USER_AW             = 32,
    CH0_USER_RFIFONUM_WIDTH = 6,
    MAXI_BUFFER_IMPL        = "block"
)(
    // system signal
    input  wire                               ACLK,
    input  wire                               ARESET,
    input  wire                               ACLK_EN,
    // write address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]        AWID,
    output wire [C_M_AXI_ADDR_WIDTH-1:0]      AWADDR,
    output wire [7:0]                         AWLEN,
    output wire [2:0]                         AWSIZE,
    output wire [1:0]                         AWBURST,
    output wire [1:0]                         AWLOCK,
    output wire [3:0]                         AWCACHE,
    output wire [2:0]                         AWPROT,
    output wire [3:0]                         AWQOS,
    output wire [3:0]                         AWREGION,
    output wire [C_M_AXI_AWUSER_WIDTH-1:0]    AWUSER,
    output wire                               AWVALID,
    input  wire                               AWREADY,
    // write data channel
    output wire [C_M_AXI_ID_WIDTH-1:0]        WID,
    output wire [C_M_AXI_DATA_WIDTH-1:0]      WDATA,
    output wire [C_M_AXI_DATA_WIDTH/8-1:0]    WSTRB,
    output wire                               WLAST,
    output wire [C_M_AXI_WUSER_WIDTH-1:0]     WUSER,
    output wire                               WVALID,
    input  wire                               WREADY,
    // write response channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]        BID,
    input  wire [1:0]                         BRESP,
    input  wire [C_M_AXI_BUSER_WIDTH-1:0]     BUSER,
    input  wire                               BVALID,
    output wire                               BREADY,
    // read address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]        ARID,
    output wire [C_M_AXI_ADDR_WIDTH-1:0]      ARADDR,
    output wire [7:0]                         ARLEN,
    output wire [2:0]                         ARSIZE,
    output wire [1:0]                         ARBURST,
    output wire [1:0]                         ARLOCK,
    output wire [3:0]                         ARCACHE,
    output wire [2:0]                         ARPROT,
    output wire [3:0]                         ARQOS,
    output wire [3:0]                         ARREGION,
    output wire [C_M_AXI_ARUSER_WIDTH-1:0]    ARUSER,
    output wire                               ARVALID,
    input  wire                               ARREADY,
    // read data channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]        RID,
    input  wire [C_M_AXI_DATA_WIDTH-1:0]      RDATA,
    input  wire [1:0]                         RRESP,
    input  wire                               RLAST,
    input  wire [C_M_AXI_RUSER_WIDTH-1:0]     RUSER,
    input  wire                               RVALID,
    output wire                               RREADY,
    // internal channel 0 READ-WRITE 
    input  wire [CH0_USER_AW-1:0]             I_CH0_AWADDR,
    input  wire [31:0]                        I_CH0_AWLEN,
    input  wire                               I_CH0_AWVALID,
    output wire                               I_CH0_AWREADY,
    input  wire [CH0_USER_DW-1:0]             I_CH0_WDATA,
    input  wire [CH0_USER_DW/8-1:0]           I_CH0_WSTRB,
    input  wire                               I_CH0_WVALID,
    output wire                               I_CH0_WREADY,
    output wire                               I_CH0_BVALID,
    input  wire                               I_CH0_BREADY,
    input  wire [CH0_USER_AW-1:0]             I_CH0_ARADDR,
    input  wire [31:0]                        I_CH0_ARLEN,
    input  wire                               I_CH0_ARVALID,
    output wire                               I_CH0_ARREADY,
    output wire [CH0_USER_DW-1:0]             I_CH0_RDATA,
    output wire                               I_CH0_RVALID,
    input  wire                               I_CH0_RREADY,
    output wire [CH0_USER_RFIFONUM_WIDTH-1:0] I_CH0_RFIFONUM
    );
//------------------------Local signal-------------------
    // AW/W/B channel signals 
    wire [C_M_AXI_ADDR_WIDTH-1:0]   AWADDR_Dummy;
    wire [31:0]                     AWLEN_Dummy;
    wire                            AWVALID_Dummy;
    wire                            AWREADY_Dummy;
    wire [C_M_AXI_DATA_WIDTH-1:0]   WDATA_Dummy;
    wire [C_M_AXI_DATA_WIDTH/8-1:0] WSTRB_Dummy;
    wire                            WVALID_Dummy;
    wire                            WREADY_Dummy;
    wire                            BVALID_Dummy;
    wire                            BREADY_Dummy;
    // AR/R channel signals 
    wire [C_M_AXI_ADDR_WIDTH-1:0]   ARADDR_Dummy;
    wire [31:0]                     ARLEN_Dummy;
    wire                            ARVALID_Dummy;
    wire                            ARREADY_Dummy;
    wire [C_M_AXI_DATA_WIDTH-1:0]   RDATA_Dummy;
    wire [1:0]                      RLAST_Dummy;
    wire                            RVALID_Dummy;
    wire                            RREADY_Dummy;
    wire                            RBURST_READY_Dummy;
    // flush logic 

    // AXI Ports Initialization 
    // Kernel Ports Initialization 
    // flush logic 
//------------------------Instantiation------------------
    // ================== STORE UNITS ================== 
    // store_unit for channel 0
    KV_CACHE_gmem1_m_axi_store #(
        .C_TARGET_ADDR           ( C_TARGET_ADDR ),
        .NUM_WRITE_OUTSTANDING   ( NUM_WRITE_OUTSTANDING ),
        .MAX_WRITE_BURST_LENGTH  ( MAX_WRITE_BURST_LENGTH ),
        .BUS_ADDR_WIDTH          ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH          ( C_M_AXI_DATA_WIDTH ),
        .USER_DW                 ( CH0_USER_DW ),
        .USER_AW                 ( CH0_USER_AW ),
        .USER_MAXREQS            ( USER_MAXREQS ),
        .BUFFER_IMPL             ( MAXI_BUFFER_IMPL )
    ) store_unit_0 (
        .ACLK                    ( ACLK ),
        .ARESET                  ( ARESET ),
        .ACLK_EN                 ( ACLK_EN ),
        .out_AXI_AWADDR          ( AWADDR_Dummy ),
        .out_AXI_AWLEN           ( AWLEN_Dummy ),
        .out_AXI_AWVALID         ( AWVALID_Dummy ),
        .in_AXI_AWREADY          ( AWREADY_Dummy ),
        .out_AXI_WDATA           ( WDATA_Dummy ),
        .out_AXI_WSTRB           ( WSTRB_Dummy ),
        .out_AXI_WVALID          ( WVALID_Dummy ),
        .in_AXI_WREADY           ( WREADY_Dummy ),
        .in_AXI_BVALID           ( BVALID_Dummy ),
        .out_AXI_BREADY          ( BREADY_Dummy ),
        .in_HLS_AWADDR           ( I_CH0_AWADDR ),
        .in_HLS_AWLEN            ( I_CH0_AWLEN ),
        .in_HLS_AWVALID          ( I_CH0_AWVALID ),
        .out_HLS_AWREADY         ( I_CH0_AWREADY ),
        .in_HLS_WDATA            ( I_CH0_WDATA ),
        .in_HLS_WSTRB            ( I_CH0_WSTRB ),
        .in_HLS_WVALID           ( I_CH0_WVALID ),
        .out_HLS_WREADY          ( I_CH0_WREADY ),
        .out_HLS_BVALID          ( I_CH0_BVALID ),
        .in_HLS_BREADY           ( I_CH0_BREADY )
    );

    // ================== LOAD UNITS ================== 
    // load_unit for channel 0
    KV_CACHE_gmem1_m_axi_load #(
        .C_TARGET_ADDR           ( C_TARGET_ADDR ),
        .NUM_READ_OUTSTANDING    ( NUM_READ_OUTSTANDING ),
        .MAX_READ_BURST_LENGTH   ( MAX_READ_BURST_LENGTH ),
        .BUS_ADDR_WIDTH          ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH          ( C_M_AXI_DATA_WIDTH ),
        .USER_DW                 ( CH0_USER_DW ),
        .USER_AW                 ( CH0_USER_AW ),
        .USER_MAXREQS            ( USER_MAXREQS ),
        .USER_RFIFONUM_WIDTH     ( CH0_USER_RFIFONUM_WIDTH ),
        .BUFFER_IMPL             ( MAXI_BUFFER_IMPL )
    ) load_unit_0 (
        .ACLK                    ( ACLK ),
        .ARESET                  ( ARESET ),
        .ACLK_EN                 ( ACLK_EN ),
        .out_AXI_ARADDR          ( ARADDR_Dummy ),
        .out_AXI_ARLEN           ( ARLEN_Dummy ),
        .out_AXI_ARVALID         ( ARVALID_Dummy ),
        .in_AXI_ARREADY          ( ARREADY_Dummy ),
        .in_AXI_RDATA            ( RDATA_Dummy ),
        .in_AXI_RLAST            ( RLAST_Dummy ),
        .in_AXI_RVALID           ( RVALID_Dummy ),
        .out_AXI_RREADY          ( RREADY_Dummy ),
        .out_AXI_RBURST_READY    ( RBURST_READY_Dummy),
        .in_HLS_ARADDR           ( I_CH0_ARADDR ),
        .in_HLS_ARLEN            ( I_CH0_ARLEN ),
        .in_HLS_ARVALID          ( I_CH0_ARVALID ),
        .out_HLS_ARREADY         ( I_CH0_ARREADY ),
        .out_HLS_RDATA           ( I_CH0_RDATA ),
        .out_HLS_RVALID          ( I_CH0_RVALID ),
        .in_HLS_RREADY           ( I_CH0_RREADY ),
        .out_HLS_RFIFONUM        ( I_CH0_RFIFONUM )
    );

    // ================== AXI BUS READ/WRITE ================== 
    // KV_CACHE_gmem1_m_axi_write
    KV_CACHE_gmem1_m_axi_write #(
        .CONSERVATIVE            ( CONSERVATIVE),
        .C_M_AXI_ID_WIDTH        ( C_M_AXI_ID_WIDTH ),
        .C_M_AXI_AWUSER_WIDTH    ( C_M_AXI_AWUSER_WIDTH ),
        .C_M_AXI_WUSER_WIDTH     ( C_M_AXI_WUSER_WIDTH ),
        .C_M_AXI_BUSER_WIDTH     ( C_M_AXI_BUSER_WIDTH ),
        .C_USER_VALUE            ( C_USER_VALUE ),
        .C_PROT_VALUE            ( C_PROT_VALUE ),
        .C_CACHE_VALUE           ( C_CACHE_VALUE ),
        .BUS_ADDR_WIDTH          ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH          ( C_M_AXI_DATA_WIDTH ),
        .MAX_WRITE_BURST_LENGTH  ( MAX_WRITE_BURST_LENGTH ),
        .NUM_WRITE_OUTSTANDING   ( NUM_WRITE_OUTSTANDING )
    ) bus_write (
        .ACLK                    ( ACLK ),
        .ARESET                  ( ARESET ),
        .ACLK_EN                 ( ACLK_EN ),
        .out_BUS_AWID            ( AWID ),
        .out_BUS_AWSIZE          ( AWSIZE ),
        .out_BUS_AWBURST         ( AWBURST ),
        .out_BUS_AWLOCK          ( AWLOCK ),
        .out_BUS_AWCACHE         ( AWCACHE ),
        .out_BUS_AWPROT          ( AWPROT ),
        .out_BUS_AWQOS           ( AWQOS ),
        .out_BUS_AWREGION        ( AWREGION ),
        .out_BUS_AWUSER          ( AWUSER ),
        .out_BUS_AWADDR          ( AWADDR ),
        .out_BUS_AWLEN           ( AWLEN ),
        .out_BUS_AWVALID         ( AWVALID ),
        .in_BUS_AWREADY          ( AWREADY ),
        .out_BUS_WID             ( WID),
        .out_BUS_WUSER           ( WUSER),
        .out_BUS_WDATA           ( WDATA ),
        .out_BUS_WSTRB           ( WSTRB ),
        .out_BUS_WLAST           ( WLAST ),
        .out_BUS_WVALID          ( WVALID ),
        .in_BUS_WREADY           ( WREADY ),
        .in_BUS_BID              ( BID ),
        .in_BUS_BRESP            ( BRESP ),
        .in_BUS_BUSER            ( BUSER ),
        .in_BUS_BVALID           ( BVALID ),
        .out_BUS_BREADY          ( BREADY ),
        .in_HLS_AWVALID          ( AWVALID_Dummy ),
        .out_HLS_AWREADY         ( AWREADY_Dummy ),
        .in_HLS_AWADDR           ( AWADDR_Dummy ),
        .in_HLS_AWLEN            ( AWLEN_Dummy ),
        .in_HLS_WVALID           ( WVALID_Dummy ),
        .out_HLS_WREADY          ( WREADY_Dummy ),
        .in_HLS_WSTRB            ( WSTRB_Dummy ),
        .in_HLS_WDATA            ( WDATA_Dummy ),
        .out_HLS_BVALID          ( BVALID_Dummy ),
        .in_HLS_BREADY           ( BREADY_Dummy )
    );
    // KV_CACHE_gmem1_m_axi_read
    KV_CACHE_gmem1_m_axi_read #(
        .C_M_AXI_ID_WIDTH         ( C_M_AXI_ID_WIDTH ),
        .C_M_AXI_ARUSER_WIDTH     ( C_M_AXI_ARUSER_WIDTH ),
        .C_M_AXI_RUSER_WIDTH      ( C_M_AXI_RUSER_WIDTH ),
        .C_USER_VALUE             ( C_USER_VALUE ),
        .C_PROT_VALUE             ( C_PROT_VALUE ),
        .C_CACHE_VALUE            ( C_CACHE_VALUE ),
        .BUS_ADDR_WIDTH           ( C_M_AXI_ADDR_WIDTH ),
        .BUS_DATA_WIDTH           ( C_M_AXI_DATA_WIDTH ),
        .MAX_READ_BURST_LENGTH    ( MAX_READ_BURST_LENGTH ),
        .NUM_READ_OUTSTANDING     ( NUM_READ_OUTSTANDING )
    ) bus_read (
        .ACLK                     ( ACLK ),
        .ARESET                   ( ARESET ),
        .ACLK_EN                  ( ACLK_EN ),
        .out_BUS_ARID             ( ARID ),
        .out_BUS_ARADDR           ( ARADDR ),
        .out_BUS_ARLEN            ( ARLEN ),
        .out_BUS_ARSIZE           ( ARSIZE ),
        .out_BUS_ARBURST          ( ARBURST ),
        .out_BUS_ARLOCK           ( ARLOCK ),
        .out_BUS_ARCACHE          ( ARCACHE ),
        .out_BUS_ARPROT           ( ARPROT ),
        .out_BUS_ARQOS            ( ARQOS ),
        .out_BUS_ARREGION         ( ARREGION ),
        .out_BUS_ARUSER           ( ARUSER ),
        .out_BUS_ARVALID          ( ARVALID ),
        .in_BUS_ARREADY           ( ARREADY ),
        .in_BUS_RID               ( RID ),
        .in_BUS_RDATA             ( RDATA ),
        .in_BUS_RRESP             ( RRESP ),
        .in_BUS_RLAST             ( RLAST ),
        .in_BUS_RUSER             ( RUSER ),
        .in_BUS_RVALID            ( RVALID ),
        .out_BUS_RREADY           ( RREADY ),
        .in_HLS_ARVALID           ( ARVALID_Dummy ),
        .out_HLS_ARREADY          ( ARREADY_Dummy ),
        .in_HLS_ARADDR            ( ARADDR_Dummy ),
        .in_HLS_ARLEN             ( ARLEN_Dummy ),
        .out_HLS_RVALID           ( RVALID_Dummy ),
        .in_HLS_RREADY            ( RREADY_Dummy ),
        .in_HLS_RBUST_READY       ( RBURST_READY_Dummy),
        .out_HLS_RDATA            ( RDATA_Dummy ),
        .out_HLS_RLAST            ( RLAST_Dummy )
    );

    

endmodule
`default_nettype wire
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns/1ps

module KV_CACHE_gmem1_m_axi_load
#(parameter
    C_TARGET_ADDR                         = 32'h00000000,
    NUM_READ_OUTSTANDING                  = 2,
    MAX_READ_BURST_LENGTH                 = 16,
    BUS_ADDR_WIDTH                        = 32,
    BUS_DATA_WIDTH                        = 32,
    USER_DW                               = 16,
    USER_AW                               = 32,
    USER_MAXREQS                          = 16,
    USER_RFIFONUM_WIDTH                   = 6,
    BUFFER_IMPL                           = "auto"
)(
    // system signal
    input  wire                           ACLK,
    input  wire                           ARESET,
    input  wire                           ACLK_EN,

    // read address channel
    output wire [BUS_ADDR_WIDTH-1:0]      out_AXI_ARADDR,
    output wire [31:0]                    out_AXI_ARLEN,
    output wire                           out_AXI_ARVALID,
    input  wire                           in_AXI_ARREADY,
    // read data channel
    input  wire [BUS_DATA_WIDTH-1:0]      in_AXI_RDATA,
    input  wire [1:0]                     in_AXI_RLAST,
    input  wire                           in_AXI_RVALID,
    output wire                           out_AXI_RREADY,
    output wire                           out_AXI_RBURST_READY,

    // internal bus ports
    // read address
    input  wire [USER_AW-1:0]             in_HLS_ARADDR,
    input  wire [31:0]                    in_HLS_ARLEN,
    input  wire                           in_HLS_ARVALID,
    output wire                           out_HLS_ARREADY,
    // read data
    output wire [USER_DW-1:0]             out_HLS_RDATA,
    output wire                           out_HLS_RVALID,
    input  wire                           in_HLS_RREADY,
    output wire [USER_RFIFONUM_WIDTH-1:0] out_HLS_RFIFONUM
);

//------------------------Parameter----------------------
    localparam
        USER_DATA_WIDTH = calc_data_width(USER_DW),
        USER_DATA_BYTES = USER_DATA_WIDTH / 8,
        USER_ADDR_ALIGN = log2(USER_DATA_BYTES),
        BUS_ADDR_ALIGN  = log2(BUS_DATA_WIDTH/8),
        // rdata buffer size 
        RBUFF_DEPTH     = NUM_READ_OUTSTANDING * MAX_READ_BURST_LENGTH,
        TARGET_ADDR     = C_TARGET_ADDR & (32'hffffffff << USER_ADDR_ALIGN);

//------------------------Task and function--------------
    function integer calc_data_width;
        input integer x;
        integer y;
    begin
        y = 8;
        while (y < x) y = y * 2;
        calc_data_width = y;
    end
    endfunction

    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------

    wire                           next_rreq;
    wire                           ready_for_rreq;
    wire                           rreq_ready;

    wire [USER_AW-1 : 0]           rreq_addr;
    wire [31:0]                    rreq_len;
    wire                           rreq_valid;

    wire                           valid_length;

    reg  [BUS_ADDR_WIDTH-1 : 0]    tmp_addr;
    reg  [31:0]                    tmp_len;
    reg                            tmp_valid;

    wire                           burst_ready;
    wire                           beat_valid;
    wire                           next_beat;
    wire                           last_beat;
    wire [BUS_DATA_WIDTH-1 : 0]    beat_data;
    wire [log2(RBUFF_DEPTH) : 0]   beat_nvalid;

    reg                            ready_for_outstanding;
    
    // regslice io ?  no 
    
    // enable regslice on R channel  no 

//------------------------Instantiation------------------

    

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH        (USER_AW + 32),
        .ADDR_WIDTH        (log2(USER_MAXREQS)),
        .DEPTH             (USER_MAXREQS)
    ) fifo_rreq (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (out_HLS_ARREADY),
        .if_write          (in_HLS_ARVALID),
        .if_din            ({in_HLS_ARLEN, in_HLS_ARADDR}),
        .if_empty_n        (rreq_valid),
        .if_read           (next_rreq),
        .if_dout           ({rreq_len, rreq_addr}),
        .if_num_data_valid ());

    // ===================================================================
    // start of ARADDR PREPROCESSOR
    
    assign next_rreq       = rreq_valid && ready_for_rreq;
    assign ready_for_rreq  = ~tmp_valid || (in_AXI_ARREADY && rreq_ready);
    assign valid_length    = (rreq_len != 32'b0) && !rreq_len[31];

    assign out_AXI_ARLEN   = tmp_len;   // Byte length
    assign out_AXI_ARADDR  = tmp_addr;  // Byte address
    assign out_AXI_ARVALID = tmp_valid && rreq_ready;

    always @(posedge ACLK)
    begin
        if (ARESET) begin
            tmp_len  <= 0;
            tmp_addr <= 0;
        end
        else if (ACLK_EN) begin
            if(next_rreq) begin
                tmp_len  <= (rreq_len << USER_ADDR_ALIGN) - 1;            // byte length
                tmp_addr <= TARGET_ADDR + (rreq_addr << USER_ADDR_ALIGN); // byte address
            end
        end
    end
 
    always @(posedge ACLK) 
    begin
        if (ARESET)
            tmp_valid <= 1'b0;
        else if (ACLK_EN) begin
            if (next_rreq && valid_length)
                tmp_valid <= 1'b1;
            else if (in_AXI_ARREADY && rreq_ready)
                tmp_valid <= 1'b0;
        end
    end

    // end of ARADDR PREPROCESSOR
    // ===================================================================

    

    
    KV_CACHE_gmem1_m_axi_fifo #(
        .MEM_STYLE         (BUFFER_IMPL),
        .DATA_WIDTH        (BUS_DATA_WIDTH + 2),
        .ADDR_WIDTH        (log2(RBUFF_DEPTH)),
        .DEPTH             (RBUFF_DEPTH)
    ) buff_rdata (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (out_AXI_RREADY),
        .if_write          (in_AXI_RVALID),
        .if_din            ({in_AXI_RLAST, in_AXI_RDATA}),
        .if_empty_n        (beat_valid),
        .if_read           (next_beat),
        .if_dout           ({burst_ready, last_beat, beat_data}),
        .if_num_data_valid (beat_nvalid));

    assign out_AXI_RBURST_READY = ready_for_outstanding;

    always @(posedge ACLK) 
    begin
        if (ARESET)
            ready_for_outstanding <= 1'b0;
        else if (ACLK_EN) begin
            if (next_beat && beat_valid)
                ready_for_outstanding <= burst_ready;
            else
                ready_for_outstanding <= 1'b0;
        end
    end
    // ===================================================================
    // start of RDATA PREPROCESSOR
    generate
    if (USER_DATA_WIDTH == BUS_DATA_WIDTH) begin : bus_equal_gen

        assign rreq_ready       = 1'b1; 
        // regslice io ?  no
        assign next_beat        = in_HLS_RREADY;
        assign out_HLS_RDATA    = beat_data[USER_DW-1 : 0];
        assign out_HLS_RVALID   = beat_valid;
        assign out_HLS_RFIFONUM = beat_nvalid; // 

    end
    else if (USER_DATA_WIDTH < BUS_DATA_WIDTH) begin : bus_wide_gen
        localparam
            TOTAL_SPLIT  = BUS_DATA_WIDTH / USER_DATA_WIDTH,
            SPLIT_ALIGN  = log2(TOTAL_SPLIT);

        wire [USER_AW - 1:0]        tmp_addr_end;

        wire                        offset_full_n;
        wire                        offset_write;
        wire [SPLIT_ALIGN-1 : 0]    start_offset;
        wire [SPLIT_ALIGN-1 : 0]    end_offset;

        wire                        offset_valid;
        wire                        next_offset;
        wire [SPLIT_ALIGN-1 : 0]    head_offset;
        wire [SPLIT_ALIGN-1 : 0]    tail_offset;

        reg                         first_beat;

        wire                        first_data;
        wire                        last_data;
        wire                        ready_for_data;
    
        wire [BUS_DATA_WIDTH-1:0]   tmp_rdata;
        wire                        tmp_rlast;
        wire                        tmp_rvalid;

        reg  [BUS_DATA_WIDTH-1 : 0] data_buf;
        reg                         data_valid;

        reg  [USER_RFIFONUM_WIDTH-1:0] rdata_nvalid; 
        reg  [SPLIT_ALIGN : 0]      data_nvalid;
        wire [SPLIT_ALIGN : 0]      split_nvalid;
        
        wire [SPLIT_ALIGN-1 : 0]    split_cnt_end;
        wire [SPLIT_ALIGN-1 : 0]    split_cnt;
        reg  [SPLIT_ALIGN-1 : 0]    split_cnt_buf;

        wire                        first_split;
        wire                        next_split;
        wire                        last_split;
        wire                        ready_for_split;

        // Recording the offset of start & end address to extract the expect data from beats when USER_DW < BUS_DW.
        KV_CACHE_gmem1_m_axi_fifo #(
            .DATA_WIDTH         (2*SPLIT_ALIGN),
            .ADDR_WIDTH         (log2(NUM_READ_OUTSTANDING)),
            .DEPTH              (NUM_READ_OUTSTANDING)
        ) rreq_offset (
            .clk                (ACLK),
            .reset              (ARESET),
            .clk_en             (ACLK_EN),
            .if_full_n          (offset_full_n),
            .if_write           (offset_write),
            .if_din             ({start_offset, end_offset}),
            .if_empty_n         (offset_valid),
            .if_read            (next_offset),
            .if_dout            ({head_offset, tail_offset}),
            .if_num_data_valid  ());

        KV_CACHE_gmem1_m_axi_reg_slice #(
            .DATA_WIDTH         (BUS_DATA_WIDTH + 1)
        ) rs_tmp_rdata (
            .clk               (ACLK),
            .reset             (ARESET),
            .s_data            ({last_beat, beat_data}),
            .s_valid           (beat_valid),
            .s_ready           (next_beat),
            .m_data            ({tmp_rlast, tmp_rdata}),
            .m_valid           (tmp_rvalid),
            .m_ready           (last_split));

        assign rreq_ready       = offset_full_n | ~offset_write;
        assign tmp_addr_end     = tmp_addr + tmp_len;

        assign start_offset     = tmp_addr[BUS_ADDR_ALIGN - 1 : 0] >> USER_ADDR_ALIGN;
        assign end_offset       = tmp_addr_end[BUS_ADDR_ALIGN - 1 : 0] >> USER_ADDR_ALIGN;
        assign offset_write     = tmp_valid & in_AXI_ARREADY;

        assign next_offset      = (tmp_rlast & tmp_rvalid) & last_split;

        // regslice io ?  no
        assign out_HLS_RDATA    = data_buf[USER_DW-1 : 0];
        assign out_HLS_RVALID   = data_valid;
        assign out_HLS_RFIFONUM = rdata_nvalid + data_nvalid;
        assign ready_for_data   = ~data_valid | in_HLS_RREADY; // 

        assign first_data       = first_beat && ready_for_split;
        assign last_data        = tmp_rlast && ready_for_split;

        assign ready_for_split  = tmp_rvalid && offset_valid;
        assign next_split       = ready_for_split && ready_for_data;
        assign first_split      = (split_cnt_buf == 0) && next_split;
        assign last_split       = (split_cnt == split_cnt_end) && next_split;

        assign split_cnt        = (first_data && (split_cnt_buf == 0)) ? head_offset : split_cnt_buf;
        assign split_cnt_end    = (~last_data) ? (TOTAL_SPLIT - 1) : tail_offset;

        assign split_nvalid     = (first_data && last_data)  ? tail_offset - head_offset + 1 :
                                   first_data                ? TOTAL_SPLIT - head_offset     :
                                   last_data                 ? tail_offset + 1               :
                                   TOTAL_SPLIT;
        always @(posedge ACLK)
        begin
            if (ARESET)
                split_cnt_buf <= 0;
            else if (ACLK_EN) begin 
                if (last_split)
                    split_cnt_buf <= 0;
                else if (next_split)
                    split_cnt_buf <= split_cnt + 1;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                first_beat <= 1'b1;
            else if (ACLK_EN) begin
                if (next_offset)
                    first_beat <= 1'b1;
                else if (first_beat && last_split)
                    first_beat <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ACLK_EN) begin
                if (first_split & first_data)
                    data_buf <= tmp_rdata >> (head_offset * USER_DATA_WIDTH);
                else if (first_split)
                    data_buf <= tmp_rdata;
                else if (next_split)
                    data_buf <= data_buf >> USER_DATA_WIDTH;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (first_split)
                    data_valid <= 1'b1;
                else if (~ready_for_split && ready_for_data)
                    data_valid <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_nvalid <= 0;
            else if (ACLK_EN) begin
                if (first_split)
                    data_nvalid <= split_nvalid;
                else if (next_split)
                    data_nvalid <= data_nvalid - 1;
                else if (~ready_for_split && ready_for_data)
                    data_nvalid <= 0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                rdata_nvalid <= 0;
            else if (ACLK_EN) begin
                if (~tmp_rvalid)
                    rdata_nvalid <= 0;
                else if (~next_beat)
                    rdata_nvalid <= ((beat_nvalid + 1) << SPLIT_ALIGN);
                else
                    rdata_nvalid <= (beat_nvalid << SPLIT_ALIGN);
            end
        end
        
    end
    else begin : bus_narrow_gen
        localparam
            TOTAL_PADS      = USER_DATA_WIDTH / BUS_DATA_WIDTH,
            PAD_ALIGN       = log2(TOTAL_PADS);

        reg [USER_DATA_WIDTH-1 : 0] data_buf;
        reg                         data_valid;
        reg [PAD_ALIGN:0]           data_nvalid;
        wire                        ready_for_data;
        wire [USER_RFIFONUM_WIDTH-1 : 0] rdata_num_vld;

        wire [TOTAL_PADS - 1:0]     pad_oh;
        reg  [TOTAL_PADS - 1:0]     pad_oh_reg;

        reg                         first_pad;
        wire                        last_pad;
        wire                        next_pad;

        assign rreq_ready       = 1'b1; 
        assign next_beat        = next_pad;
        assign rdata_num_vld    = beat_nvalid[log2(RBUFF_DEPTH) : PAD_ALIGN] + (beat_nvalid[PAD_ALIGN-1:0] + data_nvalid) >> PAD_ALIGN;
        
        // regslice io ?  no
        assign out_HLS_RDATA    = data_buf[USER_DW-1 : 0];
        assign out_HLS_RVALID   = data_valid;
        assign out_HLS_RFIFONUM = rdata_num_vld;
        assign ready_for_data   = ~data_valid | in_HLS_RREADY;// 

        assign next_pad         = beat_valid && ready_for_data;
        assign last_pad         = pad_oh[TOTAL_PADS - 1];

        always @(posedge ACLK)
        begin
            if (ARESET)
                first_pad <= 1'b1;
            else if (ACLK_EN) begin
                if (next_pad && ~last_pad)
                    first_pad <= 1'b0;
                else if (next_pad && last_pad)
                    first_pad <= 1'b1;
            end
        end

        assign pad_oh = (~beat_valid) ?  0 :
                        (first_pad)   ?  1 :
                        pad_oh_reg;
 
        always @(posedge ACLK)
        begin
            if (ARESET)
                pad_oh_reg <= 0;
            else if (ACLK_EN) begin
                if (next_pad)
                    pad_oh_reg <= {pad_oh[TOTAL_PADS - 2:0], 1'b0};
            end
        end

        genvar  i;
        for (i = 0; i < TOTAL_PADS; i = i + 1) begin : data_gen
            always @(posedge ACLK)
            begin
                if (ACLK_EN) begin
                    if (pad_oh[i] == 1'b1 && ready_for_data)
                        data_buf[i*BUS_DATA_WIDTH +: BUS_DATA_WIDTH] <= beat_data;
                end
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (next_pad && last_pad)
                    data_valid <= 1'b1;
                else if (ready_for_data)
                    data_valid <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_nvalid <= 0;
            else if (ACLK_EN) begin
                if (first_pad)
                    data_nvalid <= 1;
                else if (next_pad)
                    data_nvalid <= data_nvalid + 1;
            end
        end

    end
    endgenerate
    // end of RDATA PREPROCESSOR
    // ===================================================================

endmodule


module KV_CACHE_gmem1_m_axi_store
#(parameter
    C_TARGET_ADDR           = 32'h00000000,
    NUM_WRITE_OUTSTANDING   = 2,
    MAX_WRITE_BURST_LENGTH  = 16,
    BUS_ADDR_WIDTH          = 32,
    BUS_DATA_WIDTH          = 32,
    USER_DW                 = 16,
    USER_AW                 = 32,
    USER_MAXREQS            = 16,
    BUFFER_IMPL             = "auto"
)(
    // system signal
    input  wire                        ACLK,
    input  wire                        ARESET,
    input  wire                        ACLK_EN,
    // write address channel
    output wire [BUS_ADDR_WIDTH-1:0]   out_AXI_AWADDR,
    output wire [31:0]                 out_AXI_AWLEN,
    output wire                        out_AXI_AWVALID,
    input  wire                        in_AXI_AWREADY,
    // write data channel
    output wire [BUS_DATA_WIDTH-1:0]   out_AXI_WDATA,
    output wire [BUS_DATA_WIDTH/8-1:0] out_AXI_WSTRB,
    output wire                        out_AXI_WVALID,
    input  wire                        in_AXI_WREADY,
    // write response channel
    input  wire                        in_AXI_BVALID,
    output wire                        out_AXI_BREADY,

    // internal bus ports
    // write address
    input  wire [USER_AW-1:0]          in_HLS_AWADDR,
    input  wire [31:0]                 in_HLS_AWLEN,
    input  wire                        in_HLS_AWVALID,
    output wire                        out_HLS_AWREADY,
    // write data
    input  wire [USER_DW-1:0]          in_HLS_WDATA,
    input  wire [USER_DW/8-1:0]        in_HLS_WSTRB,
    input  wire                        in_HLS_WVALID,
    output wire                        out_HLS_WREADY,
    // write response
    output wire                        out_HLS_BVALID,
    input  wire                        in_HLS_BREADY
);

//------------------------Parameter----------------------
    localparam
        USER_DATA_WIDTH = calc_data_width(USER_DW),
        USER_DATA_BYTES = USER_DATA_WIDTH / 8,
        USER_ADDR_ALIGN = log2(USER_DATA_BYTES),
        BUS_DATA_BYTES  = BUS_DATA_WIDTH / 8,
        BUS_ADDR_ALIGN  = log2(BUS_DATA_BYTES),
        // wdata buffer size 
        WBUFF_DEPTH     = max(MAX_WRITE_BURST_LENGTH * BUS_DATA_WIDTH / USER_DATA_WIDTH, 1), 
        TARGET_ADDR     = C_TARGET_ADDR & (32'hffffffff << USER_ADDR_ALIGN); 

//------------------------Task and function--------------

    function integer max;
        input integer x;
        input integer y;
    begin
        max = (x > y) ? x : y;
    end
    endfunction

    function integer calc_data_width;
        input integer x;
        integer y;
    begin
        y = 8;
        while (y < x) y = y * 2;
        calc_data_width = y;
    end
    endfunction

    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------

    wire                                next_wreq;
    wire                                ready_for_wreq;
    wire                                wreq_ready;

    wire [USER_AW-1 : 0]                wreq_addr;
    wire [31:0]                         wreq_len;
    wire                                wreq_valid;

    wire                                valid_length;

    reg  [USER_AW-1 : 0]                tmp_addr;
    reg  [31:0]                         tmp_len;
    reg                                 tmp_valid;

    wire                                next_wdata;
    wire                                wdata_valid;
    wire [USER_DW-1 : 0]                tmp_wdata;
    wire [USER_DW/8-1 : 0]              tmp_wstrb;

    wire                                wrsp_ready;
    wire                                wrsp_valid;
    wire                                wrsp_read;
    wire                                wrsp_type;

    wire                                ursp_ready;
    wire                                ursp_write;

    // regslice io ?  no 

//------------------------Instantiation------------------
    

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH     (USER_AW + 32),
        .ADDR_WIDTH     (log2(USER_MAXREQS)),
        .DEPTH          (USER_MAXREQS)
    ) fifo_wreq (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (out_HLS_AWREADY),
        .if_write       (in_HLS_AWVALID),
        .if_din         ({in_HLS_AWLEN, in_HLS_AWADDR}),
        .if_empty_n     (wreq_valid),
        .if_read        (next_wreq),
        .if_dout        ({wreq_len, wreq_addr}),
        .if_num_data_valid());

    assign next_wreq = wreq_valid && ready_for_wreq && wrsp_ready;
    assign ready_for_wreq  = ~tmp_valid || (in_AXI_AWREADY && wreq_ready);

    assign valid_length    = (wreq_len != 32'b0) && !wreq_len[31];

    assign out_AXI_AWLEN   = tmp_len;   // Byte length
    assign out_AXI_AWADDR  = tmp_addr;  // Byte address
    assign out_AXI_AWVALID = tmp_valid && wreq_ready;

    always @(posedge ACLK)
    begin
        if (ARESET) begin
            tmp_len  <= 0;
            tmp_addr <= 0;
        end
        else if (ACLK_EN) begin
            if(next_wreq) begin
                tmp_len  <= (wreq_len << USER_ADDR_ALIGN) - 1;
                tmp_addr <= TARGET_ADDR + (wreq_addr << USER_ADDR_ALIGN);
            end
        end
    end
 
    always @(posedge ACLK) 
    begin
        if (ARESET)
            tmp_valid <= 1'b0;
        else if (next_wreq && valid_length)
            tmp_valid <= 1'b1;
        else if (in_AXI_AWREADY && wreq_ready)
            tmp_valid <= 1'b0;
    end

    // ===================================================================

    

    
    KV_CACHE_gmem1_m_axi_fifo #(
        .MEM_STYLE         (BUFFER_IMPL),
        .DATA_WIDTH        (USER_DW + USER_DW/8),
        .ADDR_WIDTH        (log2(WBUFF_DEPTH)),
        .DEPTH             (WBUFF_DEPTH)
    ) buff_wdata (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (out_HLS_WREADY),
        .if_write          (in_HLS_WVALID),
        .if_din            ({in_HLS_WSTRB , in_HLS_WDATA}),
        .if_empty_n        (wdata_valid),
        .if_read           (next_wdata),
        .if_dout           ({tmp_wstrb, tmp_wdata}),
        .if_num_data_valid ());

    generate
    if (USER_DATA_WIDTH == BUS_DATA_WIDTH) begin : bus_equal_gen
        assign next_wdata       = in_AXI_WREADY;
        assign out_AXI_WVALID   = wdata_valid;
        assign out_AXI_WDATA    = tmp_wdata;
        assign out_AXI_WSTRB    = tmp_wstrb;

        assign wreq_ready   = 1'b1;

    end
    else if (USER_DATA_WIDTH < BUS_DATA_WIDTH) begin : bus_wide_gen
        localparam
            TOTAL_PADS      = BUS_DATA_WIDTH / USER_DATA_WIDTH,
            PAD_ALIGN       = log2(TOTAL_PADS),
            BEAT_LEN_WIDTH  = 32 - BUS_ADDR_ALIGN;

        function [TOTAL_PADS-1 : 0] decoder;
            input [PAD_ALIGN-1 : 0] din;
            reg  [TOTAL_PADS-1 : 0] dout;
            integer i;
        begin
            dout = {TOTAL_PADS{1'b0}};
            for (i = 0; i < din; i = i + 1)
                dout[i] = 1'b1;
            decoder = dout;
        end
        endfunction

        wire [USER_AW - 1:0]        tmp_addr_end;

        wire                        offset_full_n;
        wire                        offset_write;
        wire [PAD_ALIGN-1 : 0]      start_offset;
        wire [PAD_ALIGN-1 : 0]      end_offset;
        wire [BEAT_LEN_WIDTH-1 : 0] beat_total;

        wire                        offset_empty_n;
        wire                        offset_read;
        wire [2*PAD_ALIGN+BEAT_LEN_WIDTH-1 : 0] offset_pack;
        reg  [2*PAD_ALIGN+BEAT_LEN_WIDTH-1 : 0] offset_pack_reg;

        reg                         offset_valid;
        wire                        next_offset;
        wire [PAD_ALIGN-1 : 0]      head_offset;
        wire [PAD_ALIGN-1 : 0]      tail_offset;

        wire [BEAT_LEN_WIDTH-1 : 0] beat_len;
        reg  [BEAT_LEN_WIDTH-1:0]   len_cnt_buf;
        wire [BEAT_LEN_WIDTH-1:0]   len_cnt_tmp;

        wire [TOTAL_PADS - 1:0]     add_head;
        wire [TOTAL_PADS - 1:0]     add_tail;
        wire [TOTAL_PADS - 1:0]     pad_oh;
        reg  [TOTAL_PADS - 1:0]     pad_oh_reg;

        wire [TOTAL_PADS-1 : 0]     head_pad_sel;
        wire [0 : TOTAL_PADS-1]     tail_pad_sel; // reverse
        wire                        ready_for_data;
        wire                        next_pad;
        reg                         first_pad;
        wire                        last_pad;

        reg                         first_beat_set;
        reg                         last_beat_set;
        reg                         single_beat;
        wire                        first_beat;
        wire                        last_beat;
        wire                        next_beat;

        reg  [BUS_DATA_WIDTH - 1:0] data_buf;
        reg  [BUS_DATA_BYTES - 1:0] strb_buf;
        reg                         data_valid;

        // Recording the offset of start & end address to align beats from data USER_DW < BUS_DW.
        KV_CACHE_gmem1_m_axi_fifo #(
            .DATA_WIDTH             (2*PAD_ALIGN + BEAT_LEN_WIDTH),
            .ADDR_WIDTH             (log2(NUM_WRITE_OUTSTANDING)),
            .DEPTH                  (NUM_WRITE_OUTSTANDING)
        ) wreq_offset (
            .clk                    (ACLK),
            .reset                  (ARESET),
            .clk_en                 (ACLK_EN),
            .if_full_n              (offset_full_n),
            .if_write               (offset_write),
            .if_din                 ({start_offset, end_offset, beat_total}),
            .if_empty_n             (offset_empty_n),
            .if_read                (offset_read),
            .if_dout                (offset_pack),
            .if_num_data_valid      ());

        assign wreq_ready     = offset_full_n | ~offset_write;
        assign tmp_addr_end   = tmp_addr + tmp_len;

        assign start_offset   = tmp_addr[BUS_ADDR_ALIGN-1 : 0] >> USER_ADDR_ALIGN;
        assign end_offset     = ~tmp_addr_end[BUS_ADDR_ALIGN-1 : 0] >> USER_ADDR_ALIGN;
        assign beat_total     = (tmp_len + tmp_addr[BUS_ADDR_ALIGN-1 : 0]) >> BUS_ADDR_ALIGN;

        assign offset_write   = tmp_valid & in_AXI_AWREADY;
        assign offset_read    = ~offset_valid | next_offset;

        assign {head_offset, tail_offset, beat_len} = offset_pack_reg;

        assign out_AXI_WDATA  = data_buf;
        assign out_AXI_WSTRB  = strb_buf;
        assign out_AXI_WVALID = data_valid;

        assign next_wdata     = next_pad;
        assign next_offset    = last_beat && next_beat;
        assign ready_for_data = ~data_valid || in_AXI_WREADY;

        assign len_cnt_tmp    = first_beat ? beat_len : len_cnt_buf;
        assign first_beat     = first_beat_set && offset_valid;
        assign last_beat      = (single_beat || last_beat_set) && offset_valid;
        assign next_beat      = offset_valid && last_pad && ready_for_data;

        assign next_pad       = offset_valid && wdata_valid && ready_for_data;
        assign last_pad       = (last_beat) ? pad_oh[TOTAL_PADS-tail_offset-1] : pad_oh[TOTAL_PADS-1];

        assign head_pad_sel   = decoder(head_offset);
        assign tail_pad_sel   = decoder(tail_offset);

        always @(posedge ACLK)
        begin
            if (ARESET) begin
                single_beat <= 1'b0;
                offset_pack_reg <= 0;
            end
            else if (ACLK_EN) begin
                if (offset_empty_n && offset_read) begin
                    single_beat     <= (offset_pack[BEAT_LEN_WIDTH-1:0] == 0);
                    offset_pack_reg <= offset_pack;
                end
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                offset_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (offset_empty_n && offset_read)
                    offset_valid <= 1'b1;
                else if (next_offset)
                    offset_valid <= 1'b0;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                len_cnt_buf <= 0;
            else if (ACLK_EN) begin
                if (next_beat)
                    len_cnt_buf <= len_cnt_tmp - 1;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET) begin
                first_beat_set <= 1'b1;
                last_beat_set  <= 1'b0;
            end
            else if (ACLK_EN) begin
                if (next_offset) begin
                    first_beat_set <= 1'b1;
                    last_beat_set  <= 1'b0;
                end
                else if (next_beat) begin
                    first_beat_set <= 1'b0;
                    last_beat_set  <= (len_cnt_tmp == 1);
                end
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                first_pad <= 1'b1;
            else if (ACLK_EN) begin
                if (next_pad && ~last_pad)
                    first_pad <= 1'b0;
                else if (next_pad && last_pad)
                    first_pad <= 1'b1;
            end
        end 
        
        assign pad_oh = (~wdata_valid)            ? 0                :
                        (first_pad && first_beat) ? 1 << head_offset :
                        (first_pad)?                1                :
                        pad_oh_reg;

        always @(posedge ACLK)
        begin
            if (ARESET)
                pad_oh_reg <= 0;
            else if (ACLK_EN) begin
                if (next_pad)
                    pad_oh_reg <= {pad_oh[TOTAL_PADS - 2:0], 1'b0};
            end
        end

        genvar  i;
        for (i = 0; i < TOTAL_PADS; i = i + 1) begin : data_gen
            assign add_head[i] = head_pad_sel[i] && first_beat;
            assign add_tail[i] = tail_pad_sel[i] && last_beat;

            always @(posedge ACLK)
            begin
                if (ARESET)
                    data_buf[i*USER_DATA_WIDTH +: USER_DATA_WIDTH] <= {USER_DATA_WIDTH{1'b0}};
                else if (ACLK_EN) begin
                    if ((add_head[i] || add_tail[i]) && ready_for_data)
                        data_buf[i*USER_DATA_WIDTH +: USER_DATA_WIDTH] <= {USER_DATA_WIDTH{1'b0}};
                    else if (pad_oh[i] == 1'b1 && ready_for_data)
                        data_buf[i*USER_DATA_WIDTH +: USER_DATA_WIDTH] <= tmp_wdata;
                end
            end

            always @(posedge ACLK)
            begin
                if (ARESET)
                    strb_buf[i*USER_DATA_BYTES +: USER_DATA_BYTES] <= {USER_DATA_BYTES{1'b0}};
                else if (ACLK_EN) begin
                    if ((add_head[i] || add_tail[i]) && ready_for_data)
                        strb_buf[i*USER_DATA_BYTES +: USER_DATA_BYTES] <= {USER_DATA_BYTES{1'b0}};
                    else if (pad_oh[i] == 1'b1 && ready_for_data)
                        strb_buf[i*USER_DATA_BYTES +: USER_DATA_BYTES] <= tmp_wstrb;
                end
            end

        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 1'b0;
            else if (ACLK_EN) begin
                if (next_beat)
                    data_valid <= 1'b1;
                else if (ready_for_data)
                    data_valid <= 1'b0;
            end
        end

    end
    else begin : bus_narrow_gen
        localparam
            TOTAL_SPLIT       = USER_DATA_WIDTH / BUS_DATA_WIDTH,
            SPLIT_ALIGN       = log2(TOTAL_SPLIT),
            BEAT_LEN_WIDTH    = 32 - BUS_ADDR_ALIGN;


        wire [USER_AW - 1:0]        tmp_addr_end;

        wire                        offset_full_n;
        wire                        offset_write;
        wire  [BEAT_LEN_WIDTH-1 : 0] beat_total;

        wire                        offset_valid;
        wire                        next_offset;

        wire [BEAT_LEN_WIDTH-1 : 0] beat_len;
        reg  [BEAT_LEN_WIDTH-1 : 0] len_cnt;

        wire                        ready_for_data;
        reg  [USER_DATA_WIDTH - 1:0] data_buf;
        reg  [USER_DATA_BYTES - 1:0] strb_buf;
        reg                         data_valid;

        reg [SPLIT_ALIGN-1 : 0]     split_cnt;

        wire                        first_split;
        wire                        next_split;
        wire                        last_split;

        // Recording the offset of start & end address to align beats from data USER_DW < BUS_DW.
        KV_CACHE_gmem1_m_axi_fifo #(
            .DATA_WIDTH        (BEAT_LEN_WIDTH),
            .ADDR_WIDTH        (log2(NUM_WRITE_OUTSTANDING)),
            .DEPTH             (NUM_WRITE_OUTSTANDING)
        ) wreq_offset (
            .clk               (ACLK),
            .reset             (ARESET),
            .clk_en            (ACLK_EN),
            .if_full_n         (offset_full_n),
            .if_write          (offset_write),
            .if_din            (beat_total),
            .if_empty_n        (offset_valid),
            .if_read           (next_offset),
            .if_dout           (beat_len),
            .if_num_data_valid ());

        assign wreq_ready     = offset_full_n | ~offset_write;
        assign beat_total     = (tmp_len + tmp_addr[BUS_ADDR_ALIGN-1 : 0]) >> BUS_ADDR_ALIGN;

        assign offset_write   = tmp_valid & in_AXI_AWREADY;

        assign out_AXI_WDATA  = data_buf[BUS_DATA_WIDTH - 1:0];
        assign out_AXI_WSTRB  = strb_buf[BUS_DATA_BYTES - 1:0];
        assign out_AXI_WVALID = data_valid;

        assign next_wdata     = first_split;
        assign next_offset    = (len_cnt == beat_len) && offset_valid && last_split;
        assign ready_for_data = ~data_valid | in_AXI_WREADY;

        assign first_split    = (split_cnt == 0) && wdata_valid && offset_valid && ready_for_data;
        assign last_split     = (split_cnt == (TOTAL_SPLIT - 1)) && ready_for_data;
        assign next_split     = (split_cnt != 0) && ready_for_data;
        
        always @(posedge ACLK)
        begin
            if (ARESET)
                split_cnt <= 0;
            else if (ACLK_EN) begin
                if (last_split)
                    split_cnt <= 0;
                else if (first_split || next_split)
                    split_cnt <= split_cnt + 1;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                len_cnt <= 0;
            else if (ACLK_EN) begin
                if (next_offset)
                    len_cnt <= 0;
                else if (next_wdata || next_split)
                    len_cnt <= len_cnt + 1;
            end
        end
 
        always @(posedge ACLK)
        begin
            if (ARESET)
                data_buf <= {USER_DATA_WIDTH{1'b0}};
            else if (ACLK_EN) begin
                if (next_wdata)
                    data_buf <= tmp_wdata;
                else if (next_split)
                    data_buf <= data_buf >> BUS_DATA_WIDTH;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                strb_buf <= {USER_DATA_BYTES{1'b0}};
            else if (ACLK_EN) begin
                if (next_wdata)
                    strb_buf <= tmp_wstrb;
                else if (next_split)
                    strb_buf <= strb_buf >> BUS_DATA_BYTES;
            end
        end

        always @(posedge ACLK)
        begin
            if (ARESET)
                data_valid <= 0;
            else if (ACLK_EN) begin
                if (next_wdata)
                    data_valid <= 1;
                else if (~(first_split || next_split) && ready_for_data)
                    data_valid <= 0;
            end
        end
    end
    endgenerate

    // ===================================================================

    // generate response for all request (including request with invalid length)
    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH        (1),
        .ADDR_WIDTH        (log2(NUM_WRITE_OUTSTANDING)),
        .DEPTH             (NUM_WRITE_OUTSTANDING)
    ) fifo_wrsp (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (wrsp_ready),
        .if_write          (next_wreq),
        .if_din            (valid_length),
        .if_empty_n        (wrsp_valid),
        .if_read           (wrsp_read),
        .if_dout           (wrsp_type), // 1 - valid length request, 0 - invalid length request
        .if_num_data_valid ());

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH        (1),
        .ADDR_WIDTH        (log2(USER_MAXREQS)),
        .DEPTH             (USER_MAXREQS)
    ) user_resp (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        .if_full_n         (ursp_ready),
        .if_write          (ursp_write),
        .if_din            (1'b1),
        .if_empty_n        (out_HLS_BVALID),
        .if_read           (in_HLS_BREADY),
        .if_dout           (),
        .if_num_data_valid ());

    

    assign ursp_write  = wrsp_valid && (!wrsp_type || in_AXI_BVALID);
    assign wrsp_read   = ursp_ready && ursp_write;

    assign out_AXI_BREADY = wrsp_type && ursp_ready;

endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps

//


module KV_CACHE_gmem1_m_axi_read
#(parameter
    C_M_AXI_ID_WIDTH          = 1,
    C_M_AXI_ARUSER_WIDTH      = 1,
    C_M_AXI_RUSER_WIDTH       = 1,
    C_USER_VALUE              = 1'b0,
    C_PROT_VALUE              = 3'b000,
    C_CACHE_VALUE             = 4'b0011,
    BUS_ADDR_WIDTH            = 32,
    BUS_DATA_WIDTH            = 32,
    NUM_READ_OUTSTANDING      = 2,
    MAX_READ_BURST_LENGTH     = 16
)(
    // system signal
    input  wire                            ACLK,
    input  wire                            ARESET,
    input  wire                            ACLK_EN,
    // read address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]     out_BUS_ARID,
    output wire [BUS_ADDR_WIDTH-1:0]       out_BUS_ARADDR,
    output wire [7:0]                      out_BUS_ARLEN,
    output wire [2:0]                      out_BUS_ARSIZE,
    output wire [1:0]                      out_BUS_ARBURST,
    output wire [1:0]                      out_BUS_ARLOCK,
    output wire [3:0]                      out_BUS_ARCACHE,
    output wire [2:0]                      out_BUS_ARPROT,
    output wire [3:0]                      out_BUS_ARQOS,
    output wire [3:0]                      out_BUS_ARREGION,
    output wire [C_M_AXI_ARUSER_WIDTH-1:0] out_BUS_ARUSER,
    output wire                            out_BUS_ARVALID,
    input  wire                            in_BUS_ARREADY,
    // read data channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]     in_BUS_RID,
    input  wire [BUS_DATA_WIDTH-1:0]       in_BUS_RDATA,
    input  wire [1:0]                      in_BUS_RRESP,
    input  wire                            in_BUS_RLAST,
    input  wire [C_M_AXI_RUSER_WIDTH-1:0]  in_BUS_RUSER,
    input  wire                            in_BUS_RVALID,
    output wire                            out_BUS_RREADY,

    // HLS internal read request channel
    input  wire [BUS_ADDR_WIDTH-1:0]       in_HLS_ARADDR,
    input  wire [31:0]                     in_HLS_ARLEN,
    input  wire                            in_HLS_ARVALID,
    output wire                            out_HLS_ARREADY,
    output wire [BUS_DATA_WIDTH-1:0]       out_HLS_RDATA,
    output wire [1:0]                      out_HLS_RLAST,
    output wire                            out_HLS_RVALID,
    input  wire                            in_HLS_RREADY,
    input  wire                            in_HLS_RBUST_READY);

//------------------------Parameter----------------------
    localparam
        BUS_DATA_BYTES  = BUS_DATA_WIDTH / 8,
        BUS_ADDR_ALIGN  = log2(BUS_DATA_BYTES);

//------------------------Task and function--------------
    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------
    // AR channel
    wire                          ost_ctrl_info;
    wire                          ost_ctrl_valid;
    wire                          ost_ctrl_ready;

    // R channel
    wire [BUS_DATA_WIDTH-1:0]     tmp_data;
    wire                          tmp_last;
    wire                          data_valid;
    wire                          data_ready;
    wire                          next_ctrl;
    wire                          need_rlast;
    wire                          burst_valid;
    wire                          last_burst;
    wire                          fifo_rctl_ready;
    wire                          next_burst;
    wire                          burst_end;

    // regslice io ?  no 

//------------------------AR channel begin---------------
//------------------------Instantiation------------------
    KV_CACHE_gmem1_m_axi_burst_converter #(
        .DATA_WIDTH        (BUS_DATA_WIDTH),
        .ADDR_WIDTH        (BUS_ADDR_WIDTH),
        .MAX_BURST_LEN     (MAX_READ_BURST_LENGTH)
    ) rreq_burst_conv (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),

        .in_REQ_ADDR       (in_HLS_ARADDR),
        .in_REQ_LEN        (in_HLS_ARLEN),
        .in_REQ_VALID      (in_HLS_ARVALID),
        .out_REQ_READY     (out_HLS_ARREADY),
         
        .out_BURST_ADDR    (out_BUS_ARADDR),
        .out_BURST_LEN     (out_BUS_ARLEN),
        .out_BURST_VALID   (out_BUS_ARVALID),
        .in_BURST_READY    (in_BUS_ARREADY),

        .out_CTRL_INFO     (ost_ctrl_info),
        .out_CTRL_LEN      (),
        .out_CTRL_VALID    (ost_ctrl_valid),
        .in_CTRL_READY     (ost_ctrl_ready)
    );
    
    
//------------------------Body---------------------------

    assign out_BUS_ARID     = 0;
    assign out_BUS_ARSIZE   = BUS_ADDR_ALIGN;
    assign out_BUS_ARBURST  = 2'b01;
    assign out_BUS_ARLOCK   = 2'b00;
    assign out_BUS_ARCACHE  = C_CACHE_VALUE;
    assign out_BUS_ARPROT   = C_PROT_VALUE;
    assign out_BUS_ARUSER   = C_USER_VALUE;
    assign out_BUS_ARQOS    = 4'b0000;
    assign out_BUS_ARREGION = 4'b0000;

//------------------------AR channel end-----------------

//------------------------R channel begin----------------
//------------------------Instantiation------------------
    KV_CACHE_gmem1_m_axi_reg_slice #(
        .DATA_WIDTH     (BUS_DATA_WIDTH + 1)
    ) rs_rdata (
        .clk            (ACLK),
        .reset          (ARESET),
        .s_data         ({in_BUS_RLAST, in_BUS_RDATA}),
        .s_valid        (in_BUS_RVALID),
        .s_ready        (out_BUS_RREADY),
        .m_data         ({tmp_last, tmp_data}),
        .m_valid        (data_valid),
        .m_ready        (data_ready));

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH     (1),
        .ADDR_WIDTH     (log2(NUM_READ_OUTSTANDING)),
        .DEPTH          (NUM_READ_OUTSTANDING)
    ) fifo_rctl (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (ost_ctrl_ready),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_info),
        .if_empty_n     (need_rlast),
        .if_read        (next_ctrl),
        .if_dout        (),
        .if_num_data_valid());

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH     (1),
        .ADDR_WIDTH     (log2(NUM_READ_OUTSTANDING)),
        .DEPTH          (NUM_READ_OUTSTANDING)
    ) fifo_burst (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_info),
        .if_empty_n     (burst_valid),
        .if_read        (next_burst),
        .if_dout        (last_burst),
        .if_num_data_valid());

//------------------------Body---------------------------
    assign next_ctrl      = in_HLS_RBUST_READY && need_rlast;
    assign next_burst     = burst_end && data_valid && data_ready;

    assign burst_end      = tmp_last === 1'b1;
    assign out_HLS_RLAST  = {burst_end, burst_end && last_burst && burst_valid};
    assign out_HLS_RDATA  = tmp_data;
    assign out_HLS_RVALID = data_valid;
    assign data_ready     = in_HLS_RREADY;
//------------------------R channel end------------------
endmodule

module KV_CACHE_gmem1_m_axi_write
#(parameter
    CONSERVATIVE              = 0,
    C_M_AXI_ID_WIDTH          = 1,
    C_M_AXI_AWUSER_WIDTH      = 1,
    C_M_AXI_WUSER_WIDTH       = 1,
    C_M_AXI_BUSER_WIDTH       = 1,
    C_USER_VALUE              = 1'b0,
    C_PROT_VALUE              = 3'b000,
    C_CACHE_VALUE             = 4'b0011,
    BUS_ADDR_WIDTH            = 32,
    BUS_DATA_WIDTH            = 32,
    NUM_WRITE_OUTSTANDING     = 2,
    MAX_WRITE_BURST_LENGTH    = 16
)(
    // system signal
    input  wire                             ACLK,
    input  wire                             ARESET,
    input  wire                             ACLK_EN,
    // write address channel
    output wire [C_M_AXI_ID_WIDTH-1:0]      out_BUS_AWID,
    output wire [2:0]                       out_BUS_AWSIZE,
    output wire [1:0]                       out_BUS_AWBURST,
    output wire [1:0]                       out_BUS_AWLOCK,
    output wire [3:0]                       out_BUS_AWCACHE,
    output wire [2:0]                       out_BUS_AWPROT,
    output wire [3:0]                       out_BUS_AWQOS,
    output wire [3:0]                       out_BUS_AWREGION,
    output wire [C_M_AXI_AWUSER_WIDTH-1:0]  out_BUS_AWUSER,
    output wire [BUS_ADDR_WIDTH-1:0]        out_BUS_AWADDR,
    output wire [7:0]                       out_BUS_AWLEN,
    output wire                             out_BUS_AWVALID,
    input  wire                             in_BUS_AWREADY,
    // write data channel
    output wire [C_M_AXI_ID_WIDTH-1:0]      out_BUS_WID,
    output wire [C_M_AXI_WUSER_WIDTH-1:0]   out_BUS_WUSER,
    output wire [BUS_DATA_WIDTH-1:0]        out_BUS_WDATA,
    output wire [BUS_DATA_WIDTH/8-1:0]      out_BUS_WSTRB,
    output wire                             out_BUS_WLAST,
    output wire                             out_BUS_WVALID,
    input  wire                             in_BUS_WREADY,
    // write response channel
    input  wire [C_M_AXI_ID_WIDTH-1:0]      in_BUS_BID,
    input  wire [1:0]                       in_BUS_BRESP,
    input  wire [C_M_AXI_BUSER_WIDTH-1:0]   in_BUS_BUSER,
    input  wire                             in_BUS_BVALID,
    output wire                             out_BUS_BREADY,
    // write request
    input  wire [BUS_ADDR_WIDTH-1:0]        in_HLS_AWADDR,
    input  wire [31:0]                      in_HLS_AWLEN,
    input  wire                             in_HLS_AWVALID,
    output wire                             out_HLS_AWREADY,

    input  wire [BUS_DATA_WIDTH-1:0]        in_HLS_WDATA,
    input  wire [BUS_DATA_WIDTH/8-1:0]      in_HLS_WSTRB,
    input  wire                             in_HLS_WVALID,
    output wire                             out_HLS_WREADY,
    output wire                             out_HLS_BVALID,
    input  wire                             in_HLS_BREADY);

//------------------------Parameter----------------------
    localparam
        BUS_DATA_BYTES  = BUS_DATA_WIDTH / 8,
        BUS_ADDR_ALIGN  = log2(BUS_DATA_BYTES);

//------------------------Task and function--------------
    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction

//------------------------Local signal-------------------
    // AW channel
    wire [C_M_AXI_ID_WIDTH-1:0]         AWID_Dummy;
    wire [BUS_ADDR_WIDTH - 1:0]         AWADDR_Dummy;
    wire [7:0]                          AWLEN_Dummy;
    wire                                AWVALID_Dummy;
    wire                                AWREADY_Dummy;
 
    wire                                ost_ctrl_info;
    wire [7:0]                          ost_ctrl_len;
    wire                                ost_ctrl_valid;
    wire                                ost_ctrl_ready;

    // W channel
    wire                                next_data;
    wire                                data_valid;
    wire                                data_ready;
    reg  [BUS_DATA_WIDTH - 1:0]         data_buf;
    reg  [BUS_DATA_BYTES - 1:0]         strb_buf;
    wire                                ready_for_data;

    reg  [7:0]                          len_cnt;
    wire [7:0]                          burst_len;
    wire                                fifo_burst_ready;
    wire                                next_burst;
    wire                                burst_valid;
    reg                                 WVALID_Dummy;
    wire                                WREADY_Dummy;
    reg                                 WLAST_Dummy;
    //B channel
    wire                                next_resp;
    wire                                last_resp;
    wire                                need_wrsp;
    wire                                resp_valid;
    wire                                resp_ready;

    // regslice io ?  no 

//------------------------AW channel begin---------------
//------------------------Instantiation------------------
    KV_CACHE_gmem1_m_axi_burst_converter #(
        .DATA_WIDTH        (BUS_DATA_WIDTH),
        .ADDR_WIDTH        (BUS_ADDR_WIDTH),
        .MAX_BURST_LEN     (MAX_WRITE_BURST_LENGTH)
    ) wreq_burst_conv (
        .clk               (ACLK),
        .reset             (ARESET),
        .clk_en            (ACLK_EN),
        
        .in_REQ_ADDR       (in_HLS_AWADDR),
        .in_REQ_LEN        (in_HLS_AWLEN),
        .in_REQ_VALID      (in_HLS_AWVALID),
        .out_REQ_READY     (out_HLS_AWREADY),

        .out_BURST_ADDR    (AWADDR_Dummy),
        .out_BURST_LEN     (AWLEN_Dummy),
        .out_BURST_VALID   (AWVALID_Dummy),
        .in_BURST_READY    (AWREADY_Dummy),

        .out_CTRL_INFO     (ost_ctrl_info),
        .out_CTRL_LEN      (ost_ctrl_len),
        .out_CTRL_VALID    (ost_ctrl_valid),
        .in_CTRL_READY     (ost_ctrl_ready)
    );

    // burst converter
    assign out_BUS_AWID     = 0;
    assign out_BUS_AWSIZE   = BUS_ADDR_ALIGN;
    assign out_BUS_AWBURST  = 2'b01;
    assign out_BUS_AWLOCK   = 2'b00;
    assign out_BUS_AWCACHE  = C_CACHE_VALUE;
    assign out_BUS_AWPROT   = C_PROT_VALUE;
    assign out_BUS_AWUSER   = C_USER_VALUE;
    assign out_BUS_AWQOS    = 4'b0000;
    assign out_BUS_AWREGION = 4'b0000;

//------------------------AW channel end-----------------

//------------------------W channel begin----------------
//------------------------Instantiation------------------

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH     (8),
        .ADDR_WIDTH     (log2(NUM_WRITE_OUTSTANDING)),
        .DEPTH          (NUM_WRITE_OUTSTANDING)
    ) fifo_burst (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_len),
        .if_empty_n     (burst_valid),
        .if_read        (next_burst),
        .if_dout        (burst_len),
        .if_num_data_valid());

//------------------------Body---------------------------

    assign out_BUS_WUSER    = C_USER_VALUE;
    assign out_BUS_WID      = 0;
    assign out_HLS_WREADY   = data_ready;

    assign data_valid       = in_HLS_WVALID;
    assign data_ready       = burst_valid && ready_for_data;
    assign next_data        = data_ready && data_valid;
    assign next_burst       = (len_cnt == burst_len) && next_data;
    assign ready_for_data   = ~WVALID_Dummy || WREADY_Dummy;

    always @(posedge ACLK)
    begin
        if (ARESET) begin
            strb_buf <= 0;
            data_buf <= 0;
        end
        if (ACLK_EN) begin
            if (next_data) begin
                data_buf <= in_HLS_WDATA;
                strb_buf <= in_HLS_WSTRB;
            end
        end
    end

    always @(posedge ACLK)
    begin
        if (ARESET)
            WVALID_Dummy <= 1'b0;
        else if (ACLK_EN) begin
            if (next_data)
                WVALID_Dummy <= 1'b1;
            else if (ready_for_data)
                WVALID_Dummy <= 1'b0;
        end
    end

    always @(posedge ACLK)
    begin
        if (ARESET)
            WLAST_Dummy <= 0;
        else if (ACLK_EN) begin
            if (next_burst)
                WLAST_Dummy <= 1;
            else if (ready_for_data)
                WLAST_Dummy <= 0;
        end
    end

    always @(posedge ACLK)
    begin
        if (ARESET)
            len_cnt <= 0;
        else if (ACLK_EN) begin
            if (next_burst)
                len_cnt <= 0;
            else if (next_data)
                len_cnt <= len_cnt + 1;
        end
    end
//------------------------W channel end------------------

    // Write throttling unit
    KV_CACHE_gmem1_m_axi_throttle #(
        .CONSERVATIVE    (CONSERVATIVE),
        .USED_FIX        (0),
        .ADDR_WIDTH      (BUS_ADDR_WIDTH),
        .DATA_WIDTH      (BUS_DATA_WIDTH),
        .DEPTH           (MAX_WRITE_BURST_LENGTH),
        .MAXREQS         (NUM_WRITE_OUTSTANDING),
        .AVERAGE_MODE    (0)
    ) wreq_throttle (
        .clk             (ACLK),
        .reset           (ARESET),
        .clk_en          (ACLK_EN),
        // internal 
        .in_TOP_AWADDR   (AWADDR_Dummy),
        .in_TOP_AWLEN    (AWLEN_Dummy),
        .in_TOP_AWVALID  (AWVALID_Dummy),
        .out_TOP_AWREADY (AWREADY_Dummy),

        .in_TOP_WDATA    (data_buf),
        .in_TOP_WSTRB    (strb_buf),
        .in_TOP_WLAST    (WLAST_Dummy),
        .in_TOP_WVALID   (WVALID_Dummy),
        .out_TOP_WREADY  (WREADY_Dummy),

        // AXI BUS 
        .out_BUS_AWADDR  (out_BUS_AWADDR),
        .out_BUS_AWLEN   (out_BUS_AWLEN),
        .out_BUS_AWVALID (out_BUS_AWVALID),
        .in_BUS_AWREADY  (in_BUS_AWREADY),

        .out_BUS_WDATA   (out_BUS_WDATA),
        .out_BUS_WSTRB   (out_BUS_WSTRB),
        .out_BUS_WLAST   (out_BUS_WLAST),
        .out_BUS_WVALID  (out_BUS_WVALID),
        .in_BUS_WREADY   (in_BUS_WREADY)
    );

    
    
//------------------------B channel begin----------------
//------------------------Instantiation------------------
    KV_CACHE_gmem1_m_axi_reg_slice #(
        .DATA_WIDTH     (1)
    ) rs_resp (
        .clk            (ACLK),
        .reset          (ARESET),
        .s_data         (1'b1),
        .s_valid        (in_BUS_BVALID),
        .s_ready        (out_BUS_BREADY),
        .m_data         (),
        .m_valid        (resp_valid),
        .m_ready        (resp_ready));

    KV_CACHE_gmem1_m_axi_fifo #(
        .DATA_WIDTH     (1),
        .ADDR_WIDTH     (log2(NUM_WRITE_OUTSTANDING)),
        .DEPTH          (NUM_WRITE_OUTSTANDING)
    ) fifo_resp (
        .clk            (ACLK),
        .reset          (ARESET),
        .clk_en         (ACLK_EN),
        .if_full_n      (ost_ctrl_ready),
        .if_write       (ost_ctrl_valid),
        .if_din         (ost_ctrl_info),
        .if_empty_n     (need_wrsp),
        .if_read        (next_resp),
        .if_dout        (last_resp),
        .if_num_data_valid());
//------------------------Body---------------------------

    assign resp_ready = need_wrsp && (in_HLS_BREADY || (last_resp === 1'b0));
    assign next_resp  = resp_ready && resp_valid;

    assign out_HLS_BVALID = resp_valid && (last_resp === 1'b1 ) ;

//------------------------B channel end------------------
endmodule


module KV_CACHE_gmem1_m_axi_burst_converter
#(parameter
    DATA_WIDTH                   = 32,
    ADDR_WIDTH                   = 32,
    MAX_BURST_LEN                = 16
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  clk_en,

    input  wire [ADDR_WIDTH-1:0] in_REQ_ADDR,
    input  wire [31:0]           in_REQ_LEN,
    input  wire                  in_REQ_VALID,
    output wire                  out_REQ_READY,

    output wire [ADDR_WIDTH-1:0] out_BURST_ADDR,
    output wire [7:0]            out_BURST_LEN,
    output wire                  out_BURST_VALID,
    input  wire                  in_BURST_READY,

    output wire                  out_CTRL_INFO,
    output wire [7:0]            out_CTRL_LEN,
    output wire                  out_CTRL_VALID,
    input  wire                  in_CTRL_READY
);
//------------------------Parameter----------------------
    localparam
        DATA_BYTES      = DATA_WIDTH / 8,
        ADDR_ALIGN      = log2(DATA_BYTES),
        BOUNDARY_BEATS  = {12-ADDR_ALIGN{1'b1}},
        NUM_BEAT_WIDTH  = log2(MAX_BURST_LEN);
//------------------------Task and function--------------
    function integer log2;
        input integer x;
        integer n, m;
        begin
            n = 0;
            m = 1;
            while (m < x) begin
                n = n + 1;
                m = m * 2;
            end
            log2 = n;
        end
    endfunction
//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0]       tmp_addr;
    wire [31:0]                 tmp_len;

    wire                        req_valid;
    wire                        read_req;
    wire                        next_req;

    reg  [ADDR_WIDTH - 1:0]     start_addr;
    wire [ADDR_WIDTH - 1:0]     sect_addr;
    reg  [ADDR_WIDTH - 1:0]     sect_addr_buf;
    reg                         req_handling;

    reg  [11 - ADDR_ALIGN:0]    start_to_4k;
    reg  [11 - ADDR_ALIGN:0]    end_from_4k;
    wire [11 - ADDR_ALIGN:0]    sect_len;
    reg  [11 - ADDR_ALIGN:0]    sect_len_buf;
    reg  [11 - ADDR_ALIGN:0]    beat_len;
    
    reg  [ADDR_WIDTH - 13:0]    sect_cnt;
    reg  [19:0]                 sect_total;
    reg  [19:0]                 sect_total_buf;
    wire [19:0]                 sect_total_tmp;
    wire                        ready_for_sect;

    wire                        single_sect;
    reg                         first_sect;
    reg                         last_sect;
    wire                        last_sect_tmp;
    reg                         last_sect_buf;
    wire                        next_sect;

    reg                         burst_valid;

    wire                        ost_ctrl_info;
    wire [7:0]                  ost_ctrl_len;
    wire                        ost_ctrl_valid;
//------------------------Instantiation------------------
    KV_CACHE_gmem1_m_axi_reg_slice #(
        .DATA_WIDTH     (ADDR_WIDTH + 32)
    ) rs_req (
        .clk            (clk),
        .reset          (reset),
        .s_data         ({in_REQ_LEN, in_REQ_ADDR}),
        .s_valid        (in_REQ_VALID),
        .s_ready        (out_REQ_READY),
        .m_data         ({tmp_len, tmp_addr}),
        .m_valid        (req_valid),
        .m_ready        (next_req));

//------------------------Body---------------------------
    assign read_req      = last_sect_tmp & next_sect | ~req_handling;
    assign next_req      = req_valid & read_req;

    always @(posedge clk)
    begin
        if (reset) begin
            start_addr  <= 0;
            beat_len    <= 0;
            sect_total  <= 0;
            end_from_4k <= 0;
            start_to_4k <= 0;
        end
        else if (clk_en) begin
            if (next_req) begin
                start_addr  <= {tmp_addr[ADDR_WIDTH-1:ADDR_ALIGN], {ADDR_ALIGN{1'b0}}};
                beat_len    <= (tmp_len[11:0] + tmp_addr[ADDR_ALIGN-1:0]) >> ADDR_ALIGN;
                sect_total  <= (tmp_len + tmp_addr[11:0]) >> 12;
                end_from_4k <= (tmp_addr[11:0] + tmp_len[11:0]) >> ADDR_ALIGN; 
                start_to_4k <= BOUNDARY_BEATS - tmp_addr[11:ADDR_ALIGN];
            end
        end
    end

    always @(posedge clk)
    begin
        if (reset)
            req_handling <= 1'b0;
        else if (clk_en) begin
            if (next_req)
                req_handling <= 1'b1;
            else if (~req_valid && last_sect_tmp & next_sect)
                req_handling <= 1'b0;
        end
    end

    // 4k boundary
    assign last_sect_tmp  = single_sect || last_sect;

    assign sect_total_tmp = first_sect ? sect_total : sect_total_buf;
    
    assign single_sect  = (sect_total == 0);

    assign next_sect  = req_handling && ready_for_sect;

    assign sect_addr  = (first_sect)? start_addr : {sect_cnt, {12{1'b0}}};
    
    assign sect_len   = single_sect              ? beat_len :
                        ( first_sect && ~last_sect)? start_to_4k :
                        (~first_sect &&  last_sect)? end_from_4k :
                                                     BOUNDARY_BEATS;

    always @(posedge clk)
    begin
        if (reset) begin
            first_sect <= 1'b0;
            last_sect <= 1'b0;
            sect_cnt <= 0;
        end
        else if (clk_en) begin
            if (next_req) begin
                first_sect <= 1'b1;
                last_sect <= 1'b0;
                sect_cnt <= tmp_addr[ADDR_WIDTH-1:12];
            end
            else if (next_sect) begin
                first_sect <= 1'b0;
                last_sect <= (sect_total_tmp == 1);
                sect_cnt <= sect_cnt + 1;
            end
        end
    end

    always @(posedge clk)
    begin
        if (reset) begin
            sect_addr_buf  <= 0;
            sect_len_buf   <= 0;
            last_sect_buf  <= 1'b0;
            sect_total_buf <= 0;
        end
        else if (clk_en) begin
            if (next_sect) begin
                sect_addr_buf  <= sect_addr;
                sect_len_buf   <= sect_len;
                last_sect_buf  <= last_sect_tmp;
                sect_total_buf <= sect_total_tmp - 1;
            end
        end
    end

    generate
    if (DATA_BYTES >= 4096/MAX_BURST_LEN) begin : must_one_burst
        assign out_BURST_ADDR  = sect_addr_buf;
        assign out_BURST_LEN   = sect_len_buf;
        assign out_BURST_VALID = burst_valid;

        assign out_CTRL_VALID  = next_sect;
        assign out_CTRL_INFO   = last_sect_tmp;
        assign out_CTRL_LEN    = sect_len;

        assign ready_for_sect = ~(burst_valid && ~in_BURST_READY) && in_CTRL_READY;

        always @(posedge clk)
        begin
            if (reset)
                burst_valid <= 1'b0;
            else if (clk_en) begin
                if (next_sect)
                    burst_valid <= 1'b1;
                else if (in_BURST_READY)
                    burst_valid <= 1'b0;
            end
        end

    end
    else begin : could_multi_bursts
        wire [ADDR_WIDTH - 1:0]                   addr_tmp;
        reg  [ADDR_WIDTH - 1:0]                   addr_buf;
        reg  [ADDR_ALIGN + 8:0]                   addr_step;
        wire [7:0]                                len_tmp;
        reg  [7:0]                                len_buf;
        reg                                       sect_handling;
        reg  [11 - NUM_BEAT_WIDTH - ADDR_ALIGN:0] loop_cnt;
        reg                                       first_loop;
        reg                                       last_loop;
        wire                                      next_loop;
        wire                                      ready_for_loop;

        assign out_BURST_ADDR  = addr_buf;
        assign out_BURST_LEN   = len_buf;
        assign out_BURST_VALID = burst_valid;

        assign out_CTRL_VALID  = next_loop;
        assign out_CTRL_INFO   = last_loop && last_sect_buf;
        assign out_CTRL_LEN    = len_tmp;

        assign next_loop       = sect_handling && ready_for_loop;
        assign ready_for_sect  = ~sect_handling || (last_loop && next_loop);
        assign ready_for_loop  = ~(burst_valid && ~in_BURST_READY) && in_CTRL_READY;

        always @(posedge clk)
        begin
            if (reset)
                burst_valid <= 1'b0;
            else if (clk_en) begin
                if (next_loop)
                    burst_valid <= 1'b1;
                else if (in_BURST_READY)
                    burst_valid <= 1'b0;
            end
        end

        always @(posedge clk)
        begin
            if (reset)
                sect_handling <= 1'b0;
            else if (clk_en) begin
                if (req_handling && ~sect_handling)
                    sect_handling <= 1'b1;
                else if (~req_handling && last_loop && next_loop)
                    sect_handling <= 1'b0;
            end
        end

        always @(posedge clk)
        begin
            if (reset) begin
                first_loop <= 1'b0;
                last_loop <= 1'b0;
                loop_cnt <= 0;
            end
            else if (clk_en) begin
                if (next_sect) begin
                    first_loop <= 1'b1;
                    last_loop <= (sect_len[11 - ADDR_ALIGN : NUM_BEAT_WIDTH] == 0);
                    loop_cnt <= sect_len[11 - ADDR_ALIGN : NUM_BEAT_WIDTH];
                end
                else if (next_loop) begin
                    first_loop <= 1'b0;
                    last_loop <= (loop_cnt == 1);
                    loop_cnt <= loop_cnt - 1;
                end
            end
        end

        assign addr_tmp = first_loop ? sect_addr_buf : (addr_buf + addr_step);
        assign len_tmp  = (NUM_BEAT_WIDTH == 0) ? 0 :
                          last_loop ? sect_len_buf[NUM_BEAT_WIDTH - 1:0] : 
                                      { NUM_BEAT_WIDTH{1'b1} };
        always @(posedge clk)
        begin
            if (reset) begin
                addr_buf  <= 0;
                addr_step <= 0;
                len_buf   <= 0;
            end
            else if (clk_en) begin
                if (next_loop) begin
                    addr_buf  <= addr_tmp;
                    addr_step <= (len_tmp + 1) << ADDR_ALIGN;
                    len_buf   <= len_tmp;
                end
            end
        end

    end
    endgenerate

endmodule

module KV_CACHE_gmem1_m_axi_throttle
#(parameter
    CONSERVATIVE   = 0,
    USED_FIX       = 0,
    FIX_VALUE      = 4,
    ADDR_WIDTH     = 32,
    DATA_WIDTH     = 32,
    DEPTH          = 16,
    MAXREQS        = 16,
    AVERAGE_MODE   = 0 
)(
    input  wire                      clk,
    input  wire                      reset,
    input  wire                      clk_en,

    input  wire [ADDR_WIDTH-1:0]     in_TOP_AWADDR,
    input  wire [7:0]                in_TOP_AWLEN,
    input  wire                      in_TOP_AWVALID,
    output wire                      out_TOP_AWREADY,
    input  wire [DATA_WIDTH-1:0]     in_TOP_WDATA,
    input  wire [DATA_WIDTH/8-1:0]   in_TOP_WSTRB,
    input  wire                      in_TOP_WLAST,
    input  wire                      in_TOP_WVALID,
    output wire                      out_TOP_WREADY,

    output wire [ADDR_WIDTH-1:0]     out_BUS_AWADDR,
    output wire [7:0]                out_BUS_AWLEN,
    output wire                      out_BUS_AWVALID,
    input  wire                      in_BUS_AWREADY,
    output wire [DATA_WIDTH-1:0]     out_BUS_WDATA,
    output wire [DATA_WIDTH/8-1:0]   out_BUS_WSTRB,
    output wire                      out_BUS_WLAST,
    output wire                      out_BUS_WVALID,
    input  wire                      in_BUS_WREADY);

    function integer log2;
        input integer x;
        integer n, m;
    begin
        n = 0;
        m = 1;
        while (m < x) begin
            n = n + 1;
            m = m * 2;
        end
        log2 = n;
    end
    endfunction
// aggressive mode
    generate
    if (CONSERVATIVE == 0) begin
        localparam threshold = (USED_FIX)? FIX_VALUE-1 : 0;

        wire                req_en;
        wire                handshake;
        wire  [7:0]         load_init;
        reg   [8:0]         throttl_cnt;

        // AW Channel
        assign out_BUS_AWADDR = in_TOP_AWADDR;
        assign out_BUS_AWLEN  = in_TOP_AWLEN;

        // W Channel
        assign out_BUS_WDATA  = in_TOP_WDATA;
        assign out_BUS_WSTRB  = in_TOP_WSTRB;
        assign out_BUS_WLAST  = in_TOP_WLAST;
        assign out_BUS_WVALID = in_TOP_WVALID & (throttl_cnt > 0);
        assign out_TOP_WREADY = in_BUS_WREADY & (throttl_cnt > 0);

        if (USED_FIX) begin
            assign load_init = FIX_VALUE-1;
            assign handshake = 1'b1;
        end else if (AVERAGE_MODE) begin
            assign load_init = in_TOP_AWLEN;
            assign handshake = 1'b1;
        end else begin
            assign load_init = in_TOP_AWLEN;
            assign handshake = out_BUS_WVALID & in_BUS_WREADY;
        end

        assign out_BUS_AWVALID = in_TOP_AWVALID & req_en;
        assign out_TOP_AWREADY = in_BUS_AWREADY & req_en;
        assign req_en = (throttl_cnt == 0) | (throttl_cnt == 1 & handshake);

        always @(posedge clk)
        begin
            if (reset)
                throttl_cnt <= 0;
            else if (clk_en) begin
                if (in_TOP_AWLEN >= threshold && req_en && in_TOP_AWVALID && in_BUS_AWREADY)
                    throttl_cnt <= load_init + 1'b1; //load
                else if (throttl_cnt > 0 && handshake)
                    throttl_cnt <= throttl_cnt - 1'b1;
            end
        end

    end
// conservative mode
    else begin
        localparam CNT_WIDTH = ((DEPTH < 4)? 2 : log2(DEPTH)) + 1;

        // Instantiation for reg slice for AW channel
        wire                        rs_req_ready;
        wire                        rs_req_valid;
        wire [ADDR_WIDTH + 7 : 0]   rs_req_in;
        wire [ADDR_WIDTH + 7 : 0]   rs_req_out;

        KV_CACHE_gmem1_m_axi_reg_slice #(
            .DATA_WIDTH     (ADDR_WIDTH + 8)
        ) rs_req (
            .clk            (clk),
            .reset          (reset),
            .s_data         (rs_req_in),
            .s_valid        (rs_req_valid),
            .s_ready        (rs_req_ready),
            .m_data         (rs_req_out),
            .m_valid        (out_BUS_AWVALID),
            .m_ready        (in_BUS_AWREADY));

        wire  [DATA_WIDTH + DATA_WIDTH/8 : 0]   data_in;
        wire  [DATA_WIDTH + DATA_WIDTH/8 : 0]   data_out;
        wire  [ADDR_WIDTH + 7 : 0]              req_in;
        reg                                     req_en;
        wire                                    data_en;
        wire                                    fifo_valid;
        wire                                    read_fifo;
        wire                                    req_fifo_valid;
        wire                                    read_req;
        wire                                    data_push;
        wire                                    data_pop;
        reg                                     flying_req;
        reg   [CNT_WIDTH-1 : 0]                 last_cnt;

        //AW Channel
        assign req_in   = {in_TOP_AWLEN, in_TOP_AWADDR};
        assign out_BUS_AWADDR = rs_req_out[ADDR_WIDTH-1 : 0];
        assign out_BUS_AWLEN  = rs_req_out[ADDR_WIDTH+7 : ADDR_WIDTH];
        assign rs_req_valid = req_fifo_valid & req_en;

        assign read_req      = rs_req_ready & req_en;

        always @(*)
        begin
            if (~flying_req & data_en)
                req_en <= 1;
            else if (flying_req & (out_BUS_WLAST & data_pop) & (last_cnt[CNT_WIDTH-1:1] != 0))
                req_en <= 1;
            else
                req_en <= 0;
        end

        always @(posedge clk)
        begin
            if (reset)
                flying_req <= 0;
            else if (clk_en) begin
                if (rs_req_valid & rs_req_ready)
                    flying_req <= 1;
                else if (out_BUS_WLAST & data_pop)
                    flying_req <= 0;
            end
        end

        KV_CACHE_gmem1_m_axi_fifo #(
            .DATA_WIDTH     (ADDR_WIDTH + 8),
            .ADDR_WIDTH     (log2(MAXREQS)),
            .DEPTH          (MAXREQS)
        ) req_fifo (
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .if_full_n      (out_TOP_AWREADY),
            .if_write       (in_TOP_AWVALID),
            .if_din         (req_in),
            .if_empty_n     (req_fifo_valid),
            .if_read        (read_req),
            .if_dout        (rs_req_in),
            .if_num_data_valid());

        //W Channel
        assign data_in  = {in_TOP_WLAST, in_TOP_WSTRB, in_TOP_WDATA};
        assign out_BUS_WDATA = data_out[DATA_WIDTH-1 : 0];
        assign out_BUS_WSTRB = data_out[DATA_WIDTH+DATA_WIDTH/8-1 : DATA_WIDTH];
        assign out_BUS_WLAST = data_out[DATA_WIDTH+DATA_WIDTH/8];
        assign out_BUS_WVALID = fifo_valid & data_en & flying_req;

        assign data_en   = last_cnt != 0;
        assign data_push = in_TOP_WVALID & out_TOP_WREADY;
        assign data_pop  = fifo_valid & read_fifo;
        assign read_fifo = in_BUS_WREADY & data_en & flying_req;

        always @(posedge clk)
        begin
            if (reset)
                last_cnt <= 0;
            else if (clk_en) begin
                if ((in_TOP_WLAST & data_push) && ~(out_BUS_WLAST & data_pop))
                    last_cnt <= last_cnt + 1;
                else if (~(in_TOP_WLAST & data_push) && (out_BUS_WLAST & data_pop))
                    last_cnt <= last_cnt - 1;
            end
        end
            
        KV_CACHE_gmem1_m_axi_fifo #(
            .DATA_WIDTH     (DATA_WIDTH + DATA_WIDTH/8 + 1),
            .ADDR_WIDTH     (log2(DEPTH)),
            .DEPTH          (DEPTH)
        ) data_fifo (
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .if_full_n      (out_TOP_WREADY),
            .if_write       (in_TOP_WVALID),
            .if_din         (data_in),
            .if_empty_n     (fifo_valid),
            .if_read        (read_fifo),
            .if_dout        (data_out),
            .if_num_data_valid());

        end
    endgenerate

endmodule



module KV_CACHE_gmem1_m_axi_reg_slice
#(parameter
    DATA_WIDTH = 8
) (
    // system signals
    input  wire                  clk,
    input  wire                  reset,
    // slave side
    input  wire [DATA_WIDTH-1:0] s_data,
    input  wire                  s_valid,
    output wire                  s_ready,
    // master side
    output wire [DATA_WIDTH-1:0] m_data,
    output wire                  m_valid,
    input  wire                  m_ready);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DATA_WIDTH-1:0] data_p1;
    reg  [DATA_WIDTH-1:0] data_p2;
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          s_ready_t;
    reg  [1:0]   state;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign s_ready = s_ready_t;
    assign m_data  = data_p1;
    assign m_valid = state[0];

    assign load_p1 = (state == ZERO && s_valid) ||
                    (state == ONE && s_valid && m_ready) ||
                    (state == TWO && m_ready);
    assign load_p2 = s_valid & s_ready;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= s_data;
        end
    end

    // data_p2
    always @(posedge clk) begin
        if (load_p2) data_p2 <= s_data;
    end

    // s_ready_t
    always @(posedge clk) begin
        if (reset)
            s_ready_t <= 1'b0;
        else if (state == ZERO)
            s_ready_t <= 1'b1;
        else if (state == ONE && next == TWO)
            s_ready_t <= 1'b0;
        else if (state == TWO && next == ONE)
            s_ready_t <= 1'b1;
    end

    // state
    always @(posedge clk) begin
        if (reset)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (s_valid & s_ready)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~s_valid & m_ready)
                    next = ZERO;
                else if (s_valid & ~m_ready)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (m_ready)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule

module KV_CACHE_gmem1_m_axi_fifo
#(parameter
    MEM_STYLE   = "shiftreg",
    DATA_WIDTH = 32,
    ADDR_WIDTH = 5,
    DEPTH      = 32
) (
    // system signal
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  clk_en,

    // write
    output wire                  if_full_n,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout,
    output wire [ADDR_WIDTH:0]   if_num_data_valid);

//------------------------Local signal-------------------

    wire                  push;
    wire                  pop;
    reg                   full_n = 1'b1;
    reg                   empty_n = 1'b0;
    reg                   dout_vld = 1'b0;
    reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;

//------------------------Instantiation------------------
    generate 
    if ((MEM_STYLE == "shiftreg") || (DEPTH == 1)) begin
        reg  [ADDR_WIDTH-1:0] raddr = 1'b0;

        KV_CACHE_gmem1_m_axi_srl
        #(  .DATA_WIDTH     (DATA_WIDTH),
            .ADDR_WIDTH     (ADDR_WIDTH),
            .DEPTH          (DEPTH))
        U_fifo_srl(
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .we             (push),
            .din            (if_din),
            .raddr          (raddr),
            .re             (pop),
            .dout           (if_dout)
        );

        // raddr
        always @(posedge clk) begin
            if (reset == 1'b1)
                raddr <= 1'b0;
            else if (clk_en) begin
                if (push & ~pop & empty_n)
                    raddr <= raddr + 1'b1;
                else if (~push & pop && raddr != 0)
                    raddr <= raddr - 1'b1;
            end
        end

    end else begin
        reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
        reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
        wire [ADDR_WIDTH-1:0] wnext;
        wire [ADDR_WIDTH-1:0] rnext;

        KV_CACHE_gmem1_m_axi_mem
        #(  .MEM_STYLE      (MEM_STYLE),
            .DATA_WIDTH     (DATA_WIDTH),
            .ADDR_WIDTH     (ADDR_WIDTH),
            .DEPTH          (DEPTH))
        U_fifo_mem(
            .clk            (clk),
            .reset          (reset),
            .clk_en         (clk_en),
            .we             (push),
            .waddr          (waddr),
            .din            (if_din),
            .raddr          (rnext),
            .re             (pop),
            .dout           (if_dout)
        );

        assign wnext =  !push                ? waddr :
                        (waddr == DEPTH - 2) ? 1'b0  :
                        waddr + 1'b1;
        assign rnext =  !pop                 ? raddr :
                        (raddr == DEPTH - 2) ? 1'b0  :
                        raddr + 1'b1;

        // waddr
        always @(posedge clk) begin
            if (reset == 1'b1)
                waddr <= 1'b0;
            else if (clk_en)
                waddr <= wnext;
        end

        // raddr
        always @(posedge clk) begin
            if (reset == 1'b1)
                raddr <= 1'b0;
            else if (clk_en)
                raddr <= rnext;
        end
    end
    endgenerate

//------------------------Body---------------------------
    assign if_num_data_valid = dout_vld ? mOutPtr + 1'b1 : 'b0;

    generate if (DEPTH == 1) begin
        assign if_full_n  = !dout_vld;
        assign if_empty_n = dout_vld;
        assign push = !dout_vld & if_write;
        assign pop  = !dout_vld & if_write;
    
    end else begin

        assign if_full_n  = full_n;
        assign if_empty_n = dout_vld;
        assign push = full_n & if_write;
        assign pop  = empty_n & (if_read | ~dout_vld);

        // mOutPtr
        always @(posedge clk) begin
            if (reset == 1'b1)
                mOutPtr <= 'b0;
            else if (clk_en)
                if (push & ~pop)
                    mOutPtr <= mOutPtr + 1'b1;
                else if (~push & pop)
                    mOutPtr <= mOutPtr - 1'b1;
        end

        // full_n
        always @(posedge clk) begin
            if (reset == 1'b1)
                full_n <= 1'b1;
            else if (clk_en)
                if (push & ~pop)
                    full_n <= (mOutPtr != DEPTH - 2);
                else if (~push & pop)
                    full_n <= 1'b1;
        end

        // empty_n
        always @(posedge clk)
        begin
            if (reset)
                empty_n <= 1'b0;
            else if (clk_en) begin
                if (push & ~pop)
                    empty_n <= 1'b1;
                else if (~push & pop)
                    empty_n <= (mOutPtr != 1'b1);
            end
        end
    end
    endgenerate

    // dout_vld
    always @(posedge clk) begin
        if (reset == 1'b1)
            dout_vld <= 1'b0;
        else if (clk_en)
            if (pop)
                dout_vld <= 1'b1;
            else if (if_read)
                dout_vld <= 1'b0;
    end

endmodule

module KV_CACHE_gmem1_m_axi_srl
#(parameter
        DATA_WIDTH  = 32,
        ADDR_WIDTH  = 6,
        DEPTH       = 63
    )(
        input  wire                  clk,
        input  wire                  reset,
        input  wire                  clk_en,
        input  wire                  we,
        input  wire [DATA_WIDTH-1:0] din,
        input  wire [ADDR_WIDTH-1:0] raddr,
        input  wire                  re,
        output reg  [DATA_WIDTH-1:0] dout
    );

    generate
    if (DEPTH > 1) begin
        reg  [DATA_WIDTH-1:0] mem[0:DEPTH-2];

        integer i;
        always @(posedge clk)
        begin
            if (clk_en & we) begin
                for (i = 0; i < DEPTH - 2; i = i + 1) begin
                    mem[i+1] <= mem[i];
                end
                mem[0] <= din;
            end
        end

        always @(posedge clk)
        begin
            if (reset)
                dout <= 0;
            else if (clk_en & re) begin
                dout <= mem[raddr];
            end
        end
    end
    else begin
        always @(posedge clk)
        begin
            if (reset)
                dout <= 0;
            else if (clk_en & we) begin
                dout <= din;
            end
        end
    end
    endgenerate

endmodule

module KV_CACHE_gmem1_m_axi_mem
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 6,
    DEPTH       = 63
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  clk_en,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  re,
    output reg  [DATA_WIDTH-1:0] dout);

    (* ram_style = MEM_STYLE, rw_addr_collision = "yes" *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-2];
    reg  [ADDR_WIDTH-1:0] raddr_reg;

    //write to ram
    always @(posedge clk) begin
        if (clk_en & we)
            mem[waddr] <= din;
    end

    //buffer the raddr
    always @(posedge clk) begin
        if (clk_en)
            raddr_reg <= raddr;
    end

    //read from ram
    always @(posedge clk) begin
        if (reset)
            dout <= 0;
        else if (clk_en & re)
            dout <= mem[raddr_reg];
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_rd_kv_cache (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        memory_k_cache,
        kq_cache_i_stream_TDATA,
        kq_cache_i_stream_TVALID,
        kq_cache_i_stream_TREADY,
        ks_cache_i_stream_TDATA,
        ks_cache_i_stream_TVALID,
        ks_cache_i_stream_TREADY,
        vq_cache_i_stream_TDATA,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TDATA,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [63:0] memory_k_cache;
output  [63:0] kq_cache_i_stream_TDATA;
output   kq_cache_i_stream_TVALID;
input   kq_cache_i_stream_TREADY;
output  [7:0] ks_cache_i_stream_TDATA;
output   ks_cache_i_stream_TVALID;
input   ks_cache_i_stream_TREADY;
output  [63:0] vq_cache_i_stream_TDATA;
output   vq_cache_i_stream_TVALID;
input   vq_cache_i_stream_TREADY;
output  [7:0] vs_cache_i_stream_TDATA;
output   vs_cache_i_stream_TVALID;
input   vs_cache_i_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_160;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_165;
wire   [32:0] add_ln54_fu_92_p2;
reg   [32:0] add_ln54_reg_172;
wire   [0:0] empty_fu_98_p2;
reg   [0:0] empty_reg_178;
wire   [0:0] empty_37_fu_104_p2;
reg   [0:0] empty_37_reg_183;
wire   [32:0] sub_ln54_fu_122_p2;
reg   [32:0] sub_ln54_reg_188;
wire    ap_CS_fsm_state2;
wire   [32:0] sub_ln54_1_fu_138_p2;
reg   [32:0] sub_ln54_1_reg_194;
reg   [63:0] memory_k_cache_read_reg_200;
wire    ap_CS_fsm_state3;
wire   [32:0] xor_ln54_fu_153_p2;
reg   [32:0] xor_ln54_reg_205;
wire    grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWVALID;
wire   [63:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWID;
wire   [31:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWUSER;
wire    grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WVALID;
wire   [127:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WDATA;
wire   [15:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WSTRB;
wire    grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WLAST;
wire   [0:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WID;
wire   [0:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WUSER;
wire    grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARVALID;
wire   [63:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARID;
wire   [31:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARUSER;
wire    grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_RREADY;
wire    grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_BREADY;
wire   [63:0] grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TDATA;
wire   [7:0] grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TDATA;
wire   [63:0] grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TDATA;
wire   [7:0] grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TDATA;
wire    grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TVALID;
wire    grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TREADY;
wire    grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TVALID;
wire    grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TREADY;
wire    grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TVALID;
wire    grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TREADY;
wire    grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TVALID;
wire    grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TREADY;
wire    grp_dataflow_parent_loop_proc2_fu_70_ap_start;
wire    grp_dataflow_parent_loop_proc2_fu_70_ap_done;
wire    grp_dataflow_parent_loop_proc2_fu_70_ap_ready;
wire    grp_dataflow_parent_loop_proc2_fu_70_ap_idle;
reg    grp_dataflow_parent_loop_proc2_fu_70_ap_continue;
reg    grp_dataflow_parent_loop_proc2_fu_70_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_done;
reg    ap_block_state4_on_subcall_done;
wire    ap_sync_grp_dataflow_parent_loop_proc2_fu_70_ap_ready;
reg   [63:0] kq_cache_i_stream_TDATA_reg;
reg   [7:0] ks_cache_i_stream_TDATA_reg;
reg   [63:0] vq_cache_i_stream_TDATA_reg;
reg   [7:0] vs_cache_i_stream_TDATA_reg;
wire  signed [31:0] sext_ln54_fu_88_p0;
wire  signed [32:0] sext_ln54_fu_88_p1;
wire  signed [31:0] empty_fu_98_p1;
wire  signed [31:0] empty_37_fu_104_p0;
wire   [31:0] empty_36_fu_113_p3;
wire  signed [32:0] sext_ln54_1_fu_118_p1;
wire   [30:0] trunc_ln54_fu_110_p1;
wire   [30:0] smax1_fu_127_p3;
wire   [32:0] zext_ln54_fu_134_p1;
wire   [0:0] empty_38_fu_143_p2;
wire   [32:0] umax_fu_147_p3;
wire    ap_CS_fsm_state5;
wire    regslice_both_kq_cache_i_stream_U_apdone_blk;
wire    regslice_both_ks_cache_i_stream_U_apdone_blk;
wire    regslice_both_vq_cache_i_stream_U_apdone_blk;
wire    regslice_both_vs_cache_i_stream_U_apdone_blk;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg   [63:0] kq_cache_i_stream_TDATA_int_regslice;
wire    kq_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_kq_cache_i_stream_U_vld_out;
reg   [7:0] ks_cache_i_stream_TDATA_int_regslice;
wire    ks_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_ks_cache_i_stream_U_vld_out;
reg   [63:0] vq_cache_i_stream_TDATA_int_regslice;
wire    vq_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_vq_cache_i_stream_U_vld_out;
reg   [7:0] vs_cache_i_stream_TDATA_int_regslice;
wire    vs_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_vs_cache_i_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_dataflow_parent_loop_proc2_fu_70_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_done = 1'b0;
end

KV_CACHE_dataflow_parent_loop_proc2 grp_dataflow_parent_loop_proc2_fu_70(
    .xor_ln54_cast(xor_ln54_reg_205),
    .m_axi_gmem1_0_AWVALID(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(1'b0),
    .m_axi_gmem1_0_AWADDR(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(1'b0),
    .m_axi_gmem1_0_WDATA(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(m_axi_gmem1_0_ARREADY),
    .m_axi_gmem1_0_ARADDR(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(m_axi_gmem1_0_RVALID),
    .m_axi_gmem1_0_RREADY(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(m_axi_gmem1_0_RDATA),
    .m_axi_gmem1_0_RLAST(m_axi_gmem1_0_RLAST),
    .m_axi_gmem1_0_RID(m_axi_gmem1_0_RID),
    .m_axi_gmem1_0_RFIFONUM(m_axi_gmem1_0_RFIFONUM),
    .m_axi_gmem1_0_RUSER(m_axi_gmem1_0_RUSER),
    .m_axi_gmem1_0_RRESP(m_axi_gmem1_0_RRESP),
    .m_axi_gmem1_0_BVALID(1'b0),
    .m_axi_gmem1_0_BREADY(grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(2'd0),
    .m_axi_gmem1_0_BID(1'd0),
    .m_axi_gmem1_0_BUSER(1'd0),
    .l_begin(l_begin_read_reg_165),
    .memory_k_cache(memory_k_cache_read_reg_200),
    .kq_cache_i_stream_TDATA(grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TDATA),
    .ks_cache_i_stream_TDATA(grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TDATA),
    .vq_cache_i_stream_TDATA(grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TDATA),
    .vs_cache_i_stream_TDATA(grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .l_begin_ap_vld(1'b1),
    .memory_k_cache_ap_vld(1'b1),
    .kq_cache_i_stream_TVALID(grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TVALID),
    .kq_cache_i_stream_TREADY(grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TREADY),
    .ks_cache_i_stream_TVALID(grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TVALID),
    .ks_cache_i_stream_TREADY(grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TREADY),
    .vq_cache_i_stream_TVALID(grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TVALID(grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TREADY),
    .ap_start(grp_dataflow_parent_loop_proc2_fu_70_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc2_fu_70_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc2_fu_70_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc2_fu_70_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc2_fu_70_ap_continue)
);

KV_CACHE_regslice_both #(
    .DataWidth( 64 ))
regslice_both_kq_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(kq_cache_i_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TVALID),
    .ack_in(kq_cache_i_stream_TREADY_int_regslice),
    .data_out(kq_cache_i_stream_TDATA),
    .vld_out(regslice_both_kq_cache_i_stream_U_vld_out),
    .ack_out(kq_cache_i_stream_TREADY),
    .apdone_blk(regslice_both_kq_cache_i_stream_U_apdone_blk)
);

KV_CACHE_regslice_both #(
    .DataWidth( 8 ))
regslice_both_ks_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ks_cache_i_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TVALID),
    .ack_in(ks_cache_i_stream_TREADY_int_regslice),
    .data_out(ks_cache_i_stream_TDATA),
    .vld_out(regslice_both_ks_cache_i_stream_U_vld_out),
    .ack_out(ks_cache_i_stream_TREADY),
    .apdone_blk(regslice_both_ks_cache_i_stream_U_apdone_blk)
);

KV_CACHE_regslice_both #(
    .DataWidth( 64 ))
regslice_both_vq_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(vq_cache_i_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TVALID),
    .ack_in(vq_cache_i_stream_TREADY_int_regslice),
    .data_out(vq_cache_i_stream_TDATA),
    .vld_out(regslice_both_vq_cache_i_stream_U_vld_out),
    .ack_out(vq_cache_i_stream_TREADY),
    .apdone_blk(regslice_both_vq_cache_i_stream_U_apdone_blk)
);

KV_CACHE_regslice_both #(
    .DataWidth( 8 ))
regslice_both_vs_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(vs_cache_i_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TVALID),
    .ack_in(vs_cache_i_stream_TREADY_int_regslice),
    .data_out(vs_cache_i_stream_TDATA),
    .vld_out(regslice_both_vs_cache_i_stream_U_vld_out),
    .ack_out(vs_cache_i_stream_TREADY),
    .apdone_blk(regslice_both_vs_cache_i_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc2_fu_70_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc2_fu_70_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_parent_loop_proc2_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_dataflow_parent_loop_proc2_fu_70_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_dataflow_parent_loop_proc2_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc2_fu_70_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc2_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        add_ln54_reg_172 <= add_ln54_fu_92_p2;
        empty_37_reg_183 <= empty_37_fu_104_p2;
        empty_reg_178 <= empty_fu_98_p2;
        l_begin_read_reg_165 <= l_begin;
        l_close_read_reg_160 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TVALID == 1'b1))) begin
        kq_cache_i_stream_TDATA_reg <= grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TVALID == 1'b1))) begin
        ks_cache_i_stream_TDATA_reg <= grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        memory_k_cache_read_reg_200 <= memory_k_cache;
        xor_ln54_reg_205 <= xor_ln54_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln54_1_reg_194 <= sub_ln54_1_fu_138_p2;
        sub_ln54_reg_188 <= sub_ln54_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TVALID == 1'b1))) begin
        vq_cache_i_stream_TDATA_reg <= grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TVALID == 1'b1))) begin
        vs_cache_i_stream_TDATA_reg <= grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        grp_dataflow_parent_loop_proc2_fu_70_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc2_fu_70_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TVALID == 1'b1))) begin
        kq_cache_i_stream_TDATA_int_regslice = grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TDATA;
    end else begin
        kq_cache_i_stream_TDATA_int_regslice = kq_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TVALID == 1'b1))) begin
        ks_cache_i_stream_TDATA_int_regslice = grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TDATA;
    end else begin
        ks_cache_i_stream_TDATA_int_regslice = ks_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TVALID == 1'b1))) begin
        vq_cache_i_stream_TDATA_int_regslice = grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TDATA;
    end else begin
        vq_cache_i_stream_TDATA_int_regslice = vq_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TVALID == 1'b1))) begin
        vs_cache_i_stream_TDATA_int_regslice = grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TDATA;
    end else begin
        vs_cache_i_stream_TDATA_int_regslice = vs_cache_i_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_92_p2 = ($signed(sext_ln54_fu_88_p1) + $signed(33'd8589934591));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready & ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state5 = ((regslice_both_vs_cache_i_stream_U_apdone_blk == 1'b1) | (regslice_both_vq_cache_i_stream_U_apdone_blk == 1'b1) | (regslice_both_ks_cache_i_stream_U_apdone_blk == 1'b1) | (regslice_both_kq_cache_i_stream_U_apdone_blk == 1'b1));
end

assign ap_sync_grp_dataflow_parent_loop_proc2_fu_70_ap_ready = (grp_dataflow_parent_loop_proc2_fu_70_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc2_fu_70_ap_ready);

assign empty_36_fu_113_p3 = ((empty_reg_178[0:0] == 1'b1) ? l_close_read_reg_160 : l_begin_read_reg_165);

assign empty_37_fu_104_p0 = l_begin;

assign empty_37_fu_104_p2 = (($signed(empty_37_fu_104_p0) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_38_fu_143_p2 = ((sub_ln54_reg_188 > sub_ln54_1_reg_194) ? 1'b1 : 1'b0);

assign empty_fu_98_p1 = l_begin;

assign empty_fu_98_p2 = (($signed(l_close) > $signed(empty_fu_98_p1)) ? 1'b1 : 1'b0);

assign grp_dataflow_parent_loop_proc2_fu_70_ap_start = grp_dataflow_parent_loop_proc2_fu_70_ap_start_reg;

assign grp_dataflow_parent_loop_proc2_fu_70_kq_cache_i_stream_TREADY = (kq_cache_i_stream_TREADY_int_regslice & ap_CS_fsm_state4);

assign grp_dataflow_parent_loop_proc2_fu_70_ks_cache_i_stream_TREADY = (ks_cache_i_stream_TREADY_int_regslice & ap_CS_fsm_state4);

assign grp_dataflow_parent_loop_proc2_fu_70_vq_cache_i_stream_TREADY = (vq_cache_i_stream_TREADY_int_regslice & ap_CS_fsm_state4);

assign grp_dataflow_parent_loop_proc2_fu_70_vs_cache_i_stream_TREADY = (vs_cache_i_stream_TREADY_int_regslice & ap_CS_fsm_state4);

assign kq_cache_i_stream_TVALID = regslice_both_kq_cache_i_stream_U_vld_out;

assign ks_cache_i_stream_TVALID = regslice_both_ks_cache_i_stream_U_vld_out;

assign m_axi_gmem1_0_ARADDR = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARADDR;

assign m_axi_gmem1_0_ARBURST = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARBURST;

assign m_axi_gmem1_0_ARCACHE = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARCACHE;

assign m_axi_gmem1_0_ARID = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARID;

assign m_axi_gmem1_0_ARLEN = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARLEN;

assign m_axi_gmem1_0_ARLOCK = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARLOCK;

assign m_axi_gmem1_0_ARPROT = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARPROT;

assign m_axi_gmem1_0_ARQOS = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARQOS;

assign m_axi_gmem1_0_ARREGION = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARREGION;

assign m_axi_gmem1_0_ARSIZE = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARSIZE;

assign m_axi_gmem1_0_ARUSER = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARUSER;

assign m_axi_gmem1_0_ARVALID = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_ARVALID;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_RREADY = grp_dataflow_parent_loop_proc2_fu_70_m_axi_gmem1_0_RREADY;

assign m_axi_gmem1_0_WDATA = 128'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign sext_ln54_1_fu_118_p1 = $signed(empty_36_fu_113_p3);

assign sext_ln54_fu_88_p0 = l_begin;

assign sext_ln54_fu_88_p1 = sext_ln54_fu_88_p0;

assign smax1_fu_127_p3 = ((empty_37_reg_183[0:0] == 1'b1) ? trunc_ln54_fu_110_p1 : 31'd24);

assign sub_ln54_1_fu_138_p2 = (add_ln54_reg_172 - zext_ln54_fu_134_p1);

assign sub_ln54_fu_122_p2 = ($signed(add_ln54_reg_172) - $signed(sext_ln54_1_fu_118_p1));

assign trunc_ln54_fu_110_p1 = l_begin_read_reg_165[30:0];

assign umax_fu_147_p3 = ((empty_38_fu_143_p2[0:0] == 1'b1) ? sub_ln54_reg_188 : sub_ln54_1_reg_194);

assign vq_cache_i_stream_TVALID = regslice_both_vq_cache_i_stream_U_vld_out;

assign vs_cache_i_stream_TVALID = regslice_both_vs_cache_i_stream_U_vld_out;

assign xor_ln54_fu_153_p2 = (umax_fu_147_p3 ^ 33'd8589934591);

assign zext_ln54_fu_134_p1 = smax1_fu_127_p3;

endmodule //KV_CACHE_rd_kv_cache
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module KV_CACHE_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_wr_kv_cache (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        pos_id,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        memory_k_cache,
        kq_cache_o_stream_TDATA,
        kq_cache_o_stream_TVALID,
        kq_cache_o_stream_TREADY,
        ks_cache_o_stream_TDATA,
        ks_cache_o_stream_TVALID,
        ks_cache_o_stream_TREADY,
        vq_cache_o_stream_TDATA,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_o_stream_TDATA,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [31:0] pos_id;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [63:0] memory_k_cache;
input  [63:0] kq_cache_o_stream_TDATA;
input   kq_cache_o_stream_TVALID;
output   kq_cache_o_stream_TREADY;
input  [7:0] ks_cache_o_stream_TDATA;
input   ks_cache_o_stream_TVALID;
output   ks_cache_o_stream_TREADY;
input  [63:0] vq_cache_o_stream_TDATA;
input   vq_cache_o_stream_TVALID;
output   vq_cache_o_stream_TREADY;
input  [7:0] vs_cache_o_stream_TDATA;
input   vs_cache_o_stream_TVALID;
output   vs_cache_o_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem1_0_AWVALID;
reg[63:0] m_axi_gmem1_0_AWADDR;
reg[0:0] m_axi_gmem1_0_AWID;
reg[31:0] m_axi_gmem1_0_AWLEN;
reg[2:0] m_axi_gmem1_0_AWSIZE;
reg[1:0] m_axi_gmem1_0_AWBURST;
reg[1:0] m_axi_gmem1_0_AWLOCK;
reg[3:0] m_axi_gmem1_0_AWCACHE;
reg[2:0] m_axi_gmem1_0_AWPROT;
reg[3:0] m_axi_gmem1_0_AWQOS;
reg[3:0] m_axi_gmem1_0_AWREGION;
reg[0:0] m_axi_gmem1_0_AWUSER;
reg m_axi_gmem1_0_WVALID;
reg[127:0] m_axi_gmem1_0_WDATA;
reg[15:0] m_axi_gmem1_0_WSTRB;
reg m_axi_gmem1_0_WLAST;
reg[0:0] m_axi_gmem1_0_WID;
reg[0:0] m_axi_gmem1_0_WUSER;
reg m_axi_gmem1_0_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem1_blk_n_AW;
wire    ap_CS_fsm_state11;
reg    gmem1_blk_n_B;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
reg    gmem1_blk_n_W;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
reg    vq_cache_o_stream_TDATA_blk_n;
reg    vs_cache_o_stream_TDATA_blk_n;
reg   [31:0] pos_id_read_reg_718;
reg    ap_block_state1;
reg   [28:0] tmp_reg_725;
reg   [31:0] l_close_read_reg_730;
wire    ap_CS_fsm_state2;
reg  signed [31:0] l_begin_read_reg_735;
wire   [28:0] sub_ln110_1_fu_279_p2;
reg   [28:0] sub_ln110_1_reg_744;
wire   [32:0] add_ln112_1_fu_288_p2;
reg   [32:0] add_ln112_1_reg_749;
wire   [0:0] empty_fu_294_p2;
reg   [0:0] empty_reg_755;
wire   [0:0] empty_23_fu_300_p2;
reg   [0:0] empty_23_reg_760;
wire   [46:0] add_ln112_6_fu_375_p2;
reg   [46:0] add_ln112_6_reg_765;
wire    ap_CS_fsm_state3;
wire   [32:0] sub_ln112_fu_390_p2;
reg   [32:0] sub_ln112_reg_771;
wire   [32:0] sub_ln112_1_fu_406_p2;
reg   [32:0] sub_ln112_1_reg_777;
wire   [29:0] add_ln112_2_fu_411_p2;
reg   [29:0] add_ln112_2_reg_783;
reg   [63:0] memory_k_cache_read_reg_788;
wire    ap_CS_fsm_state4;
wire   [46:0] add_ln112_fu_426_p2;
reg   [46:0] add_ln112_reg_794;
wire  signed [63:0] sext_ln112_5_fu_447_p1;
reg  signed [63:0] sext_ln112_5_reg_799;
wire  signed [59:0] sext_ln112_7_fu_459_p1;
reg  signed [59:0] sext_ln112_7_reg_804;
wire   [0:0] icmp_ln112_fu_466_p2;
reg   [0:0] icmp_ln112_reg_809;
wire    ap_CS_fsm_state5;
wire   [63:0] add_ln112_4_fu_471_p2;
reg   [63:0] add_ln112_4_reg_813;
reg   [59:0] phi_mul_load_reg_818;
wire    ap_CS_fsm_state6;
wire   [59:0] add_ln112_7_fu_480_p2;
reg   [59:0] add_ln112_7_reg_823;
wire   [59:0] tmp2_fu_486_p2;
reg   [59:0] tmp2_reg_828;
wire   [3:0] add_ln113_fu_497_p2;
reg   [3:0] add_ln113_reg_836;
wire    ap_CS_fsm_state7;
wire   [14:0] empty_25_fu_523_p2;
reg   [14:0] empty_25_reg_841;
wire   [46:0] tmp1_fu_540_p2;
reg   [46:0] tmp1_reg_847;
wire    ap_CS_fsm_state8;
wire   [59:0] empty_26_fu_548_p2;
reg   [59:0] empty_26_reg_852;
wire    ap_CS_fsm_state9;
reg   [59:0] trunc_ln2_reg_857;
wire    ap_CS_fsm_state10;
wire   [6:0] add_ln130_fu_605_p2;
reg   [6:0] add_ln130_reg_871;
wire    ap_CS_fsm_state19;
wire   [10:0] empty_31_fu_635_p2;
reg   [10:0] empty_31_reg_876;
wire   [14:0] tmp3_fu_644_p2;
reg   [14:0] tmp3_reg_881;
wire    ap_CS_fsm_state20;
wire   [59:0] empty_32_fu_652_p2;
reg   [59:0] empty_32_reg_886;
wire    ap_CS_fsm_state21;
reg   [59:0] trunc_ln4_reg_891;
wire    ap_CS_fsm_state22;
reg    ap_block_state23;
reg   [63:0] vq_cache_o_stream_read_reg_902;
wire   [3:0] trunc_ln134_fu_689_p1;
reg   [3:0] trunc_ln134_reg_907;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_done;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_idle;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_ready;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWVALID;
wire   [63:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWADDR;
wire   [0:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWID;
wire   [31:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWLEN;
wire   [2:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWSIZE;
wire   [1:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWBURST;
wire   [1:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWLOCK;
wire   [3:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWCACHE;
wire   [2:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWPROT;
wire   [3:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWQOS;
wire   [3:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWREGION;
wire   [0:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWUSER;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WVALID;
wire   [127:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WDATA;
wire   [15:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WSTRB;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WLAST;
wire   [0:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WID;
wire   [0:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WUSER;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARVALID;
wire   [63:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARADDR;
wire   [0:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARID;
wire   [31:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARLEN;
wire   [2:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARSIZE;
wire   [1:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARBURST;
wire   [1:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARLOCK;
wire   [3:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARCACHE;
wire   [2:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARPROT;
wire   [3:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARQOS;
wire   [3:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARREGION;
wire   [0:0] grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARUSER;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_RREADY;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_BREADY;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_kq_cache_o_stream_TREADY;
wire    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ks_cache_o_stream_TREADY;
reg   [3:0] h_reg_220;
wire   [0:0] icmp_ln130_fu_599_p2;
reg   [6:0] hc_reg_231;
reg    grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire  signed [63:0] sext_ln115_fu_575_p1;
wire  signed [63:0] sext_ln131_fu_679_p1;
wire   [127:0] zext_ln141_fu_699_p1;
reg   [59:0] phi_mul_fu_152;
wire   [0:0] icmp_ln113_fu_491_p2;
reg   [63:0] indvar_fu_156;
wire   [31:0] sub_ln110_fu_253_p2;
wire  signed [31:0] sext_ln112_1_fu_284_p0;
wire  signed [32:0] sext_ln112_1_fu_284_p1;
wire  signed [31:0] empty_fu_294_p1;
wire  signed [31:0] empty_23_fu_300_p0;
wire   [0:0] tmp_2_fu_306_p3;
wire   [28:0] tmp_1_fu_313_p4;
wire   [28:0] chunk_fu_322_p3;
wire   [45:0] tmp_5_fu_336_p3;
wire   [43:0] tmp_6_fu_347_p3;
wire  signed [46:0] sext_ln112_2_fu_343_p1;
wire  signed [46:0] sext_ln112_8_fu_354_p1;
wire   [41:0] tmp_7_fu_364_p3;
wire   [46:0] add_ln112_5_fu_358_p2;
wire  signed [46:0] sext_ln112_9_fu_371_p1;
wire   [31:0] empty_22_fu_381_p3;
wire  signed [32:0] sext_ln112_4_fu_386_p1;
wire   [30:0] trunc_ln112_fu_333_p1;
wire   [30:0] smax1_fu_395_p3;
wire   [32:0] zext_ln112_fu_402_p1;
wire  signed [29:0] sext_ln112_fu_329_p1;
wire   [31:0] shl_ln112_fu_417_p2;
wire  signed [46:0] sext_ln112_3_fu_422_p1;
wire   [0:0] empty_24_fu_431_p2;
wire   [32:0] umax_fu_435_p3;
wire   [32:0] xor_ln112_fu_441_p2;
wire  signed [46:0] sext_ln112_6_fu_451_p1;
wire   [46:0] add_ln112_3_fu_454_p2;
wire   [12:0] tmp_8_fu_511_p3;
wire   [14:0] p_shl1_fu_503_p3;
wire   [14:0] p_shl33_fu_519_p1;
wire   [46:0] p_cast_fu_537_p1;
wire  signed [59:0] tmp1_cast_fu_545_p1;
wire   [63:0] tmp_3_fu_553_p3;
wire   [63:0] empty_27_fu_560_p2;
wire   [5:0] empty_30_fu_611_p1;
wire   [9:0] tmp_9_fu_623_p3;
wire   [10:0] p_shl_fu_615_p3;
wire   [10:0] p_shl31_fu_631_p1;
wire   [14:0] p_cast5_fu_641_p1;
wire   [59:0] tmp3_cast_fu_649_p1;
wire   [63:0] tmp_4_fu_657_p3;
wire   [63:0] empty_33_fu_664_p2;
wire   [67:0] pack_fu_693_p3;
reg   [28:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    regslice_both_kq_cache_o_stream_U_apdone_blk;
wire   [63:0] kq_cache_o_stream_TDATA_int_regslice;
wire    kq_cache_o_stream_TVALID_int_regslice;
reg    kq_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_kq_cache_o_stream_U_ack_in;
wire    regslice_both_ks_cache_o_stream_U_apdone_blk;
wire   [7:0] ks_cache_o_stream_TDATA_int_regslice;
wire    ks_cache_o_stream_TVALID_int_regslice;
reg    ks_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_ks_cache_o_stream_U_ack_in;
wire    regslice_both_vq_cache_o_stream_U_apdone_blk;
wire   [63:0] vq_cache_o_stream_TDATA_int_regslice;
wire    vq_cache_o_stream_TVALID_int_regslice;
reg    vq_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_vq_cache_o_stream_U_ack_in;
wire    regslice_both_vs_cache_o_stream_U_apdone_blk;
wire   [7:0] vs_cache_o_stream_TDATA_int_regslice;
wire    vs_cache_o_stream_TVALID_int_regslice;
reg    vs_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_vs_cache_o_stream_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 29'd1;
//#0 grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start_reg = 1'b0;
//#0 phi_mul_fu_152 = 60'd0;
//#0 indvar_fu_156 = 64'd0;
end

KV_CACHE_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4 grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start),
    .ap_done(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_done),
    .ap_idle(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_idle),
    .ap_ready(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_ready),
    .kq_cache_o_stream_TVALID(kq_cache_o_stream_TVALID_int_regslice),
    .ks_cache_o_stream_TVALID(ks_cache_o_stream_TVALID_int_regslice),
    .m_axi_gmem1_0_AWVALID(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWVALID),
    .m_axi_gmem1_0_AWREADY(m_axi_gmem1_0_AWREADY),
    .m_axi_gmem1_0_AWADDR(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWADDR),
    .m_axi_gmem1_0_AWID(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWID),
    .m_axi_gmem1_0_AWLEN(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWLEN),
    .m_axi_gmem1_0_AWSIZE(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWSIZE),
    .m_axi_gmem1_0_AWBURST(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWBURST),
    .m_axi_gmem1_0_AWLOCK(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWLOCK),
    .m_axi_gmem1_0_AWCACHE(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWCACHE),
    .m_axi_gmem1_0_AWPROT(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWPROT),
    .m_axi_gmem1_0_AWQOS(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWQOS),
    .m_axi_gmem1_0_AWREGION(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWREGION),
    .m_axi_gmem1_0_AWUSER(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWUSER),
    .m_axi_gmem1_0_WVALID(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WVALID),
    .m_axi_gmem1_0_WREADY(m_axi_gmem1_0_WREADY),
    .m_axi_gmem1_0_WDATA(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WDATA),
    .m_axi_gmem1_0_WSTRB(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WSTRB),
    .m_axi_gmem1_0_WLAST(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WLAST),
    .m_axi_gmem1_0_WID(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WID),
    .m_axi_gmem1_0_WUSER(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WUSER),
    .m_axi_gmem1_0_ARVALID(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARVALID),
    .m_axi_gmem1_0_ARREADY(1'b0),
    .m_axi_gmem1_0_ARADDR(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARADDR),
    .m_axi_gmem1_0_ARID(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARID),
    .m_axi_gmem1_0_ARLEN(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARLEN),
    .m_axi_gmem1_0_ARSIZE(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARSIZE),
    .m_axi_gmem1_0_ARBURST(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARBURST),
    .m_axi_gmem1_0_ARLOCK(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARLOCK),
    .m_axi_gmem1_0_ARCACHE(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARCACHE),
    .m_axi_gmem1_0_ARPROT(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARPROT),
    .m_axi_gmem1_0_ARQOS(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARQOS),
    .m_axi_gmem1_0_ARREGION(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARREGION),
    .m_axi_gmem1_0_ARUSER(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_ARUSER),
    .m_axi_gmem1_0_RVALID(1'b0),
    .m_axi_gmem1_0_RREADY(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_RREADY),
    .m_axi_gmem1_0_RDATA(128'd0),
    .m_axi_gmem1_0_RLAST(1'b0),
    .m_axi_gmem1_0_RID(1'd0),
    .m_axi_gmem1_0_RFIFONUM(9'd0),
    .m_axi_gmem1_0_RUSER(1'd0),
    .m_axi_gmem1_0_RRESP(2'd0),
    .m_axi_gmem1_0_BVALID(m_axi_gmem1_0_BVALID),
    .m_axi_gmem1_0_BREADY(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_BREADY),
    .m_axi_gmem1_0_BRESP(m_axi_gmem1_0_BRESP),
    .m_axi_gmem1_0_BID(m_axi_gmem1_0_BID),
    .m_axi_gmem1_0_BUSER(m_axi_gmem1_0_BUSER),
    .sext_ln115(trunc_ln2_reg_857),
    .kq_cache_o_stream_TDATA(kq_cache_o_stream_TDATA_int_regslice),
    .kq_cache_o_stream_TREADY(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_kq_cache_o_stream_TREADY),
    .ks_cache_o_stream_TDATA(ks_cache_o_stream_TDATA_int_regslice),
    .ks_cache_o_stream_TREADY(grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ks_cache_o_stream_TREADY)
);

KV_CACHE_regslice_both #(
    .DataWidth( 64 ))
regslice_both_kq_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(kq_cache_o_stream_TDATA),
    .vld_in(kq_cache_o_stream_TVALID),
    .ack_in(regslice_both_kq_cache_o_stream_U_ack_in),
    .data_out(kq_cache_o_stream_TDATA_int_regslice),
    .vld_out(kq_cache_o_stream_TVALID_int_regslice),
    .ack_out(kq_cache_o_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_kq_cache_o_stream_U_apdone_blk)
);

KV_CACHE_regslice_both #(
    .DataWidth( 8 ))
regslice_both_ks_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ks_cache_o_stream_TDATA),
    .vld_in(ks_cache_o_stream_TVALID),
    .ack_in(regslice_both_ks_cache_o_stream_U_ack_in),
    .data_out(ks_cache_o_stream_TDATA_int_regslice),
    .vld_out(ks_cache_o_stream_TVALID_int_regslice),
    .ack_out(ks_cache_o_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_ks_cache_o_stream_U_apdone_blk)
);

KV_CACHE_regslice_both #(
    .DataWidth( 64 ))
regslice_both_vq_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(vq_cache_o_stream_TDATA),
    .vld_in(vq_cache_o_stream_TVALID),
    .ack_in(regslice_both_vq_cache_o_stream_U_ack_in),
    .data_out(vq_cache_o_stream_TDATA_int_regslice),
    .vld_out(vq_cache_o_stream_TVALID_int_regslice),
    .ack_out(vq_cache_o_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_vq_cache_o_stream_U_apdone_blk)
);

KV_CACHE_regslice_both #(
    .DataWidth( 8 ))
regslice_both_vs_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(vs_cache_o_stream_TDATA),
    .vld_in(vs_cache_o_stream_TVALID),
    .ack_in(regslice_both_vs_cache_o_stream_U_ack_in),
    .data_out(vs_cache_o_stream_TDATA_int_regslice),
    .vld_out(vs_cache_o_stream_TVALID_int_regslice),
    .ack_out(vs_cache_o_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_vs_cache_o_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln112_reg_809 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start_reg <= 1'b1;
        end else if ((grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_ready == 1'b1)) begin
            grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_599_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        h_reg_220 <= add_ln113_reg_836;
    end else if (((icmp_ln112_reg_809 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        h_reg_220 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axi_gmem1_0_BVALID == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            hc_reg_231 <= add_ln130_reg_871;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            hc_reg_231 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        indvar_fu_156 <= 64'd0;
    end else if (((icmp_ln113_fu_491_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        indvar_fu_156 <= add_ln112_4_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        phi_mul_fu_152 <= 60'd0;
    end else if (((icmp_ln113_fu_491_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul_fu_152 <= add_ln112_7_reg_823;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln112_1_reg_749 <= add_ln112_1_fu_288_p2;
        empty_23_reg_760 <= empty_23_fu_300_p2;
        empty_reg_755 <= empty_fu_294_p2;
        l_begin_read_reg_735 <= l_begin;
        l_close_read_reg_730 <= l_close;
        sub_ln110_1_reg_744 <= sub_ln110_1_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln112_2_reg_783 <= add_ln112_2_fu_411_p2;
        add_ln112_6_reg_765[46 : 10] <= add_ln112_6_fu_375_p2[46 : 10];
        sub_ln112_1_reg_777 <= sub_ln112_1_fu_406_p2;
        sub_ln112_reg_771 <= sub_ln112_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln112_4_reg_813 <= add_ln112_4_fu_471_p2;
        icmp_ln112_reg_809 <= icmp_ln112_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln112_7_reg_823 <= add_ln112_7_fu_480_p2;
        phi_mul_load_reg_818 <= phi_mul_fu_152;
        tmp2_reg_828 <= tmp2_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln112_reg_794 <= add_ln112_fu_426_p2;
        memory_k_cache_read_reg_788 <= memory_k_cache;
        sext_ln112_5_reg_799 <= sext_ln112_5_fu_447_p1;
        sext_ln112_7_reg_804 <= sext_ln112_7_fu_459_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln113_reg_836 <= add_ln113_fu_497_p2;
        empty_25_reg_841[14 : 9] <= empty_25_fu_523_p2[14 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln130_reg_871 <= add_ln130_fu_605_p2;
        empty_31_reg_876[10 : 3] <= empty_31_fu_635_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        empty_26_reg_852 <= empty_26_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        empty_32_reg_886 <= empty_32_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        pos_id_read_reg_718 <= pos_id;
        tmp_reg_725 <= {{sub_ln110_fu_253_p2[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp1_reg_847 <= tmp1_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp3_reg_881[14 : 3] <= tmp3_fu_644_p2[14 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
        trunc_ln134_reg_907 <= trunc_ln134_fu_689_p1;
        vq_cache_o_stream_read_reg_902 <= vq_cache_o_stream_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln2_reg_857 <= {{empty_27_fu_560_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        trunc_ln4_reg_891 <= {{empty_33_fu_664_p2[63:4]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if (((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23))) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem1_0_WREADY == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln112_reg_809 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_809 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11))) begin
        gmem1_blk_n_AW = m_axi_gmem1_0_AWREADY;
    end else begin
        gmem1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state18))) begin
        gmem1_blk_n_B = m_axi_gmem1_0_BVALID;
    end else begin
        gmem1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem1_blk_n_W = m_axi_gmem1_0_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        kq_cache_o_stream_TREADY_int_regslice = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_kq_cache_o_stream_TREADY;
    end else begin
        kq_cache_o_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ks_cache_o_stream_TREADY_int_regslice = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ks_cache_o_stream_TREADY;
    end else begin
        ks_cache_o_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_AWADDR = sext_ln131_fu_679_p1;
    end else if (((m_axi_gmem1_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_gmem1_0_AWADDR = sext_ln115_fu_575_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWADDR = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWADDR;
    end else begin
        m_axi_gmem1_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWBURST = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWBURST;
    end else begin
        m_axi_gmem1_0_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWCACHE = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWCACHE;
    end else begin
        m_axi_gmem1_0_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWID = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWID;
    end else begin
        m_axi_gmem1_0_AWID = 1'd0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem1_0_AWLEN = 64'd1;
    end else if (((m_axi_gmem1_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_gmem1_0_AWLEN = 64'd64;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWLEN = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWLEN;
    end else begin
        m_axi_gmem1_0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWLOCK = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWLOCK;
    end else begin
        m_axi_gmem1_0_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWPROT = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWPROT;
    end else begin
        m_axi_gmem1_0_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWQOS = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWQOS;
    end else begin
        m_axi_gmem1_0_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWREGION = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWREGION;
    end else begin
        m_axi_gmem1_0_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWSIZE = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWSIZE;
    end else begin
        m_axi_gmem1_0_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWUSER = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWUSER;
    end else begin
        m_axi_gmem1_0_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23)) | ((m_axi_gmem1_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        m_axi_gmem1_0_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_AWVALID = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_AWVALID;
    end else begin
        m_axi_gmem1_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state29) & (m_axi_gmem1_0_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (m_axi_gmem1_0_BVALID == 1'b1)))) begin
        m_axi_gmem1_0_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_BREADY = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_BREADY;
    end else begin
        m_axi_gmem1_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        m_axi_gmem1_0_WDATA = zext_ln141_fu_699_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_WDATA = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WDATA;
    end else begin
        m_axi_gmem1_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_WID = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WID;
    end else begin
        m_axi_gmem1_0_WID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_WLAST = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WLAST;
    end else begin
        m_axi_gmem1_0_WLAST = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        m_axi_gmem1_0_WSTRB = 16'd65535;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_WSTRB = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WSTRB;
    end else begin
        m_axi_gmem1_0_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_WUSER = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WUSER;
    end else begin
        m_axi_gmem1_0_WUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        m_axi_gmem1_0_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem1_0_WVALID = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_m_axi_gmem1_0_WVALID;
    end else begin
        m_axi_gmem1_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        vq_cache_o_stream_TDATA_blk_n = vq_cache_o_stream_TVALID_int_regslice;
    end else begin
        vq_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
        vq_cache_o_stream_TREADY_int_regslice = 1'b1;
    end else begin
        vq_cache_o_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        vs_cache_o_stream_TDATA_blk_n = vs_cache_o_stream_TVALID_int_regslice;
    end else begin
        vs_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
        vs_cache_o_stream_TREADY_int_regslice = 1'b1;
    end else begin
        vs_cache_o_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln112_reg_809 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln113_fu_491_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_gmem1_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (m_axi_gmem1_0_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln130_fu_599_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if ((~((m_axi_gmem1_0_AWREADY == 1'b0) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((m_axi_gmem1_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (m_axi_gmem1_0_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_1_fu_288_p2 = ($signed(sext_ln112_1_fu_284_p1) + $signed(33'd8589934591));

assign add_ln112_2_fu_411_p2 = ($signed(sext_ln112_fu_329_p1) + $signed(30'd516096));

assign add_ln112_3_fu_454_p2 = ($signed(sext_ln112_6_fu_451_p1) + $signed(add_ln112_6_reg_765));

assign add_ln112_4_fu_471_p2 = (indvar_fu_156 + 64'd1);

assign add_ln112_5_fu_358_p2 = ($signed(sext_ln112_2_fu_343_p1) + $signed(sext_ln112_8_fu_354_p1));

assign add_ln112_6_fu_375_p2 = ($signed(add_ln112_5_fu_358_p2) + $signed(sext_ln112_9_fu_371_p1));

assign add_ln112_7_fu_480_p2 = (phi_mul_fu_152 + 60'd21504);

assign add_ln112_fu_426_p2 = ($signed(add_ln112_6_reg_765) + $signed(sext_ln112_3_fu_422_p1));

assign add_ln113_fu_497_p2 = (h_reg_220 + 4'd1);

assign add_ln130_fu_605_p2 = (hc_reg_231 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state23 = ((vs_cache_o_stream_TVALID_int_regslice == 1'b0) | (vq_cache_o_stream_TVALID_int_regslice == 1'b0));
end

assign chunk_fu_322_p3 = ((tmp_2_fu_306_p3[0:0] == 1'b1) ? sub_ln110_1_reg_744 : tmp_1_fu_313_p4);

assign empty_22_fu_381_p3 = ((empty_reg_755[0:0] == 1'b1) ? l_close_read_reg_730 : l_begin_read_reg_735);

assign empty_23_fu_300_p0 = l_begin;

assign empty_23_fu_300_p2 = (($signed(empty_23_fu_300_p0) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_24_fu_431_p2 = ((sub_ln112_reg_771 > sub_ln112_1_reg_777) ? 1'b1 : 1'b0);

assign empty_25_fu_523_p2 = (p_shl1_fu_503_p3 - p_shl33_fu_519_p1);

assign empty_26_fu_548_p2 = ($signed(tmp1_cast_fu_545_p1) + $signed(phi_mul_load_reg_818));

assign empty_27_fu_560_p2 = (tmp_3_fu_553_p3 + memory_k_cache_read_reg_788);

assign empty_30_fu_611_p1 = hc_reg_231[5:0];

assign empty_31_fu_635_p2 = (p_shl_fu_615_p3 - p_shl31_fu_631_p1);

assign empty_32_fu_652_p2 = (tmp3_cast_fu_649_p1 + tmp2_reg_828);

assign empty_33_fu_664_p2 = (tmp_4_fu_657_p3 + memory_k_cache_read_reg_788);

assign empty_fu_294_p1 = l_begin;

assign empty_fu_294_p2 = (($signed(l_close) > $signed(empty_fu_294_p1)) ? 1'b1 : 1'b0);

assign grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start = grp_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4_fu_242_ap_start_reg;

assign icmp_ln112_fu_466_p2 = ((indvar_fu_156 == sext_ln112_5_reg_799) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_491_p2 = ((h_reg_220 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_599_p2 = ((hc_reg_231 == 7'd64) ? 1'b1 : 1'b0);

assign kq_cache_o_stream_TREADY = regslice_both_kq_cache_o_stream_U_ack_in;

assign ks_cache_o_stream_TREADY = regslice_both_ks_cache_o_stream_U_ack_in;

assign m_axi_gmem1_0_ARADDR = 64'd0;

assign m_axi_gmem1_0_ARBURST = 2'd0;

assign m_axi_gmem1_0_ARCACHE = 4'd0;

assign m_axi_gmem1_0_ARID = 1'd0;

assign m_axi_gmem1_0_ARLEN = 32'd0;

assign m_axi_gmem1_0_ARLOCK = 2'd0;

assign m_axi_gmem1_0_ARPROT = 3'd0;

assign m_axi_gmem1_0_ARQOS = 4'd0;

assign m_axi_gmem1_0_ARREGION = 4'd0;

assign m_axi_gmem1_0_ARSIZE = 3'd0;

assign m_axi_gmem1_0_ARUSER = 1'd0;

assign m_axi_gmem1_0_ARVALID = 1'b0;

assign m_axi_gmem1_0_RREADY = 1'b0;

assign p_cast5_fu_641_p1 = empty_31_reg_876;

assign p_cast_fu_537_p1 = empty_25_reg_841;

assign p_shl1_fu_503_p3 = {{h_reg_220}, {11'd0}};

assign p_shl31_fu_631_p1 = tmp_9_fu_623_p3;

assign p_shl33_fu_519_p1 = tmp_8_fu_511_p3;

assign p_shl_fu_615_p3 = {{empty_30_fu_611_p1}, {5'd0}};

assign pack_fu_693_p3 = {{trunc_ln134_reg_907}, {vq_cache_o_stream_read_reg_902}};

assign sext_ln112_1_fu_284_p0 = l_begin;

assign sext_ln112_1_fu_284_p1 = sext_ln112_1_fu_284_p0;

assign sext_ln112_2_fu_343_p1 = $signed(tmp_5_fu_336_p3);

assign sext_ln112_3_fu_422_p1 = $signed(shl_ln112_fu_417_p2);

assign sext_ln112_4_fu_386_p1 = $signed(empty_22_fu_381_p3);

assign sext_ln112_5_fu_447_p1 = $signed(xor_ln112_fu_441_p2);

assign sext_ln112_6_fu_451_p1 = $signed(add_ln112_2_reg_783);

assign sext_ln112_7_fu_459_p1 = $signed(add_ln112_3_fu_454_p2);

assign sext_ln112_8_fu_354_p1 = $signed(tmp_6_fu_347_p3);

assign sext_ln112_9_fu_371_p1 = $signed(tmp_7_fu_364_p3);

assign sext_ln112_fu_329_p1 = $signed(chunk_fu_322_p3);

assign sext_ln115_fu_575_p1 = $signed(trunc_ln2_reg_857);

assign sext_ln131_fu_679_p1 = $signed(trunc_ln4_reg_891);

assign shl_ln112_fu_417_p2 = pos_id_read_reg_718 << 32'd3;

assign smax1_fu_395_p3 = ((empty_23_reg_760[0:0] == 1'b1) ? trunc_ln112_fu_333_p1 : 31'd24);

assign sub_ln110_1_fu_279_p2 = (29'd0 - tmp_reg_725);

assign sub_ln110_fu_253_p2 = (32'd0 - pos_id);

assign sub_ln112_1_fu_406_p2 = (add_ln112_1_reg_749 - zext_ln112_fu_402_p1);

assign sub_ln112_fu_390_p2 = ($signed(add_ln112_1_reg_749) - $signed(sext_ln112_4_fu_386_p1));

assign tmp1_cast_fu_545_p1 = $signed(tmp1_reg_847);

assign tmp1_fu_540_p2 = (add_ln112_reg_794 + p_cast_fu_537_p1);

assign tmp2_fu_486_p2 = ($signed(phi_mul_fu_152) + $signed(sext_ln112_7_reg_804));

assign tmp3_cast_fu_649_p1 = tmp3_reg_881;

assign tmp3_fu_644_p2 = (empty_25_reg_841 + p_cast5_fu_641_p1);

assign tmp_1_fu_313_p4 = {{pos_id_read_reg_718[31:3]}};

assign tmp_2_fu_306_p3 = pos_id_read_reg_718[32'd31];

assign tmp_3_fu_553_p3 = {{empty_26_reg_852}, {4'd0}};

assign tmp_4_fu_657_p3 = {{empty_32_reg_886}, {4'd0}};

assign tmp_5_fu_336_p3 = {{l_begin_read_reg_735}, {14'd0}};

assign tmp_6_fu_347_p3 = {{l_begin_read_reg_735}, {12'd0}};

assign tmp_7_fu_364_p3 = {{l_begin_read_reg_735}, {10'd0}};

assign tmp_8_fu_511_p3 = {{h_reg_220}, {9'd0}};

assign tmp_9_fu_623_p3 = {{hc_reg_231}, {3'd0}};

assign trunc_ln112_fu_333_p1 = l_begin_read_reg_735[30:0];

assign trunc_ln134_fu_689_p1 = vs_cache_o_stream_TDATA_int_regslice[3:0];

assign umax_fu_435_p3 = ((empty_24_fu_431_p2[0:0] == 1'b1) ? sub_ln112_reg_771 : sub_ln112_1_reg_777);

assign vq_cache_o_stream_TREADY = regslice_both_vq_cache_o_stream_U_ack_in;

assign vs_cache_o_stream_TREADY = regslice_both_vs_cache_o_stream_U_ack_in;

assign xor_ln112_fu_441_p2 = (umax_fu_435_p3 ^ 33'd8589934591);

assign zext_ln112_fu_402_p1 = smax1_fu_395_p3;

assign zext_ln141_fu_699_p1 = pack_fu_693_p3;

always @ (posedge ap_clk) begin
    add_ln112_6_reg_765[9:0] <= 10'b0000000000;
    empty_25_reg_841[8:0] <= 9'b000000000;
    empty_31_reg_876[2:0] <= 3'b000;
    tmp3_reg_881[2:0] <= 3'b000;
end

endmodule //KV_CACHE_wr_kv_cache
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module KV_CACHE_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_cache_o_stream_TVALID,
        ks_cache_o_stream_TVALID,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        sext_ln115,
        kq_cache_o_stream_TDATA,
        kq_cache_o_stream_TREADY,
        ks_cache_o_stream_TDATA,
        ks_cache_o_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   kq_cache_o_stream_TVALID;
input   ks_cache_o_stream_TVALID;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [127:0] m_axi_gmem1_0_WDATA;
output  [15:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [127:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [59:0] sext_ln115;
input  [63:0] kq_cache_o_stream_TDATA;
output   kq_cache_o_stream_TREADY;
input  [7:0] ks_cache_o_stream_TDATA;
output   ks_cache_o_stream_TREADY;

reg ap_idle;
reg m_axi_gmem1_0_WVALID;
reg kq_cache_o_stream_TREADY;
reg ks_cache_o_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln115_reg_152;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln115_reg_152_pp0_iter1_reg;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln115_fu_102_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_W;
reg    kq_cache_o_stream_TDATA_blk_n;
reg    ks_cache_o_stream_TDATA_blk_n;
reg   [63:0] kq_cache_o_stream_read_reg_156;
wire   [3:0] trunc_ln119_fu_119_p1;
reg   [3:0] trunc_ln119_reg_161;
reg   [6:0] indvar_flatten_fu_60;
wire   [6:0] add_ln115_fu_108_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [67:0] pack_fu_129_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_128;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 indvar_flatten_fu_60 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

KV_CACHE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_io))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_io))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_128)) begin
        if ((icmp_ln115_fu_102_p2 == 1'd0)) begin
            indvar_flatten_fu_60 <= add_ln115_fu_108_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln115_reg_152 <= icmp_ln115_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln115_reg_152_pp0_iter1_reg <= icmp_ln115_reg_152;
        kq_cache_o_stream_read_reg_156 <= kq_cache_o_stream_TDATA;
        trunc_ln119_reg_161 <= trunc_ln119_fu_119_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_io)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln115_fu_102_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_io))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_60;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln115_reg_152_pp0_iter1_reg == 1'd0))) begin
        gmem1_blk_n_W = m_axi_gmem1_0_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        kq_cache_o_stream_TDATA_blk_n = kq_cache_o_stream_TVALID;
    end else begin
        kq_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (icmp_ln115_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        kq_cache_o_stream_TREADY = 1'b1;
    end else begin
        kq_cache_o_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ks_cache_o_stream_TDATA_blk_n = ks_cache_o_stream_TVALID;
    end else begin
        ks_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (icmp_ln115_reg_152 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ks_cache_o_stream_TREADY = 1'b1;
    end else begin
        ks_cache_o_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_io) & (icmp_ln115_reg_152_pp0_iter1_reg == 1'd0))) begin
        m_axi_gmem1_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem1_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state3_io)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_io) & (icmp_ln115_reg_152_pp0_iter1_reg == 1'd1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_108_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ks_cache_o_stream_TVALID == 1'b0) & (icmp_ln115_reg_152 == 1'd0)) | ((icmp_ln115_reg_152 == 1'd0) & (kq_cache_o_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem1_0_WREADY == 1'b0) & (icmp_ln115_reg_152_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_128 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_io))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln115_fu_102_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_gmem1_0_ARADDR = 64'd0;

assign m_axi_gmem1_0_ARBURST = 2'd0;

assign m_axi_gmem1_0_ARCACHE = 4'd0;

assign m_axi_gmem1_0_ARID = 1'd0;

assign m_axi_gmem1_0_ARLEN = 32'd0;

assign m_axi_gmem1_0_ARLOCK = 2'd0;

assign m_axi_gmem1_0_ARPROT = 3'd0;

assign m_axi_gmem1_0_ARQOS = 4'd0;

assign m_axi_gmem1_0_ARREGION = 4'd0;

assign m_axi_gmem1_0_ARSIZE = 3'd0;

assign m_axi_gmem1_0_ARUSER = 1'd0;

assign m_axi_gmem1_0_ARVALID = 1'b0;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_RREADY = 1'b0;

assign m_axi_gmem1_0_WDATA = pack_fu_129_p3;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 16'd65535;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign pack_fu_129_p3 = {{trunc_ln119_reg_161}, {kq_cache_o_stream_read_reg_156}};

assign trunc_ln119_fu_119_p1 = ks_cache_o_stream_TDATA[3:0];

endmodule //KV_CACHE_wr_kv_cache_Pipeline_VITIS_LOOP_115_3_VITIS_LOOP_116_4
