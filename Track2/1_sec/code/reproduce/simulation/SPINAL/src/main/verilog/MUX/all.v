/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MUX_MUX,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.006000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=0,HLS_SYN_FF=6969,HLS_SYN_LUT=8325,HLS_VERSION=2024_2}" *)

module MUX (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        xlnq_stream_TDATA,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlns_stream_TDATA,
        xlns_stream_TVALID,
        xlns_stream_TREADY,
        aq_stream_TDATA,
        aq_stream_TVALID,
        aq_stream_TREADY,
        as_stream_TDATA,
        as_stream_TVALID,
        as_stream_TREADY,
        xmq_stream_TDATA,
        xmq_stream_TVALID,
        xmq_stream_TREADY,
        xms_stream_TDATA,
        xms_stream_TVALID,
        xms_stream_TREADY,
        q_stream_TDATA,
        q_stream_TVALID,
        q_stream_TREADY,
        s_stream_TDATA,
        s_stream_TVALID,
        s_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [63:0] xlnq_stream_TDATA;
input   xlnq_stream_TVALID;
output   xlnq_stream_TREADY;
input  [7:0] xlns_stream_TDATA;
input   xlns_stream_TVALID;
output   xlns_stream_TREADY;
input  [63:0] aq_stream_TDATA;
input   aq_stream_TVALID;
output   aq_stream_TREADY;
input  [7:0] as_stream_TDATA;
input   as_stream_TVALID;
output   as_stream_TREADY;
input  [63:0] xmq_stream_TDATA;
input   xmq_stream_TVALID;
output   xmq_stream_TREADY;
input  [7:0] xms_stream_TDATA;
input   xms_stream_TVALID;
output   xms_stream_TREADY;
output  [511:0] q_stream_TDATA;
output   q_stream_TVALID;
input   q_stream_TREADY;
output  [31:0] s_stream_TDATA;
output   s_stream_TVALID;
input   s_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_121;
reg    ap_block_state1;
reg   [31:0] l_2_reg_126;
wire    ap_CS_fsm_state2;
wire   [511:0] grp_dataflow_parent_loop_proc_fu_68_q_stream_TDATA;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_68_s_stream_TDATA;
wire    grp_dataflow_parent_loop_proc_fu_68_xlnq_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_xlns_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_aq_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_as_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_xmq_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_xms_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_q_stream_TVALID;
wire    grp_dataflow_parent_loop_proc_fu_68_q_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_s_stream_TVALID;
wire    grp_dataflow_parent_loop_proc_fu_68_s_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_68_ap_start;
wire    grp_dataflow_parent_loop_proc_fu_68_ap_done;
wire    grp_dataflow_parent_loop_proc_fu_68_ap_ready;
wire    grp_dataflow_parent_loop_proc_fu_68_ap_idle;
reg    grp_dataflow_parent_loop_proc_fu_68_ap_continue;
reg    grp_dataflow_parent_loop_proc_fu_68_ap_start_reg;
wire   [0:0] icmp_ln152_fu_98_p2;
wire    ap_CS_fsm_state3;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_done;
reg    ap_block_state3_on_subcall_done;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_68_ap_ready;
reg   [511:0] q_stream_TDATA_reg;
reg   [31:0] s_stream_TDATA_reg;
reg   [31:0] l_fu_52;
wire   [31:0] l_3_fu_103_p2;
wire    ap_CS_fsm_state4;
wire    regslice_both_q_stream_U_apdone_blk;
wire    regslice_both_s_stream_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_xlnq_stream_U_apdone_blk;
wire   [63:0] xlnq_stream_TDATA_int_regslice;
wire    xlnq_stream_TVALID_int_regslice;
reg    xlnq_stream_TREADY_int_regslice;
wire    regslice_both_xlnq_stream_U_ack_in;
wire    regslice_both_xlns_stream_U_apdone_blk;
wire   [7:0] xlns_stream_TDATA_int_regslice;
wire    xlns_stream_TVALID_int_regslice;
reg    xlns_stream_TREADY_int_regslice;
wire    regslice_both_xlns_stream_U_ack_in;
wire    regslice_both_aq_stream_U_apdone_blk;
wire   [63:0] aq_stream_TDATA_int_regslice;
wire    aq_stream_TVALID_int_regslice;
reg    aq_stream_TREADY_int_regslice;
wire    regslice_both_aq_stream_U_ack_in;
wire    regslice_both_as_stream_U_apdone_blk;
wire   [7:0] as_stream_TDATA_int_regslice;
wire    as_stream_TVALID_int_regslice;
reg    as_stream_TREADY_int_regslice;
wire    regslice_both_as_stream_U_ack_in;
wire    regslice_both_xmq_stream_U_apdone_blk;
wire   [63:0] xmq_stream_TDATA_int_regslice;
wire    xmq_stream_TVALID_int_regslice;
reg    xmq_stream_TREADY_int_regslice;
wire    regslice_both_xmq_stream_U_ack_in;
wire    regslice_both_xms_stream_U_apdone_blk;
wire   [7:0] xms_stream_TDATA_int_regslice;
wire    xms_stream_TVALID_int_regslice;
reg    xms_stream_TREADY_int_regslice;
wire    regslice_both_xms_stream_U_ack_in;
reg   [511:0] q_stream_TDATA_int_regslice;
wire    q_stream_TREADY_int_regslice;
wire    regslice_both_q_stream_U_vld_out;
reg   [31:0] s_stream_TDATA_int_regslice;
wire    s_stream_TREADY_int_regslice;
wire    regslice_both_s_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_dataflow_parent_loop_proc_fu_68_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_done = 1'b0;
//#0 l_fu_52 = 32'd0;
end

MUX_dataflow_parent_loop_proc grp_dataflow_parent_loop_proc_fu_68(
    .l(l_2_reg_126),
    .xlnq_stream_TDATA(xlnq_stream_TDATA_int_regslice),
    .xlns_stream_TDATA(xlns_stream_TDATA_int_regslice),
    .aq_stream_TDATA(aq_stream_TDATA_int_regslice),
    .as_stream_TDATA(as_stream_TDATA_int_regslice),
    .xmq_stream_TDATA(xmq_stream_TDATA_int_regslice),
    .xms_stream_TDATA(xms_stream_TDATA_int_regslice),
    .q_stream_TDATA(grp_dataflow_parent_loop_proc_fu_68_q_stream_TDATA),
    .s_stream_TDATA(grp_dataflow_parent_loop_proc_fu_68_s_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .l_ap_vld(1'b1),
    .xlnq_stream_TVALID(xlnq_stream_TVALID_int_regslice),
    .xlnq_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_xlnq_stream_TREADY),
    .xlns_stream_TVALID(xlns_stream_TVALID_int_regslice),
    .xlns_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_xlns_stream_TREADY),
    .aq_stream_TVALID(aq_stream_TVALID_int_regslice),
    .aq_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_aq_stream_TREADY),
    .as_stream_TVALID(as_stream_TVALID_int_regslice),
    .as_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_as_stream_TREADY),
    .xmq_stream_TVALID(xmq_stream_TVALID_int_regslice),
    .xmq_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_xmq_stream_TREADY),
    .xms_stream_TVALID(xms_stream_TVALID_int_regslice),
    .xms_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_xms_stream_TREADY),
    .q_stream_TVALID(grp_dataflow_parent_loop_proc_fu_68_q_stream_TVALID),
    .q_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_q_stream_TREADY),
    .s_stream_TVALID(grp_dataflow_parent_loop_proc_fu_68_s_stream_TVALID),
    .s_stream_TREADY(grp_dataflow_parent_loop_proc_fu_68_s_stream_TREADY),
    .ap_start(grp_dataflow_parent_loop_proc_fu_68_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc_fu_68_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc_fu_68_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc_fu_68_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc_fu_68_ap_continue)
);

MUX_regslice_both #(
    .DataWidth( 64 ))
regslice_both_xlnq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(xlnq_stream_TDATA),
    .vld_in(xlnq_stream_TVALID),
    .ack_in(regslice_both_xlnq_stream_U_ack_in),
    .data_out(xlnq_stream_TDATA_int_regslice),
    .vld_out(xlnq_stream_TVALID_int_regslice),
    .ack_out(xlnq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_xlnq_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 8 ))
regslice_both_xlns_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(xlns_stream_TDATA),
    .vld_in(xlns_stream_TVALID),
    .ack_in(regslice_both_xlns_stream_U_ack_in),
    .data_out(xlns_stream_TDATA_int_regslice),
    .vld_out(xlns_stream_TVALID_int_regslice),
    .ack_out(xlns_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_xlns_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 64 ))
regslice_both_aq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aq_stream_TDATA),
    .vld_in(aq_stream_TVALID),
    .ack_in(regslice_both_aq_stream_U_ack_in),
    .data_out(aq_stream_TDATA_int_regslice),
    .vld_out(aq_stream_TVALID_int_regslice),
    .ack_out(aq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_aq_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 8 ))
regslice_both_as_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(as_stream_TDATA),
    .vld_in(as_stream_TVALID),
    .ack_in(regslice_both_as_stream_U_ack_in),
    .data_out(as_stream_TDATA_int_regslice),
    .vld_out(as_stream_TVALID_int_regslice),
    .ack_out(as_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_as_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 64 ))
regslice_both_xmq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(xmq_stream_TDATA),
    .vld_in(xmq_stream_TVALID),
    .ack_in(regslice_both_xmq_stream_U_ack_in),
    .data_out(xmq_stream_TDATA_int_regslice),
    .vld_out(xmq_stream_TVALID_int_regslice),
    .ack_out(xmq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_xmq_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 8 ))
regslice_both_xms_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(xms_stream_TDATA),
    .vld_in(xms_stream_TVALID),
    .ack_in(regslice_both_xms_stream_U_ack_in),
    .data_out(xms_stream_TDATA_int_regslice),
    .vld_out(xms_stream_TVALID_int_regslice),
    .ack_out(xms_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_xms_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 512 ))
regslice_both_q_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_parent_loop_proc_fu_68_q_stream_TVALID),
    .ack_in(q_stream_TREADY_int_regslice),
    .data_out(q_stream_TDATA),
    .vld_out(regslice_both_q_stream_U_vld_out),
    .ack_out(q_stream_TREADY),
    .apdone_blk(regslice_both_q_stream_U_apdone_blk)
);

MUX_regslice_both #(
    .DataWidth( 32 ))
regslice_both_s_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_parent_loop_proc_fu_68_s_stream_TVALID),
    .ack_in(s_stream_TREADY_int_regslice),
    .data_out(s_stream_TDATA),
    .vld_out(regslice_both_s_stream_U_vld_out),
    .ack_out(s_stream_TREADY),
    .apdone_blk(regslice_both_s_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_68_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_68_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc_fu_68_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln152_fu_98_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (ap_sync_grp_dataflow_parent_loop_proc_fu_68_ap_ready == 1'b0)))) begin
            grp_dataflow_parent_loop_proc_fu_68_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc_fu_68_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc_fu_68_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_52 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln152_fu_98_p2 == 1'd1))) begin
        l_fu_52 <= l_3_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        l_2_reg_126 <= l_fu_52;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_close_read_reg_121 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_parent_loop_proc_fu_68_q_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        q_stream_TDATA_reg <= grp_dataflow_parent_loop_proc_fu_68_q_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dataflow_parent_loop_proc_fu_68_s_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        s_stream_TDATA_reg <= grp_dataflow_parent_loop_proc_fu_68_s_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        aq_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_68_aq_stream_TREADY;
    end else begin
        aq_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        as_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_68_as_stream_TREADY;
    end else begin
        as_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_dataflow_parent_loop_proc_fu_68_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc_fu_68_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_parent_loop_proc_fu_68_q_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        q_stream_TDATA_int_regslice = grp_dataflow_parent_loop_proc_fu_68_q_stream_TDATA;
    end else begin
        q_stream_TDATA_int_regslice = q_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_dataflow_parent_loop_proc_fu_68_s_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        s_stream_TDATA_int_regslice = grp_dataflow_parent_loop_proc_fu_68_s_stream_TDATA;
    end else begin
        s_stream_TDATA_int_regslice = s_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xlnq_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_68_xlnq_stream_TREADY;
    end else begin
        xlnq_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xlns_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_68_xlns_stream_TREADY;
    end else begin
        xlns_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xmq_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_68_xmq_stream_TREADY;
    end else begin
        xmq_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xms_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_68_xms_stream_TREADY;
    end else begin
        xms_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln152_fu_98_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready & ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_s_stream_U_apdone_blk == 1'b1) | (regslice_both_q_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_parent_loop_proc_fu_68_ap_ready = (grp_dataflow_parent_loop_proc_fu_68_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_68_ap_ready);

assign aq_stream_TREADY = regslice_both_aq_stream_U_ack_in;

assign as_stream_TREADY = regslice_both_as_stream_U_ack_in;

assign grp_dataflow_parent_loop_proc_fu_68_ap_start = grp_dataflow_parent_loop_proc_fu_68_ap_start_reg;

assign grp_dataflow_parent_loop_proc_fu_68_q_stream_TREADY = (q_stream_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_dataflow_parent_loop_proc_fu_68_s_stream_TREADY = (s_stream_TREADY_int_regslice & ap_CS_fsm_state3);

assign icmp_ln152_fu_98_p2 = (($signed(l_fu_52) < $signed(l_close_read_reg_121)) ? 1'b1 : 1'b0);

assign l_3_fu_103_p2 = (l_fu_52 + 32'd1);

assign q_stream_TVALID = regslice_both_q_stream_U_vld_out;

assign s_stream_TVALID = regslice_both_s_stream_U_vld_out;

assign xlnq_stream_TREADY = regslice_both_xlnq_stream_U_ack_in;

assign xlns_stream_TREADY = regslice_both_xlns_stream_U_ack_in;

assign xmq_stream_TREADY = regslice_both_xmq_stream_U_ack_in;

assign xms_stream_TREADY = regslice_both_xms_stream_U_ack_in;

endmodule //MUX
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_dataflow_in_loop_VITIS_LOOP_153_2_1 (
        mha_or_mlp,
        l,
        xlnq_stream_TDATA,
        xlns_stream_TDATA,
        aq_stream_TDATA,
        as_stream_TDATA,
        xmq_stream_TDATA,
        xms_stream_TDATA,
        q_stream_TDATA,
        s_stream_TDATA,
        ap_clk,
        ap_rst,
        mha_or_mlp_ap_vld,
        l_ap_vld,
        ap_start,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlns_stream_TVALID,
        xlns_stream_TREADY,
        aq_stream_TVALID,
        aq_stream_TREADY,
        as_stream_TVALID,
        as_stream_TREADY,
        xmq_stream_TVALID,
        xmq_stream_TREADY,
        xms_stream_TVALID,
        xms_stream_TREADY,
        q_stream_TVALID,
        q_stream_TREADY,
        s_stream_TVALID,
        s_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [1:0] mha_or_mlp;
input  [31:0] l;
input  [63:0] xlnq_stream_TDATA;
input  [7:0] xlns_stream_TDATA;
input  [63:0] aq_stream_TDATA;
input  [7:0] as_stream_TDATA;
input  [63:0] xmq_stream_TDATA;
input  [7:0] xms_stream_TDATA;
output  [511:0] q_stream_TDATA;
output  [31:0] s_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   mha_or_mlp_ap_vld;
input   l_ap_vld;
input   ap_start;
input   xlnq_stream_TVALID;
output   xlnq_stream_TREADY;
input   xlns_stream_TVALID;
output   xlns_stream_TREADY;
input   aq_stream_TVALID;
output   aq_stream_TREADY;
input   as_stream_TVALID;
output   as_stream_TREADY;
input   xmq_stream_TVALID;
output   xmq_stream_TREADY;
input   xms_stream_TVALID;
output   xms_stream_TREADY;
output   q_stream_TVALID;
input   q_stream_TREADY;
output   s_stream_TVALID;
input   s_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_start;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_idle;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_ready;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_mha_or_mlp;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_0;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_1;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_2;
wire   [14:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_3;
wire   [14:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_4;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_5;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_6;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_7;
wire   [0:0] dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_8;
wire    ap_channel_done_p_loc_i_c6_channel;
wire    p_loc_i_c6_channel_full_n;
reg    ap_sync_reg_channel_write_p_loc_i_c6_channel;
wire    ap_sync_channel_write_p_loc_i_c6_channel;
wire    ap_channel_done_p_loc_i_c5_channel;
wire    p_loc_i_c5_channel_full_n;
reg    ap_sync_reg_channel_write_p_loc_i_c5_channel;
wire    ap_sync_channel_write_p_loc_i_c5_channel;
wire    ap_channel_done_spec_select3_loc_i_c4_channel;
wire    spec_select3_loc_i_c4_channel_full_n;
reg    ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel;
wire    ap_sync_channel_write_spec_select3_loc_i_c4_channel;
wire    ap_channel_done_spec_select3_loc_i_c3_channel;
wire    spec_select3_loc_i_c3_channel_full_n;
reg    ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel;
wire    ap_sync_channel_write_spec_select3_loc_i_c3_channel;
wire    ap_channel_done_cond19_loc_i_c2_channel;
wire    cond19_loc_i_c2_channel_full_n;
reg    ap_sync_reg_channel_write_cond19_loc_i_c2_channel;
wire    ap_sync_channel_write_cond19_loc_i_c2_channel;
wire    ap_channel_done_cond19_loc_i_c_channel;
wire    cond19_loc_i_c_channel_full_n;
reg    ap_sync_reg_channel_write_cond19_loc_i_c_channel;
wire    ap_sync_channel_write_cond19_loc_i_c_channel;
wire    ap_channel_done_spec_select_loc_i_channel;
wire    spec_select_loc_i_channel_full_n;
reg    ap_sync_reg_channel_write_spec_select_loc_i_channel;
wire    ap_sync_channel_write_spec_select_loc_i_channel;
wire    do_buffer3_U0_ap_start;
wire    do_buffer3_U0_ap_done;
wire    do_buffer3_U0_ap_continue;
wire    do_buffer3_U0_ap_idle;
wire    do_buffer3_U0_ap_ready;
wire    do_buffer3_U0_xlnq_stream_TREADY;
wire   [511:0] do_buffer3_U0_xlnq_buffered_stream_i_din;
wire    do_buffer3_U0_xlnq_buffered_stream_i_write;
wire    do_buffer4_U0_ap_start;
wire    do_buffer4_U0_ap_done;
wire    do_buffer4_U0_ap_continue;
wire    do_buffer4_U0_ap_idle;
wire    do_buffer4_U0_ap_ready;
wire    do_buffer4_U0_xlns_stream_TREADY;
wire   [31:0] do_buffer4_U0_xlns_buffered_stream_i_din;
wire    do_buffer4_U0_xlns_buffered_stream_i_write;
wire    do_buffer_merge5_U0_ap_start;
wire    do_buffer_merge5_U0_ap_done;
wire    do_buffer_merge5_U0_ap_continue;
wire    do_buffer_merge5_U0_ap_idle;
wire    do_buffer_merge5_U0_ap_ready;
wire    do_buffer_merge5_U0_aq_stream_TREADY;
wire   [511:0] do_buffer_merge5_U0_aq_buffered_stream_i_din;
wire    do_buffer_merge5_U0_aq_buffered_stream_i_write;
wire   [0:0] do_buffer_merge5_U0_p_loc_i_c_din;
wire    do_buffer_merge5_U0_p_loc_i_c_write;
wire    do_buffer_merge6_U0_ap_start;
wire    do_buffer_merge6_U0_ap_done;
wire    do_buffer_merge6_U0_ap_continue;
wire    do_buffer_merge6_U0_ap_idle;
wire    do_buffer_merge6_U0_ap_ready;
wire    do_buffer_merge6_U0_as_stream_TREADY;
wire   [31:0] do_buffer_merge6_U0_as_buffered_stream_i_din;
wire    do_buffer_merge6_U0_as_buffered_stream_i_write;
wire    do_buffer_unpack7_U0_ap_start;
wire    do_buffer_unpack7_U0_ap_done;
wire    do_buffer_unpack7_U0_ap_continue;
wire    do_buffer_unpack7_U0_ap_idle;
wire    do_buffer_unpack7_U0_ap_ready;
wire    do_buffer_unpack7_U0_xmq_stream_TREADY;
wire   [511:0] do_buffer_unpack7_U0_xmq_buffered_stream_i_din;
wire    do_buffer_unpack7_U0_xmq_buffered_stream_i_write;
wire   [0:0] do_buffer_unpack7_U0_spec_select3_loc_i_c_din;
wire    do_buffer_unpack7_U0_spec_select3_loc_i_c_write;
wire    do_buffer_unpack8_U0_ap_start;
wire    do_buffer_unpack8_U0_ap_done;
wire    do_buffer_unpack8_U0_ap_continue;
wire    do_buffer_unpack8_U0_ap_idle;
wire    do_buffer_unpack8_U0_ap_ready;
wire    do_buffer_unpack8_U0_xms_stream_TREADY;
wire   [31:0] do_buffer_unpack8_U0_xms_buffered_stream_i_din;
wire    do_buffer_unpack8_U0_xms_buffered_stream_i_write;
wire    GEMM_MUX9_U0_ap_start;
wire    GEMM_MUX9_U0_ap_done;
wire    GEMM_MUX9_U0_ap_continue;
wire    GEMM_MUX9_U0_ap_idle;
wire    GEMM_MUX9_U0_ap_ready;
wire    GEMM_MUX9_U0_p_loc_i_read;
wire    GEMM_MUX9_U0_spec_select3_loc_i_read;
wire    GEMM_MUX9_U0_xlnq_buffered_stream_i_read;
wire    GEMM_MUX9_U0_xlns_buffered_stream_i_read;
wire    GEMM_MUX9_U0_aq_buffered_stream_i_read;
wire    GEMM_MUX9_U0_as_buffered_stream_i_read;
wire    GEMM_MUX9_U0_xmq_buffered_stream_i_read;
wire    GEMM_MUX9_U0_xms_buffered_stream_i_read;
wire   [511:0] GEMM_MUX9_U0_q_stream_TDATA;
wire    GEMM_MUX9_U0_q_stream_TVALID;
wire   [31:0] GEMM_MUX9_U0_s_stream_TDATA;
wire    GEMM_MUX9_U0_s_stream_TVALID;
wire   [0:0] spec_select_loc_i_channel_dout;
wire    spec_select_loc_i_channel_empty_n;
wire   [2:0] spec_select_loc_i_channel_num_data_valid;
wire   [2:0] spec_select_loc_i_channel_fifo_cap;
wire    p_loc1_i_c_channel_full_n;
wire   [0:0] p_loc1_i_c_channel_dout;
wire    p_loc1_i_c_channel_empty_n;
wire   [2:0] p_loc1_i_c_channel_num_data_valid;
wire   [2:0] p_loc1_i_c_channel_fifo_cap;
wire    p_loc1_i_c1_channel_full_n;
wire   [0:0] p_loc1_i_c1_channel_dout;
wire    p_loc1_i_c1_channel_empty_n;
wire   [2:0] p_loc1_i_c1_channel_num_data_valid;
wire   [2:0] p_loc1_i_c1_channel_fifo_cap;
wire   [14:0] cond19_loc_i_c_channel_dout;
wire    cond19_loc_i_c_channel_empty_n;
wire   [2:0] cond19_loc_i_c_channel_num_data_valid;
wire   [2:0] cond19_loc_i_c_channel_fifo_cap;
wire   [14:0] cond19_loc_i_c2_channel_dout;
wire    cond19_loc_i_c2_channel_empty_n;
wire   [2:0] cond19_loc_i_c2_channel_num_data_valid;
wire   [2:0] cond19_loc_i_c2_channel_fifo_cap;
wire   [0:0] spec_select3_loc_i_c3_channel_dout;
wire    spec_select3_loc_i_c3_channel_empty_n;
wire   [2:0] spec_select3_loc_i_c3_channel_num_data_valid;
wire   [2:0] spec_select3_loc_i_c3_channel_fifo_cap;
wire   [0:0] spec_select3_loc_i_c4_channel_dout;
wire    spec_select3_loc_i_c4_channel_empty_n;
wire   [2:0] spec_select3_loc_i_c4_channel_num_data_valid;
wire   [2:0] spec_select3_loc_i_c4_channel_fifo_cap;
wire   [0:0] p_loc_i_c5_channel_dout;
wire    p_loc_i_c5_channel_empty_n;
wire   [2:0] p_loc_i_c5_channel_num_data_valid;
wire   [2:0] p_loc_i_c5_channel_fifo_cap;
wire   [0:0] p_loc_i_c6_channel_dout;
wire    p_loc_i_c6_channel_empty_n;
wire   [2:0] p_loc_i_c6_channel_num_data_valid;
wire   [2:0] p_loc_i_c6_channel_fifo_cap;
wire    xlnq_buffered_stream_i_full_n;
wire   [511:0] xlnq_buffered_stream_i_dout;
wire    xlnq_buffered_stream_i_empty_n;
wire   [2:0] xlnq_buffered_stream_i_num_data_valid;
wire   [2:0] xlnq_buffered_stream_i_fifo_cap;
wire    xlns_buffered_stream_i_full_n;
wire   [31:0] xlns_buffered_stream_i_dout;
wire    xlns_buffered_stream_i_empty_n;
wire   [2:0] xlns_buffered_stream_i_num_data_valid;
wire   [2:0] xlns_buffered_stream_i_fifo_cap;
wire    aq_buffered_stream_i_full_n;
wire   [511:0] aq_buffered_stream_i_dout;
wire    aq_buffered_stream_i_empty_n;
wire   [2:0] aq_buffered_stream_i_num_data_valid;
wire   [2:0] aq_buffered_stream_i_fifo_cap;
wire    p_loc_i_c_full_n;
wire   [0:0] p_loc_i_c_dout;
wire    p_loc_i_c_empty_n;
wire   [2:0] p_loc_i_c_num_data_valid;
wire   [2:0] p_loc_i_c_fifo_cap;
wire    as_buffered_stream_i_full_n;
wire   [31:0] as_buffered_stream_i_dout;
wire    as_buffered_stream_i_empty_n;
wire   [2:0] as_buffered_stream_i_num_data_valid;
wire   [2:0] as_buffered_stream_i_fifo_cap;
wire    xmq_buffered_stream_i_full_n;
wire   [511:0] xmq_buffered_stream_i_dout;
wire    xmq_buffered_stream_i_empty_n;
wire   [2:0] xmq_buffered_stream_i_num_data_valid;
wire   [2:0] xmq_buffered_stream_i_fifo_cap;
wire    spec_select3_loc_i_c_full_n;
wire   [0:0] spec_select3_loc_i_c_dout;
wire    spec_select3_loc_i_c_empty_n;
wire   [2:0] spec_select3_loc_i_c_num_data_valid;
wire   [2:0] spec_select3_loc_i_c_fifo_cap;
wire    xms_buffered_stream_i_full_n;
wire   [31:0] xms_buffered_stream_i_dout;
wire    xms_buffered_stream_i_empty_n;
wire   [2:0] xms_buffered_stream_i_num_data_valid;
wire   [2:0] xms_buffered_stream_i_fifo_cap;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_channel_write_p_loc_i_c6_channel = 1'b0;
//#0 ap_sync_reg_channel_write_p_loc_i_c5_channel = 1'b0;
//#0 ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel = 1'b0;
//#0 ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel = 1'b0;
//#0 ap_sync_reg_channel_write_cond19_loc_i_c2_channel = 1'b0;
//#0 ap_sync_reg_channel_write_cond19_loc_i_c_channel = 1'b0;
//#0 ap_sync_reg_channel_write_spec_select_loc_i_channel = 1'b0;
end

MUX_dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2 dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_start),
    .ap_done(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done),
    .ap_continue(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue),
    .ap_idle(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_idle),
    .ap_ready(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_ready),
    .mha_or_mlp(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_mha_or_mlp),
    .l(l),
    .ap_return_0(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_0),
    .ap_return_1(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_1),
    .ap_return_2(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_2),
    .ap_return_3(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_3),
    .ap_return_4(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_4),
    .ap_return_5(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_5),
    .ap_return_6(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_6),
    .ap_return_7(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_7),
    .ap_return_8(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_8)
);

MUX_do_buffer3 do_buffer3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_buffer3_U0_ap_start),
    .ap_done(do_buffer3_U0_ap_done),
    .ap_continue(do_buffer3_U0_ap_continue),
    .ap_idle(do_buffer3_U0_ap_idle),
    .ap_ready(do_buffer3_U0_ap_ready),
    .p_read(p_loc1_i_c1_channel_dout),
    .p_read1(cond19_loc_i_c2_channel_dout),
    .xlnq_stream_TDATA(xlnq_stream_TDATA),
    .xlnq_stream_TVALID(xlnq_stream_TVALID),
    .xlnq_stream_TREADY(do_buffer3_U0_xlnq_stream_TREADY),
    .xlnq_buffered_stream_i_din(do_buffer3_U0_xlnq_buffered_stream_i_din),
    .xlnq_buffered_stream_i_full_n(xlnq_buffered_stream_i_full_n),
    .xlnq_buffered_stream_i_write(do_buffer3_U0_xlnq_buffered_stream_i_write),
    .xlnq_buffered_stream_i_num_data_valid(xlnq_buffered_stream_i_num_data_valid),
    .xlnq_buffered_stream_i_fifo_cap(xlnq_buffered_stream_i_fifo_cap)
);

MUX_do_buffer4 do_buffer4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_buffer4_U0_ap_start),
    .ap_done(do_buffer4_U0_ap_done),
    .ap_continue(do_buffer4_U0_ap_continue),
    .ap_idle(do_buffer4_U0_ap_idle),
    .ap_ready(do_buffer4_U0_ap_ready),
    .p_read(p_loc1_i_c_channel_dout),
    .p_read1(cond19_loc_i_c_channel_dout),
    .xlns_stream_TDATA(xlns_stream_TDATA),
    .xlns_stream_TVALID(xlns_stream_TVALID),
    .xlns_stream_TREADY(do_buffer4_U0_xlns_stream_TREADY),
    .xlns_buffered_stream_i_din(do_buffer4_U0_xlns_buffered_stream_i_din),
    .xlns_buffered_stream_i_full_n(xlns_buffered_stream_i_full_n),
    .xlns_buffered_stream_i_write(do_buffer4_U0_xlns_buffered_stream_i_write),
    .xlns_buffered_stream_i_num_data_valid(xlns_buffered_stream_i_num_data_valid),
    .xlns_buffered_stream_i_fifo_cap(xlns_buffered_stream_i_fifo_cap)
);

MUX_do_buffer_merge5 do_buffer_merge5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_buffer_merge5_U0_ap_start),
    .ap_done(do_buffer_merge5_U0_ap_done),
    .ap_continue(do_buffer_merge5_U0_ap_continue),
    .ap_idle(do_buffer_merge5_U0_ap_idle),
    .ap_ready(do_buffer_merge5_U0_ap_ready),
    .p_read(p_loc_i_c6_channel_dout),
    .aq_stream_TDATA(aq_stream_TDATA),
    .aq_stream_TVALID(aq_stream_TVALID),
    .aq_stream_TREADY(do_buffer_merge5_U0_aq_stream_TREADY),
    .aq_buffered_stream_i_din(do_buffer_merge5_U0_aq_buffered_stream_i_din),
    .aq_buffered_stream_i_full_n(aq_buffered_stream_i_full_n),
    .aq_buffered_stream_i_write(do_buffer_merge5_U0_aq_buffered_stream_i_write),
    .aq_buffered_stream_i_num_data_valid(aq_buffered_stream_i_num_data_valid),
    .aq_buffered_stream_i_fifo_cap(aq_buffered_stream_i_fifo_cap),
    .p_loc_i_c_din(do_buffer_merge5_U0_p_loc_i_c_din),
    .p_loc_i_c_full_n(p_loc_i_c_full_n),
    .p_loc_i_c_write(do_buffer_merge5_U0_p_loc_i_c_write),
    .p_loc_i_c_num_data_valid(p_loc_i_c_num_data_valid),
    .p_loc_i_c_fifo_cap(p_loc_i_c_fifo_cap)
);

MUX_do_buffer_merge6 do_buffer_merge6_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_buffer_merge6_U0_ap_start),
    .ap_done(do_buffer_merge6_U0_ap_done),
    .ap_continue(do_buffer_merge6_U0_ap_continue),
    .ap_idle(do_buffer_merge6_U0_ap_idle),
    .ap_ready(do_buffer_merge6_U0_ap_ready),
    .p_read(p_loc_i_c5_channel_dout),
    .as_stream_TDATA(as_stream_TDATA),
    .as_stream_TVALID(as_stream_TVALID),
    .as_stream_TREADY(do_buffer_merge6_U0_as_stream_TREADY),
    .as_buffered_stream_i_din(do_buffer_merge6_U0_as_buffered_stream_i_din),
    .as_buffered_stream_i_full_n(as_buffered_stream_i_full_n),
    .as_buffered_stream_i_write(do_buffer_merge6_U0_as_buffered_stream_i_write),
    .as_buffered_stream_i_num_data_valid(as_buffered_stream_i_num_data_valid),
    .as_buffered_stream_i_fifo_cap(as_buffered_stream_i_fifo_cap)
);

MUX_do_buffer_unpack7 do_buffer_unpack7_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_buffer_unpack7_U0_ap_start),
    .ap_done(do_buffer_unpack7_U0_ap_done),
    .ap_continue(do_buffer_unpack7_U0_ap_continue),
    .ap_idle(do_buffer_unpack7_U0_ap_idle),
    .ap_ready(do_buffer_unpack7_U0_ap_ready),
    .p_read(spec_select3_loc_i_c4_channel_dout),
    .xmq_stream_TDATA(xmq_stream_TDATA),
    .xmq_stream_TVALID(xmq_stream_TVALID),
    .xmq_stream_TREADY(do_buffer_unpack7_U0_xmq_stream_TREADY),
    .xmq_buffered_stream_i_din(do_buffer_unpack7_U0_xmq_buffered_stream_i_din),
    .xmq_buffered_stream_i_full_n(xmq_buffered_stream_i_full_n),
    .xmq_buffered_stream_i_write(do_buffer_unpack7_U0_xmq_buffered_stream_i_write),
    .xmq_buffered_stream_i_num_data_valid(xmq_buffered_stream_i_num_data_valid),
    .xmq_buffered_stream_i_fifo_cap(xmq_buffered_stream_i_fifo_cap),
    .spec_select3_loc_i_c_din(do_buffer_unpack7_U0_spec_select3_loc_i_c_din),
    .spec_select3_loc_i_c_full_n(spec_select3_loc_i_c_full_n),
    .spec_select3_loc_i_c_write(do_buffer_unpack7_U0_spec_select3_loc_i_c_write),
    .spec_select3_loc_i_c_num_data_valid(spec_select3_loc_i_c_num_data_valid),
    .spec_select3_loc_i_c_fifo_cap(spec_select3_loc_i_c_fifo_cap)
);

MUX_do_buffer_unpack8 do_buffer_unpack8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_buffer_unpack8_U0_ap_start),
    .ap_done(do_buffer_unpack8_U0_ap_done),
    .ap_continue(do_buffer_unpack8_U0_ap_continue),
    .ap_idle(do_buffer_unpack8_U0_ap_idle),
    .ap_ready(do_buffer_unpack8_U0_ap_ready),
    .p_read(spec_select3_loc_i_c3_channel_dout),
    .xms_stream_TDATA(xms_stream_TDATA),
    .xms_stream_TVALID(xms_stream_TVALID),
    .xms_stream_TREADY(do_buffer_unpack8_U0_xms_stream_TREADY),
    .xms_buffered_stream_i_din(do_buffer_unpack8_U0_xms_buffered_stream_i_din),
    .xms_buffered_stream_i_full_n(xms_buffered_stream_i_full_n),
    .xms_buffered_stream_i_write(do_buffer_unpack8_U0_xms_buffered_stream_i_write),
    .xms_buffered_stream_i_num_data_valid(xms_buffered_stream_i_num_data_valid),
    .xms_buffered_stream_i_fifo_cap(xms_buffered_stream_i_fifo_cap)
);

MUX_GEMM_MUX9 GEMM_MUX9_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(GEMM_MUX9_U0_ap_start),
    .ap_done(GEMM_MUX9_U0_ap_done),
    .ap_continue(GEMM_MUX9_U0_ap_continue),
    .ap_idle(GEMM_MUX9_U0_ap_idle),
    .ap_ready(GEMM_MUX9_U0_ap_ready),
    .p_read(spec_select_loc_i_channel_dout),
    .p_loc_i_dout(p_loc_i_c_dout),
    .p_loc_i_empty_n(p_loc_i_c_empty_n),
    .p_loc_i_read(GEMM_MUX9_U0_p_loc_i_read),
    .p_loc_i_num_data_valid(p_loc_i_c_num_data_valid),
    .p_loc_i_fifo_cap(p_loc_i_c_fifo_cap),
    .spec_select3_loc_i_dout(spec_select3_loc_i_c_dout),
    .spec_select3_loc_i_empty_n(spec_select3_loc_i_c_empty_n),
    .spec_select3_loc_i_read(GEMM_MUX9_U0_spec_select3_loc_i_read),
    .spec_select3_loc_i_num_data_valid(spec_select3_loc_i_c_num_data_valid),
    .spec_select3_loc_i_fifo_cap(spec_select3_loc_i_c_fifo_cap),
    .xlnq_buffered_stream_i_dout(xlnq_buffered_stream_i_dout),
    .xlnq_buffered_stream_i_empty_n(xlnq_buffered_stream_i_empty_n),
    .xlnq_buffered_stream_i_read(GEMM_MUX9_U0_xlnq_buffered_stream_i_read),
    .xlnq_buffered_stream_i_num_data_valid(xlnq_buffered_stream_i_num_data_valid),
    .xlnq_buffered_stream_i_fifo_cap(xlnq_buffered_stream_i_fifo_cap),
    .xlns_buffered_stream_i_dout(xlns_buffered_stream_i_dout),
    .xlns_buffered_stream_i_empty_n(xlns_buffered_stream_i_empty_n),
    .xlns_buffered_stream_i_read(GEMM_MUX9_U0_xlns_buffered_stream_i_read),
    .xlns_buffered_stream_i_num_data_valid(xlns_buffered_stream_i_num_data_valid),
    .xlns_buffered_stream_i_fifo_cap(xlns_buffered_stream_i_fifo_cap),
    .aq_buffered_stream_i_dout(aq_buffered_stream_i_dout),
    .aq_buffered_stream_i_empty_n(aq_buffered_stream_i_empty_n),
    .aq_buffered_stream_i_read(GEMM_MUX9_U0_aq_buffered_stream_i_read),
    .aq_buffered_stream_i_num_data_valid(aq_buffered_stream_i_num_data_valid),
    .aq_buffered_stream_i_fifo_cap(aq_buffered_stream_i_fifo_cap),
    .as_buffered_stream_i_dout(as_buffered_stream_i_dout),
    .as_buffered_stream_i_empty_n(as_buffered_stream_i_empty_n),
    .as_buffered_stream_i_read(GEMM_MUX9_U0_as_buffered_stream_i_read),
    .as_buffered_stream_i_num_data_valid(as_buffered_stream_i_num_data_valid),
    .as_buffered_stream_i_fifo_cap(as_buffered_stream_i_fifo_cap),
    .xmq_buffered_stream_i_dout(xmq_buffered_stream_i_dout),
    .xmq_buffered_stream_i_empty_n(xmq_buffered_stream_i_empty_n),
    .xmq_buffered_stream_i_read(GEMM_MUX9_U0_xmq_buffered_stream_i_read),
    .xmq_buffered_stream_i_num_data_valid(xmq_buffered_stream_i_num_data_valid),
    .xmq_buffered_stream_i_fifo_cap(xmq_buffered_stream_i_fifo_cap),
    .xms_buffered_stream_i_dout(xms_buffered_stream_i_dout),
    .xms_buffered_stream_i_empty_n(xms_buffered_stream_i_empty_n),
    .xms_buffered_stream_i_read(GEMM_MUX9_U0_xms_buffered_stream_i_read),
    .xms_buffered_stream_i_num_data_valid(xms_buffered_stream_i_num_data_valid),
    .xms_buffered_stream_i_fifo_cap(xms_buffered_stream_i_fifo_cap),
    .q_stream_TDATA(GEMM_MUX9_U0_q_stream_TDATA),
    .q_stream_TVALID(GEMM_MUX9_U0_q_stream_TVALID),
    .q_stream_TREADY(q_stream_TREADY),
    .s_stream_TDATA(GEMM_MUX9_U0_s_stream_TDATA),
    .s_stream_TVALID(GEMM_MUX9_U0_s_stream_TVALID),
    .s_stream_TREADY(s_stream_TREADY)
);

MUX_fifo_w1_d3_S spec_select_loc_i_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_0),
    .if_full_n(spec_select_loc_i_channel_full_n),
    .if_write(ap_channel_done_spec_select_loc_i_channel),
    .if_dout(spec_select_loc_i_channel_dout),
    .if_empty_n(spec_select_loc_i_channel_empty_n),
    .if_read(GEMM_MUX9_U0_ap_ready),
    .if_num_data_valid(spec_select_loc_i_channel_num_data_valid),
    .if_fifo_cap(spec_select_loc_i_channel_fifo_cap)
);

MUX_fifo_w1_d2_S p_loc1_i_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_1),
    .if_full_n(p_loc1_i_c_channel_full_n),
    .if_write(ap_channel_done_cond19_loc_i_c_channel),
    .if_dout(p_loc1_i_c_channel_dout),
    .if_empty_n(p_loc1_i_c_channel_empty_n),
    .if_read(do_buffer4_U0_ap_ready),
    .if_num_data_valid(p_loc1_i_c_channel_num_data_valid),
    .if_fifo_cap(p_loc1_i_c_channel_fifo_cap)
);

MUX_fifo_w1_d2_S p_loc1_i_c1_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_2),
    .if_full_n(p_loc1_i_c1_channel_full_n),
    .if_write(ap_channel_done_cond19_loc_i_c2_channel),
    .if_dout(p_loc1_i_c1_channel_dout),
    .if_empty_n(p_loc1_i_c1_channel_empty_n),
    .if_read(do_buffer3_U0_ap_ready),
    .if_num_data_valid(p_loc1_i_c1_channel_num_data_valid),
    .if_fifo_cap(p_loc1_i_c1_channel_fifo_cap)
);

MUX_fifo_w15_d2_S cond19_loc_i_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_3),
    .if_full_n(cond19_loc_i_c_channel_full_n),
    .if_write(ap_channel_done_cond19_loc_i_c_channel),
    .if_dout(cond19_loc_i_c_channel_dout),
    .if_empty_n(cond19_loc_i_c_channel_empty_n),
    .if_read(do_buffer4_U0_ap_ready),
    .if_num_data_valid(cond19_loc_i_c_channel_num_data_valid),
    .if_fifo_cap(cond19_loc_i_c_channel_fifo_cap)
);

MUX_fifo_w15_d2_S cond19_loc_i_c2_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_4),
    .if_full_n(cond19_loc_i_c2_channel_full_n),
    .if_write(ap_channel_done_cond19_loc_i_c2_channel),
    .if_dout(cond19_loc_i_c2_channel_dout),
    .if_empty_n(cond19_loc_i_c2_channel_empty_n),
    .if_read(do_buffer3_U0_ap_ready),
    .if_num_data_valid(cond19_loc_i_c2_channel_num_data_valid),
    .if_fifo_cap(cond19_loc_i_c2_channel_fifo_cap)
);

MUX_fifo_w1_d2_S spec_select3_loc_i_c3_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_5),
    .if_full_n(spec_select3_loc_i_c3_channel_full_n),
    .if_write(ap_channel_done_spec_select3_loc_i_c3_channel),
    .if_dout(spec_select3_loc_i_c3_channel_dout),
    .if_empty_n(spec_select3_loc_i_c3_channel_empty_n),
    .if_read(do_buffer_unpack8_U0_ap_ready),
    .if_num_data_valid(spec_select3_loc_i_c3_channel_num_data_valid),
    .if_fifo_cap(spec_select3_loc_i_c3_channel_fifo_cap)
);

MUX_fifo_w1_d2_S spec_select3_loc_i_c4_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_6),
    .if_full_n(spec_select3_loc_i_c4_channel_full_n),
    .if_write(ap_channel_done_spec_select3_loc_i_c4_channel),
    .if_dout(spec_select3_loc_i_c4_channel_dout),
    .if_empty_n(spec_select3_loc_i_c4_channel_empty_n),
    .if_read(do_buffer_unpack7_U0_ap_ready),
    .if_num_data_valid(spec_select3_loc_i_c4_channel_num_data_valid),
    .if_fifo_cap(spec_select3_loc_i_c4_channel_fifo_cap)
);

MUX_fifo_w1_d2_S p_loc_i_c5_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_7),
    .if_full_n(p_loc_i_c5_channel_full_n),
    .if_write(ap_channel_done_p_loc_i_c5_channel),
    .if_dout(p_loc_i_c5_channel_dout),
    .if_empty_n(p_loc_i_c5_channel_empty_n),
    .if_read(do_buffer_merge6_U0_ap_ready),
    .if_num_data_valid(p_loc_i_c5_channel_num_data_valid),
    .if_fifo_cap(p_loc_i_c5_channel_fifo_cap)
);

MUX_fifo_w1_d2_S p_loc_i_c6_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_return_8),
    .if_full_n(p_loc_i_c6_channel_full_n),
    .if_write(ap_channel_done_p_loc_i_c6_channel),
    .if_dout(p_loc_i_c6_channel_dout),
    .if_empty_n(p_loc_i_c6_channel_empty_n),
    .if_read(do_buffer_merge5_U0_ap_ready),
    .if_num_data_valid(p_loc_i_c6_channel_num_data_valid),
    .if_fifo_cap(p_loc_i_c6_channel_fifo_cap)
);

MUX_fifo_w512_d2_S xlnq_buffered_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer3_U0_xlnq_buffered_stream_i_din),
    .if_full_n(xlnq_buffered_stream_i_full_n),
    .if_write(do_buffer3_U0_xlnq_buffered_stream_i_write),
    .if_dout(xlnq_buffered_stream_i_dout),
    .if_empty_n(xlnq_buffered_stream_i_empty_n),
    .if_read(GEMM_MUX9_U0_xlnq_buffered_stream_i_read),
    .if_num_data_valid(xlnq_buffered_stream_i_num_data_valid),
    .if_fifo_cap(xlnq_buffered_stream_i_fifo_cap)
);

MUX_fifo_w32_d2_S xlns_buffered_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer4_U0_xlns_buffered_stream_i_din),
    .if_full_n(xlns_buffered_stream_i_full_n),
    .if_write(do_buffer4_U0_xlns_buffered_stream_i_write),
    .if_dout(xlns_buffered_stream_i_dout),
    .if_empty_n(xlns_buffered_stream_i_empty_n),
    .if_read(GEMM_MUX9_U0_xlns_buffered_stream_i_read),
    .if_num_data_valid(xlns_buffered_stream_i_num_data_valid),
    .if_fifo_cap(xlns_buffered_stream_i_fifo_cap)
);

MUX_fifo_w512_d2_S aq_buffered_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer_merge5_U0_aq_buffered_stream_i_din),
    .if_full_n(aq_buffered_stream_i_full_n),
    .if_write(do_buffer_merge5_U0_aq_buffered_stream_i_write),
    .if_dout(aq_buffered_stream_i_dout),
    .if_empty_n(aq_buffered_stream_i_empty_n),
    .if_read(GEMM_MUX9_U0_aq_buffered_stream_i_read),
    .if_num_data_valid(aq_buffered_stream_i_num_data_valid),
    .if_fifo_cap(aq_buffered_stream_i_fifo_cap)
);

MUX_fifo_w1_d2_S p_loc_i_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer_merge5_U0_p_loc_i_c_din),
    .if_full_n(p_loc_i_c_full_n),
    .if_write(do_buffer_merge5_U0_p_loc_i_c_write),
    .if_dout(p_loc_i_c_dout),
    .if_empty_n(p_loc_i_c_empty_n),
    .if_read(GEMM_MUX9_U0_p_loc_i_read),
    .if_num_data_valid(p_loc_i_c_num_data_valid),
    .if_fifo_cap(p_loc_i_c_fifo_cap)
);

MUX_fifo_w32_d2_S as_buffered_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer_merge6_U0_as_buffered_stream_i_din),
    .if_full_n(as_buffered_stream_i_full_n),
    .if_write(do_buffer_merge6_U0_as_buffered_stream_i_write),
    .if_dout(as_buffered_stream_i_dout),
    .if_empty_n(as_buffered_stream_i_empty_n),
    .if_read(GEMM_MUX9_U0_as_buffered_stream_i_read),
    .if_num_data_valid(as_buffered_stream_i_num_data_valid),
    .if_fifo_cap(as_buffered_stream_i_fifo_cap)
);

MUX_fifo_w512_d2_S xmq_buffered_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer_unpack7_U0_xmq_buffered_stream_i_din),
    .if_full_n(xmq_buffered_stream_i_full_n),
    .if_write(do_buffer_unpack7_U0_xmq_buffered_stream_i_write),
    .if_dout(xmq_buffered_stream_i_dout),
    .if_empty_n(xmq_buffered_stream_i_empty_n),
    .if_read(GEMM_MUX9_U0_xmq_buffered_stream_i_read),
    .if_num_data_valid(xmq_buffered_stream_i_num_data_valid),
    .if_fifo_cap(xmq_buffered_stream_i_fifo_cap)
);

MUX_fifo_w1_d2_S spec_select3_loc_i_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer_unpack7_U0_spec_select3_loc_i_c_din),
    .if_full_n(spec_select3_loc_i_c_full_n),
    .if_write(do_buffer_unpack7_U0_spec_select3_loc_i_c_write),
    .if_dout(spec_select3_loc_i_c_dout),
    .if_empty_n(spec_select3_loc_i_c_empty_n),
    .if_read(GEMM_MUX9_U0_spec_select3_loc_i_read),
    .if_num_data_valid(spec_select3_loc_i_c_num_data_valid),
    .if_fifo_cap(spec_select3_loc_i_c_fifo_cap)
);

MUX_fifo_w32_d2_S xms_buffered_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_buffer_unpack8_U0_xms_buffered_stream_i_din),
    .if_full_n(xms_buffered_stream_i_full_n),
    .if_write(do_buffer_unpack8_U0_xms_buffered_stream_i_write),
    .if_dout(xms_buffered_stream_i_dout),
    .if_empty_n(xms_buffered_stream_i_empty_n),
    .if_read(GEMM_MUX9_U0_xms_buffered_stream_i_read),
    .if_num_data_valid(xms_buffered_stream_i_num_data_valid),
    .if_fifo_cap(xms_buffered_stream_i_fifo_cap)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_cond19_loc_i_c2_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cond19_loc_i_c2_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cond19_loc_i_c2_channel <= ap_sync_channel_write_cond19_loc_i_c2_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_cond19_loc_i_c_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_cond19_loc_i_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_cond19_loc_i_c_channel <= ap_sync_channel_write_cond19_loc_i_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_p_loc_i_c5_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_p_loc_i_c5_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_p_loc_i_c5_channel <= ap_sync_channel_write_p_loc_i_c5_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_p_loc_i_c6_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_p_loc_i_c6_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_p_loc_i_c6_channel <= ap_sync_channel_write_p_loc_i_c6_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel <= ap_sync_channel_write_spec_select3_loc_i_c3_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel <= ap_sync_channel_write_spec_select3_loc_i_c4_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_spec_select_loc_i_channel <= 1'b0;
    end else begin
        if (((dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_spec_select_loc_i_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_spec_select_loc_i_channel <= ap_sync_channel_write_spec_select_loc_i_channel;
        end
    end
end

assign GEMM_MUX9_U0_ap_continue = ap_continue;

assign GEMM_MUX9_U0_ap_start = spec_select_loc_i_channel_empty_n;

assign ap_channel_done_cond19_loc_i_c2_channel = ((ap_sync_reg_channel_write_cond19_loc_i_c2_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_channel_done_cond19_loc_i_c_channel = ((ap_sync_reg_channel_write_cond19_loc_i_c_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_channel_done_p_loc_i_c5_channel = ((ap_sync_reg_channel_write_p_loc_i_c5_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_channel_done_p_loc_i_c6_channel = ((ap_sync_reg_channel_write_p_loc_i_c6_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_channel_done_spec_select3_loc_i_c3_channel = ((ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_channel_done_spec_select3_loc_i_c4_channel = ((ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_channel_done_spec_select_loc_i_channel = ((ap_sync_reg_channel_write_spec_select_loc_i_channel ^ 1'b1) & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_done);

assign ap_done = GEMM_MUX9_U0_ap_done;

assign ap_idle = ((p_loc_i_c6_channel_empty_n ^ 1'b1) & (p_loc_i_c5_channel_empty_n ^ 1'b1) & (spec_select3_loc_i_c4_channel_empty_n ^ 1'b1) & (spec_select3_loc_i_c3_channel_empty_n ^ 1'b1) & (p_loc1_i_c1_channel_empty_n ^ 1'b1) & (p_loc1_i_c_channel_empty_n ^ 1'b1) & (spec_select_loc_i_channel_empty_n ^ 1'b1) & do_buffer_unpack8_U0_ap_idle & do_buffer_unpack7_U0_ap_idle & do_buffer_merge6_U0_ap_idle & do_buffer_merge5_U0_ap_idle & do_buffer4_U0_ap_idle & do_buffer3_U0_ap_idle & dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_idle & GEMM_MUX9_U0_ap_idle);

assign ap_ready = dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_ready;

assign ap_sync_channel_write_cond19_loc_i_c2_channel = ((cond19_loc_i_c2_channel_full_n & ap_channel_done_cond19_loc_i_c2_channel) | ap_sync_reg_channel_write_cond19_loc_i_c2_channel);

assign ap_sync_channel_write_cond19_loc_i_c_channel = ((cond19_loc_i_c_channel_full_n & ap_channel_done_cond19_loc_i_c_channel) | ap_sync_reg_channel_write_cond19_loc_i_c_channel);

assign ap_sync_channel_write_p_loc_i_c5_channel = ((p_loc_i_c5_channel_full_n & ap_channel_done_p_loc_i_c5_channel) | ap_sync_reg_channel_write_p_loc_i_c5_channel);

assign ap_sync_channel_write_p_loc_i_c6_channel = ((p_loc_i_c6_channel_full_n & ap_channel_done_p_loc_i_c6_channel) | ap_sync_reg_channel_write_p_loc_i_c6_channel);

assign ap_sync_channel_write_spec_select3_loc_i_c3_channel = ((spec_select3_loc_i_c3_channel_full_n & ap_channel_done_spec_select3_loc_i_c3_channel) | ap_sync_reg_channel_write_spec_select3_loc_i_c3_channel);

assign ap_sync_channel_write_spec_select3_loc_i_c4_channel = ((spec_select3_loc_i_c4_channel_full_n & ap_channel_done_spec_select3_loc_i_c4_channel) | ap_sync_reg_channel_write_spec_select3_loc_i_c4_channel);

assign ap_sync_channel_write_spec_select_loc_i_channel = ((spec_select_loc_i_channel_full_n & ap_channel_done_spec_select_loc_i_channel) | ap_sync_reg_channel_write_spec_select_loc_i_channel);

assign aq_stream_TREADY = do_buffer_merge5_U0_aq_stream_TREADY;

assign as_stream_TREADY = do_buffer_merge6_U0_as_stream_TREADY;

assign dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_continue = (ap_sync_channel_write_spec_select_loc_i_channel & ap_sync_channel_write_spec_select3_loc_i_c4_channel & ap_sync_channel_write_spec_select3_loc_i_c3_channel & ap_sync_channel_write_p_loc_i_c6_channel & ap_sync_channel_write_p_loc_i_c5_channel & ap_sync_channel_write_cond19_loc_i_c_channel & ap_sync_channel_write_cond19_loc_i_c2_channel);

assign dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_ap_start = ap_start;

assign dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2_U0_mha_or_mlp = {{mha_or_mlp[1:0]}};

assign do_buffer3_U0_ap_continue = 1'b1;

assign do_buffer3_U0_ap_start = p_loc1_i_c1_channel_empty_n;

assign do_buffer4_U0_ap_continue = 1'b1;

assign do_buffer4_U0_ap_start = p_loc1_i_c_channel_empty_n;

assign do_buffer_merge5_U0_ap_continue = 1'b1;

assign do_buffer_merge5_U0_ap_start = p_loc_i_c6_channel_empty_n;

assign do_buffer_merge6_U0_ap_continue = 1'b1;

assign do_buffer_merge6_U0_ap_start = p_loc_i_c5_channel_empty_n;

assign do_buffer_unpack7_U0_ap_continue = 1'b1;

assign do_buffer_unpack7_U0_ap_start = spec_select3_loc_i_c4_channel_empty_n;

assign do_buffer_unpack8_U0_ap_continue = 1'b1;

assign do_buffer_unpack8_U0_ap_start = spec_select3_loc_i_c3_channel_empty_n;

assign q_stream_TDATA = GEMM_MUX9_U0_q_stream_TDATA;

assign q_stream_TVALID = GEMM_MUX9_U0_q_stream_TVALID;

assign s_stream_TDATA = GEMM_MUX9_U0_s_stream_TDATA;

assign s_stream_TVALID = GEMM_MUX9_U0_s_stream_TVALID;

assign xlnq_stream_TREADY = do_buffer3_U0_xlnq_stream_TREADY;

assign xlns_stream_TREADY = do_buffer4_U0_xlns_stream_TREADY;

assign xmq_stream_TREADY = do_buffer_unpack7_U0_xmq_stream_TREADY;

assign xms_stream_TREADY = do_buffer_unpack8_U0_xms_stream_TREADY;

endmodule //MUX_dataflow_in_loop_VITIS_LOOP_153_2_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mha_or_mlp,
        l,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] mha_or_mlp;
input  [31:0] l;
output  [0:0] ap_return_0;
output  [0:0] ap_return_1;
output  [0:0] ap_return_2;
output  [14:0] ap_return_3;
output  [14:0] ap_return_4;
output  [0:0] ap_return_5;
output  [0:0] ap_return_6;
output  [0:0] ap_return_7;
output  [0:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] mha_or_mlp_read_reg_154;
reg    ap_block_state1;
wire   [0:0] cmp5_i_fu_34_p2;
reg   [0:0] cmp5_i_reg_160;
wire   [0:0] cmp7_i_fu_40_p2;
reg   [0:0] cmp7_i_reg_165;
wire    ap_CS_fsm_state2;
wire   [0:0] xor_ln156_fu_46_p2;
wire   [0:0] and_ln158_fu_61_p2;
wire   [0:0] and_ln156_fu_51_p2;
wire   [0:0] and_ln157_fu_56_p2;
wire   [0:0] or_ln160_fu_81_p2;
wire   [14:0] select_ln160_1_fu_73_p3;
wire   [14:0] select_ln160_fu_65_p3;
wire   [0:0] or_ln173_fu_95_p2;
wire   [14:0] select_ln160_2_fu_87_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        cmp5_i_reg_160 <= cmp5_i_fu_34_p2;
        cmp7_i_reg_165 <= cmp7_i_fu_40_p2;
        mha_or_mlp_read_reg_154 <= mha_or_mlp;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln156_fu_51_p2 = (xor_ln156_fu_46_p2 & cmp5_i_reg_160);

assign and_ln157_fu_56_p2 = (xor_ln156_fu_46_p2 & cmp7_i_reg_165);

assign and_ln158_fu_61_p2 = (mha_or_mlp_read_reg_154 & cmp7_i_reg_165);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = and_ln156_fu_51_p2;

assign ap_return_1 = or_ln173_fu_95_p2;

assign ap_return_2 = or_ln173_fu_95_p2;

assign ap_return_3 = select_ln160_2_fu_87_p3;

assign ap_return_4 = select_ln160_2_fu_87_p3;

assign ap_return_5 = and_ln158_fu_61_p2;

assign ap_return_6 = and_ln158_fu_61_p2;

assign ap_return_7 = and_ln157_fu_56_p2;

assign ap_return_8 = and_ln157_fu_56_p2;

assign cmp5_i_fu_34_p2 = ((l == 32'd24) ? 1'b1 : 1'b0);

assign cmp7_i_fu_40_p2 = ((l != 32'd24) ? 1'b1 : 1'b0);

assign or_ln160_fu_81_p2 = (and_ln157_fu_56_p2 | and_ln156_fu_51_p2);

assign or_ln173_fu_95_p2 = (cmp7_i_reg_165 | and_ln156_fu_51_p2);

assign select_ln160_1_fu_73_p3 = ((and_ln156_fu_51_p2[0:0] == 1'b1) ? 15'd18992 : 15'd336);

assign select_ln160_2_fu_87_p3 = ((or_ln160_fu_81_p2[0:0] == 1'b1) ? select_ln160_1_fu_73_p3 : select_ln160_fu_65_p3);

assign select_ln160_fu_65_p3 = ((and_ln158_fu_61_p2[0:0] == 1'b1) ? 15'd1216 : 15'd0);

assign xor_ln156_fu_46_p2 = (mha_or_mlp_read_reg_154 ^ 1'd1);

endmodule //MUX_dataflow_in_loop_VITIS_LOOP_153_2_1_Block_newFuncRoot_proc2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_dataflow_parent_loop_proc (
        l,
        xlnq_stream_TDATA,
        xlns_stream_TDATA,
        aq_stream_TDATA,
        as_stream_TDATA,
        xmq_stream_TDATA,
        xms_stream_TDATA,
        q_stream_TDATA,
        s_stream_TDATA,
        ap_clk,
        ap_rst,
        l_ap_vld,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlns_stream_TVALID,
        xlns_stream_TREADY,
        aq_stream_TVALID,
        aq_stream_TREADY,
        as_stream_TVALID,
        as_stream_TREADY,
        xmq_stream_TVALID,
        xmq_stream_TREADY,
        xms_stream_TVALID,
        xms_stream_TREADY,
        q_stream_TVALID,
        q_stream_TREADY,
        s_stream_TVALID,
        s_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] l;
input  [63:0] xlnq_stream_TDATA;
input  [7:0] xlns_stream_TDATA;
input  [63:0] aq_stream_TDATA;
input  [7:0] as_stream_TDATA;
input  [63:0] xmq_stream_TDATA;
input  [7:0] xms_stream_TDATA;
output  [511:0] q_stream_TDATA;
output  [31:0] s_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   l_ap_vld;
input   xlnq_stream_TVALID;
output   xlnq_stream_TREADY;
input   xlns_stream_TVALID;
output   xlns_stream_TREADY;
input   aq_stream_TVALID;
output   aq_stream_TREADY;
input   as_stream_TVALID;
output   as_stream_TREADY;
input   xmq_stream_TVALID;
output   xmq_stream_TREADY;
input   xms_stream_TVALID;
output   xms_stream_TREADY;
output   q_stream_TVALID;
input   q_stream_TREADY;
output   s_stream_TVALID;
input   s_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [511:0] dataflow_in_loop_VITIS_LOOP_153_2_1_U0_q_stream_TDATA;
wire   [31:0] dataflow_in_loop_VITIS_LOOP_153_2_1_U0_s_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_start;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xlnq_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xlns_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_aq_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_as_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xmq_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xms_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_q_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_s_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_done;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_ready;
wire    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_idle;
reg    dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_continue;
reg   [1:0] loop_dataflow_input_count;
reg   [1:0] loop_dataflow_output_count;
wire   [1:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 loop_dataflow_input_count = 2'd0;
//#0 loop_dataflow_output_count = 2'd0;
end

MUX_dataflow_in_loop_VITIS_LOOP_153_2_1 dataflow_in_loop_VITIS_LOOP_153_2_1_U0(
    .mha_or_mlp(loop_dataflow_input_count),
    .l(l),
    .xlnq_stream_TDATA(xlnq_stream_TDATA),
    .xlns_stream_TDATA(xlns_stream_TDATA),
    .aq_stream_TDATA(aq_stream_TDATA),
    .as_stream_TDATA(as_stream_TDATA),
    .xmq_stream_TDATA(xmq_stream_TDATA),
    .xms_stream_TDATA(xms_stream_TDATA),
    .q_stream_TDATA(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_q_stream_TDATA),
    .s_stream_TDATA(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_s_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .mha_or_mlp_ap_vld(1'b0),
    .l_ap_vld(l_ap_vld),
    .ap_start(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_start),
    .xlnq_stream_TVALID(xlnq_stream_TVALID),
    .xlnq_stream_TREADY(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xlnq_stream_TREADY),
    .xlns_stream_TVALID(xlns_stream_TVALID),
    .xlns_stream_TREADY(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xlns_stream_TREADY),
    .aq_stream_TVALID(aq_stream_TVALID),
    .aq_stream_TREADY(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_aq_stream_TREADY),
    .as_stream_TVALID(as_stream_TVALID),
    .as_stream_TREADY(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_as_stream_TREADY),
    .xmq_stream_TVALID(xmq_stream_TVALID),
    .xmq_stream_TREADY(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xmq_stream_TREADY),
    .xms_stream_TVALID(xms_stream_TVALID),
    .xms_stream_TREADY(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xms_stream_TREADY),
    .q_stream_TVALID(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_q_stream_TVALID),
    .q_stream_TREADY(q_stream_TREADY),
    .s_stream_TVALID(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_s_stream_TVALID),
    .s_stream_TREADY(s_stream_TREADY),
    .ap_done(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_done),
    .ap_ready(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_ready),
    .ap_idle(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_idle),
    .ap_continue(dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 2'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 2'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 2'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 2'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 2'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 2'd0) & (ap_start == 1'b0) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_continue = 1'b0;
    end
end

assign aq_stream_TREADY = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_aq_stream_TREADY;

assign as_stream_TREADY = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_as_stream_TREADY;

assign bound_minus_1 = (2'd2 - 2'd1);

assign dataflow_in_loop_VITIS_LOOP_153_2_1_U0_ap_start = ap_start;

assign q_stream_TDATA = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_q_stream_TDATA;

assign q_stream_TVALID = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_q_stream_TVALID;

assign s_stream_TDATA = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_s_stream_TDATA;

assign s_stream_TVALID = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_s_stream_TVALID;

assign xlnq_stream_TREADY = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xlnq_stream_TREADY;

assign xlns_stream_TREADY = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xlns_stream_TREADY;

assign xmq_stream_TREADY = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xmq_stream_TREADY;

assign xms_stream_TREADY = dataflow_in_loop_VITIS_LOOP_153_2_1_U0_xms_stream_TREADY;

endmodule //MUX_dataflow_parent_loop_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        xlnq_stream_TDATA,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlnq_buffered_stream_i_din,
        xlnq_buffered_stream_i_full_n,
        xlnq_buffered_stream_i_write,
        xlnq_buffered_stream_i_num_data_valid,
        xlnq_buffered_stream_i_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [14:0] p_read1;
input  [63:0] xlnq_stream_TDATA;
input   xlnq_stream_TVALID;
output   xlnq_stream_TREADY;
output  [511:0] xlnq_buffered_stream_i_din;
input   xlnq_buffered_stream_i_full_n;
output   xlnq_buffered_stream_i_write;
input  [2:0] xlnq_buffered_stream_i_num_data_valid;
input  [2:0] xlnq_buffered_stream_i_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xlnq_stream_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] p_read105_reg_167;
reg    ap_block_state1;
reg   [14:0] p_read_6_reg_171;
wire    ap_CS_fsm_state2;
wire   [21:0] sub_ln79_fu_141_p2;
reg   [21:0] sub_ln79_reg_177;
wire    ap_CS_fsm_state3;
wire    grp_do_buffer3_Pipeline_1_fu_94_ap_done;
reg    BUF_ce0;
wire   [63:0] BUF_q0;
reg    BUF_ce1;
reg    BUF_we1;
reg    BUF_22_ce0;
wire   [63:0] BUF_22_q0;
reg    BUF_22_ce1;
reg    BUF_22_we1;
reg    BUF_23_ce0;
wire   [63:0] BUF_23_q0;
reg    BUF_23_ce1;
reg    BUF_23_we1;
reg    BUF_24_ce0;
wire   [63:0] BUF_24_q0;
reg    BUF_24_ce1;
reg    BUF_24_we1;
reg    BUF_25_ce0;
wire   [63:0] BUF_25_q0;
reg    BUF_25_ce1;
reg    BUF_25_we1;
reg    BUF_26_ce0;
wire   [63:0] BUF_26_q0;
reg    BUF_26_ce1;
reg    BUF_26_we1;
reg    BUF_27_ce0;
wire   [63:0] BUF_27_q0;
reg    BUF_27_ce1;
reg    BUF_27_we1;
reg    BUF_28_ce0;
wire   [63:0] BUF_28_q0;
reg    BUF_28_ce1;
reg    BUF_28_we1;
wire    grp_do_buffer3_Pipeline_1_fu_94_ap_start;
wire    grp_do_buffer3_Pipeline_1_fu_94_ap_idle;
wire    grp_do_buffer3_Pipeline_1_fu_94_ap_ready;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_r_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_r_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_r_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_r_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_22_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_22_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_22_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_22_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_23_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_23_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_23_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_23_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_24_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_24_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_24_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_24_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_25_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_25_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_25_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_25_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_26_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_26_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_26_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_26_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_27_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_27_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_27_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_27_d1;
wire   [6:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_28_address1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_28_ce1;
wire    grp_do_buffer3_Pipeline_1_fu_94_BUF_28_we1;
wire   [63:0] grp_do_buffer3_Pipeline_1_fu_94_BUF_28_d1;
wire    grp_do_buffer3_Pipeline_1_fu_94_xlnq_stream_TREADY;
wire    grp_do_buffer3_Pipeline_2_fu_108_ap_start;
wire    grp_do_buffer3_Pipeline_2_fu_108_ap_done;
wire    grp_do_buffer3_Pipeline_2_fu_108_ap_idle;
wire    grp_do_buffer3_Pipeline_2_fu_108_ap_ready;
wire   [511:0] grp_do_buffer3_Pipeline_2_fu_108_xlnq_buffered_stream_i_din;
wire    grp_do_buffer3_Pipeline_2_fu_108_xlnq_buffered_stream_i_write;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_r_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_r_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_22_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_22_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_23_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_23_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_24_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_24_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_25_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_25_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_26_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_26_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_27_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_27_ce0;
wire   [6:0] grp_do_buffer3_Pipeline_2_fu_108_BUF_28_address0;
wire    grp_do_buffer3_Pipeline_2_fu_108_BUF_28_ce0;
reg    grp_do_buffer3_Pipeline_1_fu_94_ap_start_reg;
reg    grp_do_buffer3_Pipeline_2_fu_108_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [18:0] tmp_fu_130_p3;
wire   [21:0] p_shl_fu_123_p3;
wire   [21:0] zext_ln79_fu_137_p1;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_do_buffer3_Pipeline_1_fu_94_ap_start_reg = 1'b0;
//#0 grp_do_buffer3_Pipeline_2_fu_108_ap_start_reg = 1'b0;
end

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_r_address0),
    .ce0(BUF_ce0),
    .q0(BUF_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_r_address1),
    .ce1(BUF_ce1),
    .we1(BUF_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_r_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_22_address0),
    .ce0(BUF_22_ce0),
    .q0(BUF_22_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_22_address1),
    .ce1(BUF_22_ce1),
    .we1(BUF_22_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_22_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_23_address0),
    .ce0(BUF_23_ce0),
    .q0(BUF_23_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_23_address1),
    .ce1(BUF_23_ce1),
    .we1(BUF_23_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_23_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_24_address0),
    .ce0(BUF_24_ce0),
    .q0(BUF_24_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_24_address1),
    .ce1(BUF_24_ce1),
    .we1(BUF_24_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_24_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_25_address0),
    .ce0(BUF_25_ce0),
    .q0(BUF_25_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_25_address1),
    .ce1(BUF_25_ce1),
    .we1(BUF_25_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_25_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_26_address0),
    .ce0(BUF_26_ce0),
    .q0(BUF_26_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_26_address1),
    .ce1(BUF_26_ce1),
    .we1(BUF_26_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_26_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_27_address0),
    .ce0(BUF_27_ce0),
    .q0(BUF_27_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_27_address1),
    .ce1(BUF_27_ce1),
    .we1(BUF_27_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_27_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_28_address0),
    .ce0(BUF_28_ce0),
    .q0(BUF_28_q0),
    .address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_28_address1),
    .ce1(BUF_28_ce1),
    .we1(BUF_28_we1),
    .d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_28_d1)
);

MUX_do_buffer3_Pipeline_1 grp_do_buffer3_Pipeline_1_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer3_Pipeline_1_fu_94_ap_start),
    .ap_done(grp_do_buffer3_Pipeline_1_fu_94_ap_done),
    .ap_idle(grp_do_buffer3_Pipeline_1_fu_94_ap_idle),
    .ap_ready(grp_do_buffer3_Pipeline_1_fu_94_ap_ready),
    .xlnq_stream_TVALID(xlnq_stream_TVALID),
    .BUF_r_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_r_address1),
    .BUF_r_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_r_ce1),
    .BUF_r_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_r_we1),
    .BUF_r_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_r_d1),
    .BUF_22_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_22_address1),
    .BUF_22_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_22_ce1),
    .BUF_22_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_22_we1),
    .BUF_22_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_22_d1),
    .BUF_23_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_23_address1),
    .BUF_23_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_23_ce1),
    .BUF_23_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_23_we1),
    .BUF_23_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_23_d1),
    .BUF_24_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_24_address1),
    .BUF_24_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_24_ce1),
    .BUF_24_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_24_we1),
    .BUF_24_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_24_d1),
    .BUF_25_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_25_address1),
    .BUF_25_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_25_ce1),
    .BUF_25_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_25_we1),
    .BUF_25_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_25_d1),
    .BUF_26_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_26_address1),
    .BUF_26_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_26_ce1),
    .BUF_26_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_26_we1),
    .BUF_26_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_26_d1),
    .BUF_27_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_27_address1),
    .BUF_27_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_27_ce1),
    .BUF_27_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_27_we1),
    .BUF_27_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_27_d1),
    .BUF_28_address1(grp_do_buffer3_Pipeline_1_fu_94_BUF_28_address1),
    .BUF_28_ce1(grp_do_buffer3_Pipeline_1_fu_94_BUF_28_ce1),
    .BUF_28_we1(grp_do_buffer3_Pipeline_1_fu_94_BUF_28_we1),
    .BUF_28_d1(grp_do_buffer3_Pipeline_1_fu_94_BUF_28_d1),
    .xlnq_stream_TDATA(xlnq_stream_TDATA),
    .xlnq_stream_TREADY(grp_do_buffer3_Pipeline_1_fu_94_xlnq_stream_TREADY)
);

MUX_do_buffer3_Pipeline_2 grp_do_buffer3_Pipeline_2_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer3_Pipeline_2_fu_108_ap_start),
    .ap_done(grp_do_buffer3_Pipeline_2_fu_108_ap_done),
    .ap_idle(grp_do_buffer3_Pipeline_2_fu_108_ap_idle),
    .ap_ready(grp_do_buffer3_Pipeline_2_fu_108_ap_ready),
    .xlnq_buffered_stream_i_din(grp_do_buffer3_Pipeline_2_fu_108_xlnq_buffered_stream_i_din),
    .xlnq_buffered_stream_i_full_n(xlnq_buffered_stream_i_full_n),
    .xlnq_buffered_stream_i_write(grp_do_buffer3_Pipeline_2_fu_108_xlnq_buffered_stream_i_write),
    .xlnq_buffered_stream_i_num_data_valid(3'd0),
    .xlnq_buffered_stream_i_fifo_cap(3'd0),
    .mul_ln79(sub_ln79_reg_177),
    .BUF_r_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_r_address0),
    .BUF_r_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_r_ce0),
    .BUF_r_q0(BUF_q0),
    .BUF_22_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_22_address0),
    .BUF_22_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_22_ce0),
    .BUF_22_q0(BUF_22_q0),
    .BUF_23_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_23_address0),
    .BUF_23_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_23_ce0),
    .BUF_23_q0(BUF_23_q0),
    .BUF_24_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_24_address0),
    .BUF_24_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_24_ce0),
    .BUF_24_q0(BUF_24_q0),
    .BUF_25_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_25_address0),
    .BUF_25_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_25_ce0),
    .BUF_25_q0(BUF_25_q0),
    .BUF_26_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_26_address0),
    .BUF_26_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_26_ce0),
    .BUF_26_q0(BUF_26_q0),
    .BUF_27_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_27_address0),
    .BUF_27_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_27_ce0),
    .BUF_27_q0(BUF_27_q0),
    .BUF_28_address0(grp_do_buffer3_Pipeline_2_fu_108_BUF_28_address0),
    .BUF_28_ce0(grp_do_buffer3_Pipeline_2_fu_108_BUF_28_ce0),
    .BUF_28_q0(BUF_28_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer3_Pipeline_1_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_do_buffer3_Pipeline_1_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer3_Pipeline_1_fu_94_ap_ready == 1'b1)) begin
            grp_do_buffer3_Pipeline_1_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer3_Pipeline_2_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_buffer3_Pipeline_2_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer3_Pipeline_2_fu_108_ap_ready == 1'b1)) begin
            grp_do_buffer3_Pipeline_2_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read105_reg_167 <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_read_6_reg_171 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_do_buffer3_Pipeline_1_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln79_reg_177[21 : 4] <= sub_ln79_fu_141_p2[21 : 4];
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_22_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_22_ce0;
    end else begin
        BUF_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_22_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_22_ce1;
    end else begin
        BUF_22_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_22_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_22_we1;
    end else begin
        BUF_22_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_23_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_23_ce0;
    end else begin
        BUF_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_23_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_23_ce1;
    end else begin
        BUF_23_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_23_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_23_we1;
    end else begin
        BUF_23_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_24_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_24_ce0;
    end else begin
        BUF_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_24_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_24_ce1;
    end else begin
        BUF_24_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_24_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_24_we1;
    end else begin
        BUF_24_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_25_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_25_ce0;
    end else begin
        BUF_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_25_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_25_ce1;
    end else begin
        BUF_25_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_25_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_25_we1;
    end else begin
        BUF_25_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_26_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_26_ce0;
    end else begin
        BUF_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_26_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_26_ce1;
    end else begin
        BUF_26_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_26_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_26_we1;
    end else begin
        BUF_26_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_27_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_27_ce0;
    end else begin
        BUF_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_27_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_27_ce1;
    end else begin
        BUF_27_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_27_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_27_we1;
    end else begin
        BUF_27_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_28_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_28_ce0;
    end else begin
        BUF_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_28_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_28_ce1;
    end else begin
        BUF_28_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_28_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_28_we1;
    end else begin
        BUF_28_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_ce0 = grp_do_buffer3_Pipeline_2_fu_108_BUF_r_ce0;
    end else begin
        BUF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_ce1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_r_ce1;
    end else begin
        BUF_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_we1 = grp_do_buffer3_Pipeline_1_fu_94_BUF_r_we1;
    end else begin
        BUF_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_do_buffer3_Pipeline_1_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xlnq_stream_TREADY = grp_do_buffer3_Pipeline_1_fu_94_xlnq_stream_TREADY;
    end else begin
        xlnq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((p_read105_reg_167 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_do_buffer3_Pipeline_1_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((p_read105_reg_167 == 1'd1) & (grp_do_buffer3_Pipeline_2_fu_108_ap_done == 1'b0));
end

assign grp_do_buffer3_Pipeline_1_fu_94_ap_start = grp_do_buffer3_Pipeline_1_fu_94_ap_start_reg;

assign grp_do_buffer3_Pipeline_2_fu_108_ap_start = grp_do_buffer3_Pipeline_2_fu_108_ap_start_reg;

assign p_shl_fu_123_p3 = {{p_read_6_reg_171}, {7'd0}};

assign sub_ln79_fu_141_p2 = (p_shl_fu_123_p3 - zext_ln79_fu_137_p1);

assign tmp_fu_130_p3 = {{p_read_6_reg_171}, {4'd0}};

assign xlnq_buffered_stream_i_din = grp_do_buffer3_Pipeline_2_fu_108_xlnq_buffered_stream_i_din;

assign xlnq_buffered_stream_i_write = grp_do_buffer3_Pipeline_2_fu_108_xlnq_buffered_stream_i_write;

assign zext_ln79_fu_137_p1 = tmp_fu_130_p3;

always @ (posedge ap_clk) begin
    sub_ln79_reg_177[3:0] <= 4'b0000;
end

endmodule //MUX_do_buffer3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 64;
parameter AddressWidth = 7;
parameter AddressRange = 112;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer3_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xlnq_stream_TVALID,
        BUF_r_address1,
        BUF_r_ce1,
        BUF_r_we1,
        BUF_r_d1,
        BUF_22_address1,
        BUF_22_ce1,
        BUF_22_we1,
        BUF_22_d1,
        BUF_23_address1,
        BUF_23_ce1,
        BUF_23_we1,
        BUF_23_d1,
        BUF_24_address1,
        BUF_24_ce1,
        BUF_24_we1,
        BUF_24_d1,
        BUF_25_address1,
        BUF_25_ce1,
        BUF_25_we1,
        BUF_25_d1,
        BUF_26_address1,
        BUF_26_ce1,
        BUF_26_we1,
        BUF_26_d1,
        BUF_27_address1,
        BUF_27_ce1,
        BUF_27_we1,
        BUF_27_d1,
        BUF_28_address1,
        BUF_28_ce1,
        BUF_28_we1,
        BUF_28_d1,
        xlnq_stream_TDATA,
        xlnq_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xlnq_stream_TVALID;
output  [6:0] BUF_r_address1;
output   BUF_r_ce1;
output   BUF_r_we1;
output  [63:0] BUF_r_d1;
output  [6:0] BUF_22_address1;
output   BUF_22_ce1;
output   BUF_22_we1;
output  [63:0] BUF_22_d1;
output  [6:0] BUF_23_address1;
output   BUF_23_ce1;
output   BUF_23_we1;
output  [63:0] BUF_23_d1;
output  [6:0] BUF_24_address1;
output   BUF_24_ce1;
output   BUF_24_we1;
output  [63:0] BUF_24_d1;
output  [6:0] BUF_25_address1;
output   BUF_25_ce1;
output   BUF_25_we1;
output  [63:0] BUF_25_d1;
output  [6:0] BUF_26_address1;
output   BUF_26_ce1;
output   BUF_26_we1;
output  [63:0] BUF_26_d1;
output  [6:0] BUF_27_address1;
output   BUF_27_ce1;
output   BUF_27_we1;
output  [63:0] BUF_27_d1;
output  [6:0] BUF_28_address1;
output   BUF_28_ce1;
output   BUF_28_we1;
output  [63:0] BUF_28_d1;
input  [63:0] xlnq_stream_TDATA;
output   xlnq_stream_TREADY;

reg ap_idle;
reg xlnq_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln32_reg_363;
reg   [0:0] icmp_ln32_reg_363_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln32_fu_260_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xlnq_stream_TDATA_blk_n;
wire   [0:0] icmp_ln32_reg_363_pp0_iter0_reg;
wire   [6:0] select_ln32_fu_295_p3;
reg   [6:0] select_ln32_reg_367;
wire   [2:0] trunc_ln32_fu_311_p1;
reg   [2:0] trunc_ln32_reg_372;
wire   [2:0] trunc_ln32_reg_372_pp0_iter1_reg;
wire   [63:0] zext_ln33_fu_331_p1;
reg   [6:0] ct_fu_80;
wire   [6:0] add_ln33_fu_315_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_84;
wire   [3:0] select_ln32_4_fu_303_p3;
reg   [9:0] indvar_flatten_fu_88;
wire   [9:0] add_ln32_4_fu_266_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg    BUF_27_we1_local;
reg    BUF_27_ce1_local;
reg    BUF_26_we1_local;
reg    BUF_26_ce1_local;
reg    BUF_25_we1_local;
reg    BUF_25_ce1_local;
reg    BUF_24_we1_local;
reg    BUF_24_ce1_local;
reg    BUF_23_we1_local;
reg    BUF_23_ce1_local;
reg    BUF_22_we1_local;
reg    BUF_22_ce1_local;
reg    BUF_r_we1_local;
reg    BUF_r_ce1_local;
reg    BUF_28_we1_local;
reg    BUF_28_ce1_local;
wire   [0:0] icmp_ln33_fu_289_p2;
wire   [3:0] add_ln32_fu_283_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_80 = 7'd0;
//#0 tt_fu_84 = 4'd0;
//#0 indvar_flatten_fu_88 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_80 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln32_reg_363_pp0_iter0_reg == 1'd0))) begin
        ct_fu_80 <= add_ln33_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln32_fu_260_p2 == 1'd0)) begin
            indvar_flatten_fu_88 <= add_ln32_4_fu_266_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_84 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln32_reg_363_pp0_iter0_reg == 1'd0))) begin
        tt_fu_84 <= select_ln32_4_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln32_reg_363 <= icmp_ln32_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln32_reg_363_pp0_iter1_reg <= icmp_ln32_reg_363;
        select_ln32_reg_367 <= select_ln32_fu_295_p3;
        trunc_ln32_reg_372 <= trunc_ln32_fu_311_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_22_ce1_local = 1'b1;
    end else begin
        BUF_22_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd1))) begin
        BUF_22_we1_local = 1'b1;
    end else begin
        BUF_22_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_23_ce1_local = 1'b1;
    end else begin
        BUF_23_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd2))) begin
        BUF_23_we1_local = 1'b1;
    end else begin
        BUF_23_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_24_ce1_local = 1'b1;
    end else begin
        BUF_24_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd3))) begin
        BUF_24_we1_local = 1'b1;
    end else begin
        BUF_24_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_25_ce1_local = 1'b1;
    end else begin
        BUF_25_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd4))) begin
        BUF_25_we1_local = 1'b1;
    end else begin
        BUF_25_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_26_ce1_local = 1'b1;
    end else begin
        BUF_26_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd5))) begin
        BUF_26_we1_local = 1'b1;
    end else begin
        BUF_26_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_27_ce1_local = 1'b1;
    end else begin
        BUF_27_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd6))) begin
        BUF_27_we1_local = 1'b1;
    end else begin
        BUF_27_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_28_ce1_local = 1'b1;
    end else begin
        BUF_28_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd7))) begin
        BUF_28_we1_local = 1'b1;
    end else begin
        BUF_28_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_r_ce1_local = 1'b1;
    end else begin
        BUF_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_372_pp0_iter1_reg == 3'd0))) begin
        BUF_r_we1_local = 1'b1;
    end else begin
        BUF_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln32_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        xlnq_stream_TDATA_blk_n = xlnq_stream_TVALID;
    end else begin
        xlnq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        xlnq_stream_TREADY = 1'b1;
    end else begin
        xlnq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln32_reg_363_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_22_address1 = zext_ln33_fu_331_p1;

assign BUF_22_ce1 = BUF_22_ce1_local;

assign BUF_22_d1 = xlnq_stream_TDATA;

assign BUF_22_we1 = BUF_22_we1_local;

assign BUF_23_address1 = zext_ln33_fu_331_p1;

assign BUF_23_ce1 = BUF_23_ce1_local;

assign BUF_23_d1 = xlnq_stream_TDATA;

assign BUF_23_we1 = BUF_23_we1_local;

assign BUF_24_address1 = zext_ln33_fu_331_p1;

assign BUF_24_ce1 = BUF_24_ce1_local;

assign BUF_24_d1 = xlnq_stream_TDATA;

assign BUF_24_we1 = BUF_24_we1_local;

assign BUF_25_address1 = zext_ln33_fu_331_p1;

assign BUF_25_ce1 = BUF_25_ce1_local;

assign BUF_25_d1 = xlnq_stream_TDATA;

assign BUF_25_we1 = BUF_25_we1_local;

assign BUF_26_address1 = zext_ln33_fu_331_p1;

assign BUF_26_ce1 = BUF_26_ce1_local;

assign BUF_26_d1 = xlnq_stream_TDATA;

assign BUF_26_we1 = BUF_26_we1_local;

assign BUF_27_address1 = zext_ln33_fu_331_p1;

assign BUF_27_ce1 = BUF_27_ce1_local;

assign BUF_27_d1 = xlnq_stream_TDATA;

assign BUF_27_we1 = BUF_27_we1_local;

assign BUF_28_address1 = zext_ln33_fu_331_p1;

assign BUF_28_ce1 = BUF_28_ce1_local;

assign BUF_28_d1 = xlnq_stream_TDATA;

assign BUF_28_we1 = BUF_28_we1_local;

assign BUF_r_address1 = zext_ln33_fu_331_p1;

assign BUF_r_ce1 = BUF_r_ce1_local;

assign BUF_r_d1 = xlnq_stream_TDATA;

assign BUF_r_we1 = BUF_r_we1_local;

assign add_ln32_4_fu_266_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln32_fu_283_p2 = (tt_fu_84 + 4'd1);

assign add_ln33_fu_315_p2 = (select_ln32_fu_295_p3 + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln32_reg_363_pp0_iter1_reg == 1'd0) & (xlnq_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln32_fu_260_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln32_reg_363_pp0_iter0_reg = icmp_ln32_reg_363;

assign icmp_ln33_fu_289_p2 = ((ct_fu_80 == 7'd112) ? 1'b1 : 1'b0);

assign select_ln32_4_fu_303_p3 = ((icmp_ln33_fu_289_p2[0:0] == 1'b1) ? add_ln32_fu_283_p2 : tt_fu_84);

assign select_ln32_fu_295_p3 = ((icmp_ln33_fu_289_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_80);

assign trunc_ln32_fu_311_p1 = select_ln32_4_fu_303_p3[2:0];

assign trunc_ln32_reg_372_pp0_iter1_reg = trunc_ln32_reg_372;

assign zext_ln33_fu_331_p1 = select_ln32_reg_367;

endmodule //MUX_do_buffer3_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer3_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xlnq_buffered_stream_i_din,
        xlnq_buffered_stream_i_full_n,
        xlnq_buffered_stream_i_write,
        xlnq_buffered_stream_i_num_data_valid,
        xlnq_buffered_stream_i_fifo_cap,
        mul_ln79,
        BUF_r_address0,
        BUF_r_ce0,
        BUF_r_q0,
        BUF_22_address0,
        BUF_22_ce0,
        BUF_22_q0,
        BUF_23_address0,
        BUF_23_ce0,
        BUF_23_q0,
        BUF_24_address0,
        BUF_24_ce0,
        BUF_24_q0,
        BUF_25_address0,
        BUF_25_ce0,
        BUF_25_q0,
        BUF_26_address0,
        BUF_26_ce0,
        BUF_26_q0,
        BUF_27_address0,
        BUF_27_ce0,
        BUF_27_q0,
        BUF_28_address0,
        BUF_28_ce0,
        BUF_28_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [511:0] xlnq_buffered_stream_i_din;
input   xlnq_buffered_stream_i_full_n;
output   xlnq_buffered_stream_i_write;
input  [2:0] xlnq_buffered_stream_i_num_data_valid;
input  [2:0] xlnq_buffered_stream_i_fifo_cap;
input  [21:0] mul_ln79;
output  [6:0] BUF_r_address0;
output   BUF_r_ce0;
input  [63:0] BUF_r_q0;
output  [6:0] BUF_22_address0;
output   BUF_22_ce0;
input  [63:0] BUF_22_q0;
output  [6:0] BUF_23_address0;
output   BUF_23_ce0;
input  [63:0] BUF_23_q0;
output  [6:0] BUF_24_address0;
output   BUF_24_ce0;
input  [63:0] BUF_24_q0;
output  [6:0] BUF_25_address0;
output   BUF_25_ce0;
input  [63:0] BUF_25_q0;
output  [6:0] BUF_26_address0;
output   BUF_26_ce0;
input  [63:0] BUF_26_q0;
output  [6:0] BUF_27_address0;
output   BUF_27_ce0;
input  [63:0] BUF_27_q0;
output  [6:0] BUF_28_address0;
output   BUF_28_ce0;
input  [63:0] BUF_28_q0;

reg ap_idle;
reg xlnq_buffered_stream_i_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln79_reg_294;
reg   [0:0] icmp_ln79_reg_294_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln79_fu_202_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xlnq_buffered_stream_i_blk_n;
wire   [0:0] icmp_ln79_reg_294_pp0_iter0_reg;
wire   [63:0] zext_ln80_fu_236_p1;
reg   [6:0] ct_fu_64;
wire   [6:0] add_ln80_fu_248_p2;
wire    ap_loop_init;
reg   [21:0] indvar_flatten6_fu_68;
wire   [21:0] add_ln79_fu_208_p2;
reg   [21:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    BUF_r_ce0_local;
reg    BUF_22_ce0_local;
reg    BUF_23_ce0_local;
reg    BUF_24_ce0_local;
reg    BUF_25_ce0_local;
reg    BUF_26_ce0_local;
reg    BUF_27_ce0_local;
reg    BUF_28_ce0_local;
wire   [0:0] icmp_ln80_fu_222_p2;
wire   [6:0] select_ln79_fu_228_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_64 = 7'd0;
//#0 indvar_flatten6_fu_68 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_64 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln79_reg_294_pp0_iter0_reg == 1'd0))) begin
        ct_fu_64 <= add_ln80_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln79_fu_202_p2 == 1'd0)) begin
            indvar_flatten6_fu_68 <= add_ln79_fu_208_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_68 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln79_reg_294 <= icmp_ln79_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln79_reg_294_pp0_iter1_reg <= icmp_ln79_reg_294;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_22_ce0_local = 1'b1;
    end else begin
        BUF_22_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_23_ce0_local = 1'b1;
    end else begin
        BUF_23_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_24_ce0_local = 1'b1;
    end else begin
        BUF_24_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_25_ce0_local = 1'b1;
    end else begin
        BUF_25_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_26_ce0_local = 1'b1;
    end else begin
        BUF_26_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_27_ce0_local = 1'b1;
    end else begin
        BUF_27_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_28_ce0_local = 1'b1;
    end else begin
        BUF_28_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_r_ce0_local = 1'b1;
    end else begin
        BUF_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln79_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 22'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_68;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_294_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        xlnq_buffered_stream_i_blk_n = xlnq_buffered_stream_i_full_n;
    end else begin
        xlnq_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_294_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        xlnq_buffered_stream_i_write = 1'b1;
    end else begin
        xlnq_buffered_stream_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln79_reg_294_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_22_address0 = zext_ln80_fu_236_p1;

assign BUF_22_ce0 = BUF_22_ce0_local;

assign BUF_23_address0 = zext_ln80_fu_236_p1;

assign BUF_23_ce0 = BUF_23_ce0_local;

assign BUF_24_address0 = zext_ln80_fu_236_p1;

assign BUF_24_ce0 = BUF_24_ce0_local;

assign BUF_25_address0 = zext_ln80_fu_236_p1;

assign BUF_25_ce0 = BUF_25_ce0_local;

assign BUF_26_address0 = zext_ln80_fu_236_p1;

assign BUF_26_ce0 = BUF_26_ce0_local;

assign BUF_27_address0 = zext_ln80_fu_236_p1;

assign BUF_27_ce0 = BUF_27_ce0_local;

assign BUF_28_address0 = zext_ln80_fu_236_p1;

assign BUF_28_ce0 = BUF_28_ce0_local;

assign BUF_r_address0 = zext_ln80_fu_236_p1;

assign BUF_r_ce0 = BUF_r_ce0_local;

assign add_ln79_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 22'd1);

assign add_ln80_fu_248_p2 = (select_ln79_fu_228_p3 + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln79_reg_294_pp0_iter1_reg == 1'd0) & (xlnq_buffered_stream_i_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln79_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == mul_ln79) ? 1'b1 : 1'b0);

assign icmp_ln79_reg_294_pp0_iter0_reg = icmp_ln79_reg_294;

assign icmp_ln80_fu_222_p2 = ((ct_fu_64 == 7'd112) ? 1'b1 : 1'b0);

assign select_ln79_fu_228_p3 = ((icmp_ln80_fu_222_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_64);

assign xlnq_buffered_stream_i_din = {{{{{{{{BUF_28_q0}, {BUF_27_q0}}, {BUF_26_q0}}, {BUF_25_q0}}, {BUF_24_q0}}, {BUF_23_q0}}, {BUF_22_q0}}, {BUF_r_q0}};

assign zext_ln80_fu_236_p1 = select_ln79_fu_228_p3;

endmodule //MUX_do_buffer3_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        xlns_stream_TDATA,
        xlns_stream_TVALID,
        xlns_stream_TREADY,
        xlns_buffered_stream_i_din,
        xlns_buffered_stream_i_full_n,
        xlns_buffered_stream_i_write,
        xlns_buffered_stream_i_num_data_valid,
        xlns_buffered_stream_i_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [14:0] p_read1;
input  [7:0] xlns_stream_TDATA;
input   xlns_stream_TVALID;
output   xlns_stream_TREADY;
output  [31:0] xlns_buffered_stream_i_din;
input   xlns_buffered_stream_i_full_n;
output   xlns_buffered_stream_i_write;
input  [2:0] xlns_buffered_stream_i_num_data_valid;
input  [2:0] xlns_buffered_stream_i_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xlns_stream_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] p_read105_reg_167;
reg    ap_block_state1;
reg   [14:0] p_read_5_reg_171;
wire    ap_CS_fsm_state2;
wire   [21:0] sub_ln79_fu_141_p2;
reg   [21:0] sub_ln79_reg_177;
wire    ap_CS_fsm_state3;
wire    grp_do_buffer4_Pipeline_1_fu_94_ap_done;
reg    BUF_ce0;
wire   [3:0] BUF_q0;
reg    BUF_ce1;
reg    BUF_we1;
reg    BUF_15_ce0;
wire   [3:0] BUF_15_q0;
reg    BUF_15_ce1;
reg    BUF_15_we1;
reg    BUF_16_ce0;
wire   [3:0] BUF_16_q0;
reg    BUF_16_ce1;
reg    BUF_16_we1;
reg    BUF_17_ce0;
wire   [3:0] BUF_17_q0;
reg    BUF_17_ce1;
reg    BUF_17_we1;
reg    BUF_18_ce0;
wire   [3:0] BUF_18_q0;
reg    BUF_18_ce1;
reg    BUF_18_we1;
reg    BUF_19_ce0;
wire   [3:0] BUF_19_q0;
reg    BUF_19_ce1;
reg    BUF_19_we1;
reg    BUF_20_ce0;
wire   [3:0] BUF_20_q0;
reg    BUF_20_ce1;
reg    BUF_20_we1;
reg    BUF_21_ce0;
wire   [3:0] BUF_21_q0;
reg    BUF_21_ce1;
reg    BUF_21_we1;
wire    grp_do_buffer4_Pipeline_1_fu_94_ap_start;
wire    grp_do_buffer4_Pipeline_1_fu_94_ap_idle;
wire    grp_do_buffer4_Pipeline_1_fu_94_ap_ready;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_r_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_r_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_r_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_r_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_15_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_15_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_15_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_15_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_16_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_16_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_16_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_16_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_17_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_17_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_17_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_17_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_18_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_18_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_18_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_18_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_19_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_19_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_19_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_19_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_20_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_20_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_20_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_20_d1;
wire   [6:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_21_address1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_21_ce1;
wire    grp_do_buffer4_Pipeline_1_fu_94_BUF_21_we1;
wire   [3:0] grp_do_buffer4_Pipeline_1_fu_94_BUF_21_d1;
wire    grp_do_buffer4_Pipeline_1_fu_94_xlns_stream_TREADY;
wire    grp_do_buffer4_Pipeline_2_fu_108_ap_start;
wire    grp_do_buffer4_Pipeline_2_fu_108_ap_done;
wire    grp_do_buffer4_Pipeline_2_fu_108_ap_idle;
wire    grp_do_buffer4_Pipeline_2_fu_108_ap_ready;
wire   [31:0] grp_do_buffer4_Pipeline_2_fu_108_xlns_buffered_stream_i_din;
wire    grp_do_buffer4_Pipeline_2_fu_108_xlns_buffered_stream_i_write;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_r_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_r_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_15_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_15_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_16_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_16_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_17_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_17_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_18_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_18_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_19_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_19_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_20_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_20_ce0;
wire   [6:0] grp_do_buffer4_Pipeline_2_fu_108_BUF_21_address0;
wire    grp_do_buffer4_Pipeline_2_fu_108_BUF_21_ce0;
reg    grp_do_buffer4_Pipeline_1_fu_94_ap_start_reg;
reg    grp_do_buffer4_Pipeline_2_fu_108_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [18:0] tmp_fu_130_p3;
wire   [21:0] p_shl_fu_123_p3;
wire   [21:0] zext_ln79_fu_137_p1;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_do_buffer4_Pipeline_1_fu_94_ap_start_reg = 1'b0;
//#0 grp_do_buffer4_Pipeline_2_fu_108_ap_start_reg = 1'b0;
end

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_r_address0),
    .ce0(BUF_ce0),
    .q0(BUF_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_r_address1),
    .ce1(BUF_ce1),
    .we1(BUF_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_r_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_15_address0),
    .ce0(BUF_15_ce0),
    .q0(BUF_15_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_15_address1),
    .ce1(BUF_15_ce1),
    .we1(BUF_15_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_15_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_16_address0),
    .ce0(BUF_16_ce0),
    .q0(BUF_16_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_16_address1),
    .ce1(BUF_16_ce1),
    .we1(BUF_16_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_16_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_17_address0),
    .ce0(BUF_17_ce0),
    .q0(BUF_17_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_17_address1),
    .ce1(BUF_17_ce1),
    .we1(BUF_17_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_17_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_18_address0),
    .ce0(BUF_18_ce0),
    .q0(BUF_18_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_18_address1),
    .ce1(BUF_18_ce1),
    .we1(BUF_18_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_18_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_19_address0),
    .ce0(BUF_19_ce0),
    .q0(BUF_19_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_19_address1),
    .ce1(BUF_19_ce1),
    .we1(BUF_19_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_19_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_20_address0),
    .ce0(BUF_20_ce0),
    .q0(BUF_20_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_20_address1),
    .ce1(BUF_20_ce1),
    .we1(BUF_20_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_20_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_21_address0),
    .ce0(BUF_21_ce0),
    .q0(BUF_21_q0),
    .address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_21_address1),
    .ce1(BUF_21_ce1),
    .we1(BUF_21_we1),
    .d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_21_d1)
);

MUX_do_buffer4_Pipeline_1 grp_do_buffer4_Pipeline_1_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer4_Pipeline_1_fu_94_ap_start),
    .ap_done(grp_do_buffer4_Pipeline_1_fu_94_ap_done),
    .ap_idle(grp_do_buffer4_Pipeline_1_fu_94_ap_idle),
    .ap_ready(grp_do_buffer4_Pipeline_1_fu_94_ap_ready),
    .xlns_stream_TVALID(xlns_stream_TVALID),
    .BUF_r_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_r_address1),
    .BUF_r_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_r_ce1),
    .BUF_r_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_r_we1),
    .BUF_r_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_r_d1),
    .BUF_15_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_15_address1),
    .BUF_15_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_15_ce1),
    .BUF_15_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_15_we1),
    .BUF_15_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_15_d1),
    .BUF_16_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_16_address1),
    .BUF_16_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_16_ce1),
    .BUF_16_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_16_we1),
    .BUF_16_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_16_d1),
    .BUF_17_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_17_address1),
    .BUF_17_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_17_ce1),
    .BUF_17_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_17_we1),
    .BUF_17_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_17_d1),
    .BUF_18_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_18_address1),
    .BUF_18_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_18_ce1),
    .BUF_18_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_18_we1),
    .BUF_18_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_18_d1),
    .BUF_19_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_19_address1),
    .BUF_19_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_19_ce1),
    .BUF_19_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_19_we1),
    .BUF_19_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_19_d1),
    .BUF_20_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_20_address1),
    .BUF_20_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_20_ce1),
    .BUF_20_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_20_we1),
    .BUF_20_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_20_d1),
    .BUF_21_address1(grp_do_buffer4_Pipeline_1_fu_94_BUF_21_address1),
    .BUF_21_ce1(grp_do_buffer4_Pipeline_1_fu_94_BUF_21_ce1),
    .BUF_21_we1(grp_do_buffer4_Pipeline_1_fu_94_BUF_21_we1),
    .BUF_21_d1(grp_do_buffer4_Pipeline_1_fu_94_BUF_21_d1),
    .xlns_stream_TDATA(xlns_stream_TDATA),
    .xlns_stream_TREADY(grp_do_buffer4_Pipeline_1_fu_94_xlns_stream_TREADY)
);

MUX_do_buffer4_Pipeline_2 grp_do_buffer4_Pipeline_2_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer4_Pipeline_2_fu_108_ap_start),
    .ap_done(grp_do_buffer4_Pipeline_2_fu_108_ap_done),
    .ap_idle(grp_do_buffer4_Pipeline_2_fu_108_ap_idle),
    .ap_ready(grp_do_buffer4_Pipeline_2_fu_108_ap_ready),
    .xlns_buffered_stream_i_din(grp_do_buffer4_Pipeline_2_fu_108_xlns_buffered_stream_i_din),
    .xlns_buffered_stream_i_full_n(xlns_buffered_stream_i_full_n),
    .xlns_buffered_stream_i_write(grp_do_buffer4_Pipeline_2_fu_108_xlns_buffered_stream_i_write),
    .xlns_buffered_stream_i_num_data_valid(3'd0),
    .xlns_buffered_stream_i_fifo_cap(3'd0),
    .mul_ln79(sub_ln79_reg_177),
    .BUF_r_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_r_address0),
    .BUF_r_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_r_ce0),
    .BUF_r_q0(BUF_q0),
    .BUF_15_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_15_address0),
    .BUF_15_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_15_ce0),
    .BUF_15_q0(BUF_15_q0),
    .BUF_16_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_16_address0),
    .BUF_16_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_16_ce0),
    .BUF_16_q0(BUF_16_q0),
    .BUF_17_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_17_address0),
    .BUF_17_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_17_ce0),
    .BUF_17_q0(BUF_17_q0),
    .BUF_18_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_18_address0),
    .BUF_18_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_18_ce0),
    .BUF_18_q0(BUF_18_q0),
    .BUF_19_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_19_address0),
    .BUF_19_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_19_ce0),
    .BUF_19_q0(BUF_19_q0),
    .BUF_20_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_20_address0),
    .BUF_20_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_20_ce0),
    .BUF_20_q0(BUF_20_q0),
    .BUF_21_address0(grp_do_buffer4_Pipeline_2_fu_108_BUF_21_address0),
    .BUF_21_ce0(grp_do_buffer4_Pipeline_2_fu_108_BUF_21_ce0),
    .BUF_21_q0(BUF_21_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer4_Pipeline_1_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_do_buffer4_Pipeline_1_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer4_Pipeline_1_fu_94_ap_ready == 1'b1)) begin
            grp_do_buffer4_Pipeline_1_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer4_Pipeline_2_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_buffer4_Pipeline_2_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer4_Pipeline_2_fu_108_ap_ready == 1'b1)) begin
            grp_do_buffer4_Pipeline_2_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read105_reg_167 <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_read_5_reg_171 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_do_buffer4_Pipeline_1_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln79_reg_177[21 : 4] <= sub_ln79_fu_141_p2[21 : 4];
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_15_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_15_ce0;
    end else begin
        BUF_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_15_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_15_ce1;
    end else begin
        BUF_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_15_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_15_we1;
    end else begin
        BUF_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_16_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_16_ce0;
    end else begin
        BUF_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_16_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_16_ce1;
    end else begin
        BUF_16_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_16_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_16_we1;
    end else begin
        BUF_16_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_17_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_17_ce0;
    end else begin
        BUF_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_17_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_17_ce1;
    end else begin
        BUF_17_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_17_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_17_we1;
    end else begin
        BUF_17_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_18_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_18_ce0;
    end else begin
        BUF_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_18_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_18_ce1;
    end else begin
        BUF_18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_18_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_18_we1;
    end else begin
        BUF_18_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_19_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_19_ce0;
    end else begin
        BUF_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_19_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_19_ce1;
    end else begin
        BUF_19_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_19_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_19_we1;
    end else begin
        BUF_19_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_20_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_20_ce0;
    end else begin
        BUF_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_20_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_20_ce1;
    end else begin
        BUF_20_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_20_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_20_we1;
    end else begin
        BUF_20_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_21_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_21_ce0;
    end else begin
        BUF_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_21_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_21_ce1;
    end else begin
        BUF_21_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_21_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_21_we1;
    end else begin
        BUF_21_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read105_reg_167 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_ce0 = grp_do_buffer4_Pipeline_2_fu_108_BUF_r_ce0;
    end else begin
        BUF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_ce1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_r_ce1;
    end else begin
        BUF_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_we1 = grp_do_buffer4_Pipeline_1_fu_94_BUF_r_we1;
    end else begin
        BUF_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_do_buffer4_Pipeline_1_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xlns_stream_TREADY = grp_do_buffer4_Pipeline_1_fu_94_xlns_stream_TREADY;
    end else begin
        xlns_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((p_read105_reg_167 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_do_buffer4_Pipeline_1_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((p_read105_reg_167 == 1'd1) & (grp_do_buffer4_Pipeline_2_fu_108_ap_done == 1'b0));
end

assign grp_do_buffer4_Pipeline_1_fu_94_ap_start = grp_do_buffer4_Pipeline_1_fu_94_ap_start_reg;

assign grp_do_buffer4_Pipeline_2_fu_108_ap_start = grp_do_buffer4_Pipeline_2_fu_108_ap_start_reg;

assign p_shl_fu_123_p3 = {{p_read_5_reg_171}, {7'd0}};

assign sub_ln79_fu_141_p2 = (p_shl_fu_123_p3 - zext_ln79_fu_137_p1);

assign tmp_fu_130_p3 = {{p_read_5_reg_171}, {4'd0}};

assign xlns_buffered_stream_i_din = grp_do_buffer4_Pipeline_2_fu_108_xlns_buffered_stream_i_din;

assign xlns_buffered_stream_i_write = grp_do_buffer4_Pipeline_2_fu_108_xlns_buffered_stream_i_write;

assign zext_ln79_fu_137_p1 = tmp_fu_130_p3;

always @ (posedge ap_clk) begin
    sub_ln79_reg_177[3:0] <= 4'b0000;
end

endmodule //MUX_do_buffer4
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 7;
parameter AddressRange = 112;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer4_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xlns_stream_TVALID,
        BUF_r_address1,
        BUF_r_ce1,
        BUF_r_we1,
        BUF_r_d1,
        BUF_15_address1,
        BUF_15_ce1,
        BUF_15_we1,
        BUF_15_d1,
        BUF_16_address1,
        BUF_16_ce1,
        BUF_16_we1,
        BUF_16_d1,
        BUF_17_address1,
        BUF_17_ce1,
        BUF_17_we1,
        BUF_17_d1,
        BUF_18_address1,
        BUF_18_ce1,
        BUF_18_we1,
        BUF_18_d1,
        BUF_19_address1,
        BUF_19_ce1,
        BUF_19_we1,
        BUF_19_d1,
        BUF_20_address1,
        BUF_20_ce1,
        BUF_20_we1,
        BUF_20_d1,
        BUF_21_address1,
        BUF_21_ce1,
        BUF_21_we1,
        BUF_21_d1,
        xlns_stream_TDATA,
        xlns_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xlns_stream_TVALID;
output  [6:0] BUF_r_address1;
output   BUF_r_ce1;
output   BUF_r_we1;
output  [3:0] BUF_r_d1;
output  [6:0] BUF_15_address1;
output   BUF_15_ce1;
output   BUF_15_we1;
output  [3:0] BUF_15_d1;
output  [6:0] BUF_16_address1;
output   BUF_16_ce1;
output   BUF_16_we1;
output  [3:0] BUF_16_d1;
output  [6:0] BUF_17_address1;
output   BUF_17_ce1;
output   BUF_17_we1;
output  [3:0] BUF_17_d1;
output  [6:0] BUF_18_address1;
output   BUF_18_ce1;
output   BUF_18_we1;
output  [3:0] BUF_18_d1;
output  [6:0] BUF_19_address1;
output   BUF_19_ce1;
output   BUF_19_we1;
output  [3:0] BUF_19_d1;
output  [6:0] BUF_20_address1;
output   BUF_20_ce1;
output   BUF_20_we1;
output  [3:0] BUF_20_d1;
output  [6:0] BUF_21_address1;
output   BUF_21_ce1;
output   BUF_21_we1;
output  [3:0] BUF_21_d1;
input  [7:0] xlns_stream_TDATA;
output   xlns_stream_TREADY;

reg ap_idle;
reg xlns_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln32_reg_367;
reg   [0:0] icmp_ln32_reg_367_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln32_fu_252_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xlns_stream_TDATA_blk_n;
wire   [0:0] icmp_ln32_reg_367_pp0_iter0_reg;
wire   [6:0] select_ln32_fu_287_p3;
reg   [6:0] select_ln32_reg_371;
wire   [2:0] trunc_ln32_fu_303_p1;
reg   [2:0] trunc_ln32_reg_376;
wire   [2:0] trunc_ln32_reg_376_pp0_iter1_reg;
wire   [63:0] zext_ln33_fu_323_p1;
reg   [6:0] ct_fu_80;
wire   [6:0] add_ln33_fu_307_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_84;
wire   [3:0] select_ln32_3_fu_295_p3;
reg   [9:0] indvar_flatten_fu_88;
wire   [9:0] add_ln32_3_fu_258_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg    BUF_20_we1_local;
wire   [3:0] trunc_ln36_fu_334_p1;
reg    BUF_20_ce1_local;
reg    BUF_19_we1_local;
reg    BUF_19_ce1_local;
reg    BUF_18_we1_local;
reg    BUF_18_ce1_local;
reg    BUF_17_we1_local;
reg    BUF_17_ce1_local;
reg    BUF_16_we1_local;
reg    BUF_16_ce1_local;
reg    BUF_15_we1_local;
reg    BUF_15_ce1_local;
reg    BUF_r_we1_local;
reg    BUF_r_ce1_local;
reg    BUF_21_we1_local;
reg    BUF_21_ce1_local;
wire   [0:0] icmp_ln33_fu_281_p2;
wire   [3:0] add_ln32_fu_275_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_80 = 7'd0;
//#0 tt_fu_84 = 4'd0;
//#0 indvar_flatten_fu_88 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_80 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln32_reg_367_pp0_iter0_reg == 1'd0))) begin
        ct_fu_80 <= add_ln33_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln32_fu_252_p2 == 1'd0)) begin
            indvar_flatten_fu_88 <= add_ln32_3_fu_258_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_84 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln32_reg_367_pp0_iter0_reg == 1'd0))) begin
        tt_fu_84 <= select_ln32_3_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln32_reg_367 <= icmp_ln32_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln32_reg_367_pp0_iter1_reg <= icmp_ln32_reg_367;
        select_ln32_reg_371 <= select_ln32_fu_287_p3;
        trunc_ln32_reg_376 <= trunc_ln32_fu_303_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_15_ce1_local = 1'b1;
    end else begin
        BUF_15_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd1))) begin
        BUF_15_we1_local = 1'b1;
    end else begin
        BUF_15_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_16_ce1_local = 1'b1;
    end else begin
        BUF_16_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd2))) begin
        BUF_16_we1_local = 1'b1;
    end else begin
        BUF_16_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_17_ce1_local = 1'b1;
    end else begin
        BUF_17_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd3))) begin
        BUF_17_we1_local = 1'b1;
    end else begin
        BUF_17_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_18_ce1_local = 1'b1;
    end else begin
        BUF_18_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd4))) begin
        BUF_18_we1_local = 1'b1;
    end else begin
        BUF_18_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_19_ce1_local = 1'b1;
    end else begin
        BUF_19_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd5))) begin
        BUF_19_we1_local = 1'b1;
    end else begin
        BUF_19_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_20_ce1_local = 1'b1;
    end else begin
        BUF_20_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd6))) begin
        BUF_20_we1_local = 1'b1;
    end else begin
        BUF_20_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_21_ce1_local = 1'b1;
    end else begin
        BUF_21_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd7))) begin
        BUF_21_we1_local = 1'b1;
    end else begin
        BUF_21_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_r_ce1_local = 1'b1;
    end else begin
        BUF_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_376_pp0_iter1_reg == 3'd0))) begin
        BUF_r_we1_local = 1'b1;
    end else begin
        BUF_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln32_fu_252_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        xlns_stream_TDATA_blk_n = xlns_stream_TVALID;
    end else begin
        xlns_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        xlns_stream_TREADY = 1'b1;
    end else begin
        xlns_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln32_reg_367_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_15_address1 = zext_ln33_fu_323_p1;

assign BUF_15_ce1 = BUF_15_ce1_local;

assign BUF_15_d1 = trunc_ln36_fu_334_p1;

assign BUF_15_we1 = BUF_15_we1_local;

assign BUF_16_address1 = zext_ln33_fu_323_p1;

assign BUF_16_ce1 = BUF_16_ce1_local;

assign BUF_16_d1 = trunc_ln36_fu_334_p1;

assign BUF_16_we1 = BUF_16_we1_local;

assign BUF_17_address1 = zext_ln33_fu_323_p1;

assign BUF_17_ce1 = BUF_17_ce1_local;

assign BUF_17_d1 = trunc_ln36_fu_334_p1;

assign BUF_17_we1 = BUF_17_we1_local;

assign BUF_18_address1 = zext_ln33_fu_323_p1;

assign BUF_18_ce1 = BUF_18_ce1_local;

assign BUF_18_d1 = trunc_ln36_fu_334_p1;

assign BUF_18_we1 = BUF_18_we1_local;

assign BUF_19_address1 = zext_ln33_fu_323_p1;

assign BUF_19_ce1 = BUF_19_ce1_local;

assign BUF_19_d1 = trunc_ln36_fu_334_p1;

assign BUF_19_we1 = BUF_19_we1_local;

assign BUF_20_address1 = zext_ln33_fu_323_p1;

assign BUF_20_ce1 = BUF_20_ce1_local;

assign BUF_20_d1 = trunc_ln36_fu_334_p1;

assign BUF_20_we1 = BUF_20_we1_local;

assign BUF_21_address1 = zext_ln33_fu_323_p1;

assign BUF_21_ce1 = BUF_21_ce1_local;

assign BUF_21_d1 = trunc_ln36_fu_334_p1;

assign BUF_21_we1 = BUF_21_we1_local;

assign BUF_r_address1 = zext_ln33_fu_323_p1;

assign BUF_r_ce1 = BUF_r_ce1_local;

assign BUF_r_d1 = trunc_ln36_fu_334_p1;

assign BUF_r_we1 = BUF_r_we1_local;

assign add_ln32_3_fu_258_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln32_fu_275_p2 = (tt_fu_84 + 4'd1);

assign add_ln33_fu_307_p2 = (select_ln32_fu_287_p3 + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln32_reg_367_pp0_iter1_reg == 1'd0) & (xlns_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln32_fu_252_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln32_reg_367_pp0_iter0_reg = icmp_ln32_reg_367;

assign icmp_ln33_fu_281_p2 = ((ct_fu_80 == 7'd112) ? 1'b1 : 1'b0);

assign select_ln32_3_fu_295_p3 = ((icmp_ln33_fu_281_p2[0:0] == 1'b1) ? add_ln32_fu_275_p2 : tt_fu_84);

assign select_ln32_fu_287_p3 = ((icmp_ln33_fu_281_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_80);

assign trunc_ln32_fu_303_p1 = select_ln32_3_fu_295_p3[2:0];

assign trunc_ln32_reg_376_pp0_iter1_reg = trunc_ln32_reg_376;

assign trunc_ln36_fu_334_p1 = xlns_stream_TDATA[3:0];

assign zext_ln33_fu_323_p1 = select_ln32_reg_371;

endmodule //MUX_do_buffer4_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer4_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xlns_buffered_stream_i_din,
        xlns_buffered_stream_i_full_n,
        xlns_buffered_stream_i_write,
        xlns_buffered_stream_i_num_data_valid,
        xlns_buffered_stream_i_fifo_cap,
        mul_ln79,
        BUF_r_address0,
        BUF_r_ce0,
        BUF_r_q0,
        BUF_15_address0,
        BUF_15_ce0,
        BUF_15_q0,
        BUF_16_address0,
        BUF_16_ce0,
        BUF_16_q0,
        BUF_17_address0,
        BUF_17_ce0,
        BUF_17_q0,
        BUF_18_address0,
        BUF_18_ce0,
        BUF_18_q0,
        BUF_19_address0,
        BUF_19_ce0,
        BUF_19_q0,
        BUF_20_address0,
        BUF_20_ce0,
        BUF_20_q0,
        BUF_21_address0,
        BUF_21_ce0,
        BUF_21_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] xlns_buffered_stream_i_din;
input   xlns_buffered_stream_i_full_n;
output   xlns_buffered_stream_i_write;
input  [2:0] xlns_buffered_stream_i_num_data_valid;
input  [2:0] xlns_buffered_stream_i_fifo_cap;
input  [21:0] mul_ln79;
output  [6:0] BUF_r_address0;
output   BUF_r_ce0;
input  [3:0] BUF_r_q0;
output  [6:0] BUF_15_address0;
output   BUF_15_ce0;
input  [3:0] BUF_15_q0;
output  [6:0] BUF_16_address0;
output   BUF_16_ce0;
input  [3:0] BUF_16_q0;
output  [6:0] BUF_17_address0;
output   BUF_17_ce0;
input  [3:0] BUF_17_q0;
output  [6:0] BUF_18_address0;
output   BUF_18_ce0;
input  [3:0] BUF_18_q0;
output  [6:0] BUF_19_address0;
output   BUF_19_ce0;
input  [3:0] BUF_19_q0;
output  [6:0] BUF_20_address0;
output   BUF_20_ce0;
input  [3:0] BUF_20_q0;
output  [6:0] BUF_21_address0;
output   BUF_21_ce0;
input  [3:0] BUF_21_q0;

reg ap_idle;
reg xlns_buffered_stream_i_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln79_reg_294;
reg   [0:0] icmp_ln79_reg_294_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln79_fu_202_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xlns_buffered_stream_i_blk_n;
wire   [0:0] icmp_ln79_reg_294_pp0_iter0_reg;
wire   [63:0] zext_ln80_fu_236_p1;
reg   [6:0] ct_fu_64;
wire   [6:0] add_ln80_fu_248_p2;
wire    ap_loop_init;
reg   [21:0] indvar_flatten6_fu_68;
wire   [21:0] add_ln79_fu_208_p2;
reg   [21:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    BUF_r_ce0_local;
reg    BUF_15_ce0_local;
reg    BUF_16_ce0_local;
reg    BUF_17_ce0_local;
reg    BUF_18_ce0_local;
reg    BUF_19_ce0_local;
reg    BUF_20_ce0_local;
reg    BUF_21_ce0_local;
wire   [0:0] icmp_ln80_fu_222_p2;
wire   [6:0] select_ln79_fu_228_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_64 = 7'd0;
//#0 indvar_flatten6_fu_68 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_64 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln79_reg_294_pp0_iter0_reg == 1'd0))) begin
        ct_fu_64 <= add_ln80_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln79_fu_202_p2 == 1'd0)) begin
            indvar_flatten6_fu_68 <= add_ln79_fu_208_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_68 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln79_reg_294 <= icmp_ln79_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln79_reg_294_pp0_iter1_reg <= icmp_ln79_reg_294;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_15_ce0_local = 1'b1;
    end else begin
        BUF_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_16_ce0_local = 1'b1;
    end else begin
        BUF_16_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_17_ce0_local = 1'b1;
    end else begin
        BUF_17_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_18_ce0_local = 1'b1;
    end else begin
        BUF_18_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_19_ce0_local = 1'b1;
    end else begin
        BUF_19_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_20_ce0_local = 1'b1;
    end else begin
        BUF_20_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_21_ce0_local = 1'b1;
    end else begin
        BUF_21_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_r_ce0_local = 1'b1;
    end else begin
        BUF_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln79_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 22'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_68;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_294_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        xlns_buffered_stream_i_blk_n = xlns_buffered_stream_i_full_n;
    end else begin
        xlns_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_294_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        xlns_buffered_stream_i_write = 1'b1;
    end else begin
        xlns_buffered_stream_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln79_reg_294_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_15_address0 = zext_ln80_fu_236_p1;

assign BUF_15_ce0 = BUF_15_ce0_local;

assign BUF_16_address0 = zext_ln80_fu_236_p1;

assign BUF_16_ce0 = BUF_16_ce0_local;

assign BUF_17_address0 = zext_ln80_fu_236_p1;

assign BUF_17_ce0 = BUF_17_ce0_local;

assign BUF_18_address0 = zext_ln80_fu_236_p1;

assign BUF_18_ce0 = BUF_18_ce0_local;

assign BUF_19_address0 = zext_ln80_fu_236_p1;

assign BUF_19_ce0 = BUF_19_ce0_local;

assign BUF_20_address0 = zext_ln80_fu_236_p1;

assign BUF_20_ce0 = BUF_20_ce0_local;

assign BUF_21_address0 = zext_ln80_fu_236_p1;

assign BUF_21_ce0 = BUF_21_ce0_local;

assign BUF_r_address0 = zext_ln80_fu_236_p1;

assign BUF_r_ce0 = BUF_r_ce0_local;

assign add_ln79_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 22'd1);

assign add_ln80_fu_248_p2 = (select_ln79_fu_228_p3 + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln79_reg_294_pp0_iter1_reg == 1'd0) & (xlns_buffered_stream_i_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln79_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == mul_ln79) ? 1'b1 : 1'b0);

assign icmp_ln79_reg_294_pp0_iter0_reg = icmp_ln79_reg_294;

assign icmp_ln80_fu_222_p2 = ((ct_fu_64 == 7'd112) ? 1'b1 : 1'b0);

assign select_ln79_fu_228_p3 = ((icmp_ln80_fu_222_p2[0:0] == 1'b1) ? 7'd0 : ct_fu_64);

assign xlns_buffered_stream_i_din = {{{{{{{{BUF_21_q0}, {BUF_20_q0}}, {BUF_19_q0}}, {BUF_18_q0}}, {BUF_17_q0}}, {BUF_16_q0}}, {BUF_15_q0}}, {BUF_r_q0}};

assign zext_ln80_fu_236_p1 = select_ln79_fu_228_p3;

endmodule //MUX_do_buffer4_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_merge5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        aq_stream_TDATA,
        aq_stream_TVALID,
        aq_stream_TREADY,
        aq_buffered_stream_i_din,
        aq_buffered_stream_i_full_n,
        aq_buffered_stream_i_write,
        aq_buffered_stream_i_num_data_valid,
        aq_buffered_stream_i_fifo_cap,
        p_loc_i_c_din,
        p_loc_i_c_full_n,
        p_loc_i_c_write,
        p_loc_i_c_num_data_valid,
        p_loc_i_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [63:0] aq_stream_TDATA;
input   aq_stream_TVALID;
output   aq_stream_TREADY;
output  [511:0] aq_buffered_stream_i_din;
input   aq_buffered_stream_i_full_n;
output   aq_buffered_stream_i_write;
input  [2:0] aq_buffered_stream_i_num_data_valid;
input  [2:0] aq_buffered_stream_i_fifo_cap;
output  [0:0] p_loc_i_c_din;
input   p_loc_i_c_full_n;
output   p_loc_i_c_write;
input  [2:0] p_loc_i_c_num_data_valid;
input  [2:0] p_loc_i_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg aq_stream_TREADY;
reg p_loc_i_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_loc_i_c_blk_n;
wire   [0:0] p_read_4_read_fu_84_p2;
reg   [0:0] p_read_4_reg_158;
reg    ap_block_state1;
reg    BUF_ce0;
wire   [63:0] BUF_q0;
reg    BUF_ce1;
reg    BUF_we1;
reg    BUF_15_ce0;
wire   [63:0] BUF_15_q0;
reg    BUF_15_ce1;
reg    BUF_15_we1;
reg    BUF_16_ce0;
wire   [63:0] BUF_16_q0;
reg    BUF_16_ce1;
reg    BUF_16_we1;
reg    BUF_17_ce0;
wire   [63:0] BUF_17_q0;
reg    BUF_17_ce1;
reg    BUF_17_we1;
reg    BUF_18_ce0;
wire   [63:0] BUF_18_q0;
reg    BUF_18_ce1;
reg    BUF_18_we1;
reg    BUF_19_ce0;
wire   [63:0] BUF_19_q0;
reg    BUF_19_ce1;
reg    BUF_19_we1;
reg    BUF_20_ce0;
wire   [63:0] BUF_20_q0;
reg    BUF_20_ce1;
reg    BUF_20_we1;
reg    BUF_21_ce0;
wire   [63:0] BUF_21_q0;
reg    BUF_21_ce1;
reg    BUF_21_we1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_ap_done;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_ap_idle;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_ap_ready;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_d1;
wire   [6:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_address1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_ce1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_we1;
wire   [63:0] grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_d1;
wire    grp_do_buffer_merge5_Pipeline_1_fu_98_aq_stream_TREADY;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_ap_done;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_ap_idle;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_ap_ready;
wire   [511:0] grp_do_buffer_merge5_Pipeline_2_fu_112_aq_buffered_stream_i_din;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_aq_buffered_stream_i_write;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_r_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_r_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_15_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_15_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_16_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_16_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_17_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_17_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_18_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_18_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_19_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_19_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_20_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_20_ce0;
wire   [6:0] grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_21_address0;
wire    grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_21_ce0;
reg    grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start_reg = 1'b0;
//#0 grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start_reg = 1'b0;
end

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_r_address0),
    .ce0(BUF_ce0),
    .q0(BUF_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_address1),
    .ce1(BUF_ce1),
    .we1(BUF_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_15_address0),
    .ce0(BUF_15_ce0),
    .q0(BUF_15_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_address1),
    .ce1(BUF_15_ce1),
    .we1(BUF_15_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_16_address0),
    .ce0(BUF_16_ce0),
    .q0(BUF_16_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_address1),
    .ce1(BUF_16_ce1),
    .we1(BUF_16_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_17_address0),
    .ce0(BUF_17_ce0),
    .q0(BUF_17_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_address1),
    .ce1(BUF_17_ce1),
    .we1(BUF_17_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_18_address0),
    .ce0(BUF_18_ce0),
    .q0(BUF_18_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_address1),
    .ce1(BUF_18_ce1),
    .we1(BUF_18_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_19_address0),
    .ce0(BUF_19_ce0),
    .q0(BUF_19_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_address1),
    .ce1(BUF_19_ce1),
    .we1(BUF_19_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_20_address0),
    .ce0(BUF_20_ce0),
    .q0(BUF_20_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_address1),
    .ce1(BUF_20_ce1),
    .we1(BUF_20_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_d1)
);

MUX_do_buffer3_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_21_address0),
    .ce0(BUF_21_ce0),
    .q0(BUF_21_q0),
    .address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_address1),
    .ce1(BUF_21_ce1),
    .we1(BUF_21_we1),
    .d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_d1)
);

MUX_do_buffer_merge5_Pipeline_1 grp_do_buffer_merge5_Pipeline_1_fu_98(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start),
    .ap_done(grp_do_buffer_merge5_Pipeline_1_fu_98_ap_done),
    .ap_idle(grp_do_buffer_merge5_Pipeline_1_fu_98_ap_idle),
    .ap_ready(grp_do_buffer_merge5_Pipeline_1_fu_98_ap_ready),
    .aq_stream_TVALID(aq_stream_TVALID),
    .BUF_r_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_address1),
    .BUF_r_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_ce1),
    .BUF_r_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_we1),
    .BUF_r_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_d1),
    .BUF_15_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_address1),
    .BUF_15_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_ce1),
    .BUF_15_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_we1),
    .BUF_15_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_d1),
    .BUF_16_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_address1),
    .BUF_16_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_ce1),
    .BUF_16_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_we1),
    .BUF_16_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_d1),
    .BUF_17_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_address1),
    .BUF_17_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_ce1),
    .BUF_17_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_we1),
    .BUF_17_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_d1),
    .BUF_18_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_address1),
    .BUF_18_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_ce1),
    .BUF_18_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_we1),
    .BUF_18_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_d1),
    .BUF_19_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_address1),
    .BUF_19_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_ce1),
    .BUF_19_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_we1),
    .BUF_19_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_d1),
    .BUF_20_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_address1),
    .BUF_20_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_ce1),
    .BUF_20_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_we1),
    .BUF_20_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_d1),
    .BUF_21_address1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_address1),
    .BUF_21_ce1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_ce1),
    .BUF_21_we1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_we1),
    .BUF_21_d1(grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_d1),
    .aq_stream_TDATA(aq_stream_TDATA),
    .aq_stream_TREADY(grp_do_buffer_merge5_Pipeline_1_fu_98_aq_stream_TREADY)
);

MUX_do_buffer_merge5_Pipeline_2 grp_do_buffer_merge5_Pipeline_2_fu_112(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start),
    .ap_done(grp_do_buffer_merge5_Pipeline_2_fu_112_ap_done),
    .ap_idle(grp_do_buffer_merge5_Pipeline_2_fu_112_ap_idle),
    .ap_ready(grp_do_buffer_merge5_Pipeline_2_fu_112_ap_ready),
    .aq_buffered_stream_i_din(grp_do_buffer_merge5_Pipeline_2_fu_112_aq_buffered_stream_i_din),
    .aq_buffered_stream_i_full_n(aq_buffered_stream_i_full_n),
    .aq_buffered_stream_i_write(grp_do_buffer_merge5_Pipeline_2_fu_112_aq_buffered_stream_i_write),
    .aq_buffered_stream_i_num_data_valid(3'd0),
    .aq_buffered_stream_i_fifo_cap(3'd0),
    .BUF_r_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_r_address0),
    .BUF_r_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_r_ce0),
    .BUF_r_q0(BUF_q0),
    .BUF_15_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_15_address0),
    .BUF_15_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_15_ce0),
    .BUF_15_q0(BUF_15_q0),
    .BUF_16_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_16_address0),
    .BUF_16_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_16_ce0),
    .BUF_16_q0(BUF_16_q0),
    .BUF_17_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_17_address0),
    .BUF_17_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_17_ce0),
    .BUF_17_q0(BUF_17_q0),
    .BUF_18_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_18_address0),
    .BUF_18_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_18_ce0),
    .BUF_18_q0(BUF_18_q0),
    .BUF_19_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_19_address0),
    .BUF_19_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_19_ce0),
    .BUF_19_q0(BUF_19_q0),
    .BUF_20_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_20_address0),
    .BUF_20_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_20_ce0),
    .BUF_20_q0(BUF_20_q0),
    .BUF_21_address0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_21_address0),
    .BUF_21_ce0(grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_21_ce0),
    .BUF_21_q0(BUF_21_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_merge5_Pipeline_1_fu_98_ap_ready == 1'b1)) begin
            grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_merge5_Pipeline_2_fu_112_ap_ready == 1'b1)) begin
            grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_4_reg_158 <= p_read;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_15_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_15_ce0;
    end else begin
        BUF_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_15_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_ce1;
    end else begin
        BUF_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_15_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_15_we1;
    end else begin
        BUF_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_16_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_16_ce0;
    end else begin
        BUF_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_16_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_ce1;
    end else begin
        BUF_16_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_16_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_16_we1;
    end else begin
        BUF_16_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_17_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_17_ce0;
    end else begin
        BUF_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_17_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_ce1;
    end else begin
        BUF_17_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_17_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_17_we1;
    end else begin
        BUF_17_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_18_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_18_ce0;
    end else begin
        BUF_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_18_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_ce1;
    end else begin
        BUF_18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_18_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_18_we1;
    end else begin
        BUF_18_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_19_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_19_ce0;
    end else begin
        BUF_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_19_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_ce1;
    end else begin
        BUF_19_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_19_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_19_we1;
    end else begin
        BUF_19_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_20_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_20_ce0;
    end else begin
        BUF_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_20_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_ce1;
    end else begin
        BUF_20_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_20_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_20_we1;
    end else begin
        BUF_20_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_21_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_21_ce0;
    end else begin
        BUF_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_21_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_ce1;
    end else begin
        BUF_21_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_21_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_21_we1;
    end else begin
        BUF_21_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_4_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_ce0 = grp_do_buffer_merge5_Pipeline_2_fu_112_BUF_r_ce0;
    end else begin
        BUF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_ce1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_ce1;
    end else begin
        BUF_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_we1 = grp_do_buffer_merge5_Pipeline_1_fu_98_BUF_r_we1;
    end else begin
        BUF_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_do_buffer_merge5_Pipeline_1_fu_98_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        aq_stream_TREADY = grp_do_buffer_merge5_Pipeline_1_fu_98_aq_stream_TREADY;
    end else begin
        aq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_loc_i_c_blk_n = p_loc_i_c_full_n;
    end else begin
        p_loc_i_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_loc_i_c_write = 1'b1;
    end else begin
        p_loc_i_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (p_read_4_read_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state1) & (p_read_4_read_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_do_buffer_merge5_Pipeline_1_fu_98_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((p_loc_i_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((p_read_4_reg_158 == 1'd1) & (grp_do_buffer_merge5_Pipeline_2_fu_112_ap_done == 1'b0));
end

assign aq_buffered_stream_i_din = grp_do_buffer_merge5_Pipeline_2_fu_112_aq_buffered_stream_i_din;

assign aq_buffered_stream_i_write = grp_do_buffer_merge5_Pipeline_2_fu_112_aq_buffered_stream_i_write;

assign grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start = grp_do_buffer_merge5_Pipeline_1_fu_98_ap_start_reg;

assign grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start = grp_do_buffer_merge5_Pipeline_2_fu_112_ap_start_reg;

assign p_loc_i_c_din = p_read;

assign p_read_4_read_fu_84_p2 = p_read;

endmodule //MUX_do_buffer_merge5
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_merge5_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        aq_stream_TVALID,
        BUF_r_address1,
        BUF_r_ce1,
        BUF_r_we1,
        BUF_r_d1,
        BUF_15_address1,
        BUF_15_ce1,
        BUF_15_we1,
        BUF_15_d1,
        BUF_16_address1,
        BUF_16_ce1,
        BUF_16_we1,
        BUF_16_d1,
        BUF_17_address1,
        BUF_17_ce1,
        BUF_17_we1,
        BUF_17_d1,
        BUF_18_address1,
        BUF_18_ce1,
        BUF_18_we1,
        BUF_18_d1,
        BUF_19_address1,
        BUF_19_ce1,
        BUF_19_we1,
        BUF_19_d1,
        BUF_20_address1,
        BUF_20_ce1,
        BUF_20_we1,
        BUF_20_d1,
        BUF_21_address1,
        BUF_21_ce1,
        BUF_21_we1,
        BUF_21_d1,
        aq_stream_TDATA,
        aq_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   aq_stream_TVALID;
output  [6:0] BUF_r_address1;
output   BUF_r_ce1;
output   BUF_r_we1;
output  [63:0] BUF_r_d1;
output  [6:0] BUF_15_address1;
output   BUF_15_ce1;
output   BUF_15_we1;
output  [63:0] BUF_15_d1;
output  [6:0] BUF_16_address1;
output   BUF_16_ce1;
output   BUF_16_we1;
output  [63:0] BUF_16_d1;
output  [6:0] BUF_17_address1;
output   BUF_17_ce1;
output   BUF_17_we1;
output  [63:0] BUF_17_d1;
output  [6:0] BUF_18_address1;
output   BUF_18_ce1;
output   BUF_18_we1;
output  [63:0] BUF_18_d1;
output  [6:0] BUF_19_address1;
output   BUF_19_ce1;
output   BUF_19_we1;
output  [63:0] BUF_19_d1;
output  [6:0] BUF_20_address1;
output   BUF_20_ce1;
output   BUF_20_we1;
output  [63:0] BUF_20_d1;
output  [6:0] BUF_21_address1;
output   BUF_21_ce1;
output   BUF_21_we1;
output  [63:0] BUF_21_d1;
input  [63:0] aq_stream_TDATA;
output   aq_stream_TREADY;

reg ap_idle;
reg aq_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln31_reg_490;
reg   [0:0] icmp_ln31_reg_490_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln31_fu_287_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    aq_stream_TDATA_blk_n;
wire   [0:0] icmp_ln31_reg_490_pp0_iter0_reg;
wire   [0:0] icmp_ln32_fu_299_p2;
reg   [0:0] icmp_ln32_reg_494;
wire   [3:0] select_ln31_2_fu_368_p3;
reg   [3:0] select_ln31_2_reg_502;
wire   [3:0] ct_mid2_fu_386_p3;
reg   [3:0] ct_mid2_reg_507;
wire   [2:0] trunc_ln32_fu_402_p1;
reg   [2:0] trunc_ln32_reg_512;
wire   [2:0] trunc_ln32_reg_512_pp0_iter1_reg;
wire   [63:0] zext_ln40_2_fu_443_p1;
reg   [3:0] ct_fu_86;
wire   [3:0] add_ln33_fu_406_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_90;
wire   [3:0] select_ln32_fu_394_p3;
reg   [7:0] indvar_flatten_fu_94;
wire   [7:0] select_ln32_2_fu_311_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] h_fu_98;
reg   [9:0] indvar_flatten12_fu_102;
wire   [9:0] add_ln31_2_fu_293_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
reg    BUF_20_we1_local;
reg    BUF_20_ce1_local;
reg    BUF_19_we1_local;
reg    BUF_19_ce1_local;
reg    BUF_18_we1_local;
reg    BUF_18_ce1_local;
reg    BUF_17_we1_local;
reg    BUF_17_ce1_local;
reg    BUF_16_we1_local;
reg    BUF_16_ce1_local;
reg    BUF_15_we1_local;
reg    BUF_15_ce1_local;
reg    BUF_r_we1_local;
reg    BUF_r_ce1_local;
reg    BUF_21_we1_local;
reg    BUF_21_ce1_local;
wire   [7:0] add_ln32_2_fu_305_p2;
wire   [0:0] icmp_ln33_fu_356_p2;
wire   [0:0] xor_ln31_fu_351_p2;
wire   [3:0] add_ln31_fu_338_p2;
wire   [3:0] select_ln31_fu_344_p3;
wire   [0:0] and_ln31_fu_362_p2;
wire   [0:0] empty_fu_381_p2;
wire   [3:0] add_ln32_fu_375_p2;
wire   [6:0] tmp_fu_427_p3;
wire   [6:0] zext_ln40_fu_434_p1;
wire   [6:0] add_ln40_fu_437_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_86 = 4'd0;
//#0 tt_fu_90 = 4'd0;
//#0 indvar_flatten_fu_94 = 8'd0;
//#0 h_fu_98 = 4'd0;
//#0 indvar_flatten12_fu_102 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_86 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln31_reg_490_pp0_iter0_reg == 1'd0))) begin
        ct_fu_86 <= add_ln33_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        h_fu_98 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln31_reg_490_pp0_iter0_reg == 1'd0))) begin
        h_fu_98 <= select_ln31_2_fu_368_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln31_fu_287_p2 == 1'd0)) begin
            indvar_flatten12_fu_102 <= add_ln31_2_fu_293_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_102 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln31_fu_287_p2 == 1'd0)) begin
            indvar_flatten_fu_94 <= select_ln32_2_fu_311_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_90 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln31_reg_490_pp0_iter0_reg == 1'd0))) begin
        tt_fu_90 <= select_ln32_fu_394_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln31_reg_490 <= icmp_ln31_fu_287_p2;
        icmp_ln32_reg_494 <= icmp_ln32_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct_mid2_reg_507 <= ct_mid2_fu_386_p3;
        icmp_ln31_reg_490_pp0_iter1_reg <= icmp_ln31_reg_490;
        select_ln31_2_reg_502 <= select_ln31_2_fu_368_p3;
        trunc_ln32_reg_512 <= trunc_ln32_fu_402_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_15_ce1_local = 1'b1;
    end else begin
        BUF_15_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd1))) begin
        BUF_15_we1_local = 1'b1;
    end else begin
        BUF_15_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_16_ce1_local = 1'b1;
    end else begin
        BUF_16_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd2))) begin
        BUF_16_we1_local = 1'b1;
    end else begin
        BUF_16_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_17_ce1_local = 1'b1;
    end else begin
        BUF_17_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd3))) begin
        BUF_17_we1_local = 1'b1;
    end else begin
        BUF_17_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_18_ce1_local = 1'b1;
    end else begin
        BUF_18_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd4))) begin
        BUF_18_we1_local = 1'b1;
    end else begin
        BUF_18_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_19_ce1_local = 1'b1;
    end else begin
        BUF_19_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd5))) begin
        BUF_19_we1_local = 1'b1;
    end else begin
        BUF_19_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_20_ce1_local = 1'b1;
    end else begin
        BUF_20_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd6))) begin
        BUF_20_we1_local = 1'b1;
    end else begin
        BUF_20_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_21_ce1_local = 1'b1;
    end else begin
        BUF_21_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd7))) begin
        BUF_21_we1_local = 1'b1;
    end else begin
        BUF_21_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_r_ce1_local = 1'b1;
    end else begin
        BUF_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_512_pp0_iter1_reg == 3'd0))) begin
        BUF_r_we1_local = 1'b1;
    end else begin
        BUF_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln31_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_102;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_94;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        aq_stream_TDATA_blk_n = aq_stream_TVALID;
    end else begin
        aq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        aq_stream_TREADY = 1'b1;
    end else begin
        aq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln31_reg_490_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_15_address1 = zext_ln40_2_fu_443_p1;

assign BUF_15_ce1 = BUF_15_ce1_local;

assign BUF_15_d1 = aq_stream_TDATA;

assign BUF_15_we1 = BUF_15_we1_local;

assign BUF_16_address1 = zext_ln40_2_fu_443_p1;

assign BUF_16_ce1 = BUF_16_ce1_local;

assign BUF_16_d1 = aq_stream_TDATA;

assign BUF_16_we1 = BUF_16_we1_local;

assign BUF_17_address1 = zext_ln40_2_fu_443_p1;

assign BUF_17_ce1 = BUF_17_ce1_local;

assign BUF_17_d1 = aq_stream_TDATA;

assign BUF_17_we1 = BUF_17_we1_local;

assign BUF_18_address1 = zext_ln40_2_fu_443_p1;

assign BUF_18_ce1 = BUF_18_ce1_local;

assign BUF_18_d1 = aq_stream_TDATA;

assign BUF_18_we1 = BUF_18_we1_local;

assign BUF_19_address1 = zext_ln40_2_fu_443_p1;

assign BUF_19_ce1 = BUF_19_ce1_local;

assign BUF_19_d1 = aq_stream_TDATA;

assign BUF_19_we1 = BUF_19_we1_local;

assign BUF_20_address1 = zext_ln40_2_fu_443_p1;

assign BUF_20_ce1 = BUF_20_ce1_local;

assign BUF_20_d1 = aq_stream_TDATA;

assign BUF_20_we1 = BUF_20_we1_local;

assign BUF_21_address1 = zext_ln40_2_fu_443_p1;

assign BUF_21_ce1 = BUF_21_ce1_local;

assign BUF_21_d1 = aq_stream_TDATA;

assign BUF_21_we1 = BUF_21_we1_local;

assign BUF_r_address1 = zext_ln40_2_fu_443_p1;

assign BUF_r_ce1 = BUF_r_ce1_local;

assign BUF_r_d1 = aq_stream_TDATA;

assign BUF_r_we1 = BUF_r_we1_local;

assign add_ln31_2_fu_293_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln31_fu_338_p2 = (h_fu_98 + 4'd1);

assign add_ln32_2_fu_305_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln32_fu_375_p2 = (select_ln31_fu_344_p3 + 4'd1);

assign add_ln33_fu_406_p2 = (ct_mid2_fu_386_p3 + 4'd1);

assign add_ln40_fu_437_p2 = (tmp_fu_427_p3 + zext_ln40_fu_434_p1);

assign and_ln31_fu_362_p2 = (xor_ln31_fu_351_p2 & icmp_ln33_fu_356_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln31_reg_490_pp0_iter1_reg == 1'd0) & (aq_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_mid2_fu_386_p3 = ((empty_fu_381_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_86);

assign empty_fu_381_p2 = (icmp_ln32_reg_494 | and_ln31_fu_362_p2);

assign icmp_ln31_fu_287_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln31_reg_490_pp0_iter0_reg = icmp_ln31_reg_490;

assign icmp_ln32_fu_299_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_356_p2 = ((ct_fu_86 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln31_2_fu_368_p3 = ((icmp_ln32_reg_494[0:0] == 1'b1) ? add_ln31_fu_338_p2 : h_fu_98);

assign select_ln31_fu_344_p3 = ((icmp_ln32_reg_494[0:0] == 1'b1) ? 4'd0 : tt_fu_90);

assign select_ln32_2_fu_311_p3 = ((icmp_ln32_fu_299_p2[0:0] == 1'b1) ? 8'd1 : add_ln32_2_fu_305_p2);

assign select_ln32_fu_394_p3 = ((and_ln31_fu_362_p2[0:0] == 1'b1) ? add_ln32_fu_375_p2 : select_ln31_fu_344_p3);

assign tmp_fu_427_p3 = {{select_ln31_2_reg_502}, {3'd0}};

assign trunc_ln32_fu_402_p1 = select_ln32_fu_394_p3[2:0];

assign trunc_ln32_reg_512_pp0_iter1_reg = trunc_ln32_reg_512;

assign xor_ln31_fu_351_p2 = (icmp_ln32_reg_494 ^ 1'd1);

assign zext_ln40_2_fu_443_p1 = add_ln40_fu_437_p2;

assign zext_ln40_fu_434_p1 = ct_mid2_reg_507;

endmodule //MUX_do_buffer_merge5_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_merge5_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        aq_buffered_stream_i_din,
        aq_buffered_stream_i_full_n,
        aq_buffered_stream_i_write,
        aq_buffered_stream_i_num_data_valid,
        aq_buffered_stream_i_fifo_cap,
        BUF_r_address0,
        BUF_r_ce0,
        BUF_r_q0,
        BUF_15_address0,
        BUF_15_ce0,
        BUF_15_q0,
        BUF_16_address0,
        BUF_16_ce0,
        BUF_16_q0,
        BUF_17_address0,
        BUF_17_ce0,
        BUF_17_q0,
        BUF_18_address0,
        BUF_18_ce0,
        BUF_18_q0,
        BUF_19_address0,
        BUF_19_ce0,
        BUF_19_q0,
        BUF_20_address0,
        BUF_20_ce0,
        BUF_20_q0,
        BUF_21_address0,
        BUF_21_ce0,
        BUF_21_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [511:0] aq_buffered_stream_i_din;
input   aq_buffered_stream_i_full_n;
output   aq_buffered_stream_i_write;
input  [2:0] aq_buffered_stream_i_num_data_valid;
input  [2:0] aq_buffered_stream_i_fifo_cap;
output  [6:0] BUF_r_address0;
output   BUF_r_ce0;
input  [63:0] BUF_r_q0;
output  [6:0] BUF_15_address0;
output   BUF_15_ce0;
input  [63:0] BUF_15_q0;
output  [6:0] BUF_16_address0;
output   BUF_16_ce0;
input  [63:0] BUF_16_q0;
output  [6:0] BUF_17_address0;
output   BUF_17_ce0;
input  [63:0] BUF_17_q0;
output  [6:0] BUF_18_address0;
output   BUF_18_ce0;
input  [63:0] BUF_18_q0;
output  [6:0] BUF_19_address0;
output   BUF_19_ce0;
input  [63:0] BUF_19_q0;
output  [6:0] BUF_20_address0;
output   BUF_20_ce0;
input  [63:0] BUF_20_q0;
output  [6:0] BUF_21_address0;
output   BUF_21_ce0;
input  [63:0] BUF_21_q0;

reg ap_idle;
reg aq_buffered_stream_i_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln105_reg_419;
reg   [0:0] icmp_ln105_reg_419_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln105_fu_224_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    aq_buffered_stream_i_blk_n;
wire   [0:0] icmp_ln105_reg_419_pp0_iter0_reg;
reg   [0:0] icmp_ln105_reg_419_pp0_iter1_reg;
wire   [0:0] icmp_ln106_fu_239_p2;
reg   [0:0] icmp_ln106_reg_423;
wire   [3:0] select_ln106_fu_310_p3;
reg   [3:0] select_ln106_reg_430;
wire   [3:0] select_ln106_3_fu_318_p3;
reg   [3:0] select_ln106_3_reg_435;
wire   [63:0] zext_ln114_2_fu_358_p1;
reg   [3:0] ct_fu_74;
wire   [3:0] add_ln107_fu_326_p2;
wire    ap_loop_init;
reg   [3:0] h_fu_78;
reg   [7:0] indvar_flatten19_fu_82;
wire   [7:0] select_ln106_4_fu_251_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten19_load;
reg   [13:0] indvar_flatten30_fu_86;
wire   [13:0] add_ln105_fu_230_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten30_load;
reg    BUF_r_ce0_local;
reg    BUF_15_ce0_local;
reg    BUF_16_ce0_local;
reg    BUF_17_ce0_local;
reg    BUF_18_ce0_local;
reg    BUF_19_ce0_local;
reg    BUF_20_ce0_local;
reg    BUF_21_ce0_local;
wire   [7:0] add_ln106_2_fu_245_p2;
wire   [0:0] icmp_ln107_fu_287_p2;
wire   [0:0] xor_ln105_fu_282_p2;
wire   [3:0] select_ln105_fu_275_p3;
wire   [0:0] and_ln105_fu_293_p2;
wire   [0:0] or_ln106_fu_305_p2;
wire   [3:0] add_ln106_fu_299_p2;
wire   [6:0] tmp_2_fu_342_p3;
wire   [6:0] zext_ln114_fu_349_p1;
wire   [6:0] add_ln114_fu_352_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_85;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ct_fu_74 = 4'd0;
//#0 h_fu_78 = 4'd0;
//#0 indvar_flatten19_fu_82 = 8'd0;
//#0 indvar_flatten30_fu_86 = 14'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_74 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln105_reg_419_pp0_iter0_reg == 1'd0))) begin
        ct_fu_74 <= add_ln107_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        h_fu_78 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln105_reg_419_pp0_iter0_reg == 1'd0))) begin
        h_fu_78 <= select_ln106_3_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln105_fu_224_p2 == 1'd0)) begin
            indvar_flatten19_fu_82 <= select_ln106_4_fu_251_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_82 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln105_fu_224_p2 == 1'd0)) begin
            indvar_flatten30_fu_86 <= add_ln105_fu_230_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten30_fu_86 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln105_reg_419 <= icmp_ln105_fu_224_p2;
        icmp_ln106_reg_423 <= icmp_ln106_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln105_reg_419_pp0_iter1_reg <= icmp_ln105_reg_419;
        select_ln106_3_reg_435 <= select_ln106_3_fu_318_p3;
        select_ln106_reg_430 <= select_ln106_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln105_reg_419_pp0_iter2_reg <= icmp_ln105_reg_419_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_15_ce0_local = 1'b1;
    end else begin
        BUF_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_16_ce0_local = 1'b1;
    end else begin
        BUF_16_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_17_ce0_local = 1'b1;
    end else begin
        BUF_17_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_18_ce0_local = 1'b1;
    end else begin
        BUF_18_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_19_ce0_local = 1'b1;
    end else begin
        BUF_19_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_20_ce0_local = 1'b1;
    end else begin
        BUF_20_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_21_ce0_local = 1'b1;
    end else begin
        BUF_21_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_r_ce0_local = 1'b1;
    end else begin
        BUF_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln105_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten30_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten30_load = indvar_flatten30_fu_86;
    end
end

always @ (*) begin
    if (((icmp_ln105_reg_419_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        aq_buffered_stream_i_blk_n = aq_buffered_stream_i_full_n;
    end else begin
        aq_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln105_reg_419_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        aq_buffered_stream_i_write = 1'b1;
    end else begin
        aq_buffered_stream_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((icmp_ln105_reg_419_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign BUF_15_address0 = zext_ln114_2_fu_358_p1;

assign BUF_15_ce0 = BUF_15_ce0_local;

assign BUF_16_address0 = zext_ln114_2_fu_358_p1;

assign BUF_16_ce0 = BUF_16_ce0_local;

assign BUF_17_address0 = zext_ln114_2_fu_358_p1;

assign BUF_17_ce0 = BUF_17_ce0_local;

assign BUF_18_address0 = zext_ln114_2_fu_358_p1;

assign BUF_18_ce0 = BUF_18_ce0_local;

assign BUF_19_address0 = zext_ln114_2_fu_358_p1;

assign BUF_19_ce0 = BUF_19_ce0_local;

assign BUF_20_address0 = zext_ln114_2_fu_358_p1;

assign BUF_20_ce0 = BUF_20_ce0_local;

assign BUF_21_address0 = zext_ln114_2_fu_358_p1;

assign BUF_21_ce0 = BUF_21_ce0_local;

assign BUF_r_address0 = zext_ln114_2_fu_358_p1;

assign BUF_r_ce0 = BUF_r_ce0_local;

assign add_ln105_fu_230_p2 = (ap_sig_allocacmp_indvar_flatten30_load + 14'd1);

assign add_ln106_2_fu_245_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 8'd1);

assign add_ln106_fu_299_p2 = (select_ln105_fu_275_p3 + 4'd1);

assign add_ln107_fu_326_p2 = (select_ln106_fu_310_p3 + 4'd1);

assign add_ln114_fu_352_p2 = (tmp_2_fu_342_p3 + zext_ln114_fu_349_p1);

assign and_ln105_fu_293_p2 = (xor_ln105_fu_282_p2 & icmp_ln107_fu_287_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln105_reg_419_pp0_iter2_reg == 1'd0) & (aq_buffered_stream_i_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_85 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign aq_buffered_stream_i_din = {{{{{{{{BUF_21_q0}, {BUF_20_q0}}, {BUF_19_q0}}, {BUF_18_q0}}, {BUF_17_q0}}, {BUF_16_q0}}, {BUF_15_q0}}, {BUF_r_q0}};

assign icmp_ln105_fu_224_p2 = ((ap_sig_allocacmp_indvar_flatten30_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln105_reg_419_pp0_iter0_reg = icmp_ln105_reg_419;

assign icmp_ln106_fu_239_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 8'd112) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_287_p2 = ((ct_fu_74 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln106_fu_305_p2 = (icmp_ln106_reg_423 | and_ln105_fu_293_p2);

assign select_ln105_fu_275_p3 = ((icmp_ln106_reg_423[0:0] == 1'b1) ? 4'd0 : h_fu_78);

assign select_ln106_3_fu_318_p3 = ((and_ln105_fu_293_p2[0:0] == 1'b1) ? add_ln106_fu_299_p2 : select_ln105_fu_275_p3);

assign select_ln106_4_fu_251_p3 = ((icmp_ln106_fu_239_p2[0:0] == 1'b1) ? 8'd1 : add_ln106_2_fu_245_p2);

assign select_ln106_fu_310_p3 = ((or_ln106_fu_305_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_74);

assign tmp_2_fu_342_p3 = {{select_ln106_3_reg_435}, {3'd0}};

assign xor_ln105_fu_282_p2 = (icmp_ln106_reg_423 ^ 1'd1);

assign zext_ln114_2_fu_358_p1 = add_ln114_fu_352_p2;

assign zext_ln114_fu_349_p1 = select_ln106_reg_430;

endmodule //MUX_do_buffer_merge5_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_merge6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        as_stream_TDATA,
        as_stream_TVALID,
        as_stream_TREADY,
        as_buffered_stream_i_din,
        as_buffered_stream_i_full_n,
        as_buffered_stream_i_write,
        as_buffered_stream_i_num_data_valid,
        as_buffered_stream_i_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [7:0] as_stream_TDATA;
input   as_stream_TVALID;
output   as_stream_TREADY;
output  [31:0] as_buffered_stream_i_din;
input   as_buffered_stream_i_full_n;
output   as_buffered_stream_i_write;
input  [2:0] as_buffered_stream_i_num_data_valid;
input  [2:0] as_buffered_stream_i_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg as_stream_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] p_read_3_read_fu_70_p2;
reg   [0:0] p_read_3_reg_124;
reg    ap_block_state1;
reg    BUF_ce0;
wire   [3:0] BUF_q0;
reg    BUF_ce1;
reg    BUF_we1;
reg    BUF_1_ce0;
wire   [3:0] BUF_1_q0;
reg    BUF_1_ce1;
reg    BUF_1_we1;
reg    BUF_2_ce0;
wire   [3:0] BUF_2_q0;
reg    BUF_2_ce1;
reg    BUF_2_we1;
reg    BUF_3_ce0;
wire   [3:0] BUF_3_q0;
reg    BUF_3_ce1;
reg    BUF_3_we1;
reg    BUF_4_ce0;
wire   [3:0] BUF_4_q0;
reg    BUF_4_ce1;
reg    BUF_4_we1;
reg    BUF_5_ce0;
wire   [3:0] BUF_5_q0;
reg    BUF_5_ce1;
reg    BUF_5_we1;
reg    BUF_6_ce0;
wire   [3:0] BUF_6_q0;
reg    BUF_6_ce1;
reg    BUF_6_we1;
reg    BUF_7_ce0;
wire   [3:0] BUF_7_q0;
reg    BUF_7_ce1;
reg    BUF_7_we1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_ap_done;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_ap_idle;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_ap_ready;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_d1;
wire   [6:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_address1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_ce1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_we1;
wire   [3:0] grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_d1;
wire    grp_do_buffer_merge6_Pipeline_1_fu_76_as_stream_TREADY;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_ap_done;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_ap_idle;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_ap_ready;
wire   [31:0] grp_do_buffer_merge6_Pipeline_2_fu_90_as_buffered_stream_i_din;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_as_buffered_stream_i_write;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_r_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_r_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_1_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_1_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_2_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_2_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_3_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_3_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_4_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_4_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_5_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_5_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_6_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_6_ce0;
wire   [6:0] grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_7_address0;
wire    grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_7_ce0;
reg    grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start_reg = 1'b0;
//#0 grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start_reg = 1'b0;
end

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_r_address0),
    .ce0(BUF_ce0),
    .q0(BUF_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_address1),
    .ce1(BUF_ce1),
    .we1(BUF_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_1_address0),
    .ce0(BUF_1_ce0),
    .q0(BUF_1_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_address1),
    .ce1(BUF_1_ce1),
    .we1(BUF_1_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_2_address0),
    .ce0(BUF_2_ce0),
    .q0(BUF_2_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_address1),
    .ce1(BUF_2_ce1),
    .we1(BUF_2_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_3_address0),
    .ce0(BUF_3_ce0),
    .q0(BUF_3_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_address1),
    .ce1(BUF_3_ce1),
    .we1(BUF_3_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_4_address0),
    .ce0(BUF_4_ce0),
    .q0(BUF_4_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_address1),
    .ce1(BUF_4_ce1),
    .we1(BUF_4_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_5_address0),
    .ce0(BUF_5_ce0),
    .q0(BUF_5_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_address1),
    .ce1(BUF_5_ce1),
    .we1(BUF_5_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_6_address0),
    .ce0(BUF_6_ce0),
    .q0(BUF_6_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_address1),
    .ce1(BUF_6_ce1),
    .we1(BUF_6_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_d1)
);

MUX_do_buffer4_BUF_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
BUF_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_7_address0),
    .ce0(BUF_7_ce0),
    .q0(BUF_7_q0),
    .address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_address1),
    .ce1(BUF_7_ce1),
    .we1(BUF_7_we1),
    .d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_d1)
);

MUX_do_buffer_merge6_Pipeline_1 grp_do_buffer_merge6_Pipeline_1_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start),
    .ap_done(grp_do_buffer_merge6_Pipeline_1_fu_76_ap_done),
    .ap_idle(grp_do_buffer_merge6_Pipeline_1_fu_76_ap_idle),
    .ap_ready(grp_do_buffer_merge6_Pipeline_1_fu_76_ap_ready),
    .as_stream_TVALID(as_stream_TVALID),
    .BUF_r_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_address1),
    .BUF_r_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_ce1),
    .BUF_r_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_we1),
    .BUF_r_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_d1),
    .BUF_1_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_address1),
    .BUF_1_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_ce1),
    .BUF_1_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_we1),
    .BUF_1_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_d1),
    .BUF_2_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_address1),
    .BUF_2_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_ce1),
    .BUF_2_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_we1),
    .BUF_2_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_d1),
    .BUF_3_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_address1),
    .BUF_3_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_ce1),
    .BUF_3_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_we1),
    .BUF_3_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_d1),
    .BUF_4_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_address1),
    .BUF_4_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_ce1),
    .BUF_4_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_we1),
    .BUF_4_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_d1),
    .BUF_5_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_address1),
    .BUF_5_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_ce1),
    .BUF_5_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_we1),
    .BUF_5_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_d1),
    .BUF_6_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_address1),
    .BUF_6_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_ce1),
    .BUF_6_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_we1),
    .BUF_6_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_d1),
    .BUF_7_address1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_address1),
    .BUF_7_ce1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_ce1),
    .BUF_7_we1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_we1),
    .BUF_7_d1(grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_d1),
    .as_stream_TDATA(as_stream_TDATA),
    .as_stream_TREADY(grp_do_buffer_merge6_Pipeline_1_fu_76_as_stream_TREADY)
);

MUX_do_buffer_merge6_Pipeline_2 grp_do_buffer_merge6_Pipeline_2_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start),
    .ap_done(grp_do_buffer_merge6_Pipeline_2_fu_90_ap_done),
    .ap_idle(grp_do_buffer_merge6_Pipeline_2_fu_90_ap_idle),
    .ap_ready(grp_do_buffer_merge6_Pipeline_2_fu_90_ap_ready),
    .as_buffered_stream_i_din(grp_do_buffer_merge6_Pipeline_2_fu_90_as_buffered_stream_i_din),
    .as_buffered_stream_i_full_n(as_buffered_stream_i_full_n),
    .as_buffered_stream_i_write(grp_do_buffer_merge6_Pipeline_2_fu_90_as_buffered_stream_i_write),
    .as_buffered_stream_i_num_data_valid(3'd0),
    .as_buffered_stream_i_fifo_cap(3'd0),
    .BUF_r_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_r_address0),
    .BUF_r_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_r_ce0),
    .BUF_r_q0(BUF_q0),
    .BUF_1_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_1_address0),
    .BUF_1_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_1_ce0),
    .BUF_1_q0(BUF_1_q0),
    .BUF_2_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_2_address0),
    .BUF_2_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_2_ce0),
    .BUF_2_q0(BUF_2_q0),
    .BUF_3_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_3_address0),
    .BUF_3_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_3_ce0),
    .BUF_3_q0(BUF_3_q0),
    .BUF_4_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_4_address0),
    .BUF_4_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_4_ce0),
    .BUF_4_q0(BUF_4_q0),
    .BUF_5_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_5_address0),
    .BUF_5_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_5_ce0),
    .BUF_5_q0(BUF_5_q0),
    .BUF_6_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_6_address0),
    .BUF_6_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_6_ce0),
    .BUF_6_q0(BUF_6_q0),
    .BUF_7_address0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_7_address0),
    .BUF_7_ce0(grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_7_ce0),
    .BUF_7_q0(BUF_7_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_merge6_Pipeline_1_fu_76_ap_ready == 1'b1)) begin
            grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_merge6_Pipeline_2_fu_90_ap_ready == 1'b1)) begin
            grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_3_reg_124 <= p_read;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_1_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_1_ce0;
    end else begin
        BUF_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_1_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_ce1;
    end else begin
        BUF_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_1_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_1_we1;
    end else begin
        BUF_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_2_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_2_ce0;
    end else begin
        BUF_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_2_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_ce1;
    end else begin
        BUF_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_2_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_2_we1;
    end else begin
        BUF_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_3_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_3_ce0;
    end else begin
        BUF_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_3_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_ce1;
    end else begin
        BUF_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_3_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_3_we1;
    end else begin
        BUF_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_4_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_4_ce0;
    end else begin
        BUF_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_4_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_ce1;
    end else begin
        BUF_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_4_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_4_we1;
    end else begin
        BUF_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_5_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_5_ce0;
    end else begin
        BUF_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_5_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_ce1;
    end else begin
        BUF_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_5_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_5_we1;
    end else begin
        BUF_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_6_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_6_ce0;
    end else begin
        BUF_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_6_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_ce1;
    end else begin
        BUF_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_6_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_6_we1;
    end else begin
        BUF_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_7_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_7_ce0;
    end else begin
        BUF_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_7_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_ce1;
    end else begin
        BUF_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_7_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_7_we1;
    end else begin
        BUF_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_3_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_ce0 = grp_do_buffer_merge6_Pipeline_2_fu_90_BUF_r_ce0;
    end else begin
        BUF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_ce1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_ce1;
    end else begin
        BUF_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_we1 = grp_do_buffer_merge6_Pipeline_1_fu_76_BUF_r_we1;
    end else begin
        BUF_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_do_buffer_merge6_Pipeline_1_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        as_stream_TREADY = grp_do_buffer_merge6_Pipeline_1_fu_76_as_stream_TREADY;
    end else begin
        as_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (p_read_3_read_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state1) & (p_read_3_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_do_buffer_merge6_Pipeline_1_fu_76_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((p_read_3_reg_124 == 1'd1) & (grp_do_buffer_merge6_Pipeline_2_fu_90_ap_done == 1'b0));
end

assign as_buffered_stream_i_din = grp_do_buffer_merge6_Pipeline_2_fu_90_as_buffered_stream_i_din;

assign as_buffered_stream_i_write = grp_do_buffer_merge6_Pipeline_2_fu_90_as_buffered_stream_i_write;

assign grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start = grp_do_buffer_merge6_Pipeline_1_fu_76_ap_start_reg;

assign grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start = grp_do_buffer_merge6_Pipeline_2_fu_90_ap_start_reg;

assign p_read_3_read_fu_70_p2 = p_read;

endmodule //MUX_do_buffer_merge6
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_merge6_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        as_stream_TVALID,
        BUF_r_address1,
        BUF_r_ce1,
        BUF_r_we1,
        BUF_r_d1,
        BUF_1_address1,
        BUF_1_ce1,
        BUF_1_we1,
        BUF_1_d1,
        BUF_2_address1,
        BUF_2_ce1,
        BUF_2_we1,
        BUF_2_d1,
        BUF_3_address1,
        BUF_3_ce1,
        BUF_3_we1,
        BUF_3_d1,
        BUF_4_address1,
        BUF_4_ce1,
        BUF_4_we1,
        BUF_4_d1,
        BUF_5_address1,
        BUF_5_ce1,
        BUF_5_we1,
        BUF_5_d1,
        BUF_6_address1,
        BUF_6_ce1,
        BUF_6_we1,
        BUF_6_d1,
        BUF_7_address1,
        BUF_7_ce1,
        BUF_7_we1,
        BUF_7_d1,
        as_stream_TDATA,
        as_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   as_stream_TVALID;
output  [6:0] BUF_r_address1;
output   BUF_r_ce1;
output   BUF_r_we1;
output  [3:0] BUF_r_d1;
output  [6:0] BUF_1_address1;
output   BUF_1_ce1;
output   BUF_1_we1;
output  [3:0] BUF_1_d1;
output  [6:0] BUF_2_address1;
output   BUF_2_ce1;
output   BUF_2_we1;
output  [3:0] BUF_2_d1;
output  [6:0] BUF_3_address1;
output   BUF_3_ce1;
output   BUF_3_we1;
output  [3:0] BUF_3_d1;
output  [6:0] BUF_4_address1;
output   BUF_4_ce1;
output   BUF_4_we1;
output  [3:0] BUF_4_d1;
output  [6:0] BUF_5_address1;
output   BUF_5_ce1;
output   BUF_5_we1;
output  [3:0] BUF_5_d1;
output  [6:0] BUF_6_address1;
output   BUF_6_ce1;
output   BUF_6_we1;
output  [3:0] BUF_6_d1;
output  [6:0] BUF_7_address1;
output   BUF_7_ce1;
output   BUF_7_we1;
output  [3:0] BUF_7_d1;
input  [7:0] as_stream_TDATA;
output   as_stream_TREADY;

reg ap_idle;
reg as_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln31_reg_494;
reg   [0:0] icmp_ln31_reg_494_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln31_fu_279_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    as_stream_TDATA_blk_n;
wire   [0:0] icmp_ln31_reg_494_pp0_iter0_reg;
wire   [0:0] icmp_ln32_fu_291_p2;
reg   [0:0] icmp_ln32_reg_498;
wire   [3:0] select_ln31_1_fu_360_p3;
reg   [3:0] select_ln31_1_reg_506;
wire   [3:0] ct_mid2_fu_378_p3;
reg   [3:0] ct_mid2_reg_511;
wire   [2:0] trunc_ln32_fu_394_p1;
reg   [2:0] trunc_ln32_reg_516;
wire   [2:0] trunc_ln32_reg_516_pp0_iter1_reg;
wire   [63:0] zext_ln40_1_fu_435_p1;
reg   [3:0] ct_fu_86;
wire   [3:0] add_ln33_fu_398_p2;
wire    ap_loop_init;
reg   [3:0] tt_fu_90;
wire   [3:0] select_ln32_fu_386_p3;
reg   [7:0] indvar_flatten_fu_94;
wire   [7:0] select_ln32_1_fu_303_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] h_fu_98;
reg   [9:0] indvar_flatten12_fu_102;
wire   [9:0] add_ln31_1_fu_285_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
reg    BUF_6_we1_local;
wire   [3:0] trunc_ln36_fu_447_p1;
reg    BUF_6_ce1_local;
reg    BUF_5_we1_local;
reg    BUF_5_ce1_local;
reg    BUF_4_we1_local;
reg    BUF_4_ce1_local;
reg    BUF_3_we1_local;
reg    BUF_3_ce1_local;
reg    BUF_2_we1_local;
reg    BUF_2_ce1_local;
reg    BUF_1_we1_local;
reg    BUF_1_ce1_local;
reg    BUF_r_we1_local;
reg    BUF_r_ce1_local;
reg    BUF_7_we1_local;
reg    BUF_7_ce1_local;
wire   [7:0] add_ln32_1_fu_297_p2;
wire   [0:0] icmp_ln33_fu_348_p2;
wire   [0:0] xor_ln31_fu_343_p2;
wire   [3:0] add_ln31_fu_330_p2;
wire   [3:0] select_ln31_fu_336_p3;
wire   [0:0] and_ln31_fu_354_p2;
wire   [0:0] empty_fu_373_p2;
wire   [3:0] add_ln32_fu_367_p2;
wire   [6:0] tmp_fu_419_p3;
wire   [6:0] zext_ln40_fu_426_p1;
wire   [6:0] add_ln40_fu_429_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_86 = 4'd0;
//#0 tt_fu_90 = 4'd0;
//#0 indvar_flatten_fu_94 = 8'd0;
//#0 h_fu_98 = 4'd0;
//#0 indvar_flatten12_fu_102 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_86 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln31_reg_494_pp0_iter0_reg == 1'd0))) begin
        ct_fu_86 <= add_ln33_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        h_fu_98 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln31_reg_494_pp0_iter0_reg == 1'd0))) begin
        h_fu_98 <= select_ln31_1_fu_360_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln31_fu_279_p2 == 1'd0)) begin
            indvar_flatten12_fu_102 <= add_ln31_1_fu_285_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_102 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln31_fu_279_p2 == 1'd0)) begin
            indvar_flatten_fu_94 <= select_ln32_1_fu_303_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_90 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln31_reg_494_pp0_iter0_reg == 1'd0))) begin
        tt_fu_90 <= select_ln32_fu_386_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln31_reg_494 <= icmp_ln31_fu_279_p2;
        icmp_ln32_reg_498 <= icmp_ln32_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct_mid2_reg_511 <= ct_mid2_fu_378_p3;
        icmp_ln31_reg_494_pp0_iter1_reg <= icmp_ln31_reg_494;
        select_ln31_1_reg_506 <= select_ln31_1_fu_360_p3;
        trunc_ln32_reg_516 <= trunc_ln32_fu_394_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_1_ce1_local = 1'b1;
    end else begin
        BUF_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd1))) begin
        BUF_1_we1_local = 1'b1;
    end else begin
        BUF_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_2_ce1_local = 1'b1;
    end else begin
        BUF_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd2))) begin
        BUF_2_we1_local = 1'b1;
    end else begin
        BUF_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_3_ce1_local = 1'b1;
    end else begin
        BUF_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd3))) begin
        BUF_3_we1_local = 1'b1;
    end else begin
        BUF_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_4_ce1_local = 1'b1;
    end else begin
        BUF_4_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd4))) begin
        BUF_4_we1_local = 1'b1;
    end else begin
        BUF_4_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_5_ce1_local = 1'b1;
    end else begin
        BUF_5_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd5))) begin
        BUF_5_we1_local = 1'b1;
    end else begin
        BUF_5_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_6_ce1_local = 1'b1;
    end else begin
        BUF_6_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd6))) begin
        BUF_6_we1_local = 1'b1;
    end else begin
        BUF_6_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_7_ce1_local = 1'b1;
    end else begin
        BUF_7_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd7))) begin
        BUF_7_we1_local = 1'b1;
    end else begin
        BUF_7_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        BUF_r_ce1_local = 1'b1;
    end else begin
        BUF_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln32_reg_516_pp0_iter1_reg == 3'd0))) begin
        BUF_r_we1_local = 1'b1;
    end else begin
        BUF_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln31_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_102;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_94;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        as_stream_TDATA_blk_n = as_stream_TVALID;
    end else begin
        as_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        as_stream_TREADY = 1'b1;
    end else begin
        as_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln31_reg_494_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_1_address1 = zext_ln40_1_fu_435_p1;

assign BUF_1_ce1 = BUF_1_ce1_local;

assign BUF_1_d1 = trunc_ln36_fu_447_p1;

assign BUF_1_we1 = BUF_1_we1_local;

assign BUF_2_address1 = zext_ln40_1_fu_435_p1;

assign BUF_2_ce1 = BUF_2_ce1_local;

assign BUF_2_d1 = trunc_ln36_fu_447_p1;

assign BUF_2_we1 = BUF_2_we1_local;

assign BUF_3_address1 = zext_ln40_1_fu_435_p1;

assign BUF_3_ce1 = BUF_3_ce1_local;

assign BUF_3_d1 = trunc_ln36_fu_447_p1;

assign BUF_3_we1 = BUF_3_we1_local;

assign BUF_4_address1 = zext_ln40_1_fu_435_p1;

assign BUF_4_ce1 = BUF_4_ce1_local;

assign BUF_4_d1 = trunc_ln36_fu_447_p1;

assign BUF_4_we1 = BUF_4_we1_local;

assign BUF_5_address1 = zext_ln40_1_fu_435_p1;

assign BUF_5_ce1 = BUF_5_ce1_local;

assign BUF_5_d1 = trunc_ln36_fu_447_p1;

assign BUF_5_we1 = BUF_5_we1_local;

assign BUF_6_address1 = zext_ln40_1_fu_435_p1;

assign BUF_6_ce1 = BUF_6_ce1_local;

assign BUF_6_d1 = trunc_ln36_fu_447_p1;

assign BUF_6_we1 = BUF_6_we1_local;

assign BUF_7_address1 = zext_ln40_1_fu_435_p1;

assign BUF_7_ce1 = BUF_7_ce1_local;

assign BUF_7_d1 = trunc_ln36_fu_447_p1;

assign BUF_7_we1 = BUF_7_we1_local;

assign BUF_r_address1 = zext_ln40_1_fu_435_p1;

assign BUF_r_ce1 = BUF_r_ce1_local;

assign BUF_r_d1 = trunc_ln36_fu_447_p1;

assign BUF_r_we1 = BUF_r_we1_local;

assign add_ln31_1_fu_285_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln31_fu_330_p2 = (h_fu_98 + 4'd1);

assign add_ln32_1_fu_297_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln32_fu_367_p2 = (select_ln31_fu_336_p3 + 4'd1);

assign add_ln33_fu_398_p2 = (ct_mid2_fu_378_p3 + 4'd1);

assign add_ln40_fu_429_p2 = (tmp_fu_419_p3 + zext_ln40_fu_426_p1);

assign and_ln31_fu_354_p2 = (xor_ln31_fu_343_p2 & icmp_ln33_fu_348_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln31_reg_494_pp0_iter1_reg == 1'd0) & (as_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_mid2_fu_378_p3 = ((empty_fu_373_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_86);

assign empty_fu_373_p2 = (icmp_ln32_reg_498 | and_ln31_fu_354_p2);

assign icmp_ln31_fu_279_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln31_reg_494_pp0_iter0_reg = icmp_ln31_reg_494;

assign icmp_ln32_fu_291_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_348_p2 = ((ct_fu_86 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln31_1_fu_360_p3 = ((icmp_ln32_reg_498[0:0] == 1'b1) ? add_ln31_fu_330_p2 : h_fu_98);

assign select_ln31_fu_336_p3 = ((icmp_ln32_reg_498[0:0] == 1'b1) ? 4'd0 : tt_fu_90);

assign select_ln32_1_fu_303_p3 = ((icmp_ln32_fu_291_p2[0:0] == 1'b1) ? 8'd1 : add_ln32_1_fu_297_p2);

assign select_ln32_fu_386_p3 = ((and_ln31_fu_354_p2[0:0] == 1'b1) ? add_ln32_fu_367_p2 : select_ln31_fu_336_p3);

assign tmp_fu_419_p3 = {{select_ln31_1_reg_506}, {3'd0}};

assign trunc_ln32_fu_394_p1 = select_ln32_fu_386_p3[2:0];

assign trunc_ln32_reg_516_pp0_iter1_reg = trunc_ln32_reg_516;

assign trunc_ln36_fu_447_p1 = as_stream_TDATA[3:0];

assign xor_ln31_fu_343_p2 = (icmp_ln32_reg_498 ^ 1'd1);

assign zext_ln40_1_fu_435_p1 = add_ln40_fu_429_p2;

assign zext_ln40_fu_426_p1 = ct_mid2_reg_511;

endmodule //MUX_do_buffer_merge6_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_merge6_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        as_buffered_stream_i_din,
        as_buffered_stream_i_full_n,
        as_buffered_stream_i_write,
        as_buffered_stream_i_num_data_valid,
        as_buffered_stream_i_fifo_cap,
        BUF_r_address0,
        BUF_r_ce0,
        BUF_r_q0,
        BUF_1_address0,
        BUF_1_ce0,
        BUF_1_q0,
        BUF_2_address0,
        BUF_2_ce0,
        BUF_2_q0,
        BUF_3_address0,
        BUF_3_ce0,
        BUF_3_q0,
        BUF_4_address0,
        BUF_4_ce0,
        BUF_4_q0,
        BUF_5_address0,
        BUF_5_ce0,
        BUF_5_q0,
        BUF_6_address0,
        BUF_6_ce0,
        BUF_6_q0,
        BUF_7_address0,
        BUF_7_ce0,
        BUF_7_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] as_buffered_stream_i_din;
input   as_buffered_stream_i_full_n;
output   as_buffered_stream_i_write;
input  [2:0] as_buffered_stream_i_num_data_valid;
input  [2:0] as_buffered_stream_i_fifo_cap;
output  [6:0] BUF_r_address0;
output   BUF_r_ce0;
input  [3:0] BUF_r_q0;
output  [6:0] BUF_1_address0;
output   BUF_1_ce0;
input  [3:0] BUF_1_q0;
output  [6:0] BUF_2_address0;
output   BUF_2_ce0;
input  [3:0] BUF_2_q0;
output  [6:0] BUF_3_address0;
output   BUF_3_ce0;
input  [3:0] BUF_3_q0;
output  [6:0] BUF_4_address0;
output   BUF_4_ce0;
input  [3:0] BUF_4_q0;
output  [6:0] BUF_5_address0;
output   BUF_5_ce0;
input  [3:0] BUF_5_q0;
output  [6:0] BUF_6_address0;
output   BUF_6_ce0;
input  [3:0] BUF_6_q0;
output  [6:0] BUF_7_address0;
output   BUF_7_ce0;
input  [3:0] BUF_7_q0;

reg ap_idle;
reg as_buffered_stream_i_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg   [0:0] icmp_ln105_reg_419;
reg   [0:0] icmp_ln105_reg_419_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln105_fu_224_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    as_buffered_stream_i_blk_n;
wire   [0:0] icmp_ln105_reg_419_pp0_iter0_reg;
reg   [0:0] icmp_ln105_reg_419_pp0_iter1_reg;
wire   [0:0] icmp_ln106_fu_239_p2;
reg   [0:0] icmp_ln106_reg_423;
wire   [3:0] select_ln106_fu_310_p3;
reg   [3:0] select_ln106_reg_430;
wire   [3:0] select_ln106_1_fu_318_p3;
reg   [3:0] select_ln106_1_reg_435;
wire   [63:0] zext_ln114_1_fu_358_p1;
reg   [3:0] ct_fu_74;
wire   [3:0] add_ln107_fu_326_p2;
wire    ap_loop_init;
reg   [3:0] h_fu_78;
reg   [7:0] indvar_flatten19_fu_82;
wire   [7:0] select_ln106_2_fu_251_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten19_load;
reg   [13:0] indvar_flatten30_fu_86;
wire   [13:0] add_ln105_fu_230_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten30_load;
reg    BUF_r_ce0_local;
reg    BUF_1_ce0_local;
reg    BUF_2_ce0_local;
reg    BUF_3_ce0_local;
reg    BUF_4_ce0_local;
reg    BUF_5_ce0_local;
reg    BUF_6_ce0_local;
reg    BUF_7_ce0_local;
wire   [7:0] add_ln106_1_fu_245_p2;
wire   [0:0] icmp_ln107_fu_287_p2;
wire   [0:0] xor_ln105_fu_282_p2;
wire   [3:0] select_ln105_fu_275_p3;
wire   [0:0] and_ln105_fu_293_p2;
wire   [0:0] or_ln106_fu_305_p2;
wire   [3:0] add_ln106_fu_299_p2;
wire   [6:0] tmp_1_fu_342_p3;
wire   [6:0] zext_ln114_fu_349_p1;
wire   [6:0] add_ln114_fu_352_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_85;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ct_fu_74 = 4'd0;
//#0 h_fu_78 = 4'd0;
//#0 indvar_flatten19_fu_82 = 8'd0;
//#0 indvar_flatten30_fu_86 = 14'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_74 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln105_reg_419_pp0_iter0_reg == 1'd0))) begin
        ct_fu_74 <= add_ln107_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        h_fu_78 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln105_reg_419_pp0_iter0_reg == 1'd0))) begin
        h_fu_78 <= select_ln106_1_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln105_fu_224_p2 == 1'd0)) begin
            indvar_flatten19_fu_82 <= select_ln106_2_fu_251_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_82 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln105_fu_224_p2 == 1'd0)) begin
            indvar_flatten30_fu_86 <= add_ln105_fu_230_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten30_fu_86 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln105_reg_419 <= icmp_ln105_fu_224_p2;
        icmp_ln106_reg_423 <= icmp_ln106_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln105_reg_419_pp0_iter1_reg <= icmp_ln105_reg_419;
        select_ln106_1_reg_435 <= select_ln106_1_fu_318_p3;
        select_ln106_reg_430 <= select_ln106_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln105_reg_419_pp0_iter2_reg <= icmp_ln105_reg_419_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_1_ce0_local = 1'b1;
    end else begin
        BUF_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_2_ce0_local = 1'b1;
    end else begin
        BUF_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_3_ce0_local = 1'b1;
    end else begin
        BUF_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_4_ce0_local = 1'b1;
    end else begin
        BUF_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_5_ce0_local = 1'b1;
    end else begin
        BUF_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_6_ce0_local = 1'b1;
    end else begin
        BUF_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_7_ce0_local = 1'b1;
    end else begin
        BUF_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        BUF_r_ce0_local = 1'b1;
    end else begin
        BUF_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln105_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten30_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten30_load = indvar_flatten30_fu_86;
    end
end

always @ (*) begin
    if (((icmp_ln105_reg_419_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        as_buffered_stream_i_blk_n = as_buffered_stream_i_full_n;
    end else begin
        as_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln105_reg_419_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
        as_buffered_stream_i_write = 1'b1;
    end else begin
        as_buffered_stream_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if (((1'b0 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((((icmp_ln105_reg_419_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b0 == ap_block_state4_pp0_stage0_iter3)) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state4_pp0_stage0_iter3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign BUF_1_address0 = zext_ln114_1_fu_358_p1;

assign BUF_1_ce0 = BUF_1_ce0_local;

assign BUF_2_address0 = zext_ln114_1_fu_358_p1;

assign BUF_2_ce0 = BUF_2_ce0_local;

assign BUF_3_address0 = zext_ln114_1_fu_358_p1;

assign BUF_3_ce0 = BUF_3_ce0_local;

assign BUF_4_address0 = zext_ln114_1_fu_358_p1;

assign BUF_4_ce0 = BUF_4_ce0_local;

assign BUF_5_address0 = zext_ln114_1_fu_358_p1;

assign BUF_5_ce0 = BUF_5_ce0_local;

assign BUF_6_address0 = zext_ln114_1_fu_358_p1;

assign BUF_6_ce0 = BUF_6_ce0_local;

assign BUF_7_address0 = zext_ln114_1_fu_358_p1;

assign BUF_7_ce0 = BUF_7_ce0_local;

assign BUF_r_address0 = zext_ln114_1_fu_358_p1;

assign BUF_r_ce0 = BUF_r_ce0_local;

assign add_ln105_fu_230_p2 = (ap_sig_allocacmp_indvar_flatten30_load + 14'd1);

assign add_ln106_1_fu_245_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 8'd1);

assign add_ln106_fu_299_p2 = (select_ln105_fu_275_p3 + 4'd1);

assign add_ln107_fu_326_p2 = (select_ln106_fu_310_p3 + 4'd1);

assign add_ln114_fu_352_p2 = (tmp_1_fu_342_p3 + zext_ln114_fu_349_p1);

assign and_ln105_fu_293_p2 = (xor_ln105_fu_282_p2 & icmp_ln107_fu_287_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln105_reg_419_pp0_iter2_reg == 1'd0) & (as_buffered_stream_i_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_85 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign as_buffered_stream_i_din = {{{{{{{{BUF_7_q0}, {BUF_6_q0}}, {BUF_5_q0}}, {BUF_4_q0}}, {BUF_3_q0}}, {BUF_2_q0}}, {BUF_1_q0}}, {BUF_r_q0}};

assign icmp_ln105_fu_224_p2 = ((ap_sig_allocacmp_indvar_flatten30_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln105_reg_419_pp0_iter0_reg = icmp_ln105_reg_419;

assign icmp_ln106_fu_239_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 8'd112) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_287_p2 = ((ct_fu_74 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln106_fu_305_p2 = (icmp_ln106_reg_423 | and_ln105_fu_293_p2);

assign select_ln105_fu_275_p3 = ((icmp_ln106_reg_423[0:0] == 1'b1) ? 4'd0 : h_fu_78);

assign select_ln106_1_fu_318_p3 = ((and_ln105_fu_293_p2[0:0] == 1'b1) ? add_ln106_fu_299_p2 : select_ln105_fu_275_p3);

assign select_ln106_2_fu_251_p3 = ((icmp_ln106_fu_239_p2[0:0] == 1'b1) ? 8'd1 : add_ln106_1_fu_245_p2);

assign select_ln106_fu_310_p3 = ((or_ln106_fu_305_p2[0:0] == 1'b1) ? 4'd0 : ct_fu_74);

assign tmp_1_fu_342_p3 = {{select_ln106_1_reg_435}, {3'd0}};

assign xor_ln105_fu_282_p2 = (icmp_ln106_reg_423 ^ 1'd1);

assign zext_ln114_1_fu_358_p1 = add_ln114_fu_352_p2;

assign zext_ln114_fu_349_p1 = select_ln106_reg_430;

endmodule //MUX_do_buffer_merge6_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_unpack7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        xmq_stream_TDATA,
        xmq_stream_TVALID,
        xmq_stream_TREADY,
        xmq_buffered_stream_i_din,
        xmq_buffered_stream_i_full_n,
        xmq_buffered_stream_i_write,
        xmq_buffered_stream_i_num_data_valid,
        xmq_buffered_stream_i_fifo_cap,
        spec_select3_loc_i_c_din,
        spec_select3_loc_i_c_full_n,
        spec_select3_loc_i_c_write,
        spec_select3_loc_i_c_num_data_valid,
        spec_select3_loc_i_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [63:0] xmq_stream_TDATA;
input   xmq_stream_TVALID;
output   xmq_stream_TREADY;
output  [511:0] xmq_buffered_stream_i_din;
input   xmq_buffered_stream_i_full_n;
output   xmq_buffered_stream_i_write;
input  [2:0] xmq_buffered_stream_i_num_data_valid;
input  [2:0] xmq_buffered_stream_i_fifo_cap;
output  [0:0] spec_select3_loc_i_c_din;
input   spec_select3_loc_i_c_full_n;
output   spec_select3_loc_i_c_write;
input  [2:0] spec_select3_loc_i_c_num_data_valid;
input  [2:0] spec_select3_loc_i_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xmq_stream_TREADY;
reg spec_select3_loc_i_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    spec_select3_loc_i_c_blk_n;
wire   [0:0] p_read_2_read_fu_84_p2;
reg   [0:0] p_read_2_reg_158;
reg    ap_block_state1;
reg    BUF_ce0;
wire   [63:0] BUF_q0;
reg    BUF_ce1;
reg    BUF_we1;
reg    BUF_8_ce0;
wire   [63:0] BUF_8_q0;
reg    BUF_8_ce1;
reg    BUF_8_we1;
reg    BUF_9_ce0;
wire   [63:0] BUF_9_q0;
reg    BUF_9_ce1;
reg    BUF_9_we1;
reg    BUF_10_ce0;
wire   [63:0] BUF_10_q0;
reg    BUF_10_ce1;
reg    BUF_10_we1;
reg    BUF_11_ce0;
wire   [63:0] BUF_11_q0;
reg    BUF_11_ce1;
reg    BUF_11_we1;
reg    BUF_12_ce0;
wire   [63:0] BUF_12_q0;
reg    BUF_12_ce1;
reg    BUF_12_we1;
reg    BUF_13_ce0;
wire   [63:0] BUF_13_q0;
reg    BUF_13_ce1;
reg    BUF_13_we1;
reg    BUF_14_ce0;
wire   [63:0] BUF_14_q0;
reg    BUF_14_ce1;
reg    BUF_14_we1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_done;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_idle;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_ready;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_d1;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_address1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_ce1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_we1;
wire   [63:0] grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_d1;
wire    grp_do_buffer_unpack7_Pipeline_1_fu_98_xmq_stream_TREADY;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_done;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_idle;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_ready;
wire   [511:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_xmq_buffered_stream_i_din;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_xmq_buffered_stream_i_write;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_r_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_r_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_8_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_8_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_9_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_9_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_10_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_10_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_11_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_11_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_12_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_12_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_13_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_13_ce0;
wire   [9:0] grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_14_address0;
wire    grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_14_ce0;
reg    grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start_reg = 1'b0;
//#0 grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start_reg = 1'b0;
end

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_r_address0),
    .ce0(BUF_ce0),
    .q0(BUF_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_address1),
    .ce1(BUF_ce1),
    .we1(BUF_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_8_address0),
    .ce0(BUF_8_ce0),
    .q0(BUF_8_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_address1),
    .ce1(BUF_8_ce1),
    .we1(BUF_8_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_9_address0),
    .ce0(BUF_9_ce0),
    .q0(BUF_9_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_address1),
    .ce1(BUF_9_ce1),
    .we1(BUF_9_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_10_address0),
    .ce0(BUF_10_ce0),
    .q0(BUF_10_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_address1),
    .ce1(BUF_10_ce1),
    .we1(BUF_10_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_11_address0),
    .ce0(BUF_11_ce0),
    .q0(BUF_11_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_address1),
    .ce1(BUF_11_ce1),
    .we1(BUF_11_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_12_address0),
    .ce0(BUF_12_ce0),
    .q0(BUF_12_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_address1),
    .ce1(BUF_12_ce1),
    .we1(BUF_12_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_13_address0),
    .ce0(BUF_13_ce0),
    .q0(BUF_13_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_address1),
    .ce1(BUF_13_ce1),
    .we1(BUF_13_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_d1)
);

MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_14_address0),
    .ce0(BUF_14_ce0),
    .q0(BUF_14_q0),
    .address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_address1),
    .ce1(BUF_14_ce1),
    .we1(BUF_14_we1),
    .d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_d1)
);

MUX_do_buffer_unpack7_Pipeline_1 grp_do_buffer_unpack7_Pipeline_1_fu_98(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start),
    .ap_done(grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_done),
    .ap_idle(grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_idle),
    .ap_ready(grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_ready),
    .xmq_stream_TVALID(xmq_stream_TVALID),
    .BUF_r_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_address1),
    .BUF_r_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_ce1),
    .BUF_r_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_we1),
    .BUF_r_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_d1),
    .BUF_8_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_address1),
    .BUF_8_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_ce1),
    .BUF_8_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_we1),
    .BUF_8_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_d1),
    .BUF_9_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_address1),
    .BUF_9_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_ce1),
    .BUF_9_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_we1),
    .BUF_9_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_d1),
    .BUF_10_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_address1),
    .BUF_10_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_ce1),
    .BUF_10_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_we1),
    .BUF_10_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_d1),
    .BUF_11_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_address1),
    .BUF_11_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_ce1),
    .BUF_11_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_we1),
    .BUF_11_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_d1),
    .BUF_12_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_address1),
    .BUF_12_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_ce1),
    .BUF_12_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_we1),
    .BUF_12_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_d1),
    .BUF_13_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_address1),
    .BUF_13_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_ce1),
    .BUF_13_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_we1),
    .BUF_13_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_d1),
    .BUF_14_address1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_address1),
    .BUF_14_ce1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_ce1),
    .BUF_14_we1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_we1),
    .BUF_14_d1(grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_d1),
    .xmq_stream_TDATA(xmq_stream_TDATA),
    .xmq_stream_TREADY(grp_do_buffer_unpack7_Pipeline_1_fu_98_xmq_stream_TREADY)
);

MUX_do_buffer_unpack7_Pipeline_2 grp_do_buffer_unpack7_Pipeline_2_fu_112(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start),
    .ap_done(grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_done),
    .ap_idle(grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_idle),
    .ap_ready(grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_ready),
    .xmq_buffered_stream_i_din(grp_do_buffer_unpack7_Pipeline_2_fu_112_xmq_buffered_stream_i_din),
    .xmq_buffered_stream_i_full_n(xmq_buffered_stream_i_full_n),
    .xmq_buffered_stream_i_write(grp_do_buffer_unpack7_Pipeline_2_fu_112_xmq_buffered_stream_i_write),
    .xmq_buffered_stream_i_num_data_valid(3'd0),
    .xmq_buffered_stream_i_fifo_cap(3'd0),
    .BUF_r_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_r_address0),
    .BUF_r_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_r_ce0),
    .BUF_r_q0(BUF_q0),
    .BUF_8_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_8_address0),
    .BUF_8_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_8_ce0),
    .BUF_8_q0(BUF_8_q0),
    .BUF_9_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_9_address0),
    .BUF_9_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_9_ce0),
    .BUF_9_q0(BUF_9_q0),
    .BUF_10_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_10_address0),
    .BUF_10_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_10_ce0),
    .BUF_10_q0(BUF_10_q0),
    .BUF_11_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_11_address0),
    .BUF_11_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_11_ce0),
    .BUF_11_q0(BUF_11_q0),
    .BUF_12_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_12_address0),
    .BUF_12_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_12_ce0),
    .BUF_12_q0(BUF_12_q0),
    .BUF_13_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_13_address0),
    .BUF_13_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_13_ce0),
    .BUF_13_q0(BUF_13_q0),
    .BUF_14_address0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_14_address0),
    .BUF_14_ce0(grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_14_ce0),
    .BUF_14_q0(BUF_14_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_ready == 1'b1)) begin
            grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_ready == 1'b1)) begin
            grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_2_reg_158 <= p_read;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_10_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_10_ce0;
    end else begin
        BUF_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_10_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_ce1;
    end else begin
        BUF_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_10_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_10_we1;
    end else begin
        BUF_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_11_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_11_ce0;
    end else begin
        BUF_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_11_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_ce1;
    end else begin
        BUF_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_11_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_11_we1;
    end else begin
        BUF_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_12_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_12_ce0;
    end else begin
        BUF_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_12_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_ce1;
    end else begin
        BUF_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_12_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_12_we1;
    end else begin
        BUF_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_13_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_13_ce0;
    end else begin
        BUF_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_13_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_ce1;
    end else begin
        BUF_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_13_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_13_we1;
    end else begin
        BUF_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_14_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_14_ce0;
    end else begin
        BUF_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_14_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_ce1;
    end else begin
        BUF_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_14_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_14_we1;
    end else begin
        BUF_14_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_8_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_8_ce0;
    end else begin
        BUF_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_8_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_ce1;
    end else begin
        BUF_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_8_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_8_we1;
    end else begin
        BUF_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_9_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_9_ce0;
    end else begin
        BUF_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_9_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_ce1;
    end else begin
        BUF_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_9_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_9_we1;
    end else begin
        BUF_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_2_reg_158 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_ce0 = grp_do_buffer_unpack7_Pipeline_2_fu_112_BUF_r_ce0;
    end else begin
        BUF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_ce1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_ce1;
    end else begin
        BUF_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_we1 = grp_do_buffer_unpack7_Pipeline_1_fu_98_BUF_r_we1;
    end else begin
        BUF_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        spec_select3_loc_i_c_blk_n = spec_select3_loc_i_c_full_n;
    end else begin
        spec_select3_loc_i_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        spec_select3_loc_i_c_write = 1'b1;
    end else begin
        spec_select3_loc_i_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xmq_stream_TREADY = grp_do_buffer_unpack7_Pipeline_1_fu_98_xmq_stream_TREADY;
    end else begin
        xmq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (p_read_2_read_fu_84_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state1) & (p_read_2_read_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((spec_select3_loc_i_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((p_read_2_reg_158 == 1'd1) & (grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_done == 1'b0));
end

assign grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start = grp_do_buffer_unpack7_Pipeline_1_fu_98_ap_start_reg;

assign grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start = grp_do_buffer_unpack7_Pipeline_2_fu_112_ap_start_reg;

assign p_read_2_read_fu_84_p2 = p_read;

assign spec_select3_loc_i_c_din = p_read;

assign xmq_buffered_stream_i_din = grp_do_buffer_unpack7_Pipeline_2_fu_112_xmq_buffered_stream_i_din;

assign xmq_buffered_stream_i_write = grp_do_buffer_unpack7_Pipeline_2_fu_112_xmq_buffered_stream_i_write;

endmodule //MUX_do_buffer_unpack7
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module MUX_do_buffer_unpack7_BUF_RAM_2P_BRAM_1R1W (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 64;
parameter AddressWidth = 10;
parameter AddressRange = 608;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "block"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_unpack7_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xmq_stream_TVALID,
        BUF_r_address1,
        BUF_r_ce1,
        BUF_r_we1,
        BUF_r_d1,
        BUF_8_address1,
        BUF_8_ce1,
        BUF_8_we1,
        BUF_8_d1,
        BUF_9_address1,
        BUF_9_ce1,
        BUF_9_we1,
        BUF_9_d1,
        BUF_10_address1,
        BUF_10_ce1,
        BUF_10_we1,
        BUF_10_d1,
        BUF_11_address1,
        BUF_11_ce1,
        BUF_11_we1,
        BUF_11_d1,
        BUF_12_address1,
        BUF_12_ce1,
        BUF_12_we1,
        BUF_12_d1,
        BUF_13_address1,
        BUF_13_ce1,
        BUF_13_we1,
        BUF_13_d1,
        BUF_14_address1,
        BUF_14_ce1,
        BUF_14_we1,
        BUF_14_d1,
        xmq_stream_TDATA,
        xmq_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 2'd1;
parameter    ap_ST_iter0_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xmq_stream_TVALID;
output  [9:0] BUF_r_address1;
output   BUF_r_ce1;
output   BUF_r_we1;
output  [63:0] BUF_r_d1;
output  [9:0] BUF_8_address1;
output   BUF_8_ce1;
output   BUF_8_we1;
output  [63:0] BUF_8_d1;
output  [9:0] BUF_9_address1;
output   BUF_9_ce1;
output   BUF_9_we1;
output  [63:0] BUF_9_d1;
output  [9:0] BUF_10_address1;
output   BUF_10_ce1;
output   BUF_10_we1;
output  [63:0] BUF_10_d1;
output  [9:0] BUF_11_address1;
output   BUF_11_ce1;
output   BUF_11_we1;
output  [63:0] BUF_11_d1;
output  [9:0] BUF_12_address1;
output   BUF_12_ce1;
output   BUF_12_we1;
output  [63:0] BUF_12_d1;
output  [9:0] BUF_13_address1;
output   BUF_13_ce1;
output   BUF_13_we1;
output  [63:0] BUF_13_d1;
output  [9:0] BUF_14_address1;
output   BUF_14_ce1;
output   BUF_14_we1;
output  [63:0] BUF_14_d1;
input  [63:0] xmq_stream_TDATA;
output   xmq_stream_TREADY;

reg ap_idle;
reg xmq_stream_TREADY;

reg   [1:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire    ap_CS_iter0_fsm_state2;
reg   [0:0] icmp_ln55_reg_359;
reg   [0:0] icmp_ln55_reg_359_pp0_iter0_reg;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xmq_stream_TDATA_blk_n;
wire   [0:0] icmp_ln55_fu_260_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [12:0] add_ln55_2_fu_266_p2;
reg   [12:0] add_ln55_2_reg_363;
wire   [0:0] icmp_ln56_fu_275_p2;
reg   [0:0] icmp_ln56_reg_368;
wire   [3:0] select_ln55_fu_281_p3;
reg   [3:0] select_ln55_reg_373;
wire   [2:0] trunc_ln56_fu_289_p1;
reg   [2:0] trunc_ln56_reg_378;
reg   [2:0] trunc_ln56_reg_378_pp0_iter0_reg;
wire   [9:0] select_ln55_2_fu_302_p3;
reg   [9:0] select_ln55_2_reg_382;
wire   [63:0] zext_ln55_fu_323_p1;
reg   [3:0] tt_fu_80;
wire   [3:0] add_ln56_fu_309_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_tt_load;
reg   [9:0] ct_fu_84;
reg   [12:0] indvar_flatten_fu_88;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
reg    BUF_13_we1_local;
reg    BUF_13_ce1_local;
reg    BUF_12_we1_local;
reg    BUF_12_ce1_local;
reg    BUF_11_we1_local;
reg    BUF_11_ce1_local;
reg    BUF_10_we1_local;
reg    BUF_10_ce1_local;
reg    BUF_9_we1_local;
reg    BUF_9_ce1_local;
reg    BUF_8_we1_local;
reg    BUF_8_ce1_local;
reg    BUF_r_we1_local;
reg    BUF_r_ce1_local;
reg    BUF_14_we1_local;
reg    BUF_14_ce1_local;
wire   [9:0] add_ln55_fu_296_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter0_fsm_state2_blk;
reg    ap_ST_iter1_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 2'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 tt_fu_80 = 4'd0;
//#0 ct_fu_84 = 10'd0;
//#0 indvar_flatten_fu_88 = 13'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_84 <= 10'd0;
    end else if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        ct_fu_84 <= select_ln55_2_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_88 <= 13'd0;
    end else if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (icmp_ln55_reg_359 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        indvar_flatten_fu_88 <= add_ln55_2_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_80 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (icmp_ln55_reg_359 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        tt_fu_80 <= add_ln56_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln55_2_reg_363 <= add_ln55_2_fu_266_p2;
        icmp_ln55_reg_359 <= icmp_ln55_fu_260_p2;
        icmp_ln56_reg_368 <= icmp_ln56_fu_275_p2;
        select_ln55_reg_373 <= select_ln55_fu_281_p3;
        trunc_ln56_reg_378 <= trunc_ln56_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        icmp_ln55_reg_359_pp0_iter0_reg <= icmp_ln55_reg_359;
        select_ln55_2_reg_382 <= select_ln55_2_fu_302_p3;
        trunc_ln56_reg_378_pp0_iter0_reg <= trunc_ln56_reg_378;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_10_ce1_local = 1'b1;
    end else begin
        BUF_10_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd3))) begin
        BUF_10_we1_local = 1'b1;
    end else begin
        BUF_10_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_11_ce1_local = 1'b1;
    end else begin
        BUF_11_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd4))) begin
        BUF_11_we1_local = 1'b1;
    end else begin
        BUF_11_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_12_ce1_local = 1'b1;
    end else begin
        BUF_12_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd5))) begin
        BUF_12_we1_local = 1'b1;
    end else begin
        BUF_12_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_13_ce1_local = 1'b1;
    end else begin
        BUF_13_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd6))) begin
        BUF_13_we1_local = 1'b1;
    end else begin
        BUF_13_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_14_ce1_local = 1'b1;
    end else begin
        BUF_14_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd7))) begin
        BUF_14_we1_local = 1'b1;
    end else begin
        BUF_14_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_8_ce1_local = 1'b1;
    end else begin
        BUF_8_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd1))) begin
        BUF_8_we1_local = 1'b1;
    end else begin
        BUF_8_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_9_ce1_local = 1'b1;
    end else begin
        BUF_9_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd2))) begin
        BUF_9_we1_local = 1'b1;
    end else begin
        BUF_9_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_r_ce1_local = 1'b1;
    end else begin
        BUF_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_378_pp0_iter0_reg == 3'd0))) begin
        BUF_r_we1_local = 1'b1;
    end else begin
        BUF_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter0_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (icmp_ln55_reg_359 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tt_load = 4'd0;
    end else begin
        ap_sig_allocacmp_tt_load = tt_fu_80;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3))) begin
        xmq_stream_TDATA_blk_n = xmq_stream_TVALID;
    end else begin
        xmq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        xmq_stream_TREADY = 1'b1;
    end else begin
        xmq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end
        end
        ap_ST_iter0_fsm_state2 : begin
            if (~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter0_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((icmp_ln55_reg_359_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter0_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter1)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state3;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state3;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state3;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign BUF_10_address1 = zext_ln55_fu_323_p1;

assign BUF_10_ce1 = BUF_10_ce1_local;

assign BUF_10_d1 = xmq_stream_TDATA;

assign BUF_10_we1 = BUF_10_we1_local;

assign BUF_11_address1 = zext_ln55_fu_323_p1;

assign BUF_11_ce1 = BUF_11_ce1_local;

assign BUF_11_d1 = xmq_stream_TDATA;

assign BUF_11_we1 = BUF_11_we1_local;

assign BUF_12_address1 = zext_ln55_fu_323_p1;

assign BUF_12_ce1 = BUF_12_ce1_local;

assign BUF_12_d1 = xmq_stream_TDATA;

assign BUF_12_we1 = BUF_12_we1_local;

assign BUF_13_address1 = zext_ln55_fu_323_p1;

assign BUF_13_ce1 = BUF_13_ce1_local;

assign BUF_13_d1 = xmq_stream_TDATA;

assign BUF_13_we1 = BUF_13_we1_local;

assign BUF_14_address1 = zext_ln55_fu_323_p1;

assign BUF_14_ce1 = BUF_14_ce1_local;

assign BUF_14_d1 = xmq_stream_TDATA;

assign BUF_14_we1 = BUF_14_we1_local;

assign BUF_8_address1 = zext_ln55_fu_323_p1;

assign BUF_8_ce1 = BUF_8_ce1_local;

assign BUF_8_d1 = xmq_stream_TDATA;

assign BUF_8_we1 = BUF_8_we1_local;

assign BUF_9_address1 = zext_ln55_fu_323_p1;

assign BUF_9_ce1 = BUF_9_ce1_local;

assign BUF_9_d1 = xmq_stream_TDATA;

assign BUF_9_we1 = BUF_9_we1_local;

assign BUF_r_address1 = zext_ln55_fu_323_p1;

assign BUF_r_ce1 = BUF_r_ce1_local;

assign BUF_r_d1 = xmq_stream_TDATA;

assign BUF_r_we1 = BUF_r_we1_local;

assign add_ln55_2_fu_266_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign add_ln55_fu_296_p2 = (ct_fu_84 + 10'd1);

assign add_ln56_fu_309_p2 = (select_ln55_reg_373 + 4'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter0_fsm_state2 = ap_CS_iter0_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state3 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln55_reg_359_pp0_iter0_reg == 1'd0) & (xmq_stream_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln55_fu_260_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd4864) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_275_p2 = ((ap_sig_allocacmp_tt_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln55_2_fu_302_p3 = ((icmp_ln56_reg_368[0:0] == 1'b1) ? add_ln55_fu_296_p2 : ct_fu_84);

assign select_ln55_fu_281_p3 = ((icmp_ln56_fu_275_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_tt_load);

assign trunc_ln56_fu_289_p1 = select_ln55_fu_281_p3[2:0];

assign zext_ln55_fu_323_p1 = select_ln55_2_reg_382;

endmodule //MUX_do_buffer_unpack7_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_unpack7_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xmq_buffered_stream_i_din,
        xmq_buffered_stream_i_full_n,
        xmq_buffered_stream_i_write,
        xmq_buffered_stream_i_num_data_valid,
        xmq_buffered_stream_i_fifo_cap,
        BUF_r_address0,
        BUF_r_ce0,
        BUF_r_q0,
        BUF_8_address0,
        BUF_8_ce0,
        BUF_8_q0,
        BUF_9_address0,
        BUF_9_ce0,
        BUF_9_q0,
        BUF_10_address0,
        BUF_10_ce0,
        BUF_10_q0,
        BUF_11_address0,
        BUF_11_ce0,
        BUF_11_q0,
        BUF_12_address0,
        BUF_12_ce0,
        BUF_12_q0,
        BUF_13_address0,
        BUF_13_ce0,
        BUF_13_q0,
        BUF_14_address0,
        BUF_14_ce0,
        BUF_14_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [511:0] xmq_buffered_stream_i_din;
input   xmq_buffered_stream_i_full_n;
output   xmq_buffered_stream_i_write;
input  [2:0] xmq_buffered_stream_i_num_data_valid;
input  [2:0] xmq_buffered_stream_i_fifo_cap;
output  [9:0] BUF_r_address0;
output   BUF_r_ce0;
input  [63:0] BUF_r_q0;
output  [9:0] BUF_8_address0;
output   BUF_8_ce0;
input  [63:0] BUF_8_q0;
output  [9:0] BUF_9_address0;
output   BUF_9_ce0;
input  [63:0] BUF_9_q0;
output  [9:0] BUF_10_address0;
output   BUF_10_ce0;
input  [63:0] BUF_10_q0;
output  [9:0] BUF_11_address0;
output   BUF_11_ce0;
input  [63:0] BUF_11_q0;
output  [9:0] BUF_12_address0;
output   BUF_12_ce0;
input  [63:0] BUF_12_q0;
output  [9:0] BUF_13_address0;
output   BUF_13_ce0;
input  [63:0] BUF_13_q0;
output  [9:0] BUF_14_address0;
output   BUF_14_ce0;
input  [63:0] BUF_14_q0;

reg ap_idle;
reg xmq_buffered_stream_i_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln79_reg_286;
reg   [0:0] icmp_ln79_reg_286_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln79_fu_194_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xmq_buffered_stream_i_blk_n;
wire   [0:0] icmp_ln79_reg_286_pp0_iter0_reg;
wire   [63:0] zext_ln80_fu_228_p1;
reg   [9:0] ct_fu_62;
wire   [9:0] add_ln80_fu_240_p2;
wire    ap_loop_init;
reg   [16:0] indvar_flatten6_fu_66;
wire   [16:0] add_ln79_fu_200_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    BUF_r_ce0_local;
reg    BUF_8_ce0_local;
reg    BUF_9_ce0_local;
reg    BUF_10_ce0_local;
reg    BUF_11_ce0_local;
reg    BUF_12_ce0_local;
reg    BUF_13_ce0_local;
reg    BUF_14_ce0_local;
wire   [0:0] icmp_ln80_fu_214_p2;
wire   [9:0] select_ln79_fu_220_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_62 = 10'd0;
//#0 indvar_flatten6_fu_66 = 17'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_62 <= 10'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln79_reg_286_pp0_iter0_reg == 1'd0))) begin
        ct_fu_62 <= add_ln80_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln79_fu_194_p2 == 1'd0)) begin
            indvar_flatten6_fu_66 <= add_ln79_fu_200_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_66 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln79_reg_286 <= icmp_ln79_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln79_reg_286_pp0_iter1_reg <= icmp_ln79_reg_286;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_10_ce0_local = 1'b1;
    end else begin
        BUF_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_11_ce0_local = 1'b1;
    end else begin
        BUF_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_12_ce0_local = 1'b1;
    end else begin
        BUF_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_13_ce0_local = 1'b1;
    end else begin
        BUF_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_14_ce0_local = 1'b1;
    end else begin
        BUF_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_8_ce0_local = 1'b1;
    end else begin
        BUF_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_9_ce0_local = 1'b1;
    end else begin
        BUF_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_r_ce0_local = 1'b1;
    end else begin
        BUF_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln79_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_286_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        xmq_buffered_stream_i_blk_n = xmq_buffered_stream_i_full_n;
    end else begin
        xmq_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_286_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        xmq_buffered_stream_i_write = 1'b1;
    end else begin
        xmq_buffered_stream_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln79_reg_286_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_10_address0 = zext_ln80_fu_228_p1;

assign BUF_10_ce0 = BUF_10_ce0_local;

assign BUF_11_address0 = zext_ln80_fu_228_p1;

assign BUF_11_ce0 = BUF_11_ce0_local;

assign BUF_12_address0 = zext_ln80_fu_228_p1;

assign BUF_12_ce0 = BUF_12_ce0_local;

assign BUF_13_address0 = zext_ln80_fu_228_p1;

assign BUF_13_ce0 = BUF_13_ce0_local;

assign BUF_14_address0 = zext_ln80_fu_228_p1;

assign BUF_14_ce0 = BUF_14_ce0_local;

assign BUF_8_address0 = zext_ln80_fu_228_p1;

assign BUF_8_ce0 = BUF_8_ce0_local;

assign BUF_9_address0 = zext_ln80_fu_228_p1;

assign BUF_9_ce0 = BUF_9_ce0_local;

assign BUF_r_address0 = zext_ln80_fu_228_p1;

assign BUF_r_ce0 = BUF_r_ce0_local;

assign add_ln79_fu_200_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 17'd1);

assign add_ln80_fu_240_p2 = (select_ln79_fu_220_p3 + 10'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln79_reg_286_pp0_iter1_reg == 1'd0) & (xmq_buffered_stream_i_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln79_fu_194_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 17'd68096) ? 1'b1 : 1'b0);

assign icmp_ln79_reg_286_pp0_iter0_reg = icmp_ln79_reg_286;

assign icmp_ln80_fu_214_p2 = ((ct_fu_62 == 10'd608) ? 1'b1 : 1'b0);

assign select_ln79_fu_220_p3 = ((icmp_ln80_fu_214_p2[0:0] == 1'b1) ? 10'd0 : ct_fu_62);

assign xmq_buffered_stream_i_din = {{{{{{{{BUF_14_q0}, {BUF_13_q0}}, {BUF_12_q0}}, {BUF_11_q0}}, {BUF_10_q0}}, {BUF_9_q0}}, {BUF_8_q0}}, {BUF_r_q0}};

assign zext_ln80_fu_228_p1 = select_ln79_fu_220_p3;

endmodule //MUX_do_buffer_unpack7_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_unpack8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        xms_stream_TDATA,
        xms_stream_TVALID,
        xms_stream_TREADY,
        xms_buffered_stream_i_din,
        xms_buffered_stream_i_full_n,
        xms_buffered_stream_i_write,
        xms_buffered_stream_i_num_data_valid,
        xms_buffered_stream_i_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [7:0] xms_stream_TDATA;
input   xms_stream_TVALID;
output   xms_stream_TREADY;
output  [31:0] xms_buffered_stream_i_din;
input   xms_buffered_stream_i_full_n;
output   xms_buffered_stream_i_write;
input  [2:0] xms_buffered_stream_i_num_data_valid;
input  [2:0] xms_buffered_stream_i_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xms_stream_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] p_read_1_read_fu_70_p2;
reg   [0:0] p_read_1_reg_124;
reg    ap_block_state1;
reg    BUF_ce0;
wire   [3:0] BUF_q0;
reg    BUF_ce1;
reg    BUF_we1;
reg    BUF_1_ce0;
wire   [3:0] BUF_1_q0;
reg    BUF_1_ce1;
reg    BUF_1_we1;
reg    BUF_2_ce0;
wire   [3:0] BUF_2_q0;
reg    BUF_2_ce1;
reg    BUF_2_we1;
reg    BUF_3_ce0;
wire   [3:0] BUF_3_q0;
reg    BUF_3_ce1;
reg    BUF_3_we1;
reg    BUF_4_ce0;
wire   [3:0] BUF_4_q0;
reg    BUF_4_ce1;
reg    BUF_4_we1;
reg    BUF_5_ce0;
wire   [3:0] BUF_5_q0;
reg    BUF_5_ce1;
reg    BUF_5_we1;
reg    BUF_6_ce0;
wire   [3:0] BUF_6_q0;
reg    BUF_6_ce1;
reg    BUF_6_we1;
reg    BUF_7_ce0;
wire   [3:0] BUF_7_q0;
reg    BUF_7_ce1;
reg    BUF_7_we1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_done;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_idle;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_ready;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_d1;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_address1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_ce1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_we1;
wire   [3:0] grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_d1;
wire    grp_do_buffer_unpack8_Pipeline_1_fu_76_xms_stream_TREADY;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_done;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_idle;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_ready;
wire   [31:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_xms_buffered_stream_i_din;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_xms_buffered_stream_i_write;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_r_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_r_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_1_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_1_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_2_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_2_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_3_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_3_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_4_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_4_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_5_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_5_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_6_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_6_ce0;
wire   [9:0] grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_7_address0;
wire    grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_7_ce0;
reg    grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start_reg = 1'b0;
//#0 grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start_reg = 1'b0;
end

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_r_address0),
    .ce0(BUF_ce0),
    .q0(BUF_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_address1),
    .ce1(BUF_ce1),
    .we1(BUF_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_1_address0),
    .ce0(BUF_1_ce0),
    .q0(BUF_1_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_address1),
    .ce1(BUF_1_ce1),
    .we1(BUF_1_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_2_address0),
    .ce0(BUF_2_ce0),
    .q0(BUF_2_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_address1),
    .ce1(BUF_2_ce1),
    .we1(BUF_2_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_3_address0),
    .ce0(BUF_3_ce0),
    .q0(BUF_3_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_address1),
    .ce1(BUF_3_ce1),
    .we1(BUF_3_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_4_address0),
    .ce0(BUF_4_ce0),
    .q0(BUF_4_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_address1),
    .ce1(BUF_4_ce1),
    .we1(BUF_4_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_5_address0),
    .ce0(BUF_5_ce0),
    .q0(BUF_5_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_address1),
    .ce1(BUF_5_ce1),
    .we1(BUF_5_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_6_address0),
    .ce0(BUF_6_ce0),
    .q0(BUF_6_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_address1),
    .ce1(BUF_6_ce1),
    .we1(BUF_6_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_d1)
);

MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 608 ),
    .AddressWidth( 10 ))
BUF_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_7_address0),
    .ce0(BUF_7_ce0),
    .q0(BUF_7_q0),
    .address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_address1),
    .ce1(BUF_7_ce1),
    .we1(BUF_7_we1),
    .d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_d1)
);

MUX_do_buffer_unpack8_Pipeline_1 grp_do_buffer_unpack8_Pipeline_1_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start),
    .ap_done(grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_done),
    .ap_idle(grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_idle),
    .ap_ready(grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_ready),
    .xms_stream_TVALID(xms_stream_TVALID),
    .BUF_r_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_address1),
    .BUF_r_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_ce1),
    .BUF_r_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_we1),
    .BUF_r_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_d1),
    .BUF_1_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_address1),
    .BUF_1_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_ce1),
    .BUF_1_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_we1),
    .BUF_1_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_d1),
    .BUF_2_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_address1),
    .BUF_2_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_ce1),
    .BUF_2_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_we1),
    .BUF_2_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_d1),
    .BUF_3_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_address1),
    .BUF_3_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_ce1),
    .BUF_3_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_we1),
    .BUF_3_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_d1),
    .BUF_4_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_address1),
    .BUF_4_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_ce1),
    .BUF_4_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_we1),
    .BUF_4_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_d1),
    .BUF_5_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_address1),
    .BUF_5_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_ce1),
    .BUF_5_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_we1),
    .BUF_5_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_d1),
    .BUF_6_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_address1),
    .BUF_6_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_ce1),
    .BUF_6_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_we1),
    .BUF_6_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_d1),
    .BUF_7_address1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_address1),
    .BUF_7_ce1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_ce1),
    .BUF_7_we1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_we1),
    .BUF_7_d1(grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_d1),
    .xms_stream_TDATA(xms_stream_TDATA),
    .xms_stream_TREADY(grp_do_buffer_unpack8_Pipeline_1_fu_76_xms_stream_TREADY)
);

MUX_do_buffer_unpack8_Pipeline_2 grp_do_buffer_unpack8_Pipeline_2_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start),
    .ap_done(grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_done),
    .ap_idle(grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_idle),
    .ap_ready(grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_ready),
    .xms_buffered_stream_i_din(grp_do_buffer_unpack8_Pipeline_2_fu_90_xms_buffered_stream_i_din),
    .xms_buffered_stream_i_full_n(xms_buffered_stream_i_full_n),
    .xms_buffered_stream_i_write(grp_do_buffer_unpack8_Pipeline_2_fu_90_xms_buffered_stream_i_write),
    .xms_buffered_stream_i_num_data_valid(3'd0),
    .xms_buffered_stream_i_fifo_cap(3'd0),
    .BUF_r_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_r_address0),
    .BUF_r_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_r_ce0),
    .BUF_r_q0(BUF_q0),
    .BUF_1_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_1_address0),
    .BUF_1_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_1_ce0),
    .BUF_1_q0(BUF_1_q0),
    .BUF_2_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_2_address0),
    .BUF_2_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_2_ce0),
    .BUF_2_q0(BUF_2_q0),
    .BUF_3_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_3_address0),
    .BUF_3_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_3_ce0),
    .BUF_3_q0(BUF_3_q0),
    .BUF_4_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_4_address0),
    .BUF_4_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_4_ce0),
    .BUF_4_q0(BUF_4_q0),
    .BUF_5_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_5_address0),
    .BUF_5_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_5_ce0),
    .BUF_5_q0(BUF_5_q0),
    .BUF_6_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_6_address0),
    .BUF_6_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_6_ce0),
    .BUF_6_q0(BUF_6_q0),
    .BUF_7_address0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_7_address0),
    .BUF_7_ce0(grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_7_ce0),
    .BUF_7_q0(BUF_7_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_ready == 1'b1)) begin
            grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_ready == 1'b1)) begin
            grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_1_reg_124 <= p_read;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_1_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_1_ce0;
    end else begin
        BUF_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_1_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_ce1;
    end else begin
        BUF_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_1_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_1_we1;
    end else begin
        BUF_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_2_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_2_ce0;
    end else begin
        BUF_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_2_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_ce1;
    end else begin
        BUF_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_2_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_2_we1;
    end else begin
        BUF_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_3_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_3_ce0;
    end else begin
        BUF_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_3_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_ce1;
    end else begin
        BUF_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_3_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_3_we1;
    end else begin
        BUF_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_4_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_4_ce0;
    end else begin
        BUF_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_4_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_ce1;
    end else begin
        BUF_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_4_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_4_we1;
    end else begin
        BUF_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_5_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_5_ce0;
    end else begin
        BUF_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_5_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_ce1;
    end else begin
        BUF_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_5_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_5_we1;
    end else begin
        BUF_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_6_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_6_ce0;
    end else begin
        BUF_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_6_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_ce1;
    end else begin
        BUF_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_6_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_6_we1;
    end else begin
        BUF_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_7_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_7_ce0;
    end else begin
        BUF_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_7_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_ce1;
    end else begin
        BUF_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_7_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_7_we1;
    end else begin
        BUF_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_read_1_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        BUF_ce0 = grp_do_buffer_unpack8_Pipeline_2_fu_90_BUF_r_ce0;
    end else begin
        BUF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_ce1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_ce1;
    end else begin
        BUF_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BUF_we1 = grp_do_buffer_unpack8_Pipeline_1_fu_76_BUF_r_we1;
    end else begin
        BUF_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xms_stream_TREADY = grp_do_buffer_unpack8_Pipeline_1_fu_76_xms_stream_TREADY;
    end else begin
        xms_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (p_read_1_read_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state1) & (p_read_1_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((p_read_1_reg_124 == 1'd1) & (grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_done == 1'b0));
end

assign grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start = grp_do_buffer_unpack8_Pipeline_1_fu_76_ap_start_reg;

assign grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start = grp_do_buffer_unpack8_Pipeline_2_fu_90_ap_start_reg;

assign p_read_1_read_fu_70_p2 = p_read;

assign xms_buffered_stream_i_din = grp_do_buffer_unpack8_Pipeline_2_fu_90_xms_buffered_stream_i_din;

assign xms_buffered_stream_i_write = grp_do_buffer_unpack8_Pipeline_2_fu_90_xms_buffered_stream_i_write;

endmodule //MUX_do_buffer_unpack8
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module MUX_do_buffer_unpack8_BUF_RAM_2P_BRAM_1R1W (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 10;
parameter AddressRange = 608;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "block"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_unpack8_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xms_stream_TVALID,
        BUF_r_address1,
        BUF_r_ce1,
        BUF_r_we1,
        BUF_r_d1,
        BUF_1_address1,
        BUF_1_ce1,
        BUF_1_we1,
        BUF_1_d1,
        BUF_2_address1,
        BUF_2_ce1,
        BUF_2_we1,
        BUF_2_d1,
        BUF_3_address1,
        BUF_3_ce1,
        BUF_3_we1,
        BUF_3_d1,
        BUF_4_address1,
        BUF_4_ce1,
        BUF_4_we1,
        BUF_4_d1,
        BUF_5_address1,
        BUF_5_ce1,
        BUF_5_we1,
        BUF_5_d1,
        BUF_6_address1,
        BUF_6_ce1,
        BUF_6_we1,
        BUF_6_d1,
        BUF_7_address1,
        BUF_7_ce1,
        BUF_7_we1,
        BUF_7_d1,
        xms_stream_TDATA,
        xms_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 2'd1;
parameter    ap_ST_iter0_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   xms_stream_TVALID;
output  [9:0] BUF_r_address1;
output   BUF_r_ce1;
output   BUF_r_we1;
output  [3:0] BUF_r_d1;
output  [9:0] BUF_1_address1;
output   BUF_1_ce1;
output   BUF_1_we1;
output  [3:0] BUF_1_d1;
output  [9:0] BUF_2_address1;
output   BUF_2_ce1;
output   BUF_2_we1;
output  [3:0] BUF_2_d1;
output  [9:0] BUF_3_address1;
output   BUF_3_ce1;
output   BUF_3_we1;
output  [3:0] BUF_3_d1;
output  [9:0] BUF_4_address1;
output   BUF_4_ce1;
output   BUF_4_we1;
output  [3:0] BUF_4_d1;
output  [9:0] BUF_5_address1;
output   BUF_5_ce1;
output   BUF_5_we1;
output  [3:0] BUF_5_d1;
output  [9:0] BUF_6_address1;
output   BUF_6_ce1;
output   BUF_6_we1;
output  [3:0] BUF_6_d1;
output  [9:0] BUF_7_address1;
output   BUF_7_ce1;
output   BUF_7_we1;
output  [3:0] BUF_7_d1;
input  [7:0] xms_stream_TDATA;
output   xms_stream_TREADY;

reg ap_idle;
reg xms_stream_TREADY;

reg   [1:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire    ap_CS_iter0_fsm_state2;
reg   [0:0] icmp_ln55_reg_363;
reg   [0:0] icmp_ln55_reg_363_pp0_iter0_reg;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xms_stream_TDATA_blk_n;
wire   [0:0] icmp_ln55_fu_252_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [12:0] add_ln55_1_fu_258_p2;
reg   [12:0] add_ln55_1_reg_367;
wire   [0:0] icmp_ln56_fu_267_p2;
reg   [0:0] icmp_ln56_reg_372;
wire   [3:0] select_ln55_fu_273_p3;
reg   [3:0] select_ln55_reg_377;
wire   [2:0] trunc_ln56_fu_281_p1;
reg   [2:0] trunc_ln56_reg_382;
reg   [2:0] trunc_ln56_reg_382_pp0_iter0_reg;
wire   [9:0] select_ln55_1_fu_294_p3;
reg   [9:0] select_ln55_1_reg_386;
wire   [63:0] zext_ln55_fu_315_p1;
reg   [3:0] tt_fu_80;
wire   [3:0] add_ln56_fu_301_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_tt_load;
reg   [9:0] ct_fu_84;
reg   [12:0] indvar_flatten_fu_88;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
reg    BUF_6_we1_local;
wire   [3:0] trunc_ln60_fu_326_p1;
reg    BUF_6_ce1_local;
reg    BUF_5_we1_local;
reg    BUF_5_ce1_local;
reg    BUF_4_we1_local;
reg    BUF_4_ce1_local;
reg    BUF_3_we1_local;
reg    BUF_3_ce1_local;
reg    BUF_2_we1_local;
reg    BUF_2_ce1_local;
reg    BUF_1_we1_local;
reg    BUF_1_ce1_local;
reg    BUF_r_we1_local;
reg    BUF_r_ce1_local;
reg    BUF_7_we1_local;
reg    BUF_7_ce1_local;
wire   [9:0] add_ln55_fu_288_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter0_fsm_state2_blk;
reg    ap_ST_iter1_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 2'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 tt_fu_80 = 4'd0;
//#0 ct_fu_84 = 10'd0;
//#0 indvar_flatten_fu_88 = 13'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_84 <= 10'd0;
    end else if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        ct_fu_84 <= select_ln55_1_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_88 <= 13'd0;
    end else if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (icmp_ln55_reg_363 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        indvar_flatten_fu_88 <= add_ln55_1_reg_367;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_80 <= 4'd0;
    end else if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (icmp_ln55_reg_363 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        tt_fu_80 <= add_ln56_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln55_1_reg_367 <= add_ln55_1_fu_258_p2;
        icmp_ln55_reg_363 <= icmp_ln55_fu_252_p2;
        icmp_ln56_reg_372 <= icmp_ln56_fu_267_p2;
        select_ln55_reg_377 <= select_ln55_fu_273_p3;
        trunc_ln56_reg_382 <= trunc_ln56_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        icmp_ln55_reg_363_pp0_iter0_reg <= icmp_ln55_reg_363;
        select_ln55_1_reg_386 <= select_ln55_1_fu_294_p3;
        trunc_ln56_reg_382_pp0_iter0_reg <= trunc_ln56_reg_382;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_1_ce1_local = 1'b1;
    end else begin
        BUF_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd1))) begin
        BUF_1_we1_local = 1'b1;
    end else begin
        BUF_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_2_ce1_local = 1'b1;
    end else begin
        BUF_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd2))) begin
        BUF_2_we1_local = 1'b1;
    end else begin
        BUF_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_3_ce1_local = 1'b1;
    end else begin
        BUF_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd3))) begin
        BUF_3_we1_local = 1'b1;
    end else begin
        BUF_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_4_ce1_local = 1'b1;
    end else begin
        BUF_4_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd4))) begin
        BUF_4_we1_local = 1'b1;
    end else begin
        BUF_4_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_5_ce1_local = 1'b1;
    end else begin
        BUF_5_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd5))) begin
        BUF_5_we1_local = 1'b1;
    end else begin
        BUF_5_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_6_ce1_local = 1'b1;
    end else begin
        BUF_6_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd6))) begin
        BUF_6_we1_local = 1'b1;
    end else begin
        BUF_6_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_7_ce1_local = 1'b1;
    end else begin
        BUF_7_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd7))) begin
        BUF_7_we1_local = 1'b1;
    end else begin
        BUF_7_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        BUF_r_ce1_local = 1'b1;
    end else begin
        BUF_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1) & (trunc_ln56_reg_382_pp0_iter0_reg == 3'd0))) begin
        BUF_r_we1_local = 1'b1;
    end else begin
        BUF_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter0_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (icmp_ln55_reg_363 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tt_load = 4'd0;
    end else begin
        ap_sig_allocacmp_tt_load = tt_fu_80;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3))) begin
        xms_stream_TDATA_blk_n = xms_stream_TVALID;
    end else begin
        xms_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
        xms_stream_TREADY = 1'b1;
    end else begin
        xms_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end
        end
        ap_ST_iter0_fsm_state2 : begin
            if (~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter0_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((icmp_ln55_reg_363_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter0_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter1)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state3;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state3;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter1_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state3;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign BUF_1_address1 = zext_ln55_fu_315_p1;

assign BUF_1_ce1 = BUF_1_ce1_local;

assign BUF_1_d1 = trunc_ln60_fu_326_p1;

assign BUF_1_we1 = BUF_1_we1_local;

assign BUF_2_address1 = zext_ln55_fu_315_p1;

assign BUF_2_ce1 = BUF_2_ce1_local;

assign BUF_2_d1 = trunc_ln60_fu_326_p1;

assign BUF_2_we1 = BUF_2_we1_local;

assign BUF_3_address1 = zext_ln55_fu_315_p1;

assign BUF_3_ce1 = BUF_3_ce1_local;

assign BUF_3_d1 = trunc_ln60_fu_326_p1;

assign BUF_3_we1 = BUF_3_we1_local;

assign BUF_4_address1 = zext_ln55_fu_315_p1;

assign BUF_4_ce1 = BUF_4_ce1_local;

assign BUF_4_d1 = trunc_ln60_fu_326_p1;

assign BUF_4_we1 = BUF_4_we1_local;

assign BUF_5_address1 = zext_ln55_fu_315_p1;

assign BUF_5_ce1 = BUF_5_ce1_local;

assign BUF_5_d1 = trunc_ln60_fu_326_p1;

assign BUF_5_we1 = BUF_5_we1_local;

assign BUF_6_address1 = zext_ln55_fu_315_p1;

assign BUF_6_ce1 = BUF_6_ce1_local;

assign BUF_6_d1 = trunc_ln60_fu_326_p1;

assign BUF_6_we1 = BUF_6_we1_local;

assign BUF_7_address1 = zext_ln55_fu_315_p1;

assign BUF_7_ce1 = BUF_7_ce1_local;

assign BUF_7_d1 = trunc_ln60_fu_326_p1;

assign BUF_7_we1 = BUF_7_we1_local;

assign BUF_r_address1 = zext_ln55_fu_315_p1;

assign BUF_r_ce1 = BUF_r_ce1_local;

assign BUF_r_d1 = trunc_ln60_fu_326_p1;

assign BUF_r_we1 = BUF_r_we1_local;

assign add_ln55_1_fu_258_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign add_ln55_fu_288_p2 = (ct_fu_84 + 10'd1);

assign add_ln56_fu_301_p2 = (select_ln55_reg_377 + 4'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter0_fsm_state2 = ap_CS_iter0_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state3 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln55_reg_363_pp0_iter0_reg == 1'd0) & (xms_stream_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln55_fu_252_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd4864) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_267_p2 = ((ap_sig_allocacmp_tt_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln55_1_fu_294_p3 = ((icmp_ln56_reg_372[0:0] == 1'b1) ? add_ln55_fu_288_p2 : ct_fu_84);

assign select_ln55_fu_273_p3 = ((icmp_ln56_fu_267_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_tt_load);

assign trunc_ln56_fu_281_p1 = select_ln55_fu_273_p3[2:0];

assign trunc_ln60_fu_326_p1 = xms_stream_TDATA[3:0];

assign zext_ln55_fu_315_p1 = select_ln55_1_reg_386;

endmodule //MUX_do_buffer_unpack8_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_do_buffer_unpack8_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xms_buffered_stream_i_din,
        xms_buffered_stream_i_full_n,
        xms_buffered_stream_i_write,
        xms_buffered_stream_i_num_data_valid,
        xms_buffered_stream_i_fifo_cap,
        BUF_r_address0,
        BUF_r_ce0,
        BUF_r_q0,
        BUF_1_address0,
        BUF_1_ce0,
        BUF_1_q0,
        BUF_2_address0,
        BUF_2_ce0,
        BUF_2_q0,
        BUF_3_address0,
        BUF_3_ce0,
        BUF_3_q0,
        BUF_4_address0,
        BUF_4_ce0,
        BUF_4_q0,
        BUF_5_address0,
        BUF_5_ce0,
        BUF_5_q0,
        BUF_6_address0,
        BUF_6_ce0,
        BUF_6_q0,
        BUF_7_address0,
        BUF_7_ce0,
        BUF_7_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] xms_buffered_stream_i_din;
input   xms_buffered_stream_i_full_n;
output   xms_buffered_stream_i_write;
input  [2:0] xms_buffered_stream_i_num_data_valid;
input  [2:0] xms_buffered_stream_i_fifo_cap;
output  [9:0] BUF_r_address0;
output   BUF_r_ce0;
input  [3:0] BUF_r_q0;
output  [9:0] BUF_1_address0;
output   BUF_1_ce0;
input  [3:0] BUF_1_q0;
output  [9:0] BUF_2_address0;
output   BUF_2_ce0;
input  [3:0] BUF_2_q0;
output  [9:0] BUF_3_address0;
output   BUF_3_ce0;
input  [3:0] BUF_3_q0;
output  [9:0] BUF_4_address0;
output   BUF_4_ce0;
input  [3:0] BUF_4_q0;
output  [9:0] BUF_5_address0;
output   BUF_5_ce0;
input  [3:0] BUF_5_q0;
output  [9:0] BUF_6_address0;
output   BUF_6_ce0;
input  [3:0] BUF_6_q0;
output  [9:0] BUF_7_address0;
output   BUF_7_ce0;
input  [3:0] BUF_7_q0;

reg ap_idle;
reg xms_buffered_stream_i_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln79_reg_286;
reg   [0:0] icmp_ln79_reg_286_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln79_fu_194_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xms_buffered_stream_i_blk_n;
wire   [0:0] icmp_ln79_reg_286_pp0_iter0_reg;
wire   [63:0] zext_ln80_fu_228_p1;
reg   [9:0] ct_fu_62;
wire   [9:0] add_ln80_fu_240_p2;
wire    ap_loop_init;
reg   [16:0] indvar_flatten6_fu_66;
wire   [16:0] add_ln79_fu_200_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    BUF_r_ce0_local;
reg    BUF_1_ce0_local;
reg    BUF_2_ce0_local;
reg    BUF_3_ce0_local;
reg    BUF_4_ce0_local;
reg    BUF_5_ce0_local;
reg    BUF_6_ce0_local;
reg    BUF_7_ce0_local;
wire   [0:0] icmp_ln80_fu_214_p2;
wire   [9:0] select_ln79_fu_220_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_72;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_62 = 10'd0;
//#0 indvar_flatten6_fu_66 = 17'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_62 <= 10'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln79_reg_286_pp0_iter0_reg == 1'd0))) begin
        ct_fu_62 <= add_ln80_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln79_fu_194_p2 == 1'd0)) begin
            indvar_flatten6_fu_66 <= add_ln79_fu_200_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_66 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln79_reg_286 <= icmp_ln79_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln79_reg_286_pp0_iter1_reg <= icmp_ln79_reg_286;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_1_ce0_local = 1'b1;
    end else begin
        BUF_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_2_ce0_local = 1'b1;
    end else begin
        BUF_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_3_ce0_local = 1'b1;
    end else begin
        BUF_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_4_ce0_local = 1'b1;
    end else begin
        BUF_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_5_ce0_local = 1'b1;
    end else begin
        BUF_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_6_ce0_local = 1'b1;
    end else begin
        BUF_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_7_ce0_local = 1'b1;
    end else begin
        BUF_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        BUF_r_ce0_local = 1'b1;
    end else begin
        BUF_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln79_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_286_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        xms_buffered_stream_i_blk_n = xms_buffered_stream_i_full_n;
    end else begin
        xms_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_286_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        xms_buffered_stream_i_write = 1'b1;
    end else begin
        xms_buffered_stream_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln79_reg_286_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign BUF_1_address0 = zext_ln80_fu_228_p1;

assign BUF_1_ce0 = BUF_1_ce0_local;

assign BUF_2_address0 = zext_ln80_fu_228_p1;

assign BUF_2_ce0 = BUF_2_ce0_local;

assign BUF_3_address0 = zext_ln80_fu_228_p1;

assign BUF_3_ce0 = BUF_3_ce0_local;

assign BUF_4_address0 = zext_ln80_fu_228_p1;

assign BUF_4_ce0 = BUF_4_ce0_local;

assign BUF_5_address0 = zext_ln80_fu_228_p1;

assign BUF_5_ce0 = BUF_5_ce0_local;

assign BUF_6_address0 = zext_ln80_fu_228_p1;

assign BUF_6_ce0 = BUF_6_ce0_local;

assign BUF_7_address0 = zext_ln80_fu_228_p1;

assign BUF_7_ce0 = BUF_7_ce0_local;

assign BUF_r_address0 = zext_ln80_fu_228_p1;

assign BUF_r_ce0 = BUF_r_ce0_local;

assign add_ln79_fu_200_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 17'd1);

assign add_ln80_fu_240_p2 = (select_ln79_fu_220_p3 + 10'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln79_reg_286_pp0_iter1_reg == 1'd0) & (xms_buffered_stream_i_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_72 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln79_fu_194_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 17'd68096) ? 1'b1 : 1'b0);

assign icmp_ln79_reg_286_pp0_iter0_reg = icmp_ln79_reg_286;

assign icmp_ln80_fu_214_p2 = ((ct_fu_62 == 10'd608) ? 1'b1 : 1'b0);

assign select_ln79_fu_220_p3 = ((icmp_ln80_fu_214_p2[0:0] == 1'b1) ? 10'd0 : ct_fu_62);

assign xms_buffered_stream_i_din = {{{{{{{{BUF_7_q0}, {BUF_6_q0}}, {BUF_5_q0}}, {BUF_4_q0}}, {BUF_3_q0}}, {BUF_2_q0}}, {BUF_1_q0}}, {BUF_r_q0}};

assign zext_ln80_fu_228_p1 = select_ln79_fu_220_p3;

endmodule //MUX_do_buffer_unpack8_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module MUX_fifo_w15_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 15,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    MUX_fifo_w15_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_MUX_fifo_w15_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module MUX_fifo_w15_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 15,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module MUX_fifo_w1_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    MUX_fifo_w1_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_MUX_fifo_w1_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module MUX_fifo_w1_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module MUX_fifo_w1_d3_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    MUX_fifo_w1_d3_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_MUX_fifo_w1_d3_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module MUX_fifo_w1_d3_S_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module MUX_fifo_w32_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    MUX_fifo_w32_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_MUX_fifo_w32_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module MUX_fifo_w32_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module MUX_fifo_w512_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 512,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    MUX_fifo_w512_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_MUX_fifo_w512_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module MUX_fifo_w512_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 512,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module MUX_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not MUX module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not MUX module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_GEMM_MUX9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_loc_i_dout,
        p_loc_i_empty_n,
        p_loc_i_read,
        p_loc_i_num_data_valid,
        p_loc_i_fifo_cap,
        spec_select3_loc_i_dout,
        spec_select3_loc_i_empty_n,
        spec_select3_loc_i_read,
        spec_select3_loc_i_num_data_valid,
        spec_select3_loc_i_fifo_cap,
        xlnq_buffered_stream_i_dout,
        xlnq_buffered_stream_i_empty_n,
        xlnq_buffered_stream_i_read,
        xlnq_buffered_stream_i_num_data_valid,
        xlnq_buffered_stream_i_fifo_cap,
        xlns_buffered_stream_i_dout,
        xlns_buffered_stream_i_empty_n,
        xlns_buffered_stream_i_read,
        xlns_buffered_stream_i_num_data_valid,
        xlns_buffered_stream_i_fifo_cap,
        aq_buffered_stream_i_dout,
        aq_buffered_stream_i_empty_n,
        aq_buffered_stream_i_read,
        aq_buffered_stream_i_num_data_valid,
        aq_buffered_stream_i_fifo_cap,
        as_buffered_stream_i_dout,
        as_buffered_stream_i_empty_n,
        as_buffered_stream_i_read,
        as_buffered_stream_i_num_data_valid,
        as_buffered_stream_i_fifo_cap,
        xmq_buffered_stream_i_dout,
        xmq_buffered_stream_i_empty_n,
        xmq_buffered_stream_i_read,
        xmq_buffered_stream_i_num_data_valid,
        xmq_buffered_stream_i_fifo_cap,
        xms_buffered_stream_i_dout,
        xms_buffered_stream_i_empty_n,
        xms_buffered_stream_i_read,
        xms_buffered_stream_i_num_data_valid,
        xms_buffered_stream_i_fifo_cap,
        q_stream_TDATA,
        q_stream_TVALID,
        q_stream_TREADY,
        s_stream_TDATA,
        s_stream_TVALID,
        s_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [0:0] p_loc_i_dout;
input   p_loc_i_empty_n;
output   p_loc_i_read;
input  [2:0] p_loc_i_num_data_valid;
input  [2:0] p_loc_i_fifo_cap;
input  [0:0] spec_select3_loc_i_dout;
input   spec_select3_loc_i_empty_n;
output   spec_select3_loc_i_read;
input  [2:0] spec_select3_loc_i_num_data_valid;
input  [2:0] spec_select3_loc_i_fifo_cap;
input  [511:0] xlnq_buffered_stream_i_dout;
input   xlnq_buffered_stream_i_empty_n;
output   xlnq_buffered_stream_i_read;
input  [2:0] xlnq_buffered_stream_i_num_data_valid;
input  [2:0] xlnq_buffered_stream_i_fifo_cap;
input  [31:0] xlns_buffered_stream_i_dout;
input   xlns_buffered_stream_i_empty_n;
output   xlns_buffered_stream_i_read;
input  [2:0] xlns_buffered_stream_i_num_data_valid;
input  [2:0] xlns_buffered_stream_i_fifo_cap;
input  [511:0] aq_buffered_stream_i_dout;
input   aq_buffered_stream_i_empty_n;
output   aq_buffered_stream_i_read;
input  [2:0] aq_buffered_stream_i_num_data_valid;
input  [2:0] aq_buffered_stream_i_fifo_cap;
input  [31:0] as_buffered_stream_i_dout;
input   as_buffered_stream_i_empty_n;
output   as_buffered_stream_i_read;
input  [2:0] as_buffered_stream_i_num_data_valid;
input  [2:0] as_buffered_stream_i_fifo_cap;
input  [511:0] xmq_buffered_stream_i_dout;
input   xmq_buffered_stream_i_empty_n;
output   xmq_buffered_stream_i_read;
input  [2:0] xmq_buffered_stream_i_num_data_valid;
input  [2:0] xmq_buffered_stream_i_fifo_cap;
input  [31:0] xms_buffered_stream_i_dout;
input   xms_buffered_stream_i_empty_n;
output   xms_buffered_stream_i_read;
input  [2:0] xms_buffered_stream_i_num_data_valid;
input  [2:0] xms_buffered_stream_i_fifo_cap;
output  [511:0] q_stream_TDATA;
output   q_stream_TVALID;
input   q_stream_TREADY;
output  [31:0] s_stream_TDATA;
output   s_stream_TVALID;
input   s_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_loc_i_read;
reg spec_select3_loc_i_read;
reg[511:0] q_stream_TDATA;
reg[31:0] s_stream_TDATA;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_loc_i_blk_n;
reg    spec_select3_loc_i_blk_n;
reg   [0:0] p_read_7_reg_160;
reg    ap_block_state1;
reg   [0:0] run_mha_reg_165;
reg   [0:0] run_mlp_reg_170;
wire   [21:0] N_fu_126_p3;
reg   [21:0] N_reg_175;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_idle;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_ready;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xmq_buffered_stream_i_read;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xms_buffered_stream_i_read;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xlnq_buffered_stream_i_read;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xlns_buffered_stream_i_read;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_aq_buffered_stream_i_read;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_as_buffered_stream_i_read;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TREADY;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TREADY;
wire   [511:0] grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TDATA;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TVALID;
wire   [31:0] grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TDATA;
wire    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TVALID;
reg    grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [511:0] q_stream_TDATA_reg;
reg   [31:0] s_stream_TDATA_reg;
wire   [0:0] or_ln75_fu_104_p2;
wire   [21:0] select_ln75_fu_110_p3;
wire   [21:0] select_ln75_1_fu_118_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start_reg = 1'b0;
end

MUX_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1 grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start),
    .ap_done(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done),
    .ap_idle(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_idle),
    .ap_ready(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_ready),
    .xmq_buffered_stream_i_dout(xmq_buffered_stream_i_dout),
    .xmq_buffered_stream_i_empty_n(xmq_buffered_stream_i_empty_n),
    .xmq_buffered_stream_i_read(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xmq_buffered_stream_i_read),
    .xmq_buffered_stream_i_num_data_valid(3'd0),
    .xmq_buffered_stream_i_fifo_cap(3'd0),
    .xms_buffered_stream_i_dout(xms_buffered_stream_i_dout),
    .xms_buffered_stream_i_empty_n(xms_buffered_stream_i_empty_n),
    .xms_buffered_stream_i_read(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xms_buffered_stream_i_read),
    .xms_buffered_stream_i_num_data_valid(3'd0),
    .xms_buffered_stream_i_fifo_cap(3'd0),
    .xlnq_buffered_stream_i_dout(xlnq_buffered_stream_i_dout),
    .xlnq_buffered_stream_i_empty_n(xlnq_buffered_stream_i_empty_n),
    .xlnq_buffered_stream_i_read(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xlnq_buffered_stream_i_read),
    .xlnq_buffered_stream_i_num_data_valid(3'd0),
    .xlnq_buffered_stream_i_fifo_cap(3'd0),
    .xlns_buffered_stream_i_dout(xlns_buffered_stream_i_dout),
    .xlns_buffered_stream_i_empty_n(xlns_buffered_stream_i_empty_n),
    .xlns_buffered_stream_i_read(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xlns_buffered_stream_i_read),
    .xlns_buffered_stream_i_num_data_valid(3'd0),
    .xlns_buffered_stream_i_fifo_cap(3'd0),
    .aq_buffered_stream_i_dout(aq_buffered_stream_i_dout),
    .aq_buffered_stream_i_empty_n(aq_buffered_stream_i_empty_n),
    .aq_buffered_stream_i_read(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_aq_buffered_stream_i_read),
    .aq_buffered_stream_i_num_data_valid(3'd0),
    .aq_buffered_stream_i_fifo_cap(3'd0),
    .as_buffered_stream_i_dout(as_buffered_stream_i_dout),
    .as_buffered_stream_i_empty_n(as_buffered_stream_i_empty_n),
    .as_buffered_stream_i_read(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_as_buffered_stream_i_read),
    .as_buffered_stream_i_num_data_valid(3'd0),
    .as_buffered_stream_i_fifo_cap(3'd0),
    .q_stream_TREADY(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TREADY),
    .s_stream_TREADY(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TREADY),
    .N(N_reg_175),
    .q_stream_TDATA(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TDATA),
    .q_stream_TVALID(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TVALID),
    .s_stream_TDATA(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TDATA),
    .s_stream_TVALID(grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TVALID),
    .p_read(p_read_7_reg_160),
    .run_mha(run_mha_reg_165),
    .run_mlp(run_mlp_reg_170)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_ready == 1'b1)) begin
            grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        N_reg_175[17 : 8] <= N_fu_126_p3[17 : 8];
N_reg_175[21] <= N_fu_126_p3[21];
        p_read_7_reg_160 <= p_read;
        run_mha_reg_165 <= p_loc_i_dout;
        run_mlp_reg_170 <= spec_select3_loc_i_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TVALID == 1'b1))) begin
        q_stream_TDATA_reg <= grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TVALID == 1'b1))) begin
        s_stream_TDATA_reg <= grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_loc_i_blk_n = p_loc_i_empty_n;
    end else begin
        p_loc_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_loc_i_read = 1'b1;
    end else begin
        p_loc_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TVALID == 1'b1))) begin
        q_stream_TDATA = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TDATA;
    end else begin
        q_stream_TDATA = q_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TVALID == 1'b1))) begin
        s_stream_TDATA = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TDATA;
    end else begin
        s_stream_TDATA = s_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        spec_select3_loc_i_blk_n = spec_select3_loc_i_empty_n;
    end else begin
        spec_select3_loc_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        spec_select3_loc_i_read = 1'b1;
    end else begin
        spec_select3_loc_i_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_fu_126_p3 = ((or_ln75_fu_104_p2[0:0] == 1'b1) ? select_ln75_fu_110_p3 : select_ln75_1_fu_118_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (spec_select3_loc_i_empty_n == 1'b0) | (p_loc_i_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign aq_buffered_stream_i_read = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_aq_buffered_stream_i_read;

assign as_buffered_stream_i_read = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_as_buffered_stream_i_read;

assign grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_ap_start_reg;

assign grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TREADY = (q_stream_TREADY & ap_CS_fsm_state3);

assign grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TREADY = (s_stream_TREADY & ap_CS_fsm_state3);

assign or_ln75_fu_104_p2 = (p_read | p_loc_i_dout);

assign q_stream_TVALID = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_q_stream_TVALID;

assign s_stream_TVALID = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_s_stream_TVALID;

assign select_ln75_1_fu_118_p3 = ((spec_select3_loc_i_dout[0:0] == 1'b1) ? 22'd204288 : 22'd0);

assign select_ln75_fu_110_p3 = ((p_read[0:0] == 1'b1) ? 22'd2127104 : 22'd50176);

assign xlnq_buffered_stream_i_read = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xlnq_buffered_stream_i_read;

assign xlns_buffered_stream_i_read = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xlns_buffered_stream_i_read;

assign xmq_buffered_stream_i_read = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xmq_buffered_stream_i_read;

assign xms_buffered_stream_i_read = grp_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1_fu_80_xms_buffered_stream_i_read;

always @ (posedge ap_clk) begin
    N_reg_175[7:0] <= 8'b00000000;
    N_reg_175[20:18] <= 3'b000;
end

endmodule //MUX_GEMM_MUX9
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MUX_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xmq_buffered_stream_i_dout,
        xmq_buffered_stream_i_empty_n,
        xmq_buffered_stream_i_read,
        xmq_buffered_stream_i_num_data_valid,
        xmq_buffered_stream_i_fifo_cap,
        xms_buffered_stream_i_dout,
        xms_buffered_stream_i_empty_n,
        xms_buffered_stream_i_read,
        xms_buffered_stream_i_num_data_valid,
        xms_buffered_stream_i_fifo_cap,
        xlnq_buffered_stream_i_dout,
        xlnq_buffered_stream_i_empty_n,
        xlnq_buffered_stream_i_read,
        xlnq_buffered_stream_i_num_data_valid,
        xlnq_buffered_stream_i_fifo_cap,
        xlns_buffered_stream_i_dout,
        xlns_buffered_stream_i_empty_n,
        xlns_buffered_stream_i_read,
        xlns_buffered_stream_i_num_data_valid,
        xlns_buffered_stream_i_fifo_cap,
        aq_buffered_stream_i_dout,
        aq_buffered_stream_i_empty_n,
        aq_buffered_stream_i_read,
        aq_buffered_stream_i_num_data_valid,
        aq_buffered_stream_i_fifo_cap,
        as_buffered_stream_i_dout,
        as_buffered_stream_i_empty_n,
        as_buffered_stream_i_read,
        as_buffered_stream_i_num_data_valid,
        as_buffered_stream_i_fifo_cap,
        q_stream_TREADY,
        s_stream_TREADY,
        N,
        q_stream_TDATA,
        q_stream_TVALID,
        s_stream_TDATA,
        s_stream_TVALID,
        p_read,
        run_mha,
        run_mlp
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] xmq_buffered_stream_i_dout;
input   xmq_buffered_stream_i_empty_n;
output   xmq_buffered_stream_i_read;
input  [2:0] xmq_buffered_stream_i_num_data_valid;
input  [2:0] xmq_buffered_stream_i_fifo_cap;
input  [31:0] xms_buffered_stream_i_dout;
input   xms_buffered_stream_i_empty_n;
output   xms_buffered_stream_i_read;
input  [2:0] xms_buffered_stream_i_num_data_valid;
input  [2:0] xms_buffered_stream_i_fifo_cap;
input  [511:0] xlnq_buffered_stream_i_dout;
input   xlnq_buffered_stream_i_empty_n;
output   xlnq_buffered_stream_i_read;
input  [2:0] xlnq_buffered_stream_i_num_data_valid;
input  [2:0] xlnq_buffered_stream_i_fifo_cap;
input  [31:0] xlns_buffered_stream_i_dout;
input   xlns_buffered_stream_i_empty_n;
output   xlns_buffered_stream_i_read;
input  [2:0] xlns_buffered_stream_i_num_data_valid;
input  [2:0] xlns_buffered_stream_i_fifo_cap;
input  [511:0] aq_buffered_stream_i_dout;
input   aq_buffered_stream_i_empty_n;
output   aq_buffered_stream_i_read;
input  [2:0] aq_buffered_stream_i_num_data_valid;
input  [2:0] aq_buffered_stream_i_fifo_cap;
input  [31:0] as_buffered_stream_i_dout;
input   as_buffered_stream_i_empty_n;
output   as_buffered_stream_i_read;
input  [2:0] as_buffered_stream_i_num_data_valid;
input  [2:0] as_buffered_stream_i_fifo_cap;
input   q_stream_TREADY;
input   s_stream_TREADY;
input  [21:0] N;
output  [511:0] q_stream_TDATA;
output   q_stream_TVALID;
output  [31:0] s_stream_TDATA;
output   s_stream_TVALID;
input  [0:0] p_read;
input  [0:0] run_mha;
input  [0:0] run_mlp;

reg ap_idle;
reg xmq_buffered_stream_i_read;
reg xms_buffered_stream_i_read;
reg xlnq_buffered_stream_i_read;
reg xlns_buffered_stream_i_read;
reg aq_buffered_stream_i_read;
reg as_buffered_stream_i_read;
reg q_stream_TVALID;
reg s_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln79_reg_839;
reg   [0:0] and_ln86_reg_843;
reg   [0:0] and_ln89_reg_847;
reg   [0:0] and_ln92_reg_851;
reg   [0:0] and_ln95_reg_855;
reg    ap_predicate_op42_read_state2;
reg    ap_predicate_op43_read_state2;
reg    ap_predicate_op54_read_state2;
reg    ap_predicate_op55_read_state2;
reg    ap_predicate_op66_read_state2;
reg    ap_predicate_op67_read_state2;
reg    ap_predicate_op78_read_state2;
reg    ap_predicate_op79_read_state2;
reg    ap_predicate_op90_read_state2;
reg    ap_predicate_op91_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln79_reg_839_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln79_fu_338_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    q_stream_TDATA_blk_n;
reg    s_stream_TDATA_blk_n;
reg    xlnq_buffered_stream_i_blk_n;
reg    xlns_buffered_stream_i_blk_n;
reg    aq_buffered_stream_i_blk_n;
reg    as_buffered_stream_i_blk_n;
reg    xmq_buffered_stream_i_blk_n;
reg    xms_buffered_stream_i_blk_n;
wire   [0:0] p_read12_read_fu_152_p2;
wire   [0:0] and_ln86_fu_356_p2;
wire   [0:0] and_ln89_fu_368_p2;
wire   [0:0] and_ln92_fu_380_p2;
wire   [0:0] and_ln95_fu_392_p2;
wire   [59:0] s_vec_4_fu_477_p16;
wire   [59:0] s_vec_3_fu_515_p16;
wire   [59:0] s_vec_2_fu_623_p16;
wire   [59:0] s_vec_1_fu_661_p16;
wire   [59:0] s_vec_fu_699_p16;
wire   [59:0] ap_phi_reg_pp0_iter0_s_vec_5_reg_214;
reg   [59:0] ap_phi_reg_pp0_iter1_s_vec_5_reg_214;
reg   [59:0] ap_phi_reg_pp0_iter2_s_vec_5_reg_214;
wire   [511:0] ap_phi_reg_pp0_iter0_q_vec_5_reg_233;
reg   [511:0] ap_phi_reg_pp0_iter1_q_vec_5_reg_233;
reg   [511:0] ap_phi_reg_pp0_iter2_q_vec_5_reg_233;
reg   [21:0] n_fu_136;
wire   [21:0] n_1_fu_344_p2;
wire    ap_loop_init;
reg   [21:0] ap_sig_allocacmp_n_2;
wire   [0:0] icmp_ln86_fu_350_p2;
wire   [0:0] icmp_ln89_fu_362_p2;
wire   [0:0] icmp_ln92_fu_374_p2;
wire   [0:0] icmp_ln95_fu_386_p2;
wire   [3:0] trunc_ln97_3_fu_467_p4;
wire   [3:0] trunc_ln97_2_fu_457_p4;
wire   [3:0] trunc_ln97_1_fu_447_p4;
wire   [3:0] trunc_ln97_s_fu_437_p4;
wire   [3:0] trunc_ln97_9_fu_427_p4;
wire   [3:0] trunc_ln97_8_fu_417_p4;
wire   [3:0] trunc_ln97_7_fu_407_p4;
wire   [3:0] trunc_ln97_fu_403_p1;
wire   [3:0] grp_fu_313_p4;
wire   [3:0] grp_fu_303_p4;
wire   [3:0] grp_fu_293_p4;
wire   [3:0] grp_fu_283_p4;
wire   [3:0] grp_fu_273_p4;
wire   [3:0] grp_fu_263_p4;
wire   [3:0] grp_fu_253_p4;
wire   [3:0] trunc_ln94_fu_511_p1;
wire   [3:0] trunc_ln91_3_fu_613_p4;
wire   [3:0] trunc_ln91_2_fu_603_p4;
wire   [3:0] trunc_ln91_1_fu_593_p4;
wire   [3:0] trunc_ln91_s_fu_583_p4;
wire   [3:0] trunc_ln91_9_fu_573_p4;
wire   [3:0] trunc_ln91_8_fu_563_p4;
wire   [3:0] trunc_ln91_7_fu_553_p4;
wire   [3:0] trunc_ln91_fu_549_p1;
wire   [3:0] trunc_ln88_fu_657_p1;
wire   [3:0] trunc_ln85_fu_695_p1;
wire   [3:0] tmp_12_i_fu_797_p4;
wire   [3:0] tmp_11_i_fu_787_p4;
wire   [3:0] tmp_10_i_fu_777_p4;
wire   [3:0] tmp_9_i_fu_767_p4;
wire   [3:0] tmp_8_i_fu_757_p4;
wire   [3:0] tmp_7_i_fu_747_p4;
wire   [3:0] tmp_6_i_fu_737_p4;
wire   [3:0] trunc_ln100_fu_733_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_135;
reg    ap_condition_118;
reg    ap_condition_94;
reg    ap_condition_71;
reg    ap_condition_229;
reg    ap_condition_183;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 n_fu_136 = 22'd0;
//#0 ap_done_reg = 1'b0;
end

MUX_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'd1 == and_ln95_reg_855) & (p_read == 1'd0) & (1'd0 == and_ln92_reg_851) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_phi_reg_pp0_iter2_q_vec_5_reg_233 <= xmq_buffered_stream_i_dout;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'd1 == and_ln89_reg_847) & (p_read == 1'd0) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_phi_reg_pp0_iter2_q_vec_5_reg_233 <= aq_buffered_stream_i_dout;
    end else if (((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'd1 == and_ln92_reg_851) & (p_read == 1'd0) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (p_read == 1'd1) & (icmp_ln79_reg_839 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'd1 == and_ln86_reg_843) & (p_read == 1'd0) & (icmp_ln79_reg_839 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        ap_phi_reg_pp0_iter2_q_vec_5_reg_233 <= xlnq_buffered_stream_i_dout;
    end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_phi_reg_pp0_iter2_q_vec_5_reg_233 <= ap_phi_reg_pp0_iter1_q_vec_5_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_229)) begin
        if ((1'b1 == ap_condition_71)) begin
            ap_phi_reg_pp0_iter2_s_vec_5_reg_214 <= s_vec_4_fu_477_p16;
        end else if ((1'b1 == ap_condition_94)) begin
            ap_phi_reg_pp0_iter2_s_vec_5_reg_214 <= s_vec_3_fu_515_p16;
        end else if ((1'b1 == ap_condition_118)) begin
            ap_phi_reg_pp0_iter2_s_vec_5_reg_214 <= s_vec_2_fu_623_p16;
        end else if ((1'b1 == ap_condition_135)) begin
            ap_phi_reg_pp0_iter2_s_vec_5_reg_214 <= s_vec_1_fu_661_p16;
        end else if (((p_read == 1'd1) & (icmp_ln79_reg_839 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_s_vec_5_reg_214 <= s_vec_fu_699_p16;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_s_vec_5_reg_214 <= ap_phi_reg_pp0_iter1_s_vec_5_reg_214;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_183)) begin
        if ((icmp_ln79_fu_338_p2 == 1'd0)) begin
            n_fu_136 <= n_1_fu_344_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_136 <= 22'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        and_ln86_reg_843 <= and_ln86_fu_356_p2;
        and_ln89_reg_847 <= and_ln89_fu_368_p2;
        and_ln92_reg_851 <= and_ln92_fu_380_p2;
        and_ln95_reg_855 <= and_ln95_fu_392_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_q_vec_5_reg_233 <= ap_phi_reg_pp0_iter0_q_vec_5_reg_233;
        ap_phi_reg_pp0_iter1_s_vec_5_reg_214 <= ap_phi_reg_pp0_iter0_s_vec_5_reg_214;
        icmp_ln79_reg_839 <= icmp_ln79_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln79_reg_839_pp0_iter1_reg <= icmp_ln79_reg_839;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln79_fu_338_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_2 = 22'd0;
    end else begin
        ap_sig_allocacmp_n_2 = n_fu_136;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op66_read_state2 == 1'b1))) begin
        aq_buffered_stream_i_blk_n = aq_buffered_stream_i_empty_n;
    end else begin
        aq_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op66_read_state2 == 1'b1))) begin
        aq_buffered_stream_i_read = 1'b1;
    end else begin
        aq_buffered_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op67_read_state2 == 1'b1))) begin
        as_buffered_stream_i_blk_n = as_buffered_stream_i_empty_n;
    end else begin
        as_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op67_read_state2 == 1'b1))) begin
        as_buffered_stream_i_read = 1'b1;
    end else begin
        as_buffered_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln79_reg_839_pp0_iter1_reg == 1'd0))) begin
        q_stream_TDATA_blk_n = q_stream_TREADY;
    end else begin
        q_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln79_reg_839_pp0_iter1_reg == 1'd0))) begin
        q_stream_TVALID = 1'b1;
    end else begin
        q_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln79_reg_839_pp0_iter1_reg == 1'd0))) begin
        s_stream_TDATA_blk_n = s_stream_TREADY;
    end else begin
        s_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln79_reg_839_pp0_iter1_reg == 1'd0))) begin
        s_stream_TVALID = 1'b1;
    end else begin
        s_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op54_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op90_read_state2 == 1'b1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op78_read_state2 == 1'b1)))) begin
        xlnq_buffered_stream_i_blk_n = xlnq_buffered_stream_i_empty_n;
    end else begin
        xlnq_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (ap_predicate_op54_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op90_read_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op78_read_state2 == 1'b1)))) begin
        xlnq_buffered_stream_i_read = 1'b1;
    end else begin
        xlnq_buffered_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op91_read_state2 == 1'b1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op79_read_state2 == 1'b1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op55_read_state2 == 1'b1)))) begin
        xlns_buffered_stream_i_blk_n = xlns_buffered_stream_i_empty_n;
    end else begin
        xlns_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op91_read_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op79_read_state2 == 1'b1)) | (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op55_read_state2 == 1'b1)))) begin
        xlns_buffered_stream_i_read = 1'b1;
    end else begin
        xlns_buffered_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op42_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        xmq_buffered_stream_i_blk_n = xmq_buffered_stream_i_empty_n;
    end else begin
        xmq_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (ap_predicate_op42_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        xmq_buffered_stream_i_read = 1'b1;
    end else begin
        xmq_buffered_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op43_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        xms_buffered_stream_i_blk_n = xms_buffered_stream_i_empty_n;
    end else begin
        xms_buffered_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (ap_predicate_op43_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        xms_buffered_stream_i_read = 1'b1;
    end else begin
        xms_buffered_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage0_iter2) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (icmp_ln79_reg_839_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign and_ln86_fu_356_p2 = (run_mha & icmp_ln86_fu_350_p2);

assign and_ln89_fu_368_p2 = (run_mha & icmp_ln89_fu_362_p2);

assign and_ln92_fu_380_p2 = (run_mlp & icmp_ln92_fu_374_p2);

assign and_ln95_fu_392_p2 = (run_mlp & icmp_ln95_fu_386_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op54_read_state2 == 1'b1) & (xlnq_buffered_stream_i_empty_n == 1'b0)) | ((xlnq_buffered_stream_i_empty_n == 1'b0) & (ap_predicate_op90_read_state2 == 1'b1)) | ((xlnq_buffered_stream_i_empty_n == 1'b0) & (ap_predicate_op78_read_state2 == 1'b1)) | ((ap_predicate_op43_read_state2 == 1'b1) & (xms_buffered_stream_i_empty_n == 1'b0)) | ((ap_predicate_op42_read_state2 == 1'b1) & (xmq_buffered_stream_i_empty_n == 1'b0)) | ((ap_predicate_op91_read_state2 == 1'b1) & (xlns_buffered_stream_i_empty_n == 1'b0)) | ((ap_predicate_op79_read_state2 == 1'b1) & (xlns_buffered_stream_i_empty_n == 1'b0)) | ((ap_predicate_op67_read_state2 == 1'b1) & (as_buffered_stream_i_empty_n == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (aq_buffered_stream_i_empty_n == 1'b0)) | ((ap_predicate_op55_read_state2 == 1'b1) & (xlns_buffered_stream_i_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((s_stream_TREADY == 1'b0) & (icmp_ln79_reg_839_pp0_iter1_reg == 1'd0)) | ((icmp_ln79_reg_839_pp0_iter1_reg == 1'd0) & (q_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_118 = ((1'd1 == and_ln89_reg_847) & (p_read == 1'd0) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_condition_135 = ((1'd1 == and_ln86_reg_843) & (p_read == 1'd0) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_condition_183 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_229 = (~((1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_condition_71 = ((1'd1 == and_ln95_reg_855) & (p_read == 1'd0) & (1'd0 == and_ln92_reg_851) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_condition_94 = ((1'd1 == and_ln92_reg_851) & (p_read == 1'd0) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_q_vec_5_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter0_s_vec_5_reg_214 = 'bx;

always @ (*) begin
    ap_predicate_op42_read_state2 = ((1'd1 == and_ln95_reg_855) & (p_read == 1'd0) & (1'd0 == and_ln92_reg_851) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op43_read_state2 = ((1'd1 == and_ln95_reg_855) & (p_read == 1'd0) & (1'd0 == and_ln92_reg_851) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op54_read_state2 = ((1'd1 == and_ln92_reg_851) & (p_read == 1'd0) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op55_read_state2 = ((1'd1 == and_ln92_reg_851) & (p_read == 1'd0) & (1'd0 == and_ln89_reg_847) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op66_read_state2 = ((1'd1 == and_ln89_reg_847) & (p_read == 1'd0) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op67_read_state2 = ((1'd1 == and_ln89_reg_847) & (p_read == 1'd0) & (1'd0 == and_ln86_reg_843) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op78_read_state2 = ((1'd1 == and_ln86_reg_843) & (p_read == 1'd0) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op79_read_state2 = ((1'd1 == and_ln86_reg_843) & (p_read == 1'd0) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op90_read_state2 = ((p_read == 1'd1) & (icmp_ln79_reg_839 == 1'd0));
end

always @ (*) begin
    ap_predicate_op91_read_state2 = ((p_read == 1'd1) & (icmp_ln79_reg_839 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign grp_fu_253_p4 = {{xlns_buffered_stream_i_dout[7:4]}};

assign grp_fu_263_p4 = {{xlns_buffered_stream_i_dout[11:8]}};

assign grp_fu_273_p4 = {{xlns_buffered_stream_i_dout[15:12]}};

assign grp_fu_283_p4 = {{xlns_buffered_stream_i_dout[19:16]}};

assign grp_fu_293_p4 = {{xlns_buffered_stream_i_dout[23:20]}};

assign grp_fu_303_p4 = {{xlns_buffered_stream_i_dout[27:24]}};

assign grp_fu_313_p4 = {{xlns_buffered_stream_i_dout[31:28]}};

assign icmp_ln79_fu_338_p2 = ((ap_sig_allocacmp_n_2 == N) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_350_p2 = ((ap_sig_allocacmp_n_2 < 22'd37632) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_362_p2 = ((ap_sig_allocacmp_n_2 > 22'd37631) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_374_p2 = ((ap_sig_allocacmp_n_2 < 22'd136192) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_386_p2 = ((ap_sig_allocacmp_n_2 > 22'd136191) ? 1'b1 : 1'b0);

assign n_1_fu_344_p2 = (ap_sig_allocacmp_n_2 + 22'd1);

assign p_read12_read_fu_152_p2 = p_read;

assign q_stream_TDATA = ap_phi_reg_pp0_iter2_q_vec_5_reg_233;

assign s_stream_TDATA = {{{{{{{{tmp_12_i_fu_797_p4}, {tmp_11_i_fu_787_p4}}, {tmp_10_i_fu_777_p4}}, {tmp_9_i_fu_767_p4}}, {tmp_8_i_fu_757_p4}}, {tmp_7_i_fu_747_p4}}, {tmp_6_i_fu_737_p4}}, {trunc_ln100_fu_733_p1}};

assign s_vec_1_fu_661_p16 = {{{{{{{{{{{{{{{grp_fu_313_p4}, {4'd0}}, {grp_fu_303_p4}}, {4'd0}}, {grp_fu_293_p4}}, {4'd0}}, {grp_fu_283_p4}}, {4'd0}}, {grp_fu_273_p4}}, {4'd0}}, {grp_fu_263_p4}}, {4'd0}}, {grp_fu_253_p4}}, {4'd0}}, {trunc_ln88_fu_657_p1}};

assign s_vec_2_fu_623_p16 = {{{{{{{{{{{{{{{trunc_ln91_3_fu_613_p4}, {4'd0}}, {trunc_ln91_2_fu_603_p4}}, {4'd0}}, {trunc_ln91_1_fu_593_p4}}, {4'd0}}, {trunc_ln91_s_fu_583_p4}}, {4'd0}}, {trunc_ln91_9_fu_573_p4}}, {4'd0}}, {trunc_ln91_8_fu_563_p4}}, {4'd0}}, {trunc_ln91_7_fu_553_p4}}, {4'd0}}, {trunc_ln91_fu_549_p1}};

assign s_vec_3_fu_515_p16 = {{{{{{{{{{{{{{{grp_fu_313_p4}, {4'd0}}, {grp_fu_303_p4}}, {4'd0}}, {grp_fu_293_p4}}, {4'd0}}, {grp_fu_283_p4}}, {4'd0}}, {grp_fu_273_p4}}, {4'd0}}, {grp_fu_263_p4}}, {4'd0}}, {grp_fu_253_p4}}, {4'd0}}, {trunc_ln94_fu_511_p1}};

assign s_vec_4_fu_477_p16 = {{{{{{{{{{{{{{{trunc_ln97_3_fu_467_p4}, {4'd0}}, {trunc_ln97_2_fu_457_p4}}, {4'd0}}, {trunc_ln97_1_fu_447_p4}}, {4'd0}}, {trunc_ln97_s_fu_437_p4}}, {4'd0}}, {trunc_ln97_9_fu_427_p4}}, {4'd0}}, {trunc_ln97_8_fu_417_p4}}, {4'd0}}, {trunc_ln97_7_fu_407_p4}}, {4'd0}}, {trunc_ln97_fu_403_p1}};

assign s_vec_fu_699_p16 = {{{{{{{{{{{{{{{grp_fu_313_p4}, {4'd0}}, {grp_fu_303_p4}}, {4'd0}}, {grp_fu_293_p4}}, {4'd0}}, {grp_fu_283_p4}}, {4'd0}}, {grp_fu_273_p4}}, {4'd0}}, {grp_fu_263_p4}}, {4'd0}}, {grp_fu_253_p4}}, {4'd0}}, {trunc_ln85_fu_695_p1}};

assign tmp_10_i_fu_777_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[43:40]}};

assign tmp_11_i_fu_787_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[51:48]}};

assign tmp_12_i_fu_797_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[59:56]}};

assign tmp_6_i_fu_737_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[11:8]}};

assign tmp_7_i_fu_747_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[19:16]}};

assign tmp_8_i_fu_757_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[27:24]}};

assign tmp_9_i_fu_767_p4 = {{ap_phi_reg_pp0_iter2_s_vec_5_reg_214[35:32]}};

assign trunc_ln100_fu_733_p1 = ap_phi_reg_pp0_iter2_s_vec_5_reg_214[3:0];

assign trunc_ln85_fu_695_p1 = xlns_buffered_stream_i_dout[3:0];

assign trunc_ln88_fu_657_p1 = xlns_buffered_stream_i_dout[3:0];

assign trunc_ln91_1_fu_593_p4 = {{as_buffered_stream_i_dout[23:20]}};

assign trunc_ln91_2_fu_603_p4 = {{as_buffered_stream_i_dout[27:24]}};

assign trunc_ln91_3_fu_613_p4 = {{as_buffered_stream_i_dout[31:28]}};

assign trunc_ln91_7_fu_553_p4 = {{as_buffered_stream_i_dout[7:4]}};

assign trunc_ln91_8_fu_563_p4 = {{as_buffered_stream_i_dout[11:8]}};

assign trunc_ln91_9_fu_573_p4 = {{as_buffered_stream_i_dout[15:12]}};

assign trunc_ln91_fu_549_p1 = as_buffered_stream_i_dout[3:0];

assign trunc_ln91_s_fu_583_p4 = {{as_buffered_stream_i_dout[19:16]}};

assign trunc_ln94_fu_511_p1 = xlns_buffered_stream_i_dout[3:0];

assign trunc_ln97_1_fu_447_p4 = {{xms_buffered_stream_i_dout[23:20]}};

assign trunc_ln97_2_fu_457_p4 = {{xms_buffered_stream_i_dout[27:24]}};

assign trunc_ln97_3_fu_467_p4 = {{xms_buffered_stream_i_dout[31:28]}};

assign trunc_ln97_7_fu_407_p4 = {{xms_buffered_stream_i_dout[7:4]}};

assign trunc_ln97_8_fu_417_p4 = {{xms_buffered_stream_i_dout[11:8]}};

assign trunc_ln97_9_fu_427_p4 = {{xms_buffered_stream_i_dout[15:12]}};

assign trunc_ln97_fu_403_p1 = xms_buffered_stream_i_dout[3:0];

assign trunc_ln97_s_fu_437_p4 = {{xms_buffered_stream_i_dout[19:16]}};

endmodule //MUX_GEMM_MUX9_Pipeline_VITIS_LOOP_79_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module MUX_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
