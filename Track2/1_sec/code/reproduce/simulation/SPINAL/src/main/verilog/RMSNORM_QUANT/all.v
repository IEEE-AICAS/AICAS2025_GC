/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="RMSNORM_QUANT_RMSNORM_QUANT,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.709400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=10224,HLS_SYN_LUT=4621,HLS_VERSION=2022_1}" *)

module RMSNORM_QUANT (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        x_stream_TDATA,
        x_stream_TVALID,
        x_stream_TREADY,
        xlnq_stream_TDATA,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlns_stream_TDATA,
        xlns_stream_TVALID,
        xlns_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [207:0] x_stream_TDATA;
input   x_stream_TVALID;
output   x_stream_TREADY;
output  [63:0] xlnq_stream_TDATA;
output   xlnq_stream_TVALID;
input   xlnq_stream_TREADY;
output  [7:0] xlns_stream_TDATA;
output   xlns_stream_TVALID;
input   xlns_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] sub_fu_131_p3;
reg   [1:0] sub_reg_171;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln55_fu_120_p2;
wire   [4:0] trunc_ln55_fu_140_p1;
reg   [4:0] trunc_ln55_reg_176;
wire   [63:0] grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TDATA;
wire   [7:0] grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TDATA;
wire    grp_dataflow_parent_loop_proc_fu_84_x_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TVALID;
wire    grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TVALID;
wire    grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TREADY;
wire    grp_dataflow_parent_loop_proc_fu_84_ap_start;
wire    grp_dataflow_parent_loop_proc_fu_84_ap_done;
wire    grp_dataflow_parent_loop_proc_fu_84_ap_ready;
wire    grp_dataflow_parent_loop_proc_fu_84_ap_idle;
reg    grp_dataflow_parent_loop_proc_fu_84_ap_continue;
reg    grp_dataflow_parent_loop_proc_fu_84_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_done;
reg   [31:0] l_fu_68;
wire   [31:0] l_3_fu_145_p2;
reg    ap_block_state1;
wire   [0:0] run_cls_fu_125_p2;
wire    ap_CS_fsm_state4;
wire    regslice_both_xlnq_stream_U_apdone_blk;
wire    regslice_both_xlns_stream_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_x_stream_U_apdone_blk;
wire   [207:0] x_stream_TDATA_int_regslice;
wire    x_stream_TVALID_int_regslice;
reg    x_stream_TREADY_int_regslice;
wire    regslice_both_x_stream_U_ack_in;
wire    xlnq_stream_TREADY_int_regslice;
wire    regslice_both_xlnq_stream_U_vld_out;
wire    xlns_stream_TREADY_int_regslice;
wire    regslice_both_xlns_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 grp_dataflow_parent_loop_proc_fu_84_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_done = 1'b0;
end

RMSNORM_QUANT_dataflow_parent_loop_proc grp_dataflow_parent_loop_proc_fu_84(
    .sub(sub_reg_171),
    .l(trunc_ln55_reg_176),
    .x_stream_TDATA(x_stream_TDATA_int_regslice),
    .xlnq_stream_TDATA(grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TDATA),
    .xlns_stream_TDATA(grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .l_ap_vld(1'b1),
    .x_stream_TVALID(x_stream_TVALID_int_regslice),
    .x_stream_TREADY(grp_dataflow_parent_loop_proc_fu_84_x_stream_TREADY),
    .xlnq_stream_TVALID(grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TVALID),
    .xlnq_stream_TREADY(grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TREADY),
    .xlns_stream_TVALID(grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TVALID),
    .xlns_stream_TREADY(grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TREADY),
    .ap_start(grp_dataflow_parent_loop_proc_fu_84_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc_fu_84_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc_fu_84_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc_fu_84_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc_fu_84_ap_continue)
);

RMSNORM_QUANT_regslice_both #(
    .DataWidth( 208 ))
regslice_both_x_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_stream_TDATA),
    .vld_in(x_stream_TVALID),
    .ack_in(regslice_both_x_stream_U_ack_in),
    .data_out(x_stream_TDATA_int_regslice),
    .vld_out(x_stream_TVALID_int_regslice),
    .ack_out(x_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_stream_U_apdone_blk)
);

RMSNORM_QUANT_regslice_both #(
    .DataWidth( 64 ))
regslice_both_xlnq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TDATA),
    .vld_in(grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TVALID),
    .ack_in(xlnq_stream_TREADY_int_regslice),
    .data_out(xlnq_stream_TDATA),
    .vld_out(regslice_both_xlnq_stream_U_vld_out),
    .ack_out(xlnq_stream_TREADY),
    .apdone_blk(regslice_both_xlnq_stream_U_apdone_blk)
);

RMSNORM_QUANT_regslice_both #(
    .DataWidth( 8 ))
regslice_both_xlns_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TDATA),
    .vld_in(grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TVALID),
    .ack_in(xlns_stream_TREADY_int_regslice),
    .data_out(xlns_stream_TDATA),
    .vld_out(regslice_both_xlns_stream_U_vld_out),
    .ack_out(xlns_stream_TREADY),
    .apdone_blk(regslice_both_xlns_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_xlns_stream_U_apdone_blk == 1'b1) | (regslice_both_xlnq_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_84_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_84_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc_fu_84_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln55_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_dataflow_parent_loop_proc_fu_84_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc_fu_84_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc_fu_84_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_68 <= l_begin;
    end else if (((icmp_ln55_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        l_fu_68 <= l_3_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_reg_171 <= sub_fu_131_p3;
        trunc_ln55_reg_176 <= trunc_ln55_fu_140_p1;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_xlns_stream_U_apdone_blk == 1'b1) | (regslice_both_xlnq_stream_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_xlns_stream_U_apdone_blk == 1'b1) | (regslice_both_xlnq_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_xlns_stream_U_apdone_blk == 1'b1) | (regslice_both_xlnq_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_dataflow_parent_loop_proc_fu_84_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc_fu_84_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_stream_TREADY_int_regslice = grp_dataflow_parent_loop_proc_fu_84_x_stream_TREADY;
    end else begin
        x_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln55_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_xlns_stream_U_apdone_blk == 1'b1) | (regslice_both_xlnq_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_ready & ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_xlns_stream_U_apdone_blk == 1'b1) | (regslice_both_xlnq_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_done = (grp_dataflow_parent_loop_proc_fu_84_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc_fu_84_ap_ready = (grp_dataflow_parent_loop_proc_fu_84_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_84_ap_ready);

assign grp_dataflow_parent_loop_proc_fu_84_ap_start = grp_dataflow_parent_loop_proc_fu_84_ap_start_reg;

assign grp_dataflow_parent_loop_proc_fu_84_xlnq_stream_TREADY = (xlnq_stream_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_dataflow_parent_loop_proc_fu_84_xlns_stream_TREADY = (xlns_stream_TREADY_int_regslice & ap_CS_fsm_state3);

assign icmp_ln55_fu_120_p2 = (($signed(l_fu_68) < $signed(l_close)) ? 1'b1 : 1'b0);

assign l_3_fu_145_p2 = (l_fu_68 + 32'd1);

assign run_cls_fu_125_p2 = ((l_fu_68 == 32'd24) ? 1'b1 : 1'b0);

assign sub_fu_131_p3 = ((run_cls_fu_125_p2[0:0] == 1'b1) ? 2'd1 : 2'd2);

assign trunc_ln55_fu_140_p1 = l_fu_68[4:0];

assign x_stream_TREADY = regslice_both_x_stream_U_ack_in;

assign xlnq_stream_TVALID = regslice_both_xlnq_stream_U_vld_out;

assign xlns_stream_TVALID = regslice_both_xlns_stream_U_vld_out;

endmodule //RMSNORM_QUANT
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RMSNORM_QUANT_dataflow_in_loop_VITIS_LOOP_57_2 (
        l,
        mha_or_mlp,
        x_stream_TDATA,
        xlnq_stream_TDATA,
        xlns_stream_TDATA,
        ap_clk,
        ap_rst,
        l_ap_vld,
        mha_or_mlp_ap_vld,
        x_stream_TVALID,
        x_stream_TREADY,
        ap_start,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlns_stream_TVALID,
        xlns_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [4:0] l;
input  [1:0] mha_or_mlp;
input  [207:0] x_stream_TDATA;
output  [63:0] xlnq_stream_TDATA;
output  [7:0] xlns_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   l_ap_vld;
input   mha_or_mlp_ap_vld;
input   x_stream_TVALID;
output   x_stream_TREADY;
input   ap_start;
output   xlnq_stream_TVALID;
input   xlnq_stream_TREADY;
output   xlns_stream_TVALID;
input   xlns_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_rmsnorm_U0_ap_start;
wire    do_rmsnorm_U0_ap_done;
wire    do_rmsnorm_U0_ap_continue;
wire    do_rmsnorm_U0_ap_idle;
wire    do_rmsnorm_U0_ap_ready;
wire    do_rmsnorm_U0_start_out;
wire    do_rmsnorm_U0_start_write;
wire    do_rmsnorm_U0_x_stream_TREADY;
wire   [159:0] do_rmsnorm_U0_xln_stream1_din;
wire    do_rmsnorm_U0_xln_stream1_write;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_xln_stream_read;
wire   [63:0] do_quant_U0_xlnq_stream_TDATA;
wire    do_quant_U0_xlnq_stream_TVALID;
wire   [7:0] do_quant_U0_xlns_stream_TDATA;
wire    do_quant_U0_xlns_stream_TVALID;
wire    xln_stream1_full_n;
wire   [159:0] xln_stream1_dout;
wire   [1:0] xln_stream1_num_data_valid;
wire   [1:0] xln_stream1_fifo_cap;
wire    xln_stream1_empty_n;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;

RMSNORM_QUANT_do_rmsnorm do_rmsnorm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_rmsnorm_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .ap_done(do_rmsnorm_U0_ap_done),
    .ap_continue(do_rmsnorm_U0_ap_continue),
    .ap_idle(do_rmsnorm_U0_ap_idle),
    .ap_ready(do_rmsnorm_U0_ap_ready),
    .start_out(do_rmsnorm_U0_start_out),
    .start_write(do_rmsnorm_U0_start_write),
    .l(l),
    .mha_or_mlp(mha_or_mlp),
    .x_stream_TDATA(x_stream_TDATA),
    .x_stream_TVALID(x_stream_TVALID),
    .x_stream_TREADY(do_rmsnorm_U0_x_stream_TREADY),
    .xln_stream1_din(do_rmsnorm_U0_xln_stream1_din),
    .xln_stream1_num_data_valid(xln_stream1_num_data_valid),
    .xln_stream1_fifo_cap(xln_stream1_fifo_cap),
    .xln_stream1_full_n(xln_stream1_full_n),
    .xln_stream1_write(do_rmsnorm_U0_xln_stream1_write)
);

RMSNORM_QUANT_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .xln_stream_dout(xln_stream1_dout),
    .xln_stream_num_data_valid(xln_stream1_num_data_valid),
    .xln_stream_fifo_cap(xln_stream1_fifo_cap),
    .xln_stream_empty_n(xln_stream1_empty_n),
    .xln_stream_read(do_quant_U0_xln_stream_read),
    .xlnq_stream_TREADY(xlnq_stream_TREADY),
    .xlns_stream_TREADY(xlns_stream_TREADY),
    .xlnq_stream_TDATA(do_quant_U0_xlnq_stream_TDATA),
    .xlnq_stream_TVALID(do_quant_U0_xlnq_stream_TVALID),
    .xlns_stream_TDATA(do_quant_U0_xlns_stream_TDATA),
    .xlns_stream_TVALID(do_quant_U0_xlns_stream_TVALID)
);

RMSNORM_QUANT_fifo_w160_d2_S xln_stream1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_rmsnorm_U0_xln_stream1_din),
    .if_full_n(xln_stream1_full_n),
    .if_write(do_rmsnorm_U0_xln_stream1_write),
    .if_dout(xln_stream1_dout),
    .if_num_data_valid(xln_stream1_num_data_valid),
    .if_fifo_cap(xln_stream1_fifo_cap),
    .if_empty_n(xln_stream1_empty_n),
    .if_read(do_quant_U0_xln_stream_read)
);

RMSNORM_QUANT_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(do_rmsnorm_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

assign ap_done = do_quant_U0_ap_done;

assign ap_idle = (do_rmsnorm_U0_ap_idle & do_quant_U0_ap_idle);

assign ap_ready = do_rmsnorm_U0_ap_ready;

assign do_quant_U0_ap_continue = ap_continue;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_rmsnorm_U0_ap_continue = 1'b1;

assign do_rmsnorm_U0_ap_start = ap_start;

assign start_for_do_quant_U0_din = 1'b1;

assign x_stream_TREADY = do_rmsnorm_U0_x_stream_TREADY;

assign xlnq_stream_TDATA = do_quant_U0_xlnq_stream_TDATA;

assign xlnq_stream_TVALID = do_quant_U0_xlnq_stream_TVALID;

assign xlns_stream_TDATA = do_quant_U0_xlns_stream_TDATA;

assign xlns_stream_TVALID = do_quant_U0_xlns_stream_TVALID;

endmodule //RMSNORM_QUANT_dataflow_in_loop_VITIS_LOOP_57_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RMSNORM_QUANT_dataflow_parent_loop_proc (
        sub,
        l,
        x_stream_TDATA,
        xlnq_stream_TDATA,
        xlns_stream_TDATA,
        ap_clk,
        ap_rst,
        l_ap_vld,
        x_stream_TVALID,
        x_stream_TREADY,
        xlnq_stream_TVALID,
        xlnq_stream_TREADY,
        xlns_stream_TVALID,
        xlns_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [1:0] sub;
input  [4:0] l;
input  [207:0] x_stream_TDATA;
output  [63:0] xlnq_stream_TDATA;
output  [7:0] xlns_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   l_ap_vld;
input   x_stream_TVALID;
output   x_stream_TREADY;
output   xlnq_stream_TVALID;
input   xlnq_stream_TREADY;
output   xlns_stream_TVALID;
input   xlns_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [63:0] dataflow_in_loop_VITIS_LOOP_57_2_U0_xlnq_stream_TDATA;
wire   [7:0] dataflow_in_loop_VITIS_LOOP_57_2_U0_xlns_stream_TDATA;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_x_stream_TREADY;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_start;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_xlnq_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_xlns_stream_TVALID;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_done;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_ready;
wire    dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_idle;
reg    dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_continue;
reg   [1:0] loop_dataflow_input_count;
reg   [1:0] loop_dataflow_output_count;
wire   [1:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 loop_dataflow_input_count = 2'd0;
//#0 loop_dataflow_output_count = 2'd0;
end

RMSNORM_QUANT_dataflow_in_loop_VITIS_LOOP_57_2 dataflow_in_loop_VITIS_LOOP_57_2_U0(
    .l(l),
    .mha_or_mlp(loop_dataflow_input_count),
    .x_stream_TDATA(x_stream_TDATA),
    .xlnq_stream_TDATA(dataflow_in_loop_VITIS_LOOP_57_2_U0_xlnq_stream_TDATA),
    .xlns_stream_TDATA(dataflow_in_loop_VITIS_LOOP_57_2_U0_xlns_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .l_ap_vld(l_ap_vld),
    .mha_or_mlp_ap_vld(1'b0),
    .x_stream_TVALID(x_stream_TVALID),
    .x_stream_TREADY(dataflow_in_loop_VITIS_LOOP_57_2_U0_x_stream_TREADY),
    .ap_start(dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_start),
    .xlnq_stream_TVALID(dataflow_in_loop_VITIS_LOOP_57_2_U0_xlnq_stream_TVALID),
    .xlnq_stream_TREADY(xlnq_stream_TREADY),
    .xlns_stream_TVALID(dataflow_in_loop_VITIS_LOOP_57_2_U0_xlns_stream_TVALID),
    .xlns_stream_TREADY(xlns_stream_TREADY),
    .ap_done(dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_done),
    .ap_ready(dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_ready),
    .ap_idle(dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_idle),
    .ap_continue(dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 2'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 2'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 2'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 2'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_continue == 1'b1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 2'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 2'd0) & (ap_start == 1'b0) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (sub - 2'd1);

assign dataflow_in_loop_VITIS_LOOP_57_2_U0_ap_start = ap_start;

assign x_stream_TREADY = dataflow_in_loop_VITIS_LOOP_57_2_U0_x_stream_TREADY;

assign xlnq_stream_TDATA = dataflow_in_loop_VITIS_LOOP_57_2_U0_xlnq_stream_TDATA;

assign xlnq_stream_TVALID = dataflow_in_loop_VITIS_LOOP_57_2_U0_xlnq_stream_TVALID;

assign xlns_stream_TDATA = dataflow_in_loop_VITIS_LOOP_57_2_U0_xlns_stream_TDATA;

assign xlns_stream_TVALID = dataflow_in_loop_VITIS_LOOP_57_2_U0_xlns_stream_TVALID;

endmodule //RMSNORM_QUANT_dataflow_parent_loop_proc
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RMSNORM_QUANT_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        xln_stream_dout,
        xln_stream_num_data_valid,
        xln_stream_fifo_cap,
        xln_stream_empty_n,
        xln_stream_read,
        xlnq_stream_TREADY,
        xlns_stream_TREADY,
        xlnq_stream_TDATA,
        xlnq_stream_TVALID,
        xlns_stream_TDATA,
        xlns_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter16_fsm_state17 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;
parameter    ap_ST_iter16_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [159:0] xln_stream_dout;
input  [1:0] xln_stream_num_data_valid;
input  [1:0] xln_stream_fifo_cap;
input   xln_stream_empty_n;
output   xln_stream_read;
input   xlnq_stream_TREADY;
input   xlns_stream_TREADY;
output  [63:0] xlnq_stream_TDATA;
output   xlnq_stream_TVALID;
output  [7:0] xlns_stream_TDATA;
output   xlns_stream_TVALID;

reg ap_idle;
reg xln_stream_read;
reg xlnq_stream_TVALID;
reg xlns_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg   [1:0] ap_CS_iter16_fsm;
wire    ap_CS_iter16_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln62_reg_1706;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_CS_iter13_fsm_state14;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_CS_iter14_fsm_state15;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_CS_iter15_fsm_state16;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter15_reg;
reg    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_state17_io;
wire    ap_CS_iter16_fsm_state17;
wire   [0:0] icmp_ln62_fu_383_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xln_stream_blk_n;
reg    xlnq_stream_TDATA_blk_n;
reg    xlns_stream_TDATA_blk_n;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter1_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter2_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter3_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter4_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter5_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter6_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter7_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter8_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter9_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter10_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter11_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter12_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter13_reg;
reg   [0:0] icmp_ln62_reg_1706_pp0_iter14_reg;
reg   [159:0] xln_stream_read_reg_1710;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter2_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter3_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter4_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter5_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter6_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter7_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter8_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter9_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter10_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter11_reg;
reg   [159:0] xln_stream_read_reg_1710_pp0_iter12_reg;
wire   [19:0] q_val_fu_400_p1;
reg   [19:0] q_val_reg_1728;
reg   [19:0] q_val_reg_1728_pp0_iter2_reg;
reg   [19:0] q_val_reg_1728_pp0_iter3_reg;
reg   [19:0] q_val_reg_1728_pp0_iter4_reg;
reg   [19:0] q_val_reg_1728_pp0_iter5_reg;
reg   [19:0] q_val_reg_1728_pp0_iter6_reg;
reg   [19:0] q_val_reg_1728_pp0_iter7_reg;
reg   [19:0] q_val_reg_1728_pp0_iter8_reg;
reg   [19:0] q_val_reg_1728_pp0_iter9_reg;
reg   [19:0] q_val_reg_1728_pp0_iter10_reg;
reg   [19:0] q_val_reg_1728_pp0_iter11_reg;
reg   [19:0] q_val_reg_1728_pp0_iter12_reg;
reg   [19:0] q_val_reg_1728_pp0_iter13_reg;
reg   [19:0] q_val_6_reg_1736;
reg   [19:0] q_val_6_reg_1736_pp0_iter2_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter3_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter4_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter5_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter6_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter7_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter8_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter9_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter10_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter11_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter12_reg;
reg   [19:0] q_val_6_reg_1736_pp0_iter13_reg;
reg   [19:0] q_val_7_reg_1744;
reg   [19:0] q_val_7_reg_1744_pp0_iter2_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter3_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter4_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter5_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter6_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter7_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter8_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter9_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter10_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter11_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter12_reg;
reg   [19:0] q_val_7_reg_1744_pp0_iter13_reg;
reg   [19:0] q_val_1_reg_1753;
reg   [19:0] q_val_1_reg_1753_pp0_iter2_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter3_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter4_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter5_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter6_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter7_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter8_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter9_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter10_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter11_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter12_reg;
reg   [19:0] q_val_1_reg_1753_pp0_iter13_reg;
reg   [19:0] q_val_2_reg_1761;
reg   [19:0] q_val_2_reg_1761_pp0_iter2_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter3_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter4_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter5_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter6_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter7_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter8_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter9_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter10_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter11_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter12_reg;
reg   [19:0] q_val_2_reg_1761_pp0_iter13_reg;
reg   [19:0] q_val_3_reg_1769;
reg   [19:0] q_val_3_reg_1769_pp0_iter2_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter3_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter4_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter5_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter6_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter7_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter8_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter9_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter10_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter11_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter12_reg;
reg   [19:0] q_val_3_reg_1769_pp0_iter13_reg;
reg   [19:0] q_val_4_reg_1777;
reg   [19:0] q_val_4_reg_1777_pp0_iter2_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter3_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter4_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter5_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter6_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter7_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter8_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter9_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter10_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter11_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter12_reg;
reg   [19:0] q_val_4_reg_1777_pp0_iter13_reg;
reg   [19:0] q_val_5_reg_1785;
reg   [19:0] q_val_5_reg_1785_pp0_iter2_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter3_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter4_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter5_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter6_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter7_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter8_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter9_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter10_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter11_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter12_reg;
reg   [19:0] q_val_5_reg_1785_pp0_iter13_reg;
reg   [0:0] tmp_reg_1793;
wire   [0:0] tmp_reg_1793_pp0_iter1_reg;
reg   [0:0] tmp_reg_1793_pp0_iter2_reg;
reg   [0:0] tmp_7_reg_1798;
reg   [0:0] tmp_7_reg_1798_pp0_iter2_reg;
reg   [0:0] tmp_8_reg_1803;
reg   [0:0] tmp_8_reg_1803_pp0_iter2_reg;
reg   [0:0] tmp_8_reg_1803_pp0_iter3_reg;
reg   [0:0] tmp_9_reg_1808;
reg   [0:0] tmp_9_reg_1808_pp0_iter2_reg;
reg   [0:0] tmp_9_reg_1808_pp0_iter3_reg;
reg   [0:0] tmp_9_reg_1808_pp0_iter4_reg;
reg   [0:0] tmp_10_reg_1813;
reg   [0:0] tmp_10_reg_1813_pp0_iter2_reg;
reg   [0:0] tmp_10_reg_1813_pp0_iter3_reg;
reg   [0:0] tmp_10_reg_1813_pp0_iter4_reg;
reg   [0:0] tmp_10_reg_1813_pp0_iter5_reg;
reg   [0:0] tmp_11_reg_1818;
reg   [0:0] tmp_11_reg_1818_pp0_iter2_reg;
reg   [0:0] tmp_11_reg_1818_pp0_iter3_reg;
reg   [0:0] tmp_11_reg_1818_pp0_iter4_reg;
reg   [0:0] tmp_11_reg_1818_pp0_iter5_reg;
reg   [0:0] tmp_11_reg_1818_pp0_iter6_reg;
reg   [0:0] tmp_12_reg_1823;
reg   [0:0] tmp_12_reg_1823_pp0_iter2_reg;
reg   [0:0] tmp_12_reg_1823_pp0_iter3_reg;
reg   [0:0] tmp_12_reg_1823_pp0_iter4_reg;
reg   [0:0] tmp_12_reg_1823_pp0_iter5_reg;
reg   [0:0] tmp_12_reg_1823_pp0_iter6_reg;
reg   [0:0] tmp_12_reg_1823_pp0_iter7_reg;
reg   [0:0] tmp_13_reg_1828;
reg   [0:0] tmp_13_reg_1828_pp0_iter2_reg;
reg   [0:0] tmp_13_reg_1828_pp0_iter3_reg;
reg   [0:0] tmp_13_reg_1828_pp0_iter4_reg;
reg   [0:0] tmp_13_reg_1828_pp0_iter5_reg;
reg   [0:0] tmp_13_reg_1828_pp0_iter6_reg;
reg   [0:0] tmp_13_reg_1828_pp0_iter7_reg;
reg   [0:0] tmp_13_reg_1828_pp0_iter8_reg;
wire   [19:0] sub_ln264_fu_538_p2;
reg   [19:0] sub_ln264_reg_1833;
wire   [18:0] select_ln99_fu_558_p3;
reg   [18:0] select_ln99_reg_1838;
wire   [19:0] select_ln264_1_fu_571_p3;
reg   [19:0] select_ln264_1_reg_1843;
wire   [19:0] select_ln99_1_fu_585_p3;
reg   [19:0] select_ln99_1_reg_1849;
wire   [19:0] select_ln264_2_fu_597_p3;
reg   [19:0] select_ln264_2_reg_1855;
wire   [19:0] select_ln99_2_fu_607_p3;
reg   [19:0] select_ln99_2_reg_1861;
wire   [19:0] select_ln264_3_fu_618_p3;
reg   [19:0] select_ln264_3_reg_1867;
wire   [19:0] select_ln99_3_fu_628_p3;
reg   [19:0] select_ln99_3_reg_1873;
wire   [19:0] select_ln264_4_fu_639_p3;
reg   [19:0] select_ln264_4_reg_1879;
wire   [19:0] select_ln99_4_fu_649_p3;
reg   [19:0] select_ln99_4_reg_1885;
wire   [19:0] select_ln264_5_fu_660_p3;
reg   [19:0] select_ln264_5_reg_1891;
wire   [19:0] select_ln99_5_fu_670_p3;
reg   [19:0] select_ln99_5_reg_1897;
wire   [19:0] select_ln264_6_fu_681_p3;
reg   [19:0] select_ln264_6_reg_1903;
wire   [19:0] select_ln99_6_fu_691_p3;
reg   [19:0] select_ln99_6_reg_1909;
wire   [19:0] select_ln264_7_fu_702_p3;
reg   [19:0] select_ln264_7_reg_1915;
wire   [19:0] abs_max_fu_712_p3;
reg   [19:0] abs_max_reg_1921;
wire   [0:0] trunc_ln10_fu_735_p1;
reg   [0:0] trunc_ln10_reg_1928;
wire   [0:0] p_Result_s_fu_739_p3;
reg   [0:0] p_Result_s_reg_1933;
wire   [0:0] p_Result_s_reg_1933_pp0_iter11_reg;
wire   [0:0] tmp_15_fu_747_p3;
reg   [0:0] tmp_15_reg_1937;
wire   [0:0] tmp_15_reg_1937_pp0_iter11_reg;
wire   [0:0] tmp_16_fu_755_p3;
reg   [0:0] tmp_16_reg_1941;
wire   [0:0] tmp_16_reg_1941_pp0_iter11_reg;
wire   [0:0] tmp_17_fu_763_p3;
reg   [0:0] tmp_17_reg_1945;
wire   [0:0] tmp_17_reg_1945_pp0_iter11_reg;
wire   [0:0] tmp_18_fu_771_p3;
reg   [0:0] tmp_18_reg_1949;
wire   [0:0] tmp_18_reg_1949_pp0_iter11_reg;
wire   [0:0] tmp_19_fu_779_p3;
reg   [0:0] tmp_19_reg_1953;
wire   [0:0] tmp_19_reg_1953_pp0_iter11_reg;
wire   [0:0] tmp_20_fu_787_p3;
reg   [0:0] tmp_20_reg_1957;
wire   [0:0] tmp_20_reg_1957_pp0_iter11_reg;
wire   [0:0] tmp_21_fu_795_p3;
reg   [0:0] tmp_21_reg_1961;
wire   [0:0] tmp_21_reg_1961_pp0_iter11_reg;
wire   [0:0] tmp_22_fu_803_p3;
reg   [0:0] tmp_22_reg_1965;
wire   [0:0] tmp_22_reg_1965_pp0_iter11_reg;
wire   [0:0] tmp_23_fu_811_p3;
reg   [0:0] tmp_23_reg_1969;
wire   [0:0] tmp_23_reg_1969_pp0_iter11_reg;
wire   [0:0] tmp_24_fu_819_p3;
reg   [0:0] tmp_24_reg_1973;
wire   [0:0] tmp_24_reg_1973_pp0_iter11_reg;
wire   [0:0] tmp_25_fu_827_p3;
reg   [0:0] tmp_25_reg_1977;
wire   [0:0] tmp_25_reg_1977_pp0_iter11_reg;
wire   [0:0] tmp_26_fu_835_p3;
reg   [0:0] tmp_26_reg_1981;
wire   [0:0] tmp_26_reg_1981_pp0_iter11_reg;
wire   [0:0] tmp_27_fu_843_p3;
reg   [0:0] tmp_27_reg_1985;
wire   [0:0] tmp_27_reg_1985_pp0_iter11_reg;
wire   [0:0] tmp_28_fu_851_p3;
reg   [0:0] tmp_28_reg_1989;
wire   [0:0] tmp_28_reg_1989_pp0_iter11_reg;
wire   [0:0] tmp_29_fu_859_p3;
reg   [0:0] tmp_29_reg_1993;
wire   [0:0] tmp_29_reg_1993_pp0_iter11_reg;
wire   [0:0] tmp_30_fu_867_p3;
reg   [0:0] tmp_30_reg_1997;
wire   [0:0] tmp_30_reg_1997_pp0_iter11_reg;
wire   [0:0] tmp_31_fu_875_p3;
reg   [0:0] tmp_31_reg_2001;
wire   [0:0] tmp_31_reg_2001_pp0_iter11_reg;
reg   [0:0] tmp_32_reg_2005;
wire   [0:0] tmp_32_reg_2005_pp0_iter11_reg;
wire   [4:0] select_ln16_fu_891_p3;
wire   [3:0] s_val_V_fu_910_p3;
reg   [3:0] s_val_V_reg_2014;
reg   [3:0] s_val_V_reg_2014_pp0_iter14_reg;
reg   [3:0] s_val_V_reg_2014_pp0_iter15_reg;
wire   [0:0] icmp_ln1069_fu_918_p2;
reg   [0:0] icmp_ln1069_reg_2019;
wire   [0:0] icmp_ln1069_reg_2019_pp0_iter13_reg;
reg   [0:0] icmp_ln1069_reg_2019_pp0_iter14_reg;
wire   [4:0] ret_V_fu_928_p2;
reg   [4:0] ret_V_reg_2023;
reg   [0:0] p_Result_2_reg_2035;
wire   [4:0] sub_ln599_fu_942_p2;
reg   [4:0] sub_ln599_reg_2047;
wire   [7:0] select_ln75_fu_966_p3;
wire   [7:0] select_ln75_1_fu_998_p3;
wire   [7:0] select_ln75_2_fu_1030_p3;
wire   [7:0] select_ln75_3_fu_1062_p3;
wire   [7:0] select_ln75_4_fu_1094_p3;
wire   [7:0] select_ln75_5_fu_1126_p3;
wire   [7:0] select_ln75_6_fu_1158_p3;
reg   [11:0] tmp_42_reg_2087;
reg   [7:0] trunc_ln75_4_reg_2092;
reg   [11:0] tmp_43_reg_2097;
reg   [7:0] trunc_ln75_5_reg_2102;
reg   [11:0] tmp_44_reg_2107;
reg   [7:0] trunc_ln75_6_reg_2112;
reg   [11:0] tmp_45_reg_2117;
reg   [7:0] trunc_ln75_7_reg_2122;
reg   [11:0] tmp_46_reg_2127;
reg   [7:0] trunc_ln75_10_reg_2132;
reg   [11:0] tmp_47_reg_2137;
reg   [7:0] trunc_ln75_11_reg_2142;
reg   [11:0] tmp_48_reg_2147;
reg   [7:0] trunc_ln75_12_reg_2152;
reg   [18:0] r_V_9_reg_2157;
wire   [7:0] select_ln75_7_fu_1564_p3;
wire   [7:0] select_ln75_8_fu_1576_p3;
wire   [7:0] select_ln75_9_fu_1588_p3;
wire   [7:0] select_ln75_10_fu_1600_p3;
wire   [7:0] select_ln75_11_fu_1612_p3;
wire   [7:0] select_ln75_12_fu_1624_p3;
wire   [7:0] select_ln75_13_fu_1636_p3;
wire  signed [19:0] sext_ln1715_fu_1643_p1;
wire   [4:0] ap_phi_reg_pp0_iter0_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter1_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter2_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter3_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter4_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter5_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter6_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter7_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter8_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter9_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter10_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter11_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter12_s_val_reg_220;
reg   [4:0] ap_phi_reg_pp0_iter13_s_val_reg_220;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i_685_reg_303;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i_685_reg_303;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i_4515783_reg_312;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i_4515783_reg_312;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i_22531495981_reg_321;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i_22531495981_reg_321;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i7132333476179_reg_330;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i7132333476179_reg_330;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i_1152135456377_reg_339;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i_1152135456377_reg_339;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i_337436575_reg_348;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i_337436575_reg_348;
wire   [7:0] ap_phi_reg_pp0_iter0_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter1_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter2_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter3_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter4_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter5_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter6_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter7_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter8_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter9_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter10_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter11_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter12_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter13_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter14_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter15_conv_i_56773_reg_357;
reg   [7:0] ap_phi_reg_pp0_iter16_conv_i_56773_reg_357;
wire   [19:0] ap_phi_reg_pp0_iter0_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter1_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter2_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter3_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter4_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter5_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter6_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter7_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter8_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter9_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter10_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter11_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter12_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter13_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter14_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter15_q_val_9_reg_366;
reg   [19:0] ap_phi_reg_pp0_iter16_q_val_9_reg_366;
reg   [9:0] indvar_flatten_fu_196;
wire   [9:0] add_ln62_fu_389_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [19:0] select_ln264_fu_543_p3;
wire   [0:0] icmp_ln1073_fu_552_p2;
wire   [18:0] trunc_ln1073_fu_548_p1;
wire   [19:0] sub_ln264_1_fu_566_p2;
wire   [19:0] zext_ln264_fu_577_p1;
wire   [0:0] icmp_ln1073_1_fu_580_p2;
wire   [19:0] sub_ln264_2_fu_592_p2;
wire   [0:0] icmp_ln1073_2_fu_603_p2;
wire   [19:0] sub_ln264_3_fu_613_p2;
wire   [0:0] icmp_ln1073_3_fu_624_p2;
wire   [19:0] sub_ln264_4_fu_634_p2;
wire   [0:0] icmp_ln1073_4_fu_645_p2;
wire   [19:0] sub_ln264_5_fu_655_p2;
wire   [0:0] icmp_ln1073_5_fu_666_p2;
wire   [19:0] sub_ln264_6_fu_676_p2;
wire   [0:0] icmp_ln1073_6_fu_687_p2;
wire   [19:0] sub_ln264_7_fu_697_p2;
wire   [0:0] icmp_ln1073_7_fu_708_p2;
wire   [0:0] icmp_ln1077_fu_718_p2;
wire   [19:0] x_V_1_fu_723_p2;
wire   [19:0] p_Val2_s_fu_728_p3;
wire   [0:0] tmp_33_fu_898_p3;
wire   [3:0] trunc_ln256_fu_906_p1;
wire   [4:0] zext_ln1542_fu_924_p1;
wire   [12:0] tmp_35_fu_948_p4;
wire   [0:0] icmp_ln1073_8_fu_957_p2;
wire   [7:0] trunc_ln75_fu_963_p1;
wire   [12:0] tmp_36_fu_974_p4;
wire   [0:0] icmp_ln1073_9_fu_983_p2;
wire   [7:0] trunc_ln75_8_fu_989_p4;
wire   [12:0] tmp_37_fu_1006_p4;
wire   [0:0] icmp_ln1073_10_fu_1015_p2;
wire   [7:0] trunc_ln75_9_fu_1021_p4;
wire   [12:0] tmp_38_fu_1038_p4;
wire   [0:0] icmp_ln1073_11_fu_1047_p2;
wire   [7:0] trunc_ln75_s_fu_1053_p4;
wire   [12:0] tmp_39_fu_1070_p4;
wire   [0:0] icmp_ln1073_12_fu_1079_p2;
wire   [7:0] trunc_ln75_1_fu_1085_p4;
wire   [12:0] tmp_40_fu_1102_p4;
wire   [0:0] icmp_ln1073_13_fu_1111_p2;
wire   [7:0] trunc_ln75_2_fu_1117_p4;
wire   [12:0] tmp_41_fu_1134_p4;
wire   [0:0] icmp_ln1073_14_fu_1143_p2;
wire   [7:0] trunc_ln75_3_fu_1149_p4;
wire  signed [31:0] sext_ln976_fu_1166_p1;
wire   [19:0] sext_ln976cast_fu_1169_p1;
wire   [19:0] ret_Vcast_fu_1178_p1;
wire   [19:0] shl_ln976_fu_1173_p2;
wire   [19:0] ashr_ln994_fu_1181_p2;
wire   [19:0] r_V_fu_1186_p3;
wire   [19:0] add_ln75_fu_1193_p2;
wire   [19:0] sext_ln976cast128_fu_1219_p1;
wire   [19:0] ret_Vcast129_fu_1228_p1;
wire   [19:0] shl_ln976_1_fu_1223_p2;
wire   [19:0] ashr_ln994_1_fu_1231_p2;
wire   [19:0] r_V_1_fu_1236_p3;
wire   [19:0] add_ln75_8_fu_1243_p2;
wire   [19:0] sext_ln976cast130_fu_1269_p1;
wire   [19:0] ret_Vcast131_fu_1278_p1;
wire   [19:0] shl_ln976_2_fu_1273_p2;
wire   [19:0] ashr_ln994_2_fu_1281_p2;
wire   [19:0] r_V_2_fu_1286_p3;
wire   [19:0] add_ln75_9_fu_1293_p2;
wire   [19:0] sext_ln976cast132_fu_1319_p1;
wire   [19:0] ret_Vcast133_fu_1328_p1;
wire   [19:0] shl_ln976_3_fu_1323_p2;
wire   [19:0] ashr_ln994_3_fu_1331_p2;
wire   [19:0] r_V_3_fu_1336_p3;
wire   [19:0] add_ln75_10_fu_1343_p2;
wire   [19:0] sext_ln976cast134_fu_1369_p1;
wire   [19:0] ret_Vcast135_fu_1378_p1;
wire   [19:0] shl_ln976_4_fu_1373_p2;
wire   [19:0] ashr_ln994_4_fu_1381_p2;
wire   [19:0] r_V_4_fu_1386_p3;
wire   [19:0] add_ln75_11_fu_1393_p2;
wire   [19:0] sext_ln976cast136_fu_1419_p1;
wire   [19:0] ret_Vcast137_fu_1428_p1;
wire   [19:0] shl_ln976_5_fu_1423_p2;
wire   [19:0] ashr_ln994_5_fu_1431_p2;
wire   [19:0] r_V_5_fu_1436_p3;
wire   [19:0] add_ln75_12_fu_1443_p2;
wire   [19:0] sext_ln976cast138_fu_1469_p1;
wire   [19:0] ret_Vcast139_fu_1478_p1;
wire   [19:0] shl_ln976_6_fu_1473_p2;
wire   [19:0] ashr_ln994_6_fu_1481_p2;
wire   [19:0] r_V_6_fu_1486_p3;
wire   [19:0] add_ln75_13_fu_1493_p2;
wire   [19:0] sext_ln976cast140_fu_1519_p1;
wire   [19:0] ret_Vcast141_fu_1528_p1;
wire   [19:0] shl_ln976_7_fu_1523_p2;
wire   [19:0] ashr_ln994_7_fu_1531_p2;
wire   [19:0] r_V_7_fu_1536_p3;
wire   [19:0] add_ln75_14_fu_1543_p2;
wire   [0:0] icmp_ln1073_15_fu_1559_p2;
wire   [0:0] icmp_ln1073_16_fu_1571_p2;
wire   [0:0] icmp_ln1073_17_fu_1583_p2;
wire   [0:0] icmp_ln1073_18_fu_1595_p2;
wire   [0:0] icmp_ln1073_19_fu_1607_p2;
wire   [0:0] icmp_ln1073_20_fu_1619_p2;
wire   [0:0] icmp_ln1073_21_fu_1631_p2;
wire   [12:0] tmp_49_fu_1646_p4;
wire   [0:0] icmp_ln1073_22_fu_1656_p2;
wire   [7:0] trunc_ln75_13_fu_1662_p1;
wire   [7:0] select_ln75_14_fu_1666_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg   [1:0] ap_NS_iter16_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
wire    ap_ST_iter15_fsm_state16_blk;
reg    ap_ST_iter16_fsm_state17_blk;
wire    ap_start_int;
reg    ap_condition_1046;
reg    ap_condition_1050;
reg    ap_condition_1054;
reg    ap_condition_1058;
reg    ap_condition_1062;
reg    ap_condition_1066;
reg    ap_condition_1070;
reg    ap_condition_1074;
reg    ap_condition_1078;
reg    ap_condition_1082;
reg    ap_condition_1086;
reg    ap_condition_1090;
reg    ap_condition_1094;
reg    ap_condition_1098;
reg    ap_condition_1102;
reg    ap_condition_1106;
reg    ap_condition_1110;
reg    ap_condition_1114;
reg    ap_condition_893;
reg    ap_condition_346;
reg    ap_condition_348;
reg    ap_condition_351;
reg    ap_condition_2242;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_CS_iter16_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
end

RMSNORM_QUANT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter16_fsm <= ap_ST_iter16_fsm_state0;
    end else begin
        ap_CS_iter16_fsm <= ap_NS_iter16_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_346)) begin
        if ((1'b1 == ap_condition_893)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= select_ln16_fu_891_p3;
        end else if ((1'b1 == ap_condition_1114)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd27;
        end else if ((1'b1 == ap_condition_1110)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd28;
        end else if ((1'b1 == ap_condition_1106)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd29;
        end else if ((1'b1 == ap_condition_1102)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd30;
        end else if ((1'b1 == ap_condition_1098)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd31;
        end else if ((1'b1 == ap_condition_1094)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd0;
        end else if ((1'b1 == ap_condition_1090)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd1;
        end else if ((1'b1 == ap_condition_1086)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd2;
        end else if ((1'b1 == ap_condition_1082)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd3;
        end else if ((1'b1 == ap_condition_1078)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd4;
        end else if ((1'b1 == ap_condition_1074)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd5;
        end else if ((1'b1 == ap_condition_1070)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd6;
        end else if ((1'b1 == ap_condition_1066)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd7;
        end else if ((1'b1 == ap_condition_1062)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd8;
        end else if ((1'b1 == ap_condition_1058)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd9;
        end else if ((1'b1 == ap_condition_1054)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd10;
        end else if ((1'b1 == ap_condition_1050)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd11;
        end else if ((1'b1 == ap_condition_1046)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd12;
        end else if (((p_Result_s_reg_1933_pp0_iter11_reg == 1'd1) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= 5'd13;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_s_val_reg_220 <= ap_phi_reg_pp0_iter12_s_val_reg_220;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i7132333476179_reg_330 <= select_ln75_fu_966_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter13_conv_i7132333476179_reg_330;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i_1152135456377_reg_339 <= select_ln75_1_fu_998_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter13_conv_i_1152135456377_reg_339;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i_22531495981_reg_321 <= select_ln75_2_fu_1030_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter13_conv_i_22531495981_reg_321;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i_337436575_reg_348 <= select_ln75_3_fu_1062_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter13_conv_i_337436575_reg_348;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i_4515783_reg_312 <= select_ln75_4_fu_1094_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter13_conv_i_4515783_reg_312;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i_56773_reg_357 <= select_ln75_5_fu_1126_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter13_conv_i_56773_reg_357;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_conv_i_685_reg_303 <= select_ln75_6_fu_1158_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter13_conv_i_685_reg_303;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if (((icmp_ln1069_fu_918_p2 == 1'd1) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_q_val_9_reg_366 <= q_val_7_reg_1744_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_q_val_9_reg_366 <= ap_phi_reg_pp0_iter13_q_val_9_reg_366;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i7132333476179_reg_330 <= select_ln75_7_fu_1564_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter15_conv_i7132333476179_reg_330;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i_1152135456377_reg_339 <= select_ln75_8_fu_1576_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter15_conv_i_1152135456377_reg_339;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i_22531495981_reg_321 <= select_ln75_9_fu_1588_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter15_conv_i_22531495981_reg_321;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i_337436575_reg_348 <= select_ln75_10_fu_1600_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter15_conv_i_337436575_reg_348;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i_4515783_reg_312 <= select_ln75_11_fu_1612_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter15_conv_i_4515783_reg_312;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i_56773_reg_357 <= select_ln75_12_fu_1624_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter15_conv_i_56773_reg_357;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_conv_i_685_reg_303 <= select_ln75_13_fu_1636_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter15_conv_i_685_reg_303;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_351)) begin
        if (((icmp_ln1069_reg_2019_pp0_iter14_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_q_val_9_reg_366 <= sext_ln1715_fu_1643_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_q_val_9_reg_366 <= ap_phi_reg_pp0_iter15_q_val_9_reg_366;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2242)) begin
        if ((icmp_ln62_fu_383_p2 == 1'd0)) begin
            indvar_flatten_fu_196 <= add_ln62_fu_389_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_196 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        abs_max_reg_1921 <= abs_max_fu_712_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_phi_reg_pp0_iter10_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter9_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter10_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter9_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter10_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter9_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter10_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter9_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter10_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter9_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter10_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter9_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter10_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter9_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter10_q_val_9_reg_366 <= ap_phi_reg_pp0_iter9_q_val_9_reg_366;
        ap_phi_reg_pp0_iter10_s_val_reg_220 <= ap_phi_reg_pp0_iter9_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter9_reg <= icmp_ln62_reg_1706_pp0_iter8_reg;
        q_val_1_reg_1753_pp0_iter9_reg <= q_val_1_reg_1753_pp0_iter8_reg;
        q_val_2_reg_1761_pp0_iter9_reg <= q_val_2_reg_1761_pp0_iter8_reg;
        q_val_3_reg_1769_pp0_iter9_reg <= q_val_3_reg_1769_pp0_iter8_reg;
        q_val_4_reg_1777_pp0_iter9_reg <= q_val_4_reg_1777_pp0_iter8_reg;
        q_val_5_reg_1785_pp0_iter9_reg <= q_val_5_reg_1785_pp0_iter8_reg;
        q_val_6_reg_1736_pp0_iter9_reg <= q_val_6_reg_1736_pp0_iter8_reg;
        q_val_7_reg_1744_pp0_iter9_reg <= q_val_7_reg_1744_pp0_iter8_reg;
        q_val_reg_1728_pp0_iter9_reg <= q_val_reg_1728_pp0_iter8_reg;
        xln_stream_read_reg_1710_pp0_iter9_reg <= xln_stream_read_reg_1710_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_phi_reg_pp0_iter11_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter10_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter11_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter10_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter11_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter10_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter11_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter10_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter11_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter10_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter11_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter10_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter11_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter10_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter11_q_val_9_reg_366 <= ap_phi_reg_pp0_iter10_q_val_9_reg_366;
        ap_phi_reg_pp0_iter11_s_val_reg_220 <= ap_phi_reg_pp0_iter10_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter10_reg <= icmp_ln62_reg_1706_pp0_iter9_reg;
        q_val_1_reg_1753_pp0_iter10_reg <= q_val_1_reg_1753_pp0_iter9_reg;
        q_val_2_reg_1761_pp0_iter10_reg <= q_val_2_reg_1761_pp0_iter9_reg;
        q_val_3_reg_1769_pp0_iter10_reg <= q_val_3_reg_1769_pp0_iter9_reg;
        q_val_4_reg_1777_pp0_iter10_reg <= q_val_4_reg_1777_pp0_iter9_reg;
        q_val_5_reg_1785_pp0_iter10_reg <= q_val_5_reg_1785_pp0_iter9_reg;
        q_val_6_reg_1736_pp0_iter10_reg <= q_val_6_reg_1736_pp0_iter9_reg;
        q_val_7_reg_1744_pp0_iter10_reg <= q_val_7_reg_1744_pp0_iter9_reg;
        q_val_reg_1728_pp0_iter10_reg <= q_val_reg_1728_pp0_iter9_reg;
        xln_stream_read_reg_1710_pp0_iter10_reg <= xln_stream_read_reg_1710_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_phi_reg_pp0_iter12_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter11_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter12_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter11_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter12_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter11_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter12_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter11_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter12_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter11_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter12_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter11_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter12_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter11_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter12_q_val_9_reg_366 <= ap_phi_reg_pp0_iter11_q_val_9_reg_366;
        ap_phi_reg_pp0_iter12_s_val_reg_220 <= ap_phi_reg_pp0_iter11_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter11_reg <= icmp_ln62_reg_1706_pp0_iter10_reg;
        q_val_1_reg_1753_pp0_iter11_reg <= q_val_1_reg_1753_pp0_iter10_reg;
        q_val_2_reg_1761_pp0_iter11_reg <= q_val_2_reg_1761_pp0_iter10_reg;
        q_val_3_reg_1769_pp0_iter11_reg <= q_val_3_reg_1769_pp0_iter10_reg;
        q_val_4_reg_1777_pp0_iter11_reg <= q_val_4_reg_1777_pp0_iter10_reg;
        q_val_5_reg_1785_pp0_iter11_reg <= q_val_5_reg_1785_pp0_iter10_reg;
        q_val_6_reg_1736_pp0_iter11_reg <= q_val_6_reg_1736_pp0_iter10_reg;
        q_val_7_reg_1744_pp0_iter11_reg <= q_val_7_reg_1744_pp0_iter10_reg;
        q_val_reg_1728_pp0_iter11_reg <= q_val_reg_1728_pp0_iter10_reg;
        xln_stream_read_reg_1710_pp0_iter11_reg <= xln_stream_read_reg_1710_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_phi_reg_pp0_iter13_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter12_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter13_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter12_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter13_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter12_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter13_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter12_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter13_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter12_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter13_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter12_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter13_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter12_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter13_q_val_9_reg_366 <= ap_phi_reg_pp0_iter12_q_val_9_reg_366;
        icmp_ln62_reg_1706_pp0_iter12_reg <= icmp_ln62_reg_1706_pp0_iter11_reg;
        q_val_1_reg_1753_pp0_iter12_reg <= q_val_1_reg_1753_pp0_iter11_reg;
        q_val_2_reg_1761_pp0_iter12_reg <= q_val_2_reg_1761_pp0_iter11_reg;
        q_val_3_reg_1769_pp0_iter12_reg <= q_val_3_reg_1769_pp0_iter11_reg;
        q_val_4_reg_1777_pp0_iter12_reg <= q_val_4_reg_1777_pp0_iter11_reg;
        q_val_5_reg_1785_pp0_iter12_reg <= q_val_5_reg_1785_pp0_iter11_reg;
        q_val_6_reg_1736_pp0_iter12_reg <= q_val_6_reg_1736_pp0_iter11_reg;
        q_val_7_reg_1744_pp0_iter12_reg <= q_val_7_reg_1744_pp0_iter11_reg;
        q_val_reg_1728_pp0_iter12_reg <= q_val_reg_1728_pp0_iter11_reg;
        xln_stream_read_reg_1710_pp0_iter12_reg <= xln_stream_read_reg_1710_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        icmp_ln62_reg_1706_pp0_iter13_reg <= icmp_ln62_reg_1706_pp0_iter12_reg;
        q_val_1_reg_1753_pp0_iter13_reg <= q_val_1_reg_1753_pp0_iter12_reg;
        q_val_2_reg_1761_pp0_iter13_reg <= q_val_2_reg_1761_pp0_iter12_reg;
        q_val_3_reg_1769_pp0_iter13_reg <= q_val_3_reg_1769_pp0_iter12_reg;
        q_val_4_reg_1777_pp0_iter13_reg <= q_val_4_reg_1777_pp0_iter12_reg;
        q_val_5_reg_1785_pp0_iter13_reg <= q_val_5_reg_1785_pp0_iter12_reg;
        q_val_6_reg_1736_pp0_iter13_reg <= q_val_6_reg_1736_pp0_iter12_reg;
        q_val_7_reg_1744_pp0_iter13_reg <= q_val_7_reg_1744_pp0_iter12_reg;
        q_val_reg_1728_pp0_iter13_reg <= q_val_reg_1728_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_phi_reg_pp0_iter15_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter14_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter15_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter14_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter15_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter14_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter15_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter14_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter15_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter14_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter15_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter14_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter15_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter14_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter15_q_val_9_reg_366 <= ap_phi_reg_pp0_iter14_q_val_9_reg_366;
        icmp_ln1069_reg_2019_pp0_iter14_reg <= icmp_ln1069_reg_2019;
        icmp_ln62_reg_1706_pp0_iter14_reg <= icmp_ln62_reg_1706_pp0_iter13_reg;
        s_val_V_reg_2014_pp0_iter14_reg <= s_val_V_reg_2014;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter0_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter1_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter0_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter1_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter0_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter1_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter0_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter1_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter0_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter1_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter0_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter1_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter0_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter1_q_val_9_reg_366 <= ap_phi_reg_pp0_iter0_q_val_9_reg_366;
        ap_phi_reg_pp0_iter1_s_val_reg_220 <= ap_phi_reg_pp0_iter0_s_val_reg_220;
        icmp_ln62_reg_1706 <= icmp_ln62_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter1_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter2_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter1_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter2_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter1_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter2_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter1_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter2_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter1_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter2_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter1_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter2_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter1_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter2_q_val_9_reg_366 <= ap_phi_reg_pp0_iter1_q_val_9_reg_366;
        ap_phi_reg_pp0_iter2_s_val_reg_220 <= ap_phi_reg_pp0_iter1_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter1_reg <= icmp_ln62_reg_1706;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_phi_reg_pp0_iter3_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter2_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter3_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter2_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter3_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter2_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter3_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter2_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter3_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter2_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter3_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter2_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter3_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter2_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter3_q_val_9_reg_366 <= ap_phi_reg_pp0_iter2_q_val_9_reg_366;
        ap_phi_reg_pp0_iter3_s_val_reg_220 <= ap_phi_reg_pp0_iter2_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter2_reg <= icmp_ln62_reg_1706_pp0_iter1_reg;
        q_val_1_reg_1753_pp0_iter2_reg <= q_val_1_reg_1753;
        q_val_2_reg_1761_pp0_iter2_reg <= q_val_2_reg_1761;
        q_val_3_reg_1769_pp0_iter2_reg <= q_val_3_reg_1769;
        q_val_4_reg_1777_pp0_iter2_reg <= q_val_4_reg_1777;
        q_val_5_reg_1785_pp0_iter2_reg <= q_val_5_reg_1785;
        q_val_6_reg_1736_pp0_iter2_reg <= q_val_6_reg_1736;
        q_val_7_reg_1744_pp0_iter2_reg <= q_val_7_reg_1744;
        q_val_reg_1728_pp0_iter2_reg <= q_val_reg_1728;
        tmp_10_reg_1813_pp0_iter2_reg <= tmp_10_reg_1813;
        tmp_11_reg_1818_pp0_iter2_reg <= tmp_11_reg_1818;
        tmp_12_reg_1823_pp0_iter2_reg <= tmp_12_reg_1823;
        tmp_13_reg_1828_pp0_iter2_reg <= tmp_13_reg_1828;
        tmp_7_reg_1798_pp0_iter2_reg <= tmp_7_reg_1798;
        tmp_8_reg_1803_pp0_iter2_reg <= tmp_8_reg_1803;
        tmp_9_reg_1808_pp0_iter2_reg <= tmp_9_reg_1808;
        tmp_reg_1793_pp0_iter2_reg <= tmp_reg_1793;
        xln_stream_read_reg_1710_pp0_iter2_reg <= xln_stream_read_reg_1710;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_phi_reg_pp0_iter4_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter3_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter4_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter3_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter4_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter3_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter4_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter3_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter4_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter3_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter4_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter3_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter4_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter3_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter4_q_val_9_reg_366 <= ap_phi_reg_pp0_iter3_q_val_9_reg_366;
        ap_phi_reg_pp0_iter4_s_val_reg_220 <= ap_phi_reg_pp0_iter3_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter3_reg <= icmp_ln62_reg_1706_pp0_iter2_reg;
        q_val_1_reg_1753_pp0_iter3_reg <= q_val_1_reg_1753_pp0_iter2_reg;
        q_val_2_reg_1761_pp0_iter3_reg <= q_val_2_reg_1761_pp0_iter2_reg;
        q_val_3_reg_1769_pp0_iter3_reg <= q_val_3_reg_1769_pp0_iter2_reg;
        q_val_4_reg_1777_pp0_iter3_reg <= q_val_4_reg_1777_pp0_iter2_reg;
        q_val_5_reg_1785_pp0_iter3_reg <= q_val_5_reg_1785_pp0_iter2_reg;
        q_val_6_reg_1736_pp0_iter3_reg <= q_val_6_reg_1736_pp0_iter2_reg;
        q_val_7_reg_1744_pp0_iter3_reg <= q_val_7_reg_1744_pp0_iter2_reg;
        q_val_reg_1728_pp0_iter3_reg <= q_val_reg_1728_pp0_iter2_reg;
        tmp_10_reg_1813_pp0_iter3_reg <= tmp_10_reg_1813_pp0_iter2_reg;
        tmp_11_reg_1818_pp0_iter3_reg <= tmp_11_reg_1818_pp0_iter2_reg;
        tmp_12_reg_1823_pp0_iter3_reg <= tmp_12_reg_1823_pp0_iter2_reg;
        tmp_13_reg_1828_pp0_iter3_reg <= tmp_13_reg_1828_pp0_iter2_reg;
        tmp_8_reg_1803_pp0_iter3_reg <= tmp_8_reg_1803_pp0_iter2_reg;
        tmp_9_reg_1808_pp0_iter3_reg <= tmp_9_reg_1808_pp0_iter2_reg;
        xln_stream_read_reg_1710_pp0_iter3_reg <= xln_stream_read_reg_1710_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_phi_reg_pp0_iter5_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter4_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter5_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter4_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter5_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter4_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter5_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter4_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter5_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter4_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter5_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter4_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter5_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter4_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter5_q_val_9_reg_366 <= ap_phi_reg_pp0_iter4_q_val_9_reg_366;
        ap_phi_reg_pp0_iter5_s_val_reg_220 <= ap_phi_reg_pp0_iter4_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter4_reg <= icmp_ln62_reg_1706_pp0_iter3_reg;
        q_val_1_reg_1753_pp0_iter4_reg <= q_val_1_reg_1753_pp0_iter3_reg;
        q_val_2_reg_1761_pp0_iter4_reg <= q_val_2_reg_1761_pp0_iter3_reg;
        q_val_3_reg_1769_pp0_iter4_reg <= q_val_3_reg_1769_pp0_iter3_reg;
        q_val_4_reg_1777_pp0_iter4_reg <= q_val_4_reg_1777_pp0_iter3_reg;
        q_val_5_reg_1785_pp0_iter4_reg <= q_val_5_reg_1785_pp0_iter3_reg;
        q_val_6_reg_1736_pp0_iter4_reg <= q_val_6_reg_1736_pp0_iter3_reg;
        q_val_7_reg_1744_pp0_iter4_reg <= q_val_7_reg_1744_pp0_iter3_reg;
        q_val_reg_1728_pp0_iter4_reg <= q_val_reg_1728_pp0_iter3_reg;
        tmp_10_reg_1813_pp0_iter4_reg <= tmp_10_reg_1813_pp0_iter3_reg;
        tmp_11_reg_1818_pp0_iter4_reg <= tmp_11_reg_1818_pp0_iter3_reg;
        tmp_12_reg_1823_pp0_iter4_reg <= tmp_12_reg_1823_pp0_iter3_reg;
        tmp_13_reg_1828_pp0_iter4_reg <= tmp_13_reg_1828_pp0_iter3_reg;
        tmp_9_reg_1808_pp0_iter4_reg <= tmp_9_reg_1808_pp0_iter3_reg;
        xln_stream_read_reg_1710_pp0_iter4_reg <= xln_stream_read_reg_1710_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_phi_reg_pp0_iter6_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter5_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter6_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter5_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter6_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter5_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter6_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter5_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter6_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter5_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter6_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter5_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter6_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter5_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter6_q_val_9_reg_366 <= ap_phi_reg_pp0_iter5_q_val_9_reg_366;
        ap_phi_reg_pp0_iter6_s_val_reg_220 <= ap_phi_reg_pp0_iter5_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter5_reg <= icmp_ln62_reg_1706_pp0_iter4_reg;
        q_val_1_reg_1753_pp0_iter5_reg <= q_val_1_reg_1753_pp0_iter4_reg;
        q_val_2_reg_1761_pp0_iter5_reg <= q_val_2_reg_1761_pp0_iter4_reg;
        q_val_3_reg_1769_pp0_iter5_reg <= q_val_3_reg_1769_pp0_iter4_reg;
        q_val_4_reg_1777_pp0_iter5_reg <= q_val_4_reg_1777_pp0_iter4_reg;
        q_val_5_reg_1785_pp0_iter5_reg <= q_val_5_reg_1785_pp0_iter4_reg;
        q_val_6_reg_1736_pp0_iter5_reg <= q_val_6_reg_1736_pp0_iter4_reg;
        q_val_7_reg_1744_pp0_iter5_reg <= q_val_7_reg_1744_pp0_iter4_reg;
        q_val_reg_1728_pp0_iter5_reg <= q_val_reg_1728_pp0_iter4_reg;
        tmp_10_reg_1813_pp0_iter5_reg <= tmp_10_reg_1813_pp0_iter4_reg;
        tmp_11_reg_1818_pp0_iter5_reg <= tmp_11_reg_1818_pp0_iter4_reg;
        tmp_12_reg_1823_pp0_iter5_reg <= tmp_12_reg_1823_pp0_iter4_reg;
        tmp_13_reg_1828_pp0_iter5_reg <= tmp_13_reg_1828_pp0_iter4_reg;
        xln_stream_read_reg_1710_pp0_iter5_reg <= xln_stream_read_reg_1710_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_phi_reg_pp0_iter7_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter6_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter7_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter6_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter7_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter6_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter7_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter6_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter7_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter6_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter7_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter6_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter7_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter6_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter7_q_val_9_reg_366 <= ap_phi_reg_pp0_iter6_q_val_9_reg_366;
        ap_phi_reg_pp0_iter7_s_val_reg_220 <= ap_phi_reg_pp0_iter6_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter6_reg <= icmp_ln62_reg_1706_pp0_iter5_reg;
        q_val_1_reg_1753_pp0_iter6_reg <= q_val_1_reg_1753_pp0_iter5_reg;
        q_val_2_reg_1761_pp0_iter6_reg <= q_val_2_reg_1761_pp0_iter5_reg;
        q_val_3_reg_1769_pp0_iter6_reg <= q_val_3_reg_1769_pp0_iter5_reg;
        q_val_4_reg_1777_pp0_iter6_reg <= q_val_4_reg_1777_pp0_iter5_reg;
        q_val_5_reg_1785_pp0_iter6_reg <= q_val_5_reg_1785_pp0_iter5_reg;
        q_val_6_reg_1736_pp0_iter6_reg <= q_val_6_reg_1736_pp0_iter5_reg;
        q_val_7_reg_1744_pp0_iter6_reg <= q_val_7_reg_1744_pp0_iter5_reg;
        q_val_reg_1728_pp0_iter6_reg <= q_val_reg_1728_pp0_iter5_reg;
        tmp_11_reg_1818_pp0_iter6_reg <= tmp_11_reg_1818_pp0_iter5_reg;
        tmp_12_reg_1823_pp0_iter6_reg <= tmp_12_reg_1823_pp0_iter5_reg;
        tmp_13_reg_1828_pp0_iter6_reg <= tmp_13_reg_1828_pp0_iter5_reg;
        xln_stream_read_reg_1710_pp0_iter6_reg <= xln_stream_read_reg_1710_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_phi_reg_pp0_iter8_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter7_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter8_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter7_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter8_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter7_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter8_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter7_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter8_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter7_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter8_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter7_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter8_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter7_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter8_q_val_9_reg_366 <= ap_phi_reg_pp0_iter7_q_val_9_reg_366;
        ap_phi_reg_pp0_iter8_s_val_reg_220 <= ap_phi_reg_pp0_iter7_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter7_reg <= icmp_ln62_reg_1706_pp0_iter6_reg;
        q_val_1_reg_1753_pp0_iter7_reg <= q_val_1_reg_1753_pp0_iter6_reg;
        q_val_2_reg_1761_pp0_iter7_reg <= q_val_2_reg_1761_pp0_iter6_reg;
        q_val_3_reg_1769_pp0_iter7_reg <= q_val_3_reg_1769_pp0_iter6_reg;
        q_val_4_reg_1777_pp0_iter7_reg <= q_val_4_reg_1777_pp0_iter6_reg;
        q_val_5_reg_1785_pp0_iter7_reg <= q_val_5_reg_1785_pp0_iter6_reg;
        q_val_6_reg_1736_pp0_iter7_reg <= q_val_6_reg_1736_pp0_iter6_reg;
        q_val_7_reg_1744_pp0_iter7_reg <= q_val_7_reg_1744_pp0_iter6_reg;
        q_val_reg_1728_pp0_iter7_reg <= q_val_reg_1728_pp0_iter6_reg;
        tmp_12_reg_1823_pp0_iter7_reg <= tmp_12_reg_1823_pp0_iter6_reg;
        tmp_13_reg_1828_pp0_iter7_reg <= tmp_13_reg_1828_pp0_iter6_reg;
        xln_stream_read_reg_1710_pp0_iter7_reg <= xln_stream_read_reg_1710_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_phi_reg_pp0_iter9_conv_i7132333476179_reg_330 <= ap_phi_reg_pp0_iter8_conv_i7132333476179_reg_330;
        ap_phi_reg_pp0_iter9_conv_i_1152135456377_reg_339 <= ap_phi_reg_pp0_iter8_conv_i_1152135456377_reg_339;
        ap_phi_reg_pp0_iter9_conv_i_22531495981_reg_321 <= ap_phi_reg_pp0_iter8_conv_i_22531495981_reg_321;
        ap_phi_reg_pp0_iter9_conv_i_337436575_reg_348 <= ap_phi_reg_pp0_iter8_conv_i_337436575_reg_348;
        ap_phi_reg_pp0_iter9_conv_i_4515783_reg_312 <= ap_phi_reg_pp0_iter8_conv_i_4515783_reg_312;
        ap_phi_reg_pp0_iter9_conv_i_56773_reg_357 <= ap_phi_reg_pp0_iter8_conv_i_56773_reg_357;
        ap_phi_reg_pp0_iter9_conv_i_685_reg_303 <= ap_phi_reg_pp0_iter8_conv_i_685_reg_303;
        ap_phi_reg_pp0_iter9_q_val_9_reg_366 <= ap_phi_reg_pp0_iter8_q_val_9_reg_366;
        ap_phi_reg_pp0_iter9_s_val_reg_220 <= ap_phi_reg_pp0_iter8_s_val_reg_220;
        icmp_ln62_reg_1706_pp0_iter8_reg <= icmp_ln62_reg_1706_pp0_iter7_reg;
        q_val_1_reg_1753_pp0_iter8_reg <= q_val_1_reg_1753_pp0_iter7_reg;
        q_val_2_reg_1761_pp0_iter8_reg <= q_val_2_reg_1761_pp0_iter7_reg;
        q_val_3_reg_1769_pp0_iter8_reg <= q_val_3_reg_1769_pp0_iter7_reg;
        q_val_4_reg_1777_pp0_iter8_reg <= q_val_4_reg_1777_pp0_iter7_reg;
        q_val_5_reg_1785_pp0_iter8_reg <= q_val_5_reg_1785_pp0_iter7_reg;
        q_val_6_reg_1736_pp0_iter8_reg <= q_val_6_reg_1736_pp0_iter7_reg;
        q_val_7_reg_1744_pp0_iter8_reg <= q_val_7_reg_1744_pp0_iter7_reg;
        q_val_reg_1728_pp0_iter8_reg <= q_val_reg_1728_pp0_iter7_reg;
        tmp_13_reg_1828_pp0_iter8_reg <= tmp_13_reg_1828_pp0_iter7_reg;
        xln_stream_read_reg_1710_pp0_iter8_reg <= xln_stream_read_reg_1710_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        icmp_ln1069_reg_2019 <= icmp_ln1069_fu_918_p2;
        p_Result_2_reg_2035 <= ret_V_fu_928_p2[32'd4];
        ret_V_reg_2023 <= ret_V_fu_928_p2;
        s_val_V_reg_2014 <= s_val_V_fu_910_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        icmp_ln62_reg_1706_pp0_iter15_reg <= icmp_ln62_reg_1706_pp0_iter14_reg;
        s_val_V_reg_2014_pp0_iter15_reg <= s_val_V_reg_2014_pp0_iter14_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        p_Result_s_reg_1933 <= p_Val2_s_fu_728_p3[32'd19];
        trunc_ln10_reg_1928 <= trunc_ln10_fu_735_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0))) begin
        q_val_1_reg_1753 <= {{xln_stream_dout[39:20]}};
        q_val_2_reg_1761 <= {{xln_stream_dout[59:40]}};
        q_val_3_reg_1769 <= {{xln_stream_dout[79:60]}};
        q_val_4_reg_1777 <= {{xln_stream_dout[99:80]}};
        q_val_5_reg_1785 <= {{xln_stream_dout[119:100]}};
        q_val_6_reg_1736 <= {{xln_stream_dout[139:120]}};
        q_val_7_reg_1744 <= {{xln_stream_dout[159:140]}};
        q_val_reg_1728 <= q_val_fu_400_p1;
        tmp_10_reg_1813 <= xln_stream_dout[32'd99];
        tmp_11_reg_1818 <= xln_stream_dout[32'd119];
        tmp_12_reg_1823 <= xln_stream_dout[32'd139];
        tmp_13_reg_1828 <= xln_stream_dout[32'd159];
        tmp_7_reg_1798 <= xln_stream_dout[32'd39];
        tmp_8_reg_1803 <= xln_stream_dout[32'd59];
        tmp_9_reg_1808 <= xln_stream_dout[32'd79];
        tmp_reg_1793 <= xln_stream_dout[32'd19];
        xln_stream_read_reg_1710 <= xln_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln1069_reg_2019_pp0_iter13_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter13_reg == 1'd0) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        r_V_9_reg_2157 <= {{add_ln75_14_fu_1543_p2[19:1]}};
        tmp_42_reg_2087 <= {{add_ln75_fu_1193_p2[19:8]}};
        tmp_43_reg_2097 <= {{add_ln75_8_fu_1243_p2[19:8]}};
        tmp_44_reg_2107 <= {{add_ln75_9_fu_1293_p2[19:8]}};
        tmp_45_reg_2117 <= {{add_ln75_10_fu_1343_p2[19:8]}};
        tmp_46_reg_2127 <= {{add_ln75_11_fu_1393_p2[19:8]}};
        tmp_47_reg_2137 <= {{add_ln75_12_fu_1443_p2[19:8]}};
        tmp_48_reg_2147 <= {{add_ln75_13_fu_1493_p2[19:8]}};
        trunc_ln75_10_reg_2132 <= {{add_ln75_11_fu_1393_p2[8:1]}};
        trunc_ln75_11_reg_2142 <= {{add_ln75_12_fu_1443_p2[8:1]}};
        trunc_ln75_12_reg_2152 <= {{add_ln75_13_fu_1493_p2[8:1]}};
        trunc_ln75_4_reg_2092 <= {{add_ln75_fu_1193_p2[8:1]}};
        trunc_ln75_5_reg_2102 <= {{add_ln75_8_fu_1243_p2[8:1]}};
        trunc_ln75_6_reg_2112 <= {{add_ln75_9_fu_1293_p2[8:1]}};
        trunc_ln75_7_reg_2122 <= {{add_ln75_10_fu_1343_p2[8:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        select_ln264_1_reg_1843 <= select_ln264_1_fu_571_p3;
        select_ln99_reg_1838 <= select_ln99_fu_558_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        select_ln264_2_reg_1855 <= select_ln264_2_fu_597_p3;
        select_ln99_1_reg_1849 <= select_ln99_1_fu_585_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        select_ln264_3_reg_1867 <= select_ln264_3_fu_618_p3;
        select_ln99_2_reg_1861 <= select_ln99_2_fu_607_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        select_ln264_4_reg_1879 <= select_ln264_4_fu_639_p3;
        select_ln99_3_reg_1873 <= select_ln99_3_fu_628_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        select_ln264_5_reg_1891 <= select_ln264_5_fu_660_p3;
        select_ln99_4_reg_1885 <= select_ln99_4_fu_649_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        select_ln264_6_reg_1903 <= select_ln264_6_fu_681_p3;
        select_ln99_5_reg_1897 <= select_ln99_5_fu_670_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln62_reg_1706_pp0_iter8_reg == 1'd0) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        select_ln264_7_reg_1915 <= select_ln264_7_fu_702_p3;
        select_ln99_6_reg_1909 <= select_ln99_6_fu_691_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_reg_1793_pp0_iter1_reg == 1'd1) & (icmp_ln62_reg_1706_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        sub_ln264_reg_1833 <= sub_ln264_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (icmp_ln1069_fu_918_p2 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter12_reg == 1'd0) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        sub_ln599_reg_2047 <= sub_ln599_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_15_reg_1937 <= p_Val2_s_fu_728_p3[32'd18];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_16_reg_1941 <= p_Val2_s_fu_728_p3[32'd17];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_17_reg_1945 <= p_Val2_s_fu_728_p3[32'd16];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_18_reg_1949 <= p_Val2_s_fu_728_p3[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_19_reg_1953 <= p_Val2_s_fu_728_p3[32'd14];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_20_reg_1957 <= p_Val2_s_fu_728_p3[32'd13];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_21_reg_1961 <= p_Val2_s_fu_728_p3[32'd12];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_22_reg_1965 <= p_Val2_s_fu_728_p3[32'd11];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_23_reg_1969 <= p_Val2_s_fu_728_p3[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_24_reg_1973 <= p_Val2_s_fu_728_p3[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_25_reg_1977 <= p_Val2_s_fu_728_p3[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_26_reg_1981 <= p_Val2_s_fu_728_p3[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_26_fu_835_p3 == 1'd0) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_27_reg_1985 <= p_Val2_s_fu_728_p3[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_27_fu_843_p3 == 1'd0) & (tmp_26_fu_835_p3 == 1'd0) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_28_reg_1989 <= p_Val2_s_fu_728_p3[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_28_fu_851_p3 == 1'd0) & (tmp_27_fu_843_p3 == 1'd0) & (tmp_26_fu_835_p3 == 1'd0) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_29_reg_1993 <= p_Val2_s_fu_728_p3[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_29_fu_859_p3 == 1'd0) & (tmp_28_fu_851_p3 == 1'd0) & (tmp_27_fu_843_p3 == 1'd0) & (tmp_26_fu_835_p3 == 1'd0) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_30_reg_1997 <= p_Val2_s_fu_728_p3[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_30_fu_867_p3 == 1'd0) & (tmp_29_fu_859_p3 == 1'd0) & (tmp_28_fu_851_p3 == 1'd0) & (tmp_27_fu_843_p3 == 1'd0) & (tmp_26_fu_835_p3 == 1'd0) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_31_reg_2001 <= p_Val2_s_fu_728_p3[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (tmp_31_fu_875_p3 == 1'd0) & (tmp_30_fu_867_p3 == 1'd0) & (tmp_29_fu_859_p3 == 1'd0) & (tmp_28_fu_851_p3 == 1'd0) & (tmp_27_fu_843_p3 == 1'd0) & (tmp_26_fu_835_p3 == 1'd0) & (tmp_25_fu_827_p3 == 1'd0) & (tmp_24_fu_819_p3 == 1'd0) & (tmp_23_fu_811_p3 == 1'd0) & (tmp_22_fu_803_p3 == 1'd0) & (tmp_21_fu_795_p3 == 1'd0) & (tmp_20_fu_787_p3 == 1'd0) & (tmp_19_fu_779_p3 == 1'd0) & (tmp_18_fu_771_p3 == 1'd0) & (tmp_17_fu_763_p3 == 1'd0) & (tmp_16_fu_755_p3 == 1'd0) & (tmp_15_fu_747_p3 == 1'd0) & (p_Result_s_fu_739_p3 == 1'd0) & (icmp_ln62_reg_1706_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        tmp_32_reg_2005 <= p_Val2_s_fu_728_p3[32'd1];
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

assign ap_ST_iter15_fsm_state16_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) begin
        ap_ST_iter16_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_iter16_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (icmp_ln62_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter16_fsm_state0) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_196;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0))) begin
        xln_stream_blk_n = xln_stream_empty_n;
    end else begin
        xln_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0))) begin
        xln_stream_read = 1'b1;
    end else begin
        xln_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        xlnq_stream_TDATA_blk_n = xlnq_stream_TREADY;
    end else begin
        xlnq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        xlnq_stream_TVALID = 1'b1;
    end else begin
        xlnq_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        xlns_stream_TDATA_blk_n = xlns_stream_TREADY;
    end else begin
        xlns_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        xlns_stream_TVALID = 1'b1;
    end else begin
        xlns_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & ~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & ~((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter16_fsm)
        ap_ST_iter16_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (1'b0 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end else if (((~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((1'b1 == ap_block_state17_io) | (ap_done_reg == 1'b1) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd1) & (1'b1 == ap_CS_iter16_fsm_state17)))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end
        end
        ap_ST_iter16_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter16_fsm = 'bx;
        end
    endcase
end

assign abs_max_fu_712_p3 = ((icmp_ln1073_7_fu_708_p2[0:0] == 1'b1) ? select_ln264_7_reg_1915 : select_ln99_6_reg_1909);

assign add_ln62_fu_389_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln75_10_fu_1343_p2 = (r_V_3_fu_1336_p3 + 20'd1);

assign add_ln75_11_fu_1393_p2 = (r_V_4_fu_1386_p3 + 20'd1);

assign add_ln75_12_fu_1443_p2 = (r_V_5_fu_1436_p3 + 20'd1);

assign add_ln75_13_fu_1493_p2 = (r_V_6_fu_1486_p3 + 20'd1);

assign add_ln75_14_fu_1543_p2 = (r_V_7_fu_1536_p3 + 20'd1);

assign add_ln75_8_fu_1243_p2 = (r_V_1_fu_1236_p3 + 20'd1);

assign add_ln75_9_fu_1293_p2 = (r_V_2_fu_1286_p3 + 20'd1);

assign add_ln75_fu_1193_p2 = (r_V_fu_1186_p3 + 20'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter16_fsm_state0 = ap_CS_iter16_fsm[32'd0];

assign ap_CS_iter16_fsm_state17 = ap_CS_iter16_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = (((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = (((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1046 = ((tmp_15_reg_1937_pp0_iter11_reg == 1'd1) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1050 = ((tmp_16_reg_1941_pp0_iter11_reg == 1'd1) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1054 = ((tmp_17_reg_1945_pp0_iter11_reg == 1'd1) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1058 = ((tmp_18_reg_1949_pp0_iter11_reg == 1'd1) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1062 = ((tmp_19_reg_1953_pp0_iter11_reg == 1'd1) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1066 = ((tmp_20_reg_1957_pp0_iter11_reg == 1'd1) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1070 = ((tmp_21_reg_1961_pp0_iter11_reg == 1'd1) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1074 = ((tmp_22_reg_1965_pp0_iter11_reg == 1'd1) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1078 = ((tmp_23_reg_1969_pp0_iter11_reg == 1'd1) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1082 = ((tmp_24_reg_1973_pp0_iter11_reg == 1'd1) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1086 = ((tmp_25_reg_1977_pp0_iter11_reg == 1'd1) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1090 = ((tmp_26_reg_1981_pp0_iter11_reg == 1'd1) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1094 = ((tmp_27_reg_1985_pp0_iter11_reg == 1'd1) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1098 = ((tmp_28_reg_1989_pp0_iter11_reg == 1'd1) & (tmp_27_reg_1985_pp0_iter11_reg == 1'd0) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1102 = ((tmp_29_reg_1993_pp0_iter11_reg == 1'd1) & (tmp_28_reg_1989_pp0_iter11_reg == 1'd0) & (tmp_27_reg_1985_pp0_iter11_reg == 1'd0) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1106 = ((tmp_30_reg_1997_pp0_iter11_reg == 1'd1) & (tmp_29_reg_1993_pp0_iter11_reg == 1'd0) & (tmp_28_reg_1989_pp0_iter11_reg == 1'd0) & (tmp_27_reg_1985_pp0_iter11_reg == 1'd0) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1110 = ((tmp_31_reg_2001_pp0_iter11_reg == 1'd1) & (tmp_30_reg_1997_pp0_iter11_reg == 1'd0) & (tmp_29_reg_1993_pp0_iter11_reg == 1'd0) & (tmp_28_reg_1989_pp0_iter11_reg == 1'd0) & (tmp_27_reg_1985_pp0_iter11_reg == 1'd0) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1114 = ((tmp_32_reg_2005_pp0_iter11_reg == 1'd1) & (tmp_31_reg_2001_pp0_iter11_reg == 1'd0) & (tmp_30_reg_1997_pp0_iter11_reg == 1'd0) & (tmp_29_reg_1993_pp0_iter11_reg == 1'd0) & (tmp_28_reg_1989_pp0_iter11_reg == 1'd0) & (tmp_27_reg_1985_pp0_iter11_reg == 1'd0) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_2242 = (~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln62_reg_1706 == 1'd0) & (xln_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_346 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter12_fsm_state13));
end

always @ (*) begin
    ap_condition_348 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter13_fsm_state14));
end

always @ (*) begin
    ap_condition_351 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter16_fsm_state17) & ((1'b1 == ap_block_state17_io) | ((xlns_stream_TREADY == 1'b0) & (icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0)) | ((icmp_ln62_reg_1706_pp0_iter15_reg == 1'd0) & (xlnq_stream_TREADY == 1'b0))))) & (1'b1 == ap_CS_iter15_fsm_state16));
end

always @ (*) begin
    ap_condition_893 = ((tmp_32_reg_2005_pp0_iter11_reg == 1'd0) & (tmp_31_reg_2001_pp0_iter11_reg == 1'd0) & (tmp_30_reg_1997_pp0_iter11_reg == 1'd0) & (tmp_29_reg_1993_pp0_iter11_reg == 1'd0) & (tmp_28_reg_1989_pp0_iter11_reg == 1'd0) & (tmp_27_reg_1985_pp0_iter11_reg == 1'd0) & (tmp_26_reg_1981_pp0_iter11_reg == 1'd0) & (tmp_25_reg_1977_pp0_iter11_reg == 1'd0) & (tmp_24_reg_1973_pp0_iter11_reg == 1'd0) & (tmp_23_reg_1969_pp0_iter11_reg == 1'd0) & (tmp_22_reg_1965_pp0_iter11_reg == 1'd0) & (tmp_21_reg_1961_pp0_iter11_reg == 1'd0) & (tmp_20_reg_1957_pp0_iter11_reg == 1'd0) & (tmp_19_reg_1953_pp0_iter11_reg == 1'd0) & (tmp_18_reg_1949_pp0_iter11_reg == 1'd0) & (tmp_17_reg_1945_pp0_iter11_reg == 1'd0) & (tmp_16_reg_1941_pp0_iter11_reg == 1'd0) & (tmp_15_reg_1937_pp0_iter11_reg == 1'd0) & (p_Result_s_reg_1933_pp0_iter11_reg == 1'd0) & (icmp_ln62_reg_1706_pp0_iter11_reg == 1'd0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_conv_i7132333476179_reg_330 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_1152135456377_reg_339 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_22531495981_reg_321 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_337436575_reg_348 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_4515783_reg_312 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_56773_reg_357 = 'bx;

assign ap_phi_reg_pp0_iter0_conv_i_685_reg_303 = 'bx;

assign ap_phi_reg_pp0_iter0_q_val_9_reg_366 = 'bx;

assign ap_phi_reg_pp0_iter0_s_val_reg_220 = 'bx;

assign ashr_ln994_1_fu_1231_p2 = $signed(q_val_1_reg_1753_pp0_iter13_reg) >>> ret_Vcast129_fu_1228_p1;

assign ashr_ln994_2_fu_1281_p2 = $signed(q_val_2_reg_1761_pp0_iter13_reg) >>> ret_Vcast131_fu_1278_p1;

assign ashr_ln994_3_fu_1331_p2 = $signed(q_val_3_reg_1769_pp0_iter13_reg) >>> ret_Vcast133_fu_1328_p1;

assign ashr_ln994_4_fu_1381_p2 = $signed(q_val_4_reg_1777_pp0_iter13_reg) >>> ret_Vcast135_fu_1378_p1;

assign ashr_ln994_5_fu_1431_p2 = $signed(q_val_5_reg_1785_pp0_iter13_reg) >>> ret_Vcast137_fu_1428_p1;

assign ashr_ln994_6_fu_1481_p2 = $signed(q_val_6_reg_1736_pp0_iter13_reg) >>> ret_Vcast139_fu_1478_p1;

assign ashr_ln994_7_fu_1531_p2 = $signed(q_val_7_reg_1744_pp0_iter13_reg) >>> ret_Vcast141_fu_1528_p1;

assign ashr_ln994_fu_1181_p2 = $signed(q_val_reg_1728_pp0_iter13_reg) >>> ret_Vcast_fu_1178_p1;

assign icmp_ln1069_fu_918_p2 = ((s_val_V_fu_910_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1069_reg_2019_pp0_iter13_reg = icmp_ln1069_reg_2019;

assign icmp_ln1073_10_fu_1015_p2 = (($signed(tmp_37_fu_1006_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_11_fu_1047_p2 = (($signed(tmp_38_fu_1038_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_12_fu_1079_p2 = (($signed(tmp_39_fu_1070_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_13_fu_1111_p2 = (($signed(tmp_40_fu_1102_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_14_fu_1143_p2 = (($signed(tmp_41_fu_1134_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_15_fu_1559_p2 = (($signed(tmp_42_reg_2087) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_16_fu_1571_p2 = (($signed(tmp_43_reg_2097) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_17_fu_1583_p2 = (($signed(tmp_44_reg_2107) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_18_fu_1595_p2 = (($signed(tmp_45_reg_2117) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_19_fu_1607_p2 = (($signed(tmp_46_reg_2127) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_1_fu_580_p2 = (($signed(zext_ln264_fu_577_p1) < $signed(select_ln264_1_reg_1843)) ? 1'b1 : 1'b0);

assign icmp_ln1073_20_fu_1619_p2 = (($signed(tmp_47_reg_2137) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_21_fu_1631_p2 = (($signed(tmp_48_reg_2147) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_22_fu_1656_p2 = (($signed(tmp_49_fu_1646_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_2_fu_603_p2 = (($signed(select_ln99_1_reg_1849) < $signed(select_ln264_2_reg_1855)) ? 1'b1 : 1'b0);

assign icmp_ln1073_3_fu_624_p2 = (($signed(select_ln99_2_reg_1861) < $signed(select_ln264_3_reg_1867)) ? 1'b1 : 1'b0);

assign icmp_ln1073_4_fu_645_p2 = (($signed(select_ln99_3_reg_1873) < $signed(select_ln264_4_reg_1879)) ? 1'b1 : 1'b0);

assign icmp_ln1073_5_fu_666_p2 = (($signed(select_ln99_4_reg_1885) < $signed(select_ln264_5_reg_1891)) ? 1'b1 : 1'b0);

assign icmp_ln1073_6_fu_687_p2 = (($signed(select_ln99_5_reg_1897) < $signed(select_ln264_6_reg_1903)) ? 1'b1 : 1'b0);

assign icmp_ln1073_7_fu_708_p2 = (($signed(select_ln99_6_reg_1909) < $signed(select_ln264_7_reg_1915)) ? 1'b1 : 1'b0);

assign icmp_ln1073_8_fu_957_p2 = (($signed(tmp_35_fu_948_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_9_fu_983_p2 = (($signed(tmp_36_fu_974_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_552_p2 = (($signed(select_ln264_fu_543_p3) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1077_fu_718_p2 = (($signed(abs_max_reg_1921) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_383_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd896) ? 1'b1 : 1'b0);

assign p_Result_s_fu_739_p3 = p_Val2_s_fu_728_p3[32'd19];

assign p_Result_s_reg_1933_pp0_iter11_reg = p_Result_s_reg_1933;

assign p_Val2_s_fu_728_p3 = ((icmp_ln1077_fu_718_p2[0:0] == 1'b1) ? x_V_1_fu_723_p2 : abs_max_reg_1921);

assign q_val_fu_400_p1 = xln_stream_dout[19:0];

assign r_V_1_fu_1236_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_1_fu_1223_p2 : ashr_ln994_1_fu_1231_p2);

assign r_V_2_fu_1286_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_2_fu_1273_p2 : ashr_ln994_2_fu_1281_p2);

assign r_V_3_fu_1336_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_3_fu_1323_p2 : ashr_ln994_3_fu_1331_p2);

assign r_V_4_fu_1386_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_4_fu_1373_p2 : ashr_ln994_4_fu_1381_p2);

assign r_V_5_fu_1436_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_5_fu_1423_p2 : ashr_ln994_5_fu_1431_p2);

assign r_V_6_fu_1486_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_6_fu_1473_p2 : ashr_ln994_6_fu_1481_p2);

assign r_V_7_fu_1536_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_7_fu_1523_p2 : ashr_ln994_7_fu_1531_p2);

assign r_V_fu_1186_p3 = ((p_Result_2_reg_2035[0:0] == 1'b1) ? shl_ln976_fu_1173_p2 : ashr_ln994_fu_1181_p2);

assign ret_V_fu_928_p2 = ($signed(zext_ln1542_fu_924_p1) + $signed(5'd31));

assign ret_Vcast129_fu_1228_p1 = ret_V_reg_2023;

assign ret_Vcast131_fu_1278_p1 = ret_V_reg_2023;

assign ret_Vcast133_fu_1328_p1 = ret_V_reg_2023;

assign ret_Vcast135_fu_1378_p1 = ret_V_reg_2023;

assign ret_Vcast137_fu_1428_p1 = ret_V_reg_2023;

assign ret_Vcast139_fu_1478_p1 = ret_V_reg_2023;

assign ret_Vcast141_fu_1528_p1 = ret_V_reg_2023;

assign ret_Vcast_fu_1178_p1 = ret_V_reg_2023;

assign s_val_V_fu_910_p3 = ((tmp_33_fu_898_p3[0:0] == 1'b1) ? 4'd0 : trunc_ln256_fu_906_p1);

assign select_ln16_fu_891_p3 = ((trunc_ln10_reg_1928[0:0] == 1'b1) ? 5'd26 : 5'd25);

assign select_ln264_1_fu_571_p3 = ((tmp_7_reg_1798_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln264_1_fu_566_p2 : q_val_1_reg_1753_pp0_iter2_reg);

assign select_ln264_2_fu_597_p3 = ((tmp_8_reg_1803_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln264_2_fu_592_p2 : q_val_2_reg_1761_pp0_iter3_reg);

assign select_ln264_3_fu_618_p3 = ((tmp_9_reg_1808_pp0_iter4_reg[0:0] == 1'b1) ? sub_ln264_3_fu_613_p2 : q_val_3_reg_1769_pp0_iter4_reg);

assign select_ln264_4_fu_639_p3 = ((tmp_10_reg_1813_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln264_4_fu_634_p2 : q_val_4_reg_1777_pp0_iter5_reg);

assign select_ln264_5_fu_660_p3 = ((tmp_11_reg_1818_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln264_5_fu_655_p2 : q_val_5_reg_1785_pp0_iter6_reg);

assign select_ln264_6_fu_681_p3 = ((tmp_12_reg_1823_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln264_6_fu_676_p2 : q_val_6_reg_1736_pp0_iter7_reg);

assign select_ln264_7_fu_702_p3 = ((tmp_13_reg_1828_pp0_iter8_reg[0:0] == 1'b1) ? sub_ln264_7_fu_697_p2 : q_val_7_reg_1744_pp0_iter8_reg);

assign select_ln264_fu_543_p3 = ((tmp_reg_1793_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln264_reg_1833 : q_val_reg_1728_pp0_iter2_reg);

assign select_ln75_10_fu_1600_p3 = ((icmp_ln1073_18_fu_1595_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_7_reg_2122);

assign select_ln75_11_fu_1612_p3 = ((icmp_ln1073_19_fu_1607_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_10_reg_2132);

assign select_ln75_12_fu_1624_p3 = ((icmp_ln1073_20_fu_1619_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_11_reg_2142);

assign select_ln75_13_fu_1636_p3 = ((icmp_ln1073_21_fu_1631_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_12_reg_2152);

assign select_ln75_14_fu_1666_p3 = ((icmp_ln1073_22_fu_1656_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_13_fu_1662_p1);

assign select_ln75_1_fu_998_p3 = ((icmp_ln1073_9_fu_983_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_8_fu_989_p4);

assign select_ln75_2_fu_1030_p3 = ((icmp_ln1073_10_fu_1015_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_9_fu_1021_p4);

assign select_ln75_3_fu_1062_p3 = ((icmp_ln1073_11_fu_1047_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_s_fu_1053_p4);

assign select_ln75_4_fu_1094_p3 = ((icmp_ln1073_12_fu_1079_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_1_fu_1085_p4);

assign select_ln75_5_fu_1126_p3 = ((icmp_ln1073_13_fu_1111_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_2_fu_1117_p4);

assign select_ln75_6_fu_1158_p3 = ((icmp_ln1073_14_fu_1143_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_3_fu_1149_p4);

assign select_ln75_7_fu_1564_p3 = ((icmp_ln1073_15_fu_1559_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_4_reg_2092);

assign select_ln75_8_fu_1576_p3 = ((icmp_ln1073_16_fu_1571_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_5_reg_2102);

assign select_ln75_9_fu_1588_p3 = ((icmp_ln1073_17_fu_1583_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_6_reg_2112);

assign select_ln75_fu_966_p3 = ((icmp_ln1073_8_fu_957_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln75_fu_963_p1);

assign select_ln99_1_fu_585_p3 = ((icmp_ln1073_1_fu_580_p2[0:0] == 1'b1) ? select_ln264_1_reg_1843 : zext_ln264_fu_577_p1);

assign select_ln99_2_fu_607_p3 = ((icmp_ln1073_2_fu_603_p2[0:0] == 1'b1) ? select_ln264_2_reg_1855 : select_ln99_1_reg_1849);

assign select_ln99_3_fu_628_p3 = ((icmp_ln1073_3_fu_624_p2[0:0] == 1'b1) ? select_ln264_3_reg_1867 : select_ln99_2_reg_1861);

assign select_ln99_4_fu_649_p3 = ((icmp_ln1073_4_fu_645_p2[0:0] == 1'b1) ? select_ln264_4_reg_1879 : select_ln99_3_reg_1873);

assign select_ln99_5_fu_670_p3 = ((icmp_ln1073_5_fu_666_p2[0:0] == 1'b1) ? select_ln264_5_reg_1891 : select_ln99_4_reg_1885);

assign select_ln99_6_fu_691_p3 = ((icmp_ln1073_6_fu_687_p2[0:0] == 1'b1) ? select_ln264_6_reg_1903 : select_ln99_5_reg_1897);

assign select_ln99_fu_558_p3 = ((icmp_ln1073_fu_552_p2[0:0] == 1'b1) ? trunc_ln1073_fu_548_p1 : 19'd0);

assign sext_ln1715_fu_1643_p1 = $signed(r_V_9_reg_2157);

assign sext_ln976_fu_1166_p1 = $signed(sub_ln599_reg_2047);

assign sext_ln976cast128_fu_1219_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast130_fu_1269_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast132_fu_1319_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast134_fu_1369_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast136_fu_1419_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast138_fu_1469_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast140_fu_1519_p1 = sext_ln976_fu_1166_p1[19:0];

assign sext_ln976cast_fu_1169_p1 = sext_ln976_fu_1166_p1[19:0];

assign shl_ln976_1_fu_1223_p2 = q_val_1_reg_1753_pp0_iter13_reg << sext_ln976cast128_fu_1219_p1;

assign shl_ln976_2_fu_1273_p2 = q_val_2_reg_1761_pp0_iter13_reg << sext_ln976cast130_fu_1269_p1;

assign shl_ln976_3_fu_1323_p2 = q_val_3_reg_1769_pp0_iter13_reg << sext_ln976cast132_fu_1319_p1;

assign shl_ln976_4_fu_1373_p2 = q_val_4_reg_1777_pp0_iter13_reg << sext_ln976cast134_fu_1369_p1;

assign shl_ln976_5_fu_1423_p2 = q_val_5_reg_1785_pp0_iter13_reg << sext_ln976cast136_fu_1419_p1;

assign shl_ln976_6_fu_1473_p2 = q_val_6_reg_1736_pp0_iter13_reg << sext_ln976cast138_fu_1469_p1;

assign shl_ln976_7_fu_1523_p2 = q_val_7_reg_1744_pp0_iter13_reg << sext_ln976cast140_fu_1519_p1;

assign shl_ln976_fu_1173_p2 = q_val_reg_1728_pp0_iter13_reg << sext_ln976cast_fu_1169_p1;

assign sub_ln264_1_fu_566_p2 = (20'd0 - q_val_1_reg_1753_pp0_iter2_reg);

assign sub_ln264_2_fu_592_p2 = (20'd0 - q_val_2_reg_1761_pp0_iter3_reg);

assign sub_ln264_3_fu_613_p2 = (20'd0 - q_val_3_reg_1769_pp0_iter4_reg);

assign sub_ln264_4_fu_634_p2 = (20'd0 - q_val_4_reg_1777_pp0_iter5_reg);

assign sub_ln264_5_fu_655_p2 = (20'd0 - q_val_5_reg_1785_pp0_iter6_reg);

assign sub_ln264_6_fu_676_p2 = (20'd0 - q_val_6_reg_1736_pp0_iter7_reg);

assign sub_ln264_7_fu_697_p2 = (20'd0 - q_val_7_reg_1744_pp0_iter8_reg);

assign sub_ln264_fu_538_p2 = (20'd0 - q_val_reg_1728);

assign sub_ln599_fu_942_p2 = (5'd1 - zext_ln1542_fu_924_p1);

assign tmp_15_fu_747_p3 = p_Val2_s_fu_728_p3[32'd18];

assign tmp_15_reg_1937_pp0_iter11_reg = tmp_15_reg_1937;

assign tmp_16_fu_755_p3 = p_Val2_s_fu_728_p3[32'd17];

assign tmp_16_reg_1941_pp0_iter11_reg = tmp_16_reg_1941;

assign tmp_17_fu_763_p3 = p_Val2_s_fu_728_p3[32'd16];

assign tmp_17_reg_1945_pp0_iter11_reg = tmp_17_reg_1945;

assign tmp_18_fu_771_p3 = p_Val2_s_fu_728_p3[32'd15];

assign tmp_18_reg_1949_pp0_iter11_reg = tmp_18_reg_1949;

assign tmp_19_fu_779_p3 = p_Val2_s_fu_728_p3[32'd14];

assign tmp_19_reg_1953_pp0_iter11_reg = tmp_19_reg_1953;

assign tmp_20_fu_787_p3 = p_Val2_s_fu_728_p3[32'd13];

assign tmp_20_reg_1957_pp0_iter11_reg = tmp_20_reg_1957;

assign tmp_21_fu_795_p3 = p_Val2_s_fu_728_p3[32'd12];

assign tmp_21_reg_1961_pp0_iter11_reg = tmp_21_reg_1961;

assign tmp_22_fu_803_p3 = p_Val2_s_fu_728_p3[32'd11];

assign tmp_22_reg_1965_pp0_iter11_reg = tmp_22_reg_1965;

assign tmp_23_fu_811_p3 = p_Val2_s_fu_728_p3[32'd10];

assign tmp_23_reg_1969_pp0_iter11_reg = tmp_23_reg_1969;

assign tmp_24_fu_819_p3 = p_Val2_s_fu_728_p3[32'd9];

assign tmp_24_reg_1973_pp0_iter11_reg = tmp_24_reg_1973;

assign tmp_25_fu_827_p3 = p_Val2_s_fu_728_p3[32'd8];

assign tmp_25_reg_1977_pp0_iter11_reg = tmp_25_reg_1977;

assign tmp_26_fu_835_p3 = p_Val2_s_fu_728_p3[32'd7];

assign tmp_26_reg_1981_pp0_iter11_reg = tmp_26_reg_1981;

assign tmp_27_fu_843_p3 = p_Val2_s_fu_728_p3[32'd6];

assign tmp_27_reg_1985_pp0_iter11_reg = tmp_27_reg_1985;

assign tmp_28_fu_851_p3 = p_Val2_s_fu_728_p3[32'd5];

assign tmp_28_reg_1989_pp0_iter11_reg = tmp_28_reg_1989;

assign tmp_29_fu_859_p3 = p_Val2_s_fu_728_p3[32'd4];

assign tmp_29_reg_1993_pp0_iter11_reg = tmp_29_reg_1993;

assign tmp_30_fu_867_p3 = p_Val2_s_fu_728_p3[32'd3];

assign tmp_30_reg_1997_pp0_iter11_reg = tmp_30_reg_1997;

assign tmp_31_fu_875_p3 = p_Val2_s_fu_728_p3[32'd2];

assign tmp_31_reg_2001_pp0_iter11_reg = tmp_31_reg_2001;

assign tmp_32_reg_2005_pp0_iter11_reg = tmp_32_reg_2005;

assign tmp_33_fu_898_p3 = ap_phi_reg_pp0_iter13_s_val_reg_220[32'd4];

assign tmp_35_fu_948_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[19:7]}};

assign tmp_36_fu_974_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[39:27]}};

assign tmp_37_fu_1006_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[59:47]}};

assign tmp_38_fu_1038_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[79:67]}};

assign tmp_39_fu_1070_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[99:87]}};

assign tmp_40_fu_1102_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[119:107]}};

assign tmp_41_fu_1134_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[139:127]}};

assign tmp_49_fu_1646_p4 = {{ap_phi_reg_pp0_iter16_q_val_9_reg_366[19:7]}};

assign tmp_reg_1793_pp0_iter1_reg = tmp_reg_1793;

assign trunc_ln1073_fu_548_p1 = select_ln264_fu_543_p3[18:0];

assign trunc_ln10_fu_735_p1 = p_Val2_s_fu_728_p3[0:0];

assign trunc_ln256_fu_906_p1 = ap_phi_reg_pp0_iter13_s_val_reg_220[3:0];

assign trunc_ln75_13_fu_1662_p1 = ap_phi_reg_pp0_iter16_q_val_9_reg_366[7:0];

assign trunc_ln75_1_fu_1085_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[87:80]}};

assign trunc_ln75_2_fu_1117_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[107:100]}};

assign trunc_ln75_3_fu_1149_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[127:120]}};

assign trunc_ln75_8_fu_989_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[27:20]}};

assign trunc_ln75_9_fu_1021_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[47:40]}};

assign trunc_ln75_fu_963_p1 = xln_stream_read_reg_1710_pp0_iter12_reg[7:0];

assign trunc_ln75_s_fu_1053_p4 = {{xln_stream_read_reg_1710_pp0_iter12_reg[67:60]}};

assign x_V_1_fu_723_p2 = ($signed(abs_max_reg_1921) + $signed(20'd1048575));

assign xlnq_stream_TDATA = {{{{{{{{select_ln75_14_fu_1666_p3}, {ap_phi_reg_pp0_iter16_conv_i_685_reg_303}}, {ap_phi_reg_pp0_iter16_conv_i_56773_reg_357}}, {ap_phi_reg_pp0_iter16_conv_i_4515783_reg_312}}, {ap_phi_reg_pp0_iter16_conv_i_337436575_reg_348}}, {ap_phi_reg_pp0_iter16_conv_i_22531495981_reg_321}}, {ap_phi_reg_pp0_iter16_conv_i_1152135456377_reg_339}}, {ap_phi_reg_pp0_iter16_conv_i7132333476179_reg_330}};

assign xlns_stream_TDATA = s_val_V_reg_2014_pp0_iter15_reg;

assign zext_ln1542_fu_924_p1 = s_val_V_fu_910_p3;

assign zext_ln264_fu_577_p1 = select_ln99_reg_1838;

endmodule //RMSNORM_QUANT_do_quant
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RMSNORM_QUANT_do_rmsnorm (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l,
        mha_or_mlp,
        x_stream_TDATA,
        x_stream_TVALID,
        x_stream_TREADY,
        xln_stream1_din,
        xln_stream1_num_data_valid,
        xln_stream1_fifo_cap,
        xln_stream1_full_n,
        xln_stream1_write
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [4:0] l;
input  [1:0] mha_or_mlp;
input  [207:0] x_stream_TDATA;
input   x_stream_TVALID;
output   x_stream_TREADY;
output  [159:0] xln_stream1_din;
input  [1:0] xln_stream1_num_data_valid;
input  [1:0] xln_stream1_fifo_cap;
input   xln_stream1_full_n;
output   xln_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg x_stream_TREADY;
reg xln_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [48:0] rmsnorm_inst_X_POW2SUM_73;
reg    rmsnorm_inst_X_BUF_72_ce0;
wire   [207:0] rmsnorm_inst_X_BUF_72_q0;
reg    rmsnorm_inst_X_BUF_72_ce1;
reg    rmsnorm_inst_X_BUF_72_we1;
wire   [1:0] RSQRT_ALPHAS_address0;
reg    RSQRT_ALPHAS_ce0;
wire   [39:0] RSQRT_ALPHAS_q0;
wire   [1:0] RSQRT_LOG2DENOMS_address0;
reg    RSQRT_LOG2DENOMS_ce0;
wire   [5:0] RSQRT_LOG2DENOMS_q0;
wire   [1:0] RSQRT_OFFSETS_DIFF_address0;
reg    RSQRT_OFFSETS_DIFF_ce0;
wire   [3:0] RSQRT_OFFSETS_DIFF_q0;
wire   [10:0] RSQRT_TABLES_address0;
reg    RSQRT_TABLES_ce0;
wire   [7:0] RSQRT_TABLES_q0;
wire   [5:0] sub_l_fu_248_p2;
reg   [5:0] sub_l_reg_543;
wire   [12:0] sub_ln232_fu_286_p2;
reg   [12:0] sub_ln232_reg_549;
wire    ap_CS_fsm_state2;
reg   [48:0] conv_i129_7_lcssa91_i_load_reg_557;
wire    ap_CS_fsm_state4;
wire   [1:0] LUT_IDX_1_fu_394_p3;
reg   [1:0] LUT_IDX_1_reg_565;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [39:0] ALPHA_reg_586;
wire    ap_CS_fsm_state8;
reg   [5:0] LOG2DENOM_reg_591;
reg   [3:0] OFFSET_DIFF_reg_596;
wire   [49:0] ret_V_fu_419_p2;
reg   [49:0] ret_V_reg_601;
wire    ap_CS_fsm_state9;
wire   [64:0] r_V_fu_431_p2;
reg   [64:0] r_V_reg_606;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_5_reg_611;
reg   [22:0] tmp_6_reg_617;
wire   [0:0] icmp_ln1081_fu_455_p2;
reg   [0:0] icmp_ln1081_reg_622;
wire    ap_CS_fsm_state11;
wire   [10:0] add_ln587_fu_489_p2;
reg   [10:0] add_ln587_reg_627;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [7:0] RSQRT_TABLES_load_reg_637;
wire    ap_CS_fsm_state14;
wire   [16:0] shl_ln260_fu_505_p2;
reg   [16:0] shl_ln260_reg_642;
wire    ap_CS_fsm_state15;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_done;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_idle;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_ready;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_x_stream_TREADY;
wire   [48:0] grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out_ap_vld;
wire   [6:0] grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_address1;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_ce1;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_we1;
wire   [207:0] grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_d1;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_done;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_idle;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_ready;
wire   [159:0] grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_xln_stream1_din;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_xln_stream1_write;
wire   [6:0] grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_rmsnorm_inst_X_BUF_72_address0;
wire    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_rmsnorm_inst_X_BUF_72_ce0;
reg    grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start_reg;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln130_fu_407_p1;
wire   [63:0] zext_ln135_fu_495_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln93_fu_295_p2;
reg   [3:0] tt_fu_134;
wire   [3:0] tt_2_fu_301_p2;
reg    ap_block_state1;
reg   [48:0] conv_i129_7_lcssa91_i_fu_138;
wire   [5:0] mul125_i_fu_240_p3;
wire   [5:0] mha_or_mlp_cast_i_fu_236_p1;
wire   [9:0] tmp_1_fu_275_p3;
wire   [12:0] tmp_fu_268_p3;
wire   [12:0] zext_ln232_fu_282_p1;
wire  signed [48:0] tmp_2_fu_334_p1;
wire   [21:0] tmp_2_fu_334_p4;
wire   [0:0] LUT_IDX_fu_344_p2;
wire  signed [48:0] tmp_3_fu_354_p1;
wire   [15:0] tmp_3_fu_354_p4;
wire  signed [48:0] tmp_4_fu_370_p1;
wire   [9:0] tmp_4_fu_370_p4;
wire   [0:0] icmp_ln1077_1_fu_380_p2;
wire   [0:0] icmp_ln1077_fu_364_p2;
wire   [1:0] select_ln126_fu_386_p3;
wire   [1:0] zext_ln123_fu_350_p1;
wire  signed [48:0] sext_ln1542_fu_413_p0;
wire  signed [49:0] sext_ln1542_fu_413_p1;
wire   [49:0] zext_ln1542_fu_416_p1;
wire  signed [64:0] sext_ln1542_1_fu_425_p1;
wire   [64:0] zext_ln1715_fu_428_p1;
wire   [0:0] or_ln587_fu_477_p2;
wire   [10:0] select_ln587_1_fu_470_p3;
wire   [10:0] trunc_ln587_fu_467_p1;
wire   [10:0] select_ln587_fu_481_p3;
wire   [10:0] i_op_assign_fu_460_p3;
wire   [16:0] RSQRT_TABLES_load_cast_i_fu_502_p1;
wire   [16:0] OFFSET_DIFF_cast_i_fu_499_p1;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 16'd1;
//#0 rmsnorm_inst_X_POW2SUM_73 = 49'd0;
//#0 grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start_reg = 1'b0;
//#0 grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start_reg = 1'b0;
end

RMSNORM_QUANT_do_rmsnorm_rmsnorm_inst_X_BUF_72_RAM_2P_URAM_1R1W #(
    .DataWidth( 208 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
rmsnorm_inst_X_BUF_72_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_rmsnorm_inst_X_BUF_72_address0),
    .ce0(rmsnorm_inst_X_BUF_72_ce0),
    .q0(rmsnorm_inst_X_BUF_72_q0),
    .address1(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_address1),
    .ce1(rmsnorm_inst_X_BUF_72_ce1),
    .we1(rmsnorm_inst_X_BUF_72_we1),
    .d1(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_d1)
);

RMSNORM_QUANT_do_rmsnorm_RSQRT_ALPHAS_ROM_AUTO_1R #(
    .DataWidth( 40 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
RSQRT_ALPHAS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RSQRT_ALPHAS_address0),
    .ce0(RSQRT_ALPHAS_ce0),
    .q0(RSQRT_ALPHAS_q0)
);

RMSNORM_QUANT_do_rmsnorm_RSQRT_LOG2DENOMS_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
RSQRT_LOG2DENOMS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RSQRT_LOG2DENOMS_address0),
    .ce0(RSQRT_LOG2DENOMS_ce0),
    .q0(RSQRT_LOG2DENOMS_q0)
);

RMSNORM_QUANT_do_rmsnorm_RSQRT_OFFSETS_DIFF_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
RSQRT_OFFSETS_DIFF_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RSQRT_OFFSETS_DIFF_address0),
    .ce0(RSQRT_OFFSETS_DIFF_ce0),
    .q0(RSQRT_OFFSETS_DIFF_q0)
);

RMSNORM_QUANT_do_rmsnorm_RSQRT_TABLES_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
RSQRT_TABLES_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RSQRT_TABLES_address0),
    .ce0(RSQRT_TABLES_ce0),
    .q0(RSQRT_TABLES_q0)
);

RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT1 grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start),
    .ap_done(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_done),
    .ap_idle(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_idle),
    .ap_ready(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_ready),
    .x_stream_TVALID(x_stream_TVALID),
    .conv_i129_7_lcssa91_i(conv_i129_7_lcssa91_i_load_reg_557),
    .x_stream_TDATA(x_stream_TDATA),
    .x_stream_TREADY(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_x_stream_TREADY),
    .lhs_out(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out),
    .lhs_out_ap_vld(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out_ap_vld),
    .rmsnorm_inst_X_BUF_72_address1(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_address1),
    .rmsnorm_inst_X_BUF_72_ce1(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_ce1),
    .rmsnorm_inst_X_BUF_72_we1(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_we1),
    .rmsnorm_inst_X_BUF_72_d1(grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_d1)
);

RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT2 grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start),
    .ap_done(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_done),
    .ap_idle(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_idle),
    .ap_ready(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_ready),
    .xln_stream1_din(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_xln_stream1_din),
    .xln_stream1_num_data_valid(2'd0),
    .xln_stream1_fifo_cap(2'd0),
    .xln_stream1_full_n(xln_stream1_full_n),
    .xln_stream1_write(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_xln_stream1_write),
    .sub_ln232(sub_ln232_reg_549),
    .zext_ln140(shl_ln260_reg_642),
    .rmsnorm_inst_X_BUF_72_address0(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_rmsnorm_inst_X_BUF_72_address0),
    .rmsnorm_inst_X_BUF_72_ce0(grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_rmsnorm_inst_X_BUF_72_ce0),
    .rmsnorm_inst_X_BUF_72_q0(rmsnorm_inst_X_BUF_72_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln93_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start_reg <= 1'b1;
        end else if ((grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_ready == 1'b1)) begin
            grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start_reg <= 1'b1;
        end else if ((grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_ready == 1'b1)) begin
            grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_i129_7_lcssa91_i_fu_138 <= rmsnorm_inst_X_POW2SUM_73;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_i129_7_lcssa91_i_fu_138 <= grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_fu_134 <= 4'd0;
    end else if (((icmp_ln93_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tt_fu_134 <= tt_2_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ALPHA_reg_586 <= RSQRT_ALPHAS_q0;
        LOG2DENOM_reg_591 <= RSQRT_LOG2DENOMS_q0;
        OFFSET_DIFF_reg_596 <= RSQRT_OFFSETS_DIFF_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        LUT_IDX_1_reg_565 <= LUT_IDX_1_fu_394_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        RSQRT_TABLES_load_reg_637 <= RSQRT_TABLES_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln587_reg_627 <= add_ln587_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_i129_7_lcssa91_i_load_reg_557 <= conv_i129_7_lcssa91_i_fu_138;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        icmp_ln1081_reg_622 <= icmp_ln1081_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_reg_606 <= r_V_fu_431_p2;
        tmp_5_reg_611 <= r_V_fu_431_p2[32'd31];
        tmp_6_reg_617 <= {{r_V_fu_431_p2[31:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_V_reg_601 <= ret_V_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        rmsnorm_inst_X_POW2SUM_73 <= conv_i129_7_lcssa91_i_fu_138;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        shl_ln260_reg_642 <= shl_ln260_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_l_reg_543 <= sub_l_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln232_reg_549[12 : 4] <= sub_ln232_fu_286_p2[12 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RSQRT_ALPHAS_ce0 = 1'b1;
    end else begin
        RSQRT_ALPHAS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RSQRT_LOG2DENOMS_ce0 = 1'b1;
    end else begin
        RSQRT_LOG2DENOMS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RSQRT_OFFSETS_DIFF_ce0 = 1'b1;
    end else begin
        RSQRT_OFFSETS_DIFF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        RSQRT_TABLES_ce0 = 1'b1;
    end else begin
        RSQRT_TABLES_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln93_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        rmsnorm_inst_X_BUF_72_ce0 = grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_rmsnorm_inst_X_BUF_72_ce0;
    end else begin
        rmsnorm_inst_X_BUF_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rmsnorm_inst_X_BUF_72_ce1 = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_ce1;
    end else begin
        rmsnorm_inst_X_BUF_72_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rmsnorm_inst_X_BUF_72_we1 = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_rmsnorm_inst_X_BUF_72_we1;
    end else begin
        rmsnorm_inst_X_BUF_72_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_stream_TREADY = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_x_stream_TREADY;
    end else begin
        x_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xln_stream1_write = grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_xln_stream1_write;
    end else begin
        xln_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln93_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LUT_IDX_1_fu_394_p3 = ((icmp_ln1077_fu_364_p2[0:0] == 1'b1) ? select_ln126_fu_386_p3 : zext_ln123_fu_350_p1);

assign LUT_IDX_fu_344_p2 = (($signed(tmp_2_fu_334_p4) > $signed(22'd0)) ? 1'b1 : 1'b0);

assign OFFSET_DIFF_cast_i_fu_499_p1 = OFFSET_DIFF_reg_596;

assign RSQRT_ALPHAS_address0 = zext_ln130_fu_407_p1;

assign RSQRT_LOG2DENOMS_address0 = zext_ln130_fu_407_p1;

assign RSQRT_OFFSETS_DIFF_address0 = zext_ln130_fu_407_p1;

assign RSQRT_TABLES_address0 = zext_ln135_fu_495_p1;

assign RSQRT_TABLES_load_cast_i_fu_502_p1 = RSQRT_TABLES_load_reg_637;

assign add_ln587_fu_489_p2 = (select_ln587_fu_481_p3 + i_op_assign_fu_460_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_ap_start_reg;

assign grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start = grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_ap_start_reg;

assign i_op_assign_fu_460_p3 = {{LUT_IDX_1_reg_565}, {9'd0}};

assign icmp_ln1077_1_fu_380_p2 = (($signed(tmp_4_fu_370_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1077_fu_364_p2 = (($signed(tmp_3_fu_354_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1081_fu_455_p2 = (($signed(tmp_6_reg_617) > $signed(23'd0)) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_295_p2 = ((tt_fu_134 == 4'd8) ? 1'b1 : 1'b0);

assign mha_or_mlp_cast_i_fu_236_p1 = mha_or_mlp;

assign mul125_i_fu_240_p3 = {{l}, {1'd0}};

assign or_ln587_fu_477_p2 = (tmp_5_reg_611 | icmp_ln1081_reg_622);

assign r_V_fu_431_p2 = $signed(sext_ln1542_1_fu_425_p1) >>> zext_ln1715_fu_428_p1;

assign ret_V_fu_419_p2 = ($signed(sext_ln1542_fu_413_p1) - $signed(zext_ln1542_fu_416_p1));

assign select_ln126_fu_386_p3 = ((icmp_ln1077_1_fu_380_p2[0:0] == 1'b1) ? 2'd3 : 2'd2);

assign select_ln587_1_fu_470_p3 = ((tmp_5_reg_611[0:0] == 1'b1) ? 11'd0 : 11'd511);

assign select_ln587_fu_481_p3 = ((or_ln587_fu_477_p2[0:0] == 1'b1) ? select_ln587_1_fu_470_p3 : trunc_ln587_fu_467_p1);

assign sext_ln1542_1_fu_425_p1 = $signed(ret_V_reg_601);

assign sext_ln1542_fu_413_p0 = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out;

assign sext_ln1542_fu_413_p1 = sext_ln1542_fu_413_p0;

assign shl_ln260_fu_505_p2 = RSQRT_TABLES_load_cast_i_fu_502_p1 << OFFSET_DIFF_cast_i_fu_499_p1;

assign start_out = real_start;

assign sub_l_fu_248_p2 = (mul125_i_fu_240_p3 + mha_or_mlp_cast_i_fu_236_p1);

assign sub_ln232_fu_286_p2 = (tmp_fu_268_p3 - zext_ln232_fu_282_p1);

assign tmp_1_fu_275_p3 = {{sub_l_reg_543}, {4'd0}};

assign tmp_2_fu_334_p1 = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out;

assign tmp_2_fu_334_p4 = {{tmp_2_fu_334_p1[48:27]}};

assign tmp_3_fu_354_p1 = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out;

assign tmp_3_fu_354_p4 = {{tmp_3_fu_354_p1[48:33]}};

assign tmp_4_fu_370_p1 = grp_do_rmsnorm_Pipeline_LOOP_CT1_fu_210_lhs_out;

assign tmp_4_fu_370_p4 = {{tmp_4_fu_370_p1[48:39]}};

assign tmp_fu_268_p3 = {{sub_l_reg_543}, {7'd0}};

assign trunc_ln587_fu_467_p1 = r_V_reg_606[10:0];

assign tt_2_fu_301_p2 = (tt_fu_134 + 4'd1);

assign xln_stream1_din = grp_do_rmsnorm_Pipeline_LOOP_CT2_fu_220_xln_stream1_din;

assign zext_ln123_fu_350_p1 = LUT_IDX_fu_344_p2;

assign zext_ln130_fu_407_p1 = LUT_IDX_1_reg_565;

assign zext_ln135_fu_495_p1 = add_ln587_reg_627;

assign zext_ln1542_fu_416_p1 = ALPHA_reg_586;

assign zext_ln1715_fu_428_p1 = LOG2DENOM_reg_591;

assign zext_ln232_fu_282_p1 = tmp_1_fu_275_p3;

always @ (posedge ap_clk) begin
    sub_ln232_reg_549[3:0] <= 4'b0000;
end

endmodule //RMSNORM_QUANT_do_rmsnorm
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_stream_TVALID,
        conv_i129_7_lcssa91_i,
        x_stream_TDATA,
        x_stream_TREADY,
        lhs_out,
        lhs_out_ap_vld,
        rmsnorm_inst_X_BUF_72_address1,
        rmsnorm_inst_X_BUF_72_ce1,
        rmsnorm_inst_X_BUF_72_we1,
        rmsnorm_inst_X_BUF_72_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_stream_TVALID;
input  [48:0] conv_i129_7_lcssa91_i;
input  [207:0] x_stream_TDATA;
output   x_stream_TREADY;
output  [48:0] lhs_out;
output   lhs_out_ap_vld;
output  [6:0] rmsnorm_inst_X_BUF_72_address1;
output   rmsnorm_inst_X_BUF_72_ce1;
output   rmsnorm_inst_X_BUF_72_we1;
output  [207:0] rmsnorm_inst_X_BUF_72_d1;

reg ap_idle;
reg x_stream_TREADY;
reg lhs_out_ap_vld;
reg rmsnorm_inst_X_BUF_72_ce1;
reg rmsnorm_inst_X_BUF_72_we1;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
wire   [0:0] icmp_ln96_fu_144_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_CS_iter6_fsm_state7;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    x_stream_TDATA_blk_n;
reg   [0:0] icmp_ln96_reg_394;
reg   [0:0] icmp_ln96_reg_394_pp0_iter1_reg;
reg   [0:0] icmp_ln96_reg_394_pp0_iter2_reg;
reg   [0:0] icmp_ln96_reg_394_pp0_iter3_reg;
reg   [0:0] icmp_ln96_reg_394_pp0_iter4_reg;
reg   [0:0] icmp_ln96_reg_394_pp0_iter5_reg;
wire   [25:0] trunc_ln145_fu_161_p1;
reg   [25:0] trunc_ln145_reg_398;
reg   [25:0] trunc_ln145_7_reg_403;
reg   [25:0] trunc_ln145_8_reg_408;
reg   [25:0] trunc_ln145_9_reg_413;
reg   [25:0] trunc_ln145_s_reg_418;
reg   [25:0] trunc_ln145_1_reg_423;
reg   [25:0] trunc_ln145_2_reg_428;
reg   [25:0] trunc_ln145_3_reg_433;
wire   [0:0] icmp_ln101_fu_235_p2;
reg   [0:0] icmp_ln101_reg_438;
reg   [0:0] icmp_ln101_reg_438_pp0_iter1_reg;
reg   [0:0] icmp_ln101_reg_438_pp0_iter2_reg;
reg   [0:0] icmp_ln101_reg_438_pp0_iter3_reg;
reg   [0:0] icmp_ln101_reg_438_pp0_iter4_reg;
reg   [0:0] icmp_ln101_reg_438_pp0_iter5_reg;
wire  signed [48:0] sext_ln1540_fu_246_p1;
wire  signed [48:0] sext_ln1540_1_fu_255_p1;
wire  signed [48:0] sext_ln1540_2_fu_264_p1;
wire  signed [48:0] sext_ln1540_3_fu_273_p1;
wire  signed [48:0] sext_ln1540_4_fu_282_p1;
wire  signed [48:0] sext_ln1540_5_fu_291_p1;
wire  signed [48:0] sext_ln1540_6_fu_300_p1;
wire  signed [48:0] sext_ln1540_7_fu_309_p1;
wire   [48:0] grp_fu_249_p2;
reg   [48:0] mul_ln75_reg_491;
wire   [48:0] grp_fu_258_p2;
reg   [48:0] mul_ln75_1_reg_496;
wire   [48:0] grp_fu_267_p2;
reg   [48:0] mul_ln75_2_reg_501;
wire   [48:0] grp_fu_294_p2;
reg   [48:0] mul_ln75_5_reg_506;
wire   [48:0] grp_fu_303_p2;
reg   [48:0] mul_ln75_6_reg_511;
wire   [48:0] add_ln75_5_fu_324_p2;
reg   [48:0] add_ln75_5_reg_516;
wire   [63:0] zext_ln96_fu_156_p1;
reg   [48:0] lhs_fu_86;
wire   [48:0] add_ln75_7_fu_364_p2;
wire    ap_loop_init;
reg   [6:0] ct_fu_90;
wire   [6:0] add_ln96_fu_150_p2;
reg   [6:0] ap_sig_allocacmp_ct_2;
wire  signed [25:0] grp_fu_249_p0;
wire  signed [25:0] grp_fu_249_p1;
wire  signed [25:0] grp_fu_258_p0;
wire  signed [25:0] grp_fu_258_p1;
wire  signed [25:0] grp_fu_267_p0;
wire  signed [25:0] grp_fu_267_p1;
wire  signed [25:0] grp_fu_276_p0;
wire  signed [25:0] grp_fu_276_p1;
wire  signed [25:0] grp_fu_285_p0;
wire  signed [25:0] grp_fu_285_p1;
wire  signed [25:0] grp_fu_294_p0;
wire  signed [25:0] grp_fu_294_p1;
wire  signed [25:0] grp_fu_303_p0;
wire  signed [25:0] grp_fu_303_p1;
wire  signed [25:0] grp_fu_312_p0;
wire  signed [25:0] grp_fu_312_p1;
wire   [48:0] grp_fu_312_p2;
wire   [48:0] grp_fu_276_p2;
wire   [48:0] add_ln75_3_fu_318_p2;
wire   [48:0] grp_fu_285_p2;
wire   [48:0] select_ln101_fu_333_p3;
wire   [48:0] add_ln75_1_fu_345_p2;
wire   [48:0] add_ln75_fu_340_p2;
wire   [48:0] add_ln75_4_fu_355_p2;
wire   [48:0] add_ln75_6_fu_359_p2;
wire   [48:0] add_ln75_2_fu_349_p2;
reg    grp_fu_249_ce;
reg    grp_fu_258_ce;
reg    grp_fu_267_ce;
reg    grp_fu_276_ce;
reg    grp_fu_285_ce;
reg    grp_fu_294_ce;
reg    grp_fu_303_ce;
reg    grp_fu_312_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_start_int;
reg    ap_condition_525;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
end

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_249_p0),
    .din1(grp_fu_249_p1),
    .ce(grp_fu_249_ce),
    .dout(grp_fu_249_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_258_p0),
    .din1(grp_fu_258_p1),
    .ce(grp_fu_258_ce),
    .dout(grp_fu_258_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(grp_fu_267_ce),
    .dout(grp_fu_267_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_276_p0),
    .din1(grp_fu_276_p1),
    .ce(grp_fu_276_ce),
    .dout(grp_fu_276_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_285_p0),
    .din1(grp_fu_285_p1),
    .ce(grp_fu_285_ce),
    .dout(grp_fu_285_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .din1(grp_fu_294_p1),
    .ce(grp_fu_294_ce),
    .dout(grp_fu_294_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

RMSNORM_QUANT_mul_26s_26s_49_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
mul_26s_26s_49_5_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_312_p0),
    .din1(grp_fu_312_p1),
    .ce(grp_fu_312_ce),
    .dout(grp_fu_312_p2)
);

RMSNORM_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter6_fsm_state7) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter6_fsm_state7) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_iter5_fsm_state6)) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_525)) begin
        if ((icmp_ln96_fu_144_p2 == 1'd0)) begin
            ct_fu_90 <= add_ln96_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ct_fu_90 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        lhs_fu_86 <= conv_i129_7_lcssa91_i;
    end else if (((1'b1 == ap_CS_iter6_fsm_state7) & (icmp_ln96_reg_394_pp0_iter5_reg == 1'd0))) begin
        lhs_fu_86 <= add_ln75_7_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter5_fsm_state6) & (icmp_ln96_reg_394_pp0_iter4_reg == 1'd0))) begin
        add_ln75_5_reg_516 <= add_ln75_5_fu_324_p2;
        mul_ln75_1_reg_496 <= grp_fu_258_p2;
        mul_ln75_2_reg_501 <= grp_fu_267_p2;
        mul_ln75_5_reg_506 <= grp_fu_294_p2;
        mul_ln75_6_reg_511 <= grp_fu_303_p2;
        mul_ln75_reg_491 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln96_reg_394 <= icmp_ln96_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln101_reg_438_pp0_iter1_reg <= icmp_ln101_reg_438;
        icmp_ln96_reg_394_pp0_iter1_reg <= icmp_ln96_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln101_reg_438_pp0_iter2_reg <= icmp_ln101_reg_438_pp0_iter1_reg;
        icmp_ln96_reg_394_pp0_iter2_reg <= icmp_ln96_reg_394_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln101_reg_438_pp0_iter3_reg <= icmp_ln101_reg_438_pp0_iter2_reg;
        icmp_ln96_reg_394_pp0_iter3_reg <= icmp_ln96_reg_394_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln101_reg_438_pp0_iter4_reg <= icmp_ln101_reg_438_pp0_iter3_reg;
        icmp_ln96_reg_394_pp0_iter4_reg <= icmp_ln96_reg_394_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln96_fu_144_p2 == 1'd0))) begin
        icmp_ln101_reg_438 <= icmp_ln101_fu_235_p2;
        trunc_ln145_1_reg_423 <= {{x_stream_TDATA[103:78]}};
        trunc_ln145_2_reg_428 <= {{x_stream_TDATA[129:104]}};
        trunc_ln145_3_reg_433 <= {{x_stream_TDATA[155:130]}};
        trunc_ln145_7_reg_403 <= {{x_stream_TDATA[181:156]}};
        trunc_ln145_8_reg_408 <= {{x_stream_TDATA[207:182]}};
        trunc_ln145_9_reg_413 <= {{x_stream_TDATA[51:26]}};
        trunc_ln145_reg_398 <= trunc_ln145_fu_161_p1;
        trunc_ln145_s_reg_418 <= {{x_stream_TDATA[77:52]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter5_fsm_state6)) begin
        icmp_ln101_reg_438_pp0_iter5_reg <= icmp_ln101_reg_438_pp0_iter4_reg;
        icmp_ln96_reg_394_pp0_iter5_reg <= icmp_ln96_reg_394_pp0_iter4_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln96_fu_144_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter6_fsm_state7) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_ct_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_ct_2 = ct_fu_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_249_ce = 1'b1;
    end else begin
        grp_fu_249_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_258_ce = 1'b1;
    end else begin
        grp_fu_258_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_267_ce = 1'b1;
    end else begin
        grp_fu_267_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_285_ce = 1'b1;
    end else begin
        grp_fu_285_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_294_ce = 1'b1;
    end else begin
        grp_fu_294_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter5_fsm_state6) | (1'b1 == ap_CS_iter4_fsm_state5))) begin
        grp_fu_312_ce = 1'b1;
    end else begin
        grp_fu_312_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter6_fsm_state7) & (icmp_ln96_reg_394_pp0_iter5_reg == 1'd1))) begin
        lhs_out_ap_vld = 1'b1;
    end else begin
        lhs_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        rmsnorm_inst_X_BUF_72_ce1 = 1'b1;
    end else begin
        rmsnorm_inst_X_BUF_72_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln96_fu_144_p2 == 1'd0))) begin
        rmsnorm_inst_X_BUF_72_we1 = 1'b1;
    end else begin
        rmsnorm_inst_X_BUF_72_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln96_fu_144_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
        x_stream_TDATA_blk_n = x_stream_TVALID;
    end else begin
        x_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln96_fu_144_p2 == 1'd0))) begin
        x_stream_TREADY = 1'b1;
    end else begin
        x_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((1'b0 == ap_CS_iter5_fsm_state6)) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else if (((1'b1 == ap_CS_iter5_fsm_state6) | ((1'b1 == ap_CS_iter6_fsm_state7) & (icmp_ln96_reg_394_pp0_iter5_reg == 1'd1)))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter5_fsm_state6)) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

assign add_ln75_1_fu_345_p2 = (mul_ln75_1_reg_496 + mul_ln75_2_reg_501);

assign add_ln75_2_fu_349_p2 = (add_ln75_1_fu_345_p2 + add_ln75_fu_340_p2);

assign add_ln75_3_fu_318_p2 = (grp_fu_312_p2 + grp_fu_276_p2);

assign add_ln75_4_fu_355_p2 = (mul_ln75_5_reg_506 + mul_ln75_6_reg_511);

assign add_ln75_5_fu_324_p2 = (add_ln75_3_fu_318_p2 + grp_fu_285_p2);

assign add_ln75_6_fu_359_p2 = (add_ln75_5_reg_516 + add_ln75_4_fu_355_p2);

assign add_ln75_7_fu_364_p2 = (add_ln75_6_fu_359_p2 + add_ln75_2_fu_349_p2);

assign add_ln75_fu_340_p2 = (mul_ln75_reg_491 + select_ln101_fu_333_p3);

assign add_ln96_fu_150_p2 = (ap_sig_allocacmp_ct_2 + 7'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_525 = (~((ap_start_int == 1'b0) | ((icmp_ln96_fu_144_p2 == 1'd0) & (x_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_249_p0 = sext_ln1540_fu_246_p1;

assign grp_fu_249_p1 = sext_ln1540_fu_246_p1;

assign grp_fu_258_p0 = sext_ln1540_1_fu_255_p1;

assign grp_fu_258_p1 = sext_ln1540_1_fu_255_p1;

assign grp_fu_267_p0 = sext_ln1540_2_fu_264_p1;

assign grp_fu_267_p1 = sext_ln1540_2_fu_264_p1;

assign grp_fu_276_p0 = sext_ln1540_3_fu_273_p1;

assign grp_fu_276_p1 = sext_ln1540_3_fu_273_p1;

assign grp_fu_285_p0 = sext_ln1540_4_fu_282_p1;

assign grp_fu_285_p1 = sext_ln1540_4_fu_282_p1;

assign grp_fu_294_p0 = sext_ln1540_5_fu_291_p1;

assign grp_fu_294_p1 = sext_ln1540_5_fu_291_p1;

assign grp_fu_303_p0 = sext_ln1540_6_fu_300_p1;

assign grp_fu_303_p1 = sext_ln1540_6_fu_300_p1;

assign grp_fu_312_p0 = sext_ln1540_7_fu_309_p1;

assign grp_fu_312_p1 = sext_ln1540_7_fu_309_p1;

assign icmp_ln101_fu_235_p2 = ((ap_sig_allocacmp_ct_2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_144_p2 = ((ap_sig_allocacmp_ct_2 == 7'd112) ? 1'b1 : 1'b0);

assign lhs_out = lhs_fu_86;

assign rmsnorm_inst_X_BUF_72_address1 = zext_ln96_fu_156_p1;

assign rmsnorm_inst_X_BUF_72_d1 = x_stream_TDATA;

assign select_ln101_fu_333_p3 = ((icmp_ln101_reg_438_pp0_iter5_reg[0:0] == 1'b1) ? 49'd0 : lhs_fu_86);

assign sext_ln1540_1_fu_255_p1 = $signed(trunc_ln145_9_reg_413);

assign sext_ln1540_2_fu_264_p1 = $signed(trunc_ln145_s_reg_418);

assign sext_ln1540_3_fu_273_p1 = $signed(trunc_ln145_1_reg_423);

assign sext_ln1540_4_fu_282_p1 = $signed(trunc_ln145_2_reg_428);

assign sext_ln1540_5_fu_291_p1 = $signed(trunc_ln145_3_reg_433);

assign sext_ln1540_6_fu_300_p1 = $signed(trunc_ln145_7_reg_403);

assign sext_ln1540_7_fu_309_p1 = $signed(trunc_ln145_8_reg_408);

assign sext_ln1540_fu_246_p1 = $signed(trunc_ln145_reg_398);

assign trunc_ln145_fu_161_p1 = x_stream_TDATA[25:0];

assign zext_ln96_fu_156_p1 = ap_sig_allocacmp_ct_2;

endmodule //RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xln_stream1_din,
        xln_stream1_num_data_valid,
        xln_stream1_fifo_cap,
        xln_stream1_full_n,
        xln_stream1_write,
        sub_ln232,
        zext_ln140,
        rmsnorm_inst_X_BUF_72_address0,
        rmsnorm_inst_X_BUF_72_ce0,
        rmsnorm_inst_X_BUF_72_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [159:0] xln_stream1_din;
input  [1:0] xln_stream1_num_data_valid;
input  [1:0] xln_stream1_fifo_cap;
input   xln_stream1_full_n;
output   xln_stream1_write;
input  [12:0] sub_ln232;
input  [16:0] zext_ln140;
output  [6:0] rmsnorm_inst_X_BUF_72_address0;
output   rmsnorm_inst_X_BUF_72_ce0;
input  [207:0] rmsnorm_inst_X_BUF_72_q0;

reg ap_idle;
reg xln_stream1_write;
reg rmsnorm_inst_X_BUF_72_ce0;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_CS_iter10_fsm_state11;
reg   [0:0] icmp_ln140_reg_733;
reg   [0:0] icmp_ln140_reg_733_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
wire    ap_CS_iter11_fsm_state12;
wire   [0:0] icmp_ln140_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [12:0] rmsnorm_inst_LNW_71_address0;
reg    rmsnorm_inst_LNW_71_ce0;
wire   [151:0] rmsnorm_inst_LNW_71_q0;
reg    xln_stream1_blk_n;
wire   [42:0] zext_ln140_cast_fu_177_p1;
reg   [42:0] zext_ln140_cast_reg_716;
reg   [6:0] ct_1_reg_728;
reg   [6:0] ct_1_reg_728_pp0_iter1_reg;
reg   [6:0] ct_1_reg_728_pp0_iter2_reg;
wire   [0:0] icmp_ln140_reg_733_pp0_iter0_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter1_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter2_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter3_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter4_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter5_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter6_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter7_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter8_reg;
reg   [0:0] icmp_ln140_reg_733_pp0_iter9_reg;
wire   [25:0] lhs_fu_211_p1;
reg  signed [25:0] lhs_reg_742;
reg  signed [25:0] lhs_2_reg_747;
reg  signed [25:0] lhs_4_reg_752;
reg  signed [25:0] lhs_6_reg_757;
reg  signed [25:0] lhs_8_reg_762;
reg  signed [25:0] lhs_10_reg_767;
reg  signed [25:0] lhs_12_reg_772;
reg  signed [25:0] lhs_14_reg_777;
wire   [12:0] add_ln232_fu_312_p2;
reg   [12:0] add_ln232_reg_822;
reg  signed [30:0] lhs_1_reg_832;
wire   [18:0] rhs_fu_330_p1;
reg  signed [18:0] rhs_reg_837;
reg  signed [30:0] lhs_3_reg_842;
reg  signed [18:0] rhs_1_reg_847;
reg  signed [30:0] lhs_5_reg_852;
reg  signed [18:0] rhs_2_reg_857;
reg  signed [30:0] lhs_7_reg_862;
reg  signed [18:0] rhs_3_reg_867;
reg  signed [30:0] lhs_9_reg_872;
reg  signed [18:0] rhs_4_reg_877;
reg  signed [30:0] lhs_11_reg_882;
reg  signed [18:0] rhs_5_reg_887;
reg  signed [30:0] lhs_13_reg_892;
reg  signed [18:0] rhs_6_reg_897;
reg  signed [30:0] lhs_15_reg_902;
reg  signed [18:0] rhs_7_reg_907;
reg   [19:0] trunc_ln2_reg_992;
reg   [19:0] trunc_ln75_1_reg_997;
reg   [19:0] trunc_ln75_2_reg_1002;
reg   [19:0] trunc_ln75_3_reg_1007;
reg   [19:0] trunc_ln75_4_reg_1012;
reg   [19:0] trunc_ln75_5_reg_1017;
reg   [19:0] trunc_ln75_6_reg_1022;
reg   [19:0] trunc_ln75_7_reg_1027;
wire   [63:0] zext_ln140_1_fu_201_p1;
wire   [63:0] zext_ln232_1_fu_317_p1;
reg   [6:0] ct_fu_128;
wire   [6:0] add_ln140_fu_195_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_ct_1;
wire   [12:0] zext_ln232_fu_309_p1;
wire  signed [42:0] grp_fu_656_p2;
wire  signed [42:0] grp_fu_662_p2;
wire  signed [42:0] grp_fu_668_p2;
wire  signed [42:0] grp_fu_674_p2;
wire  signed [42:0] grp_fu_680_p2;
wire  signed [42:0] grp_fu_686_p2;
wire  signed [42:0] grp_fu_692_p2;
wire  signed [42:0] grp_fu_698_p2;
wire   [32:0] grp_fu_473_p2;
wire   [32:0] grp_fu_485_p2;
wire   [32:0] grp_fu_497_p2;
wire   [32:0] grp_fu_509_p2;
wire   [32:0] grp_fu_521_p2;
wire   [32:0] grp_fu_533_p2;
wire   [32:0] grp_fu_545_p2;
wire   [32:0] grp_fu_557_p2;
wire   [16:0] grp_fu_656_p1;
wire   [16:0] grp_fu_662_p1;
wire   [16:0] grp_fu_668_p1;
wire   [16:0] grp_fu_674_p1;
wire   [16:0] grp_fu_680_p1;
wire   [16:0] grp_fu_686_p1;
wire   [16:0] grp_fu_692_p1;
wire   [16:0] grp_fu_698_p1;
reg    grp_fu_473_ce;
reg    grp_fu_485_ce;
reg    grp_fu_497_ce;
reg    grp_fu_509_ce;
reg    grp_fu_521_ce;
reg    grp_fu_533_ce;
reg    grp_fu_545_ce;
reg    grp_fu_557_ce;
reg    grp_fu_656_ce;
reg    grp_fu_662_ce;
reg    grp_fu_668_ce;
reg    grp_fu_674_ce;
reg    grp_fu_680_ce;
reg    grp_fu_686_ce;
reg    grp_fu_692_ce;
reg    grp_fu_698_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
reg    ap_ST_iter11_fsm_state12_blk;
wire    ap_start_int;
reg    ap_condition_1002;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
end

RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT2_rmsnorm_inst_LNW_71_RAM_2P_URAM_1R1W #(
    .DataWidth( 152 ),
    .AddressRange( 5488 ),
    .AddressWidth( 13 ))
rmsnorm_inst_LNW_71_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rmsnorm_inst_LNW_71_address0),
    .ce0(rmsnorm_inst_LNW_71_ce0),
    .q0(rmsnorm_inst_LNW_71_q0)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_1_reg_832),
    .din1(rhs_reg_837),
    .ce(grp_fu_473_ce),
    .dout(grp_fu_473_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_3_reg_842),
    .din1(rhs_1_reg_847),
    .ce(grp_fu_485_ce),
    .dout(grp_fu_485_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_5_reg_852),
    .din1(rhs_2_reg_857),
    .ce(grp_fu_497_ce),
    .dout(grp_fu_497_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_7_reg_862),
    .din1(rhs_3_reg_867),
    .ce(grp_fu_509_ce),
    .dout(grp_fu_509_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_9_reg_872),
    .din1(rhs_4_reg_877),
    .ce(grp_fu_521_ce),
    .dout(grp_fu_521_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_11_reg_882),
    .din1(rhs_5_reg_887),
    .ce(grp_fu_533_ce),
    .dout(grp_fu_533_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_13_reg_892),
    .din1(rhs_6_reg_897),
    .ce(grp_fu_545_ce),
    .dout(grp_fu_545_p2)
);

RMSNORM_QUANT_mul_31s_19s_33_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mul_31s_19s_33_5_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_15_reg_902),
    .din1(rhs_7_reg_907),
    .ce(grp_fu_557_ce),
    .dout(grp_fu_557_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_reg_742),
    .din1(grp_fu_656_p1),
    .ce(grp_fu_656_ce),
    .dout(grp_fu_656_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_2_reg_747),
    .din1(grp_fu_662_p1),
    .ce(grp_fu_662_ce),
    .dout(grp_fu_662_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_4_reg_752),
    .din1(grp_fu_668_p1),
    .ce(grp_fu_668_ce),
    .dout(grp_fu_668_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_6_reg_757),
    .din1(grp_fu_674_p1),
    .ce(grp_fu_674_ce),
    .dout(grp_fu_674_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_8_reg_762),
    .din1(grp_fu_680_p1),
    .ce(grp_fu_680_ce),
    .dout(grp_fu_680_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_10_reg_767),
    .din1(grp_fu_686_p1),
    .ce(grp_fu_686_ce),
    .dout(grp_fu_686_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_12_reg_772),
    .din1(grp_fu_692_p1),
    .ce(grp_fu_692_ce),
    .dout(grp_fu_692_p2)
);

RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 43 ))
mul_mul_26s_17ns_43_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_14_reg_777),
    .din1(grp_fu_698_p1),
    .ce(grp_fu_698_ce),
    .dout(grp_fu_698_p2)
);

RMSNORM_QUANT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= 1'b0;
    end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1002)) begin
        if ((icmp_ln140_fu_189_p2 == 1'd0)) begin
            ct_fu_128 <= add_ln140_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ct_fu_128 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (icmp_ln140_reg_733_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        add_ln232_reg_822 <= add_ln232_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        icmp_ln140_reg_733_pp0_iter9_reg <= icmp_ln140_reg_733_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ct_1_reg_728 <= ap_sig_allocacmp_ct_1;
        icmp_ln140_reg_733 <= icmp_ln140_fu_189_p2;
        zext_ln140_cast_reg_716[16 : 0] <= zext_ln140_cast_fu_177_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ct_1_reg_728_pp0_iter1_reg <= ct_1_reg_728;
        icmp_ln140_reg_733_pp0_iter1_reg <= icmp_ln140_reg_733;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ct_1_reg_728_pp0_iter2_reg <= ct_1_reg_728_pp0_iter1_reg;
        icmp_ln140_reg_733_pp0_iter2_reg <= icmp_ln140_reg_733_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln140_reg_733_pp0_iter3_reg <= icmp_ln140_reg_733_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln140_reg_733_pp0_iter4_reg <= icmp_ln140_reg_733_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln140_reg_733_pp0_iter5_reg <= icmp_ln140_reg_733_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln140_reg_733_pp0_iter6_reg <= icmp_ln140_reg_733_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln140_reg_733_pp0_iter7_reg <= icmp_ln140_reg_733_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln140_reg_733_pp0_iter8_reg <= icmp_ln140_reg_733_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        icmp_ln140_reg_733_pp0_iter10_reg <= icmp_ln140_reg_733_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (icmp_ln140_reg_733_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        lhs_10_reg_767 <= {{rmsnorm_inst_X_BUF_72_q0[155:130]}};
        lhs_12_reg_772 <= {{rmsnorm_inst_X_BUF_72_q0[181:156]}};
        lhs_14_reg_777 <= {{rmsnorm_inst_X_BUF_72_q0[207:182]}};
        lhs_2_reg_747 <= {{rmsnorm_inst_X_BUF_72_q0[51:26]}};
        lhs_4_reg_752 <= {{rmsnorm_inst_X_BUF_72_q0[77:52]}};
        lhs_6_reg_757 <= {{rmsnorm_inst_X_BUF_72_q0[103:78]}};
        lhs_8_reg_762 <= {{rmsnorm_inst_X_BUF_72_q0[129:104]}};
        lhs_reg_742 <= lhs_fu_211_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (icmp_ln140_reg_733_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        lhs_11_reg_882 <= {{grp_fu_686_p2[42:12]}};
        lhs_13_reg_892 <= {{grp_fu_692_p2[42:12]}};
        lhs_15_reg_902 <= {{grp_fu_698_p2[42:12]}};
        lhs_1_reg_832 <= {{grp_fu_656_p2[42:12]}};
        lhs_3_reg_842 <= {{grp_fu_662_p2[42:12]}};
        lhs_5_reg_852 <= {{grp_fu_668_p2[42:12]}};
        lhs_7_reg_862 <= {{grp_fu_674_p2[42:12]}};
        lhs_9_reg_872 <= {{grp_fu_680_p2[42:12]}};
        rhs_1_reg_847 <= {{rmsnorm_inst_LNW_71_q0[37:19]}};
        rhs_2_reg_857 <= {{rmsnorm_inst_LNW_71_q0[56:38]}};
        rhs_3_reg_867 <= {{rmsnorm_inst_LNW_71_q0[75:57]}};
        rhs_4_reg_877 <= {{rmsnorm_inst_LNW_71_q0[94:76]}};
        rhs_5_reg_887 <= {{rmsnorm_inst_LNW_71_q0[113:95]}};
        rhs_6_reg_897 <= {{rmsnorm_inst_LNW_71_q0[132:114]}};
        rhs_7_reg_907 <= {{rmsnorm_inst_LNW_71_q0[151:133]}};
        rhs_reg_837 <= rhs_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (icmp_ln140_reg_733_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        trunc_ln2_reg_992 <= {{grp_fu_473_p2[32:13]}};
        trunc_ln75_1_reg_997 <= {{grp_fu_485_p2[32:13]}};
        trunc_ln75_2_reg_1002 <= {{grp_fu_497_p2[32:13]}};
        trunc_ln75_3_reg_1007 <= {{grp_fu_509_p2[32:13]}};
        trunc_ln75_4_reg_1012 <= {{grp_fu_521_p2[32:13]}};
        trunc_ln75_5_reg_1017 <= {{grp_fu_533_p2[32:13]}};
        trunc_ln75_6_reg_1022 <= {{grp_fu_545_p2[32:13]}};
        trunc_ln75_7_reg_1027 <= {{grp_fu_557_p2[32:13]}};
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0))) begin
        ap_ST_iter11_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_iter11_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) & (icmp_ln140_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_ct_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_ct_1 = ct_fu_128;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_473_ce = 1'b1;
    end else begin
        grp_fu_473_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_485_ce = 1'b1;
    end else begin
        grp_fu_485_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_497_ce = 1'b1;
    end else begin
        grp_fu_497_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_509_ce = 1'b1;
    end else begin
        grp_fu_509_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_521_ce = 1'b1;
    end else begin
        grp_fu_521_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_533_ce = 1'b1;
    end else begin
        grp_fu_533_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_545_ce = 1'b1;
    end else begin
        grp_fu_545_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
        grp_fu_557_ce = 1'b1;
    end else begin
        grp_fu_557_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_656_ce = 1'b1;
    end else begin
        grp_fu_656_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_662_ce = 1'b1;
    end else begin
        grp_fu_662_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_668_ce = 1'b1;
    end else begin
        grp_fu_668_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_674_ce = 1'b1;
    end else begin
        grp_fu_674_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_680_ce = 1'b1;
    end else begin
        grp_fu_680_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_686_ce = 1'b1;
    end else begin
        grp_fu_686_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_692_ce = 1'b1;
    end else begin
        grp_fu_692_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
        grp_fu_698_ce = 1'b1;
    end else begin
        grp_fu_698_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        rmsnorm_inst_LNW_71_ce0 = 1'b1;
    end else begin
        rmsnorm_inst_LNW_71_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        rmsnorm_inst_X_BUF_72_ce0 = 1'b1;
    end else begin
        rmsnorm_inst_X_BUF_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        xln_stream1_blk_n = xln_stream1_full_n;
    end else begin
        xln_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        xln_stream1_write = 1'b1;
    end else begin
        xln_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else if (((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (icmp_ln140_reg_733_pp0_iter10_reg == 1'd1) & (1'b1 == ap_CS_iter11_fsm_state12)) | (~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0)) & (1'b1 == ap_CS_iter10_fsm_state11)))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12)) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

assign add_ln140_fu_195_p2 = (ap_sig_allocacmp_ct_1 + 7'd1);

assign add_ln232_fu_312_p2 = (sub_ln232 + zext_ln232_fu_309_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1002 = (~((ap_start_int == 1'b0) | ((icmp_ln140_reg_733_pp0_iter10_reg == 1'd0) & (xln_stream1_full_n == 1'b0) & (1'b1 == ap_CS_iter11_fsm_state12))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_656_p1 = zext_ln140_cast_reg_716;

assign grp_fu_662_p1 = zext_ln140_cast_reg_716;

assign grp_fu_668_p1 = zext_ln140_cast_reg_716;

assign grp_fu_674_p1 = zext_ln140_cast_reg_716;

assign grp_fu_680_p1 = zext_ln140_cast_reg_716;

assign grp_fu_686_p1 = zext_ln140_cast_reg_716;

assign grp_fu_692_p1 = zext_ln140_cast_reg_716;

assign grp_fu_698_p1 = zext_ln140_cast_reg_716;

assign icmp_ln140_fu_189_p2 = ((ap_sig_allocacmp_ct_1 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln140_reg_733_pp0_iter0_reg = icmp_ln140_reg_733;

assign lhs_fu_211_p1 = rmsnorm_inst_X_BUF_72_q0[25:0];

assign rhs_fu_330_p1 = rmsnorm_inst_LNW_71_q0[18:0];

assign rmsnorm_inst_LNW_71_address0 = zext_ln232_1_fu_317_p1;

assign rmsnorm_inst_X_BUF_72_address0 = zext_ln140_1_fu_201_p1;

assign xln_stream1_din = {{{{{{{{trunc_ln75_7_reg_1027}, {trunc_ln75_6_reg_1022}}, {trunc_ln75_5_reg_1017}}, {trunc_ln75_4_reg_1012}}, {trunc_ln75_3_reg_1007}}, {trunc_ln75_2_reg_1002}}, {trunc_ln75_1_reg_997}}, {trunc_ln2_reg_992}};

assign zext_ln140_1_fu_201_p1 = ap_sig_allocacmp_ct_1;

assign zext_ln140_cast_fu_177_p1 = zext_ln140;

assign zext_ln232_1_fu_317_p1 = add_ln232_reg_822;

assign zext_ln232_fu_309_p1 = ct_1_reg_728_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    zext_ln140_cast_reg_716[42:17] <= 26'b00000000000000000000000000;
end

endmodule //RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "hls_ultra" *) module RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT2_rmsnorm_inst_LNW_71_RAM_2P_URAM_1R1W (
address0, ce0, q0, reset,clk);

parameter DataWidth = 152;
parameter AddressWidth = 13;
parameter AddressRange = 5488;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

(* ram_style = "hls_ultra" *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/RMSNORM_QUANT/RMSNORM_QUANT_do_rmsnorm_Pipeline_LOOP_CT2_rmsnorm_inst_LNW_71_RAM_2P_URAM_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RMSNORM_QUANT_do_rmsnorm_rmsnorm_inst_X_BUF_72_RAM_2P_URAM_1R1W (address0, ce0, q0, address1, ce1, d1, we1,  reset,clk);

parameter DataWidth = 208;
parameter AddressWidth = 7;
parameter AddressRange = 112;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1;
input reset;
input clk;

(* ram_style = "hls_ultra", cascade_height = 1 *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/RMSNORM_QUANT/RMSNORM_QUANT_do_rmsnorm_rmsnorm_inst_X_BUF_72_RAM_2P_URAM_1R1W.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end


endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RMSNORM_QUANT_do_rmsnorm_RSQRT_ALPHAS_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 40;
parameter AddressWidth = 2;
parameter AddressRange = 4;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/RMSNORM_QUANT/RMSNORM_QUANT_do_rmsnorm_RSQRT_ALPHAS_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RMSNORM_QUANT_do_rmsnorm_RSQRT_LOG2DENOMS_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 6;
parameter AddressWidth = 2;
parameter AddressRange = 4;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/RMSNORM_QUANT/RMSNORM_QUANT_do_rmsnorm_RSQRT_LOG2DENOMS_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RMSNORM_QUANT_do_rmsnorm_RSQRT_OFFSETS_DIFF_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 4;
parameter AddressWidth = 2;
parameter AddressRange = 4;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/RMSNORM_QUANT/RMSNORM_QUANT_do_rmsnorm_RSQRT_OFFSETS_DIFF_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RMSNORM_QUANT_do_rmsnorm_RSQRT_TABLES_ROM_AUTO_1R (
address0, ce0, q0, reset,clk);

parameter DataWidth = 8;
parameter AddressWidth = 11;
parameter AddressRange = 2048;

input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
input reset;
input clk;

reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ17_LLM_QWEN/HLS/../SPINAL/src/main/verilog/RMSNORM_QUANT/RMSNORM_QUANT_do_rmsnorm_RSQRT_TABLES_ROM_AUTO_1R.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[address0];
    end
end



endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module RMSNORM_QUANT_fifo_w160_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd160;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module RMSNORM_QUANT_fifo_w160_d2_S (
    clk,
    reset,
    if_num_data_valid,
    if_fifo_cap,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd160;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output wire [ADDR_WIDTH:0] if_num_data_valid;
output wire [ADDR_WIDTH:0] if_fifo_cap;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;
assign if_num_data_valid = mOutPtr + 1'b1;
assign if_fifo_cap = DEPTH;

RMSNORM_QUANT_fifo_w160_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_RMSNORM_QUANT_fifo_w160_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module RMSNORM_QUANT_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module RMSNORM_QUANT_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not RMSNORM_QUANT module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not RMSNORM_QUANT module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module RMSNORM_QUANT_mul_26s_26s_49_5_1(clk, ce, reset, din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 4;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;
input clk;
input ce;
input reset;
input[din0_WIDTH - 1 : 0] din0; 
input[din1_WIDTH - 1 : 0] din1; 
output[dout_WIDTH - 1 : 0] dout;

reg signed [din0_WIDTH - 1 : 0] a_reg0;
reg signed [din1_WIDTH - 1 : 0] b_reg0;
wire signed [dout_WIDTH - 1 : 0] tmp_product;
reg signed [dout_WIDTH - 1 : 0] buff0;
reg signed [dout_WIDTH - 1 : 0] buff1;
reg signed [dout_WIDTH - 1 : 0] buff2;

assign dout = buff2;
assign tmp_product = a_reg0 * b_reg0;
always @ (posedge clk) begin
    if (ce) begin
        a_reg0 <= din0;
        b_reg0 <= din1;
        buff0 <= tmp_product;
        buff1 <= buff0;
        buff2 <= buff1;
    end
end
endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module RMSNORM_QUANT_mul_31s_19s_33_5_1(clk, ce, reset, din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 4;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;
input clk;
input ce;
input reset;
input[din0_WIDTH - 1 : 0] din0; 
input[din1_WIDTH - 1 : 0] din1; 
output[dout_WIDTH - 1 : 0] dout;

reg signed [din0_WIDTH - 1 : 0] a_reg0;
reg signed [din1_WIDTH - 1 : 0] b_reg0;
wire signed [dout_WIDTH - 1 : 0] tmp_product;
reg signed [dout_WIDTH - 1 : 0] buff0;
reg signed [dout_WIDTH - 1 : 0] buff1;
reg signed [dout_WIDTH - 1 : 0] buff2;

assign dout = buff2;
assign tmp_product = a_reg0 * b_reg0;
always @ (posedge clk) begin
    if (ce) begin
        a_reg0 <= din0;
        b_reg0 <= din1;
        buff0 <= tmp_product;
        buff1 <= buff0;
        buff2 <= buff1;
    end
end
endmodule

`timescale 1 ns / 1 ps

  module RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1_DSP48_0(clk, rst, ce, a, b, p);
input clk;
input rst;
input ce;
input signed [26 - 1 : 0] a;
input [17 - 1 : 0] b;
output signed [43 - 1 : 0] p;

reg signed [43 - 1 : 0] p_reg; 

reg signed [26 - 1 : 0] a_reg; 
reg [17 - 1 : 0] b_reg; 

reg signed [43 - 1 : 0] p_reg_tmp; 

always @ (posedge clk) begin
    if (ce) begin
        a_reg <= a;
        b_reg <= b;
        p_reg_tmp <= a_reg * $signed({1'b0, b_reg});
        p_reg <= p_reg_tmp;
    end
end

assign p = p_reg;

endmodule
`timescale 1 ns / 1 ps
module RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1_DSP48_0 RMSNORM_QUANT_mul_mul_26s_17ns_43_4_1_DSP48_0_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module RMSNORM_QUANT_regslice_both
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input [DataWidth-1:0] data_in , 
    input vld_in , 
    output ack_in ,
    output [DataWidth-1:0] data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 

reg   [1:0] B_V_data_1_state;
wire   [DataWidth-1:0] B_V_data_1_data_in;
reg   [DataWidth-1:0] B_V_data_1_data_out;
wire    B_V_data_1_vld_reg;
wire    B_V_data_1_vld_in;
wire    B_V_data_1_vld_out;
reg   [DataWidth-1:0] B_V_data_1_payload_A;
reg   [DataWidth-1:0] B_V_data_1_payload_B;
reg    B_V_data_1_sel_rd;
reg    B_V_data_1_sel_wr;
wire    B_V_data_1_sel;
wire    B_V_data_1_load_A;
wire    B_V_data_1_load_B;
wire    B_V_data_1_state_cmp_full;
wire    B_V_data_1_ack_in;
wire    B_V_data_1_ack_out;

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_out) & (1'b1 == B_V_data_1_ack_out))) begin
            B_V_data_1_sel_rd <= ~B_V_data_1_sel_rd;
        end else begin
            B_V_data_1_sel_rd <= B_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_in))) begin
            B_V_data_1_sel_wr <= ~B_V_data_1_sel_wr;
        end else begin
            B_V_data_1_sel_wr <= B_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) | ((2'd2 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out)) | ((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd1;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b1 == B_V_data_1_ack_out)) | (~((1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)) & ~((1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) & (2'd3 == B_V_data_1_state)) | ((2'd2 == B_V_data_1_state) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd3;
        end else begin
            B_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_A)) begin
        B_V_data_1_payload_A <= B_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_B)) begin
        B_V_data_1_payload_B <= B_V_data_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == B_V_data_1_sel)) begin
        B_V_data_1_data_out = B_V_data_1_payload_B;
    end else begin
        B_V_data_1_data_out = B_V_data_1_payload_A;
    end
end

assign B_V_data_1_ack_in = B_V_data_1_state[1'd1];
assign B_V_data_1_load_A = (~B_V_data_1_sel_wr & B_V_data_1_state_cmp_full);
assign B_V_data_1_load_B = (B_V_data_1_state_cmp_full & B_V_data_1_sel_wr);
assign B_V_data_1_sel = B_V_data_1_sel_rd;
assign B_V_data_1_state_cmp_full = ((B_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);
assign B_V_data_1_vld_out = B_V_data_1_state[1'd0];

assign ack_in = B_V_data_1_ack_in;
assign B_V_data_1_data_in = data_in;
assign B_V_data_1_vld_in = vld_in;

assign vld_out = B_V_data_1_vld_out;
assign data_out = B_V_data_1_data_out;
assign B_V_data_1_ack_out = ack_out;

assign apdone_blk = ((B_V_data_1_state == 2'd3 && ack_out == 1'b0) | (B_V_data_1_state == 2'd1));

endmodule // both

module RMSNORM_QUANT_regslice_both_w1
#(parameter 
    DataWidth=1
)(
    input ap_clk ,
    input ap_rst,

    input data_in , 
    input vld_in , 
    output ack_in ,
    output data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);

reg     [1:0] B_V_data_1_state;
wire    B_V_data_1_data_in;
reg     B_V_data_1_data_out;
wire    B_V_data_1_vld_reg;
wire    B_V_data_1_vld_in;
wire    B_V_data_1_vld_out;
reg     B_V_data_1_payload_A;
reg     B_V_data_1_payload_B;
reg     B_V_data_1_sel_rd;
reg     B_V_data_1_sel_wr;
wire    B_V_data_1_sel;
wire    B_V_data_1_load_A;
wire    B_V_data_1_load_B;
wire    B_V_data_1_state_cmp_full;
wire    B_V_data_1_ack_in;
wire    B_V_data_1_ack_out;

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_out) & (1'b1 == B_V_data_1_ack_out))) begin
            B_V_data_1_sel_rd <= ~B_V_data_1_sel_rd;
        end else begin
            B_V_data_1_sel_rd <= B_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_in))) begin
            B_V_data_1_sel_wr <= ~B_V_data_1_sel_wr;
        end else begin
            B_V_data_1_sel_wr <= B_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) | ((2'd2 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out)) | ((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd1;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b1 == B_V_data_1_ack_out)) | (~((1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)) & ~((1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) & (2'd3 == B_V_data_1_state)) | ((2'd2 == B_V_data_1_state) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd3;
        end else begin
            B_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_A)) begin
        B_V_data_1_payload_A <= B_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_B)) begin
        B_V_data_1_payload_B <= B_V_data_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == B_V_data_1_sel)) begin
        B_V_data_1_data_out = B_V_data_1_payload_B;
    end else begin
        B_V_data_1_data_out = B_V_data_1_payload_A;
    end
end

assign B_V_data_1_ack_in = B_V_data_1_state[1'd1];
assign B_V_data_1_load_A = (~B_V_data_1_sel_wr & B_V_data_1_state_cmp_full);
assign B_V_data_1_load_B = (B_V_data_1_state_cmp_full & B_V_data_1_sel_wr);
assign B_V_data_1_sel = B_V_data_1_sel_rd;
assign B_V_data_1_state_cmp_full = ((B_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);
assign B_V_data_1_vld_out = B_V_data_1_state[1'd0];

assign ack_in = B_V_data_1_ack_in;
assign B_V_data_1_data_in = data_in;
assign B_V_data_1_vld_in = vld_in;

assign vld_out = B_V_data_1_vld_out;
assign data_out = B_V_data_1_data_out;
assign B_V_data_1_ack_out = ack_out;

assign apdone_blk = ((B_V_data_1_state == 2'd3 && ack_out == 1'b0) | (B_V_data_1_state == 2'd1));

endmodule // both


// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Tool Version Limit: 2022.04
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module RMSNORM_QUANT_start_for_do_quant_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module RMSNORM_QUANT_start_for_do_quant_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

RMSNORM_QUANT_start_for_do_quant_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_RMSNORM_QUANT_start_for_do_quant_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

