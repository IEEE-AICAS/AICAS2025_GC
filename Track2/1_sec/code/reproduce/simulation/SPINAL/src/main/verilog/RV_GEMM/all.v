/* verilator lint_off PINMISSING */
/* verilator lint_off CASEINCOMPLETE */
/* verilator lint_off COMBDLY */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="RV_GEMM_RV_GEMM,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-fbvb900-1L-i,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.214500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=19425,HLS_SYN_LUT=14882,HLS_VERSION=2024_2}" *)

module RV_GEMM (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_begin,
        l_close,
        pos_id,
        rq_stream_TDATA,
        rq_stream_TVALID,
        rq_stream_TREADY,
        rs_stream_TDATA,
        rs_stream_TVALID,
        rs_stream_TREADY,
        v_stream_TDATA,
        v_stream_TVALID,
        v_stream_TREADY,
        vq_cache_i_stream_TDATA,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TDATA,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        vq_cache_o_stream_TDATA,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_o_stream_TDATA,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        aq_stream_TDATA,
        aq_stream_TVALID,
        aq_stream_TREADY,
        as_stream_TDATA,
        as_stream_TVALID,
        as_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_begin;
input  [31:0] l_close;
input  [31:0] pos_id;
input  [63:0] rq_stream_TDATA;
input   rq_stream_TVALID;
output   rq_stream_TREADY;
input  [7:0] rs_stream_TDATA;
input   rs_stream_TVALID;
output   rs_stream_TREADY;
input  [159:0] v_stream_TDATA;
input   v_stream_TVALID;
output   v_stream_TREADY;
input  [63:0] vq_cache_i_stream_TDATA;
input   vq_cache_i_stream_TVALID;
output   vq_cache_i_stream_TREADY;
input  [7:0] vs_cache_i_stream_TDATA;
input   vs_cache_i_stream_TVALID;
output   vs_cache_i_stream_TREADY;
output  [63:0] vq_cache_o_stream_TDATA;
output   vq_cache_o_stream_TVALID;
input   vq_cache_o_stream_TREADY;
output  [7:0] vs_cache_o_stream_TDATA;
output   vs_cache_o_stream_TVALID;
input   vs_cache_o_stream_TREADY;
output  [63:0] aq_stream_TDATA;
output   aq_stream_TVALID;
input   aq_stream_TREADY;
output  [7:0] as_stream_TDATA;
output   as_stream_TVALID;
input   as_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] l_close_read_reg_197;
reg    ap_block_state1;
reg   [31:0] l_begin_read_reg_202;
wire   [31:0] add_ln98_fu_105_p2;
reg   [31:0] add_ln98_reg_208;
wire   [0:0] empty_fu_111_p2;
reg   [0:0] empty_reg_215;
wire   [0:0] empty_38_fu_117_p2;
reg   [0:0] empty_38_reg_220;
wire   [31:0] sub_ln98_fu_136_p2;
reg   [31:0] sub_ln98_reg_225;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln98_1_fu_152_p2;
reg   [31:0] sub_ln98_1_reg_231;
wire   [0:0] empty_39_fu_157_p2;
reg   [0:0] empty_39_reg_237;
wire    ap_CS_fsm_state3;
reg   [31:0] pos_id_read_reg_242;
wire    ap_CS_fsm_state4;
wire   [31:0] sub_ln98_2_fu_166_p2;
reg   [31:0] sub_ln98_2_reg_247;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TDATA;
wire   [7:0] grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TDATA;
wire   [63:0] grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TDATA;
wire   [7:0] grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TDATA;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_rq_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_rs_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_v_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_i_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_i_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TVALID;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TREADY;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready;
wire    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_idle;
reg    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_continue;
reg    grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln98_fu_174_p2;
wire    ap_CS_fsm_state6;
reg    ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready;
reg    ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done;
reg    ap_block_state6_on_subcall_done;
wire    ap_sync_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready;
reg   [63:0] vq_cache_o_stream_TDATA_reg;
reg   [7:0] vs_cache_o_stream_TDATA_reg;
reg   [63:0] aq_stream_TDATA_reg;
reg   [7:0] as_stream_TDATA_reg;
reg   [31:0] l_fu_60;
wire   [31:0] add_ln98_1_fu_179_p2;
wire   [31:0] smax_fu_131_p3;
wire   [30:0] trunc_ln51_fu_128_p1;
wire   [30:0] smax1_fu_141_p3;
wire   [31:0] zext_ln98_fu_148_p1;
wire   [31:0] umax_fu_161_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_vq_cache_o_stream_U_apdone_blk;
wire    regslice_both_vs_cache_o_stream_U_apdone_blk;
wire    regslice_both_aq_stream_U_apdone_blk;
wire    regslice_both_as_stream_U_apdone_blk;
reg    ap_block_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_rq_stream_U_apdone_blk;
wire   [63:0] rq_stream_TDATA_int_regslice;
wire    rq_stream_TVALID_int_regslice;
reg    rq_stream_TREADY_int_regslice;
wire    regslice_both_rq_stream_U_ack_in;
wire    regslice_both_rs_stream_U_apdone_blk;
wire   [7:0] rs_stream_TDATA_int_regslice;
wire    rs_stream_TVALID_int_regslice;
reg    rs_stream_TREADY_int_regslice;
wire    regslice_both_rs_stream_U_ack_in;
wire    regslice_both_v_stream_U_apdone_blk;
wire   [159:0] v_stream_TDATA_int_regslice;
wire    v_stream_TVALID_int_regslice;
reg    v_stream_TREADY_int_regslice;
wire    regslice_both_v_stream_U_ack_in;
wire    regslice_both_vq_cache_i_stream_U_apdone_blk;
wire   [63:0] vq_cache_i_stream_TDATA_int_regslice;
wire    vq_cache_i_stream_TVALID_int_regslice;
reg    vq_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_vq_cache_i_stream_U_ack_in;
wire    regslice_both_vs_cache_i_stream_U_apdone_blk;
wire   [7:0] vs_cache_i_stream_TDATA_int_regslice;
wire    vs_cache_i_stream_TVALID_int_regslice;
reg    vs_cache_i_stream_TREADY_int_regslice;
wire    regslice_both_vs_cache_i_stream_U_ack_in;
reg   [63:0] vq_cache_o_stream_TDATA_int_regslice;
wire    vq_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_vq_cache_o_stream_U_vld_out;
reg   [7:0] vs_cache_o_stream_TDATA_int_regslice;
wire    vs_cache_o_stream_TREADY_int_regslice;
wire    regslice_both_vs_cache_o_stream_U_vld_out;
reg   [63:0] aq_stream_TDATA_int_regslice;
wire    aq_stream_TREADY_int_regslice;
wire    regslice_both_aq_stream_U_vld_out;
reg   [7:0] as_stream_TDATA_int_regslice;
wire    as_stream_TREADY_int_regslice;
wire    regslice_both_as_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 7'd1;
//#0 grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start_reg = 1'b0;
//#0 ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready = 1'b0;
//#0 ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done = 1'b0;
//#0 l_fu_60 = 32'd0;
end

RV_GEMM_dataflow_in_loop_VITIS_LOOP_98_1_1 grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82(
    .pos_id(pos_id_read_reg_242),
    .rq_stream_TDATA(rq_stream_TDATA_int_regslice),
    .rs_stream_TDATA(rs_stream_TDATA_int_regslice),
    .v_stream_TDATA(v_stream_TDATA_int_regslice),
    .vq_cache_i_stream_TDATA(vq_cache_i_stream_TDATA_int_regslice),
    .vs_cache_i_stream_TDATA(vs_cache_i_stream_TDATA_int_regslice),
    .vq_cache_o_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TDATA),
    .vs_cache_o_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TDATA),
    .aq_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TDATA),
    .as_stream_TDATA(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .pos_id_ap_vld(1'b1),
    .rq_stream_TVALID(rq_stream_TVALID_int_regslice),
    .rq_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_rq_stream_TREADY),
    .rs_stream_TVALID(rs_stream_TVALID_int_regslice),
    .rs_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_rs_stream_TREADY),
    .v_stream_TVALID(v_stream_TVALID_int_regslice),
    .v_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_v_stream_TREADY),
    .vq_cache_i_stream_TVALID(vq_cache_i_stream_TVALID_int_regslice),
    .vq_cache_i_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_i_stream_TREADY),
    .vs_cache_i_stream_TVALID(vs_cache_i_stream_TVALID_int_regslice),
    .vs_cache_i_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_i_stream_TREADY),
    .vq_cache_o_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TVALID),
    .vq_cache_o_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TREADY),
    .vs_cache_o_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TVALID),
    .vs_cache_o_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TREADY),
    .ap_start(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start),
    .ap_done(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done),
    .aq_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TVALID),
    .aq_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TREADY),
    .as_stream_TVALID(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TVALID),
    .as_stream_TREADY(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TREADY),
    .ap_ready(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready),
    .ap_idle(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_idle),
    .ap_continue(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_continue)
);

RV_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_rq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rq_stream_TDATA),
    .vld_in(rq_stream_TVALID),
    .ack_in(regslice_both_rq_stream_U_ack_in),
    .data_out(rq_stream_TDATA_int_regslice),
    .vld_out(rq_stream_TVALID_int_regslice),
    .ack_out(rq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_rq_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_rs_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rs_stream_TDATA),
    .vld_in(rs_stream_TVALID),
    .ack_in(regslice_both_rs_stream_U_ack_in),
    .data_out(rs_stream_TDATA_int_regslice),
    .vld_out(rs_stream_TVALID_int_regslice),
    .ack_out(rs_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_rs_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 160 ))
regslice_both_v_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(v_stream_TDATA),
    .vld_in(v_stream_TVALID),
    .ack_in(regslice_both_v_stream_U_ack_in),
    .data_out(v_stream_TDATA_int_regslice),
    .vld_out(v_stream_TVALID_int_regslice),
    .ack_out(v_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_v_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_vq_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(vq_cache_i_stream_TDATA),
    .vld_in(vq_cache_i_stream_TVALID),
    .ack_in(regslice_both_vq_cache_i_stream_U_ack_in),
    .data_out(vq_cache_i_stream_TDATA_int_regslice),
    .vld_out(vq_cache_i_stream_TVALID_int_regslice),
    .ack_out(vq_cache_i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_vq_cache_i_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_vs_cache_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(vs_cache_i_stream_TDATA),
    .vld_in(vs_cache_i_stream_TVALID),
    .ack_in(regslice_both_vs_cache_i_stream_U_ack_in),
    .data_out(vs_cache_i_stream_TDATA_int_regslice),
    .vld_out(vs_cache_i_stream_TVALID_int_regslice),
    .ack_out(vs_cache_i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_vs_cache_i_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_vq_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(vq_cache_o_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TVALID),
    .ack_in(vq_cache_o_stream_TREADY_int_regslice),
    .data_out(vq_cache_o_stream_TDATA),
    .vld_out(regslice_both_vq_cache_o_stream_U_vld_out),
    .ack_out(vq_cache_o_stream_TREADY),
    .apdone_blk(regslice_both_vq_cache_o_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_vs_cache_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(vs_cache_o_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TVALID),
    .ack_in(vs_cache_o_stream_TREADY_int_regslice),
    .data_out(vs_cache_o_stream_TDATA),
    .vld_out(regslice_both_vs_cache_o_stream_U_vld_out),
    .ack_out(vs_cache_o_stream_TREADY),
    .apdone_blk(regslice_both_vs_cache_o_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 64 ))
regslice_both_aq_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aq_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TVALID),
    .ack_in(aq_stream_TREADY_int_regslice),
    .data_out(aq_stream_TDATA),
    .vld_out(regslice_both_aq_stream_U_vld_out),
    .ack_out(aq_stream_TREADY),
    .apdone_blk(regslice_both_aq_stream_U_apdone_blk)
);

RV_GEMM_regslice_both #(
    .DataWidth( 8 ))
regslice_both_as_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(as_stream_TDATA_int_regslice),
    .vld_in(grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TVALID),
    .ack_in(as_stream_TREADY_int_regslice),
    .data_out(as_stream_TDATA),
    .vld_out(regslice_both_as_stream_U_vld_out),
    .ack_out(as_stream_TREADY),
    .apdone_blk(regslice_both_as_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done <= 1'b0;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready <= 1'b0;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (ap_sync_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln98_fu_174_p2 == 1'd0)))) begin
            grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready == 1'b1)) begin
            grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_fu_60 <= l_begin;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln98_fu_174_p2 == 1'd0))) begin
        l_fu_60 <= add_ln98_1_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln98_reg_208 <= add_ln98_fu_105_p2;
        empty_38_reg_220 <= empty_38_fu_117_p2;
        empty_reg_215 <= empty_fu_111_p2;
        l_begin_read_reg_202 <= l_begin;
        l_close_read_reg_197 <= l_close;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TVALID == 1'b1))) begin
        aq_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TVALID == 1'b1))) begin
        as_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_39_reg_237 <= empty_39_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pos_id_read_reg_242 <= pos_id;
        sub_ln98_2_reg_247 <= sub_ln98_2_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln98_1_reg_231 <= sub_ln98_1_fu_152_p2;
        sub_ln98_reg_225 <= sub_ln98_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TVALID == 1'b1))) begin
        vq_cache_o_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TVALID == 1'b1))) begin
        vs_cache_o_stream_TDATA_reg <= grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TVALID == 1'b1))) begin
        aq_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TDATA;
    end else begin
        aq_stream_TDATA_int_regslice = aq_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TVALID == 1'b1))) begin
        as_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TDATA;
    end else begin
        as_stream_TDATA_int_regslice = as_stream_TDATA_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_continue = 1'b1;
    end else begin
        grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rq_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_rq_stream_TREADY;
    end else begin
        rq_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rs_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_rs_stream_TREADY;
    end else begin
        rs_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_v_stream_TREADY;
    end else begin
        v_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vq_cache_i_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_i_stream_TREADY;
    end else begin
        vq_cache_i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TVALID == 1'b1))) begin
        vq_cache_o_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TDATA;
    end else begin
        vq_cache_o_stream_TDATA_int_regslice = vq_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vs_cache_i_stream_TREADY_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_i_stream_TREADY;
    end else begin
        vs_cache_i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TVALID == 1'b1))) begin
        vs_cache_o_stream_TDATA_int_regslice = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TDATA;
    end else begin
        vs_cache_o_stream_TDATA_int_regslice = vs_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln98_fu_174_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln98_1_fu_179_p2 = (l_fu_60 + 32'd1);

assign add_ln98_fu_105_p2 = ($signed(l_begin) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready & ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state7 = ((regslice_both_as_stream_U_apdone_blk == 1'b1) | (regslice_both_aq_stream_U_apdone_blk == 1'b1) | (regslice_both_vs_cache_o_stream_U_apdone_blk == 1'b1) | (regslice_both_vq_cache_o_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready = (grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready | ap_sync_reg_grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_ready);

assign aq_stream_TVALID = regslice_both_aq_stream_U_vld_out;

assign as_stream_TVALID = regslice_both_as_stream_U_vld_out;

assign empty_38_fu_117_p2 = (($signed(l_begin) > $signed(32'd24)) ? 1'b1 : 1'b0);

assign empty_39_fu_157_p2 = ((sub_ln98_reg_225 > sub_ln98_1_reg_231) ? 1'b1 : 1'b0);

assign empty_fu_111_p2 = (($signed(l_close) > $signed(l_begin)) ? 1'b1 : 1'b0);

assign grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start = grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_ap_start_reg;

assign grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_aq_stream_TREADY = (aq_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_as_stream_TREADY = (as_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vq_cache_o_stream_TREADY = (vq_cache_o_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign grp_dataflow_in_loop_VITIS_LOOP_98_1_1_fu_82_vs_cache_o_stream_TREADY = (vs_cache_o_stream_TREADY_int_regslice & ap_CS_fsm_state6);

assign icmp_ln98_fu_174_p2 = ((l_fu_60 == sub_ln98_2_reg_247) ? 1'b1 : 1'b0);

assign rq_stream_TREADY = regslice_both_rq_stream_U_ack_in;

assign rs_stream_TREADY = regslice_both_rs_stream_U_ack_in;

assign smax1_fu_141_p3 = ((empty_38_reg_220[0:0] == 1'b1) ? trunc_ln51_fu_128_p1 : 31'd24);

assign smax_fu_131_p3 = ((empty_reg_215[0:0] == 1'b1) ? l_close_read_reg_197 : l_begin_read_reg_202);

assign sub_ln98_1_fu_152_p2 = (add_ln98_reg_208 - zext_ln98_fu_148_p1);

assign sub_ln98_2_fu_166_p2 = (add_ln98_reg_208 - umax_fu_161_p3);

assign sub_ln98_fu_136_p2 = (add_ln98_reg_208 - smax_fu_131_p3);

assign trunc_ln51_fu_128_p1 = l_begin_read_reg_202[30:0];

assign umax_fu_161_p3 = ((empty_39_reg_237[0:0] == 1'b1) ? sub_ln98_reg_225 : sub_ln98_1_reg_231);

assign v_stream_TREADY = regslice_both_v_stream_U_ack_in;

assign vq_cache_i_stream_TREADY = regslice_both_vq_cache_i_stream_U_ack_in;

assign vq_cache_o_stream_TVALID = regslice_both_vq_cache_o_stream_U_vld_out;

assign vs_cache_i_stream_TREADY = regslice_both_vs_cache_i_stream_U_ack_in;

assign vs_cache_o_stream_TVALID = regslice_both_vs_cache_o_stream_U_vld_out;

assign zext_ln98_fu_148_p1 = smax1_fu_141_p3;

endmodule //RV_GEMM
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_buffer_tokens_ap_int_8_8_1_192_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rq_stream_TVALID,
        rq_stream_TDATA,
        rq_stream_TREADY,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   rq_stream_TVALID;
input  [63:0] rq_stream_TDATA;
output   rq_stream_TREADY;
output  [7:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [63:0] buffer_r_d1;

reg ap_idle;
reg rq_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln104_fu_131_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    rq_stream_TDATA_blk_n;
reg   [0:0] icmp_ln104_reg_255;
reg   [0:0] icmp_ln104_reg_255_pp0_iter1_reg;
wire   [4:0] select_ln104_fu_154_p3;
reg   [4:0] select_ln104_reg_259;
wire   [3:0] tt_fu_162_p3;
reg   [3:0] tt_reg_264;
wire   [2:0] trunc_ln113_fu_170_p1;
reg   [2:0] trunc_ln113_reg_269;
wire   [0:0] icmp_ln105_fu_180_p2;
reg   [0:0] icmp_ln105_reg_274;
reg   [0:0] ap_phi_mux_icmp_ln1056_phi_fu_100_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
wire   [63:0] zext_ln113_8_fu_229_p1;
reg   [7:0] indvar_flatten3_fu_60;
wire   [7:0] add_ln104_4_fu_125_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten3_load;
reg   [3:0] tt4_fu_64;
reg   [4:0] ct5_fu_68;
wire   [4:0] ct_fu_174_p2;
reg    buffer_r_we1_local;
reg    buffer_r_ce1_local;
wire   [3:0] add_ln104_fu_148_p2;
wire   [6:0] tmp_fu_196_p3;
wire   [7:0] tmp_85_fu_203_p3;
wire   [7:0] zext_ln113_fu_210_p1;
wire   [7:0] sub_ln105_fu_214_p2;
wire   [7:0] zext_ln113_7_fu_220_p1;
wire   [7:0] add_ln113_fu_223_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_64;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 indvar_flatten3_fu_60 = 8'd0;
//#0 tt4_fu_64 = 4'd0;
//#0 ct5_fu_68 = 5'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct5_fu_68 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct5_fu_68 <= ct_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_64)) begin
        indvar_flatten3_fu_60 <= add_ln104_4_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt4_fu_64 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    tt4_fu_64 <= tt_fu_162_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln104_reg_255 <= icmp_ln104_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln104_reg_255_pp0_iter1_reg <= icmp_ln104_reg_255;
        icmp_ln105_reg_274 <= icmp_ln105_fu_180_p2;
        select_ln104_reg_259 <= select_ln104_fu_154_p3;
        trunc_ln113_reg_269 <= trunc_ln113_fu_170_p1;
        tt_reg_264 <= tt_fu_162_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln104_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln104_reg_255_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln1056_phi_fu_100_p4 = icmp_ln105_reg_274;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln1056_phi_fu_100_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln1056_phi_fu_100_p4 = icmp_ln105_reg_274;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten3_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten3_load = indvar_flatten3_fu_60;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_we1_local = 1'b1;
    end else begin
        buffer_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        rq_stream_TDATA_blk_n = rq_stream_TVALID;
    end else begin
        rq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        rq_stream_TREADY = 1'b1;
    end else begin
        rq_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln104_reg_255_pp0_iter1_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln104_4_fu_125_p2 = (ap_sig_allocacmp_indvar_flatten3_load + 8'd1);

assign add_ln104_fu_148_p2 = (tt4_fu_64 + 4'd1);

assign add_ln113_fu_223_p2 = (sub_ln105_fu_214_p2 + zext_ln113_7_fu_220_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (rq_stream_TVALID == 1'b0);
end

always @ (*) begin
    ap_condition_64 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_r_address1 = zext_ln113_8_fu_229_p1;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign buffer_r_d1 = rq_stream_TDATA;

assign buffer_r_we1 = buffer_r_we1_local;

assign ct_fu_174_p2 = (select_ln104_fu_154_p3 + 5'd1);

assign icmp_ln104_fu_131_p2 = ((ap_sig_allocacmp_indvar_flatten3_load == 8'd191) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_180_p2 = ((ct_fu_174_p2 == 5'd24) ? 1'b1 : 1'b0);

assign select_ln104_fu_154_p3 = ((ap_phi_mux_icmp_ln1056_phi_fu_100_p4[0:0] == 1'b1) ? 5'd0 : ct5_fu_68);

assign sub_ln105_fu_214_p2 = (tmp_85_fu_203_p3 - zext_ln113_fu_210_p1);

assign tmp_85_fu_203_p3 = {{trunc_ln113_reg_269}, {5'd0}};

assign tmp_fu_196_p3 = {{tt_reg_264}, {3'd0}};

assign trunc_ln113_fu_170_p1 = tt_fu_162_p3[2:0];

assign tt_fu_162_p3 = ((ap_phi_mux_icmp_ln1056_phi_fu_100_p4[0:0] == 1'b1) ? add_ln104_fu_148_p2 : tt4_fu_64);

assign zext_ln113_7_fu_220_p1 = select_ln104_reg_259;

assign zext_ln113_8_fu_229_p1 = add_ln113_fu_223_p2;

assign zext_ln113_fu_210_p1 = tmp_fu_196_p3;

endmodule //RV_GEMM_buffer_tokens_ap_int_8_8_1_192_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_buffer_tokens_ap_uint_4_8_1_24_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rs_stream_TVALID,
        rs_stream_TDATA,
        rs_stream_TREADY,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   rs_stream_TVALID;
input  [7:0] rs_stream_TDATA;
output   rs_stream_TREADY;
output  [7:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [3:0] buffer_r_d1;

reg ap_idle;
reg rs_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln104_fu_130_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    rs_stream_TDATA_blk_n;
reg   [0:0] icmp_ln104_reg_259;
reg   [0:0] icmp_ln104_reg_259_pp0_iter1_reg;
wire   [4:0] select_ln104_fu_153_p3;
reg   [4:0] select_ln104_reg_263;
wire   [3:0] tt_fu_161_p3;
reg   [3:0] tt_reg_268;
wire   [2:0] trunc_ln113_fu_169_p1;
reg   [2:0] trunc_ln113_reg_273;
wire   [0:0] icmp_ln105_fu_179_p2;
reg   [0:0] icmp_ln105_reg_278;
reg   [0:0] ap_phi_mux_icmp_ln1056_phi_fu_99_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
wire   [63:0] zext_ln113_6_fu_228_p1;
reg   [7:0] indvar_flatten3_fu_60;
wire   [7:0] add_ln104_3_fu_124_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten3_load;
reg   [3:0] tt4_fu_64;
reg   [4:0] ct5_fu_68;
wire   [4:0] ct_fu_173_p2;
reg    buffer_r_we1_local;
wire   [3:0] trunc_ln108_fu_233_p1;
reg    buffer_r_ce1_local;
wire   [3:0] add_ln104_fu_147_p2;
wire   [6:0] tmp_fu_195_p3;
wire   [7:0] tmp_84_fu_202_p3;
wire   [7:0] zext_ln113_fu_209_p1;
wire   [7:0] sub_ln105_fu_213_p2;
wire   [7:0] zext_ln113_5_fu_219_p1;
wire   [7:0] add_ln113_fu_222_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_64;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 indvar_flatten3_fu_60 = 8'd0;
//#0 tt4_fu_64 = 4'd0;
//#0 ct5_fu_68 = 5'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct5_fu_68 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct5_fu_68 <= ct_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_64)) begin
        indvar_flatten3_fu_60 <= add_ln104_3_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt4_fu_64 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    tt4_fu_64 <= tt_fu_161_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln104_reg_259 <= icmp_ln104_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln104_reg_259_pp0_iter1_reg <= icmp_ln104_reg_259;
        icmp_ln105_reg_278 <= icmp_ln105_fu_179_p2;
        select_ln104_reg_263 <= select_ln104_fu_153_p3;
        trunc_ln113_reg_273 <= trunc_ln113_fu_169_p1;
        tt_reg_268 <= tt_fu_161_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln104_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln104_reg_259_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln1056_phi_fu_99_p4 = icmp_ln105_reg_278;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln1056_phi_fu_99_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln1056_phi_fu_99_p4 = icmp_ln105_reg_278;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten3_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten3_load = indvar_flatten3_fu_60;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_we1_local = 1'b1;
    end else begin
        buffer_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        rs_stream_TDATA_blk_n = rs_stream_TVALID;
    end else begin
        rs_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        rs_stream_TREADY = 1'b1;
    end else begin
        rs_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln104_reg_259_pp0_iter1_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln104_3_fu_124_p2 = (ap_sig_allocacmp_indvar_flatten3_load + 8'd1);

assign add_ln104_fu_147_p2 = (tt4_fu_64 + 4'd1);

assign add_ln113_fu_222_p2 = (sub_ln105_fu_213_p2 + zext_ln113_5_fu_219_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (rs_stream_TVALID == 1'b0);
end

always @ (*) begin
    ap_condition_64 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_r_address1 = zext_ln113_6_fu_228_p1;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign buffer_r_d1 = trunc_ln108_fu_233_p1;

assign buffer_r_we1 = buffer_r_we1_local;

assign ct_fu_173_p2 = (select_ln104_fu_153_p3 + 5'd1);

assign icmp_ln104_fu_130_p2 = ((ap_sig_allocacmp_indvar_flatten3_load == 8'd191) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_179_p2 = ((ct_fu_173_p2 == 5'd24) ? 1'b1 : 1'b0);

assign select_ln104_fu_153_p3 = ((ap_phi_mux_icmp_ln1056_phi_fu_99_p4[0:0] == 1'b1) ? 5'd0 : ct5_fu_68);

assign sub_ln105_fu_213_p2 = (tmp_84_fu_202_p3 - zext_ln113_fu_209_p1);

assign tmp_84_fu_202_p3 = {{trunc_ln113_reg_273}, {5'd0}};

assign tmp_fu_195_p3 = {{tt_reg_268}, {3'd0}};

assign trunc_ln108_fu_233_p1 = rs_stream_TDATA[3:0];

assign trunc_ln113_fu_169_p1 = tt_fu_161_p3[2:0];

assign tt_fu_161_p3 = ((ap_phi_mux_icmp_ln1056_phi_fu_99_p4[0:0] == 1'b1) ? add_ln104_fu_147_p2 : tt4_fu_64);

assign zext_ln113_5_fu_219_p1 = select_ln104_reg_263;

assign zext_ln113_6_fu_228_p1 = add_ln113_fu_222_p2;

assign zext_ln113_fu_209_p1 = tmp_fu_195_p3;

endmodule //RV_GEMM_buffer_tokens_ap_uint_4_8_1_24_1_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_dataflow_in_loop_VITIS_LOOP_98_1_1 (
        pos_id,
        rq_stream_TDATA,
        rs_stream_TDATA,
        v_stream_TDATA,
        vq_cache_i_stream_TDATA,
        vs_cache_i_stream_TDATA,
        vq_cache_o_stream_TDATA,
        vs_cache_o_stream_TDATA,
        aq_stream_TDATA,
        as_stream_TDATA,
        ap_clk,
        ap_rst,
        pos_id_ap_vld,
        rq_stream_TVALID,
        rq_stream_TREADY,
        rs_stream_TVALID,
        rs_stream_TREADY,
        v_stream_TVALID,
        v_stream_TREADY,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        ap_start,
        ap_done,
        aq_stream_TVALID,
        aq_stream_TREADY,
        as_stream_TVALID,
        as_stream_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] pos_id;
input  [63:0] rq_stream_TDATA;
input  [7:0] rs_stream_TDATA;
input  [159:0] v_stream_TDATA;
input  [63:0] vq_cache_i_stream_TDATA;
input  [7:0] vs_cache_i_stream_TDATA;
output  [63:0] vq_cache_o_stream_TDATA;
output  [7:0] vs_cache_o_stream_TDATA;
output  [63:0] aq_stream_TDATA;
output  [7:0] as_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   pos_id_ap_vld;
input   rq_stream_TVALID;
output   rq_stream_TREADY;
input   rs_stream_TVALID;
output   rs_stream_TREADY;
input   v_stream_TVALID;
output   v_stream_TREADY;
input   vq_cache_i_stream_TVALID;
output   vq_cache_i_stream_TREADY;
input   vs_cache_i_stream_TVALID;
output   vs_cache_i_stream_TREADY;
output   vq_cache_o_stream_TVALID;
input   vq_cache_o_stream_TREADY;
output   vs_cache_o_stream_TVALID;
input   vs_cache_o_stream_TREADY;
input   ap_start;
output   ap_done;
output   aq_stream_TVALID;
input   aq_stream_TREADY;
output   as_stream_TVALID;
input   as_stream_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_rv_gemm_U0_ap_start;
wire    do_rv_gemm_U0_start_out;
wire    do_rv_gemm_U0_start_write;
wire   [63:0] do_rv_gemm_U0_vq_cache_o_stream_TDATA;
wire   [7:0] do_rv_gemm_U0_vs_cache_o_stream_TDATA;
wire   [159:0] do_rv_gemm_U0_a_stream_din;
wire    do_rv_gemm_U0_a_stream_write;
wire    do_rv_gemm_U0_v_stream_TREADY;
wire    do_rv_gemm_U0_vq_cache_i_stream_TREADY;
wire    do_rv_gemm_U0_vq_cache_o_stream_TVALID;
wire    do_rv_gemm_U0_vs_cache_i_stream_TREADY;
wire    do_rv_gemm_U0_vs_cache_o_stream_TVALID;
wire    do_rv_gemm_U0_ap_done;
wire    do_rv_gemm_U0_rq_stream_TREADY;
wire    do_rv_gemm_U0_rs_stream_TREADY;
wire    do_rv_gemm_U0_ap_ready;
wire    do_rv_gemm_U0_ap_idle;
wire    do_rv_gemm_U0_ap_continue;
wire    ap_sync_continue;
wire    do_adapt_2_U0_ap_start;
wire    do_adapt_2_U0_ap_done;
wire    do_adapt_2_U0_ap_continue;
wire    do_adapt_2_U0_ap_idle;
wire    do_adapt_2_U0_ap_ready;
wire    do_adapt_2_U0_start_out;
wire    do_adapt_2_U0_start_write;
wire    do_adapt_2_U0_a_stream_read;
wire   [159:0] do_adapt_2_U0_a_stream_adpt_din;
wire    do_adapt_2_U0_a_stream_adpt_write;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_start_full_n;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_a_stream_adpt_read;
wire   [63:0] do_quant_U0_aq_stream_adpt_din;
wire    do_quant_U0_aq_stream_adpt_write;
wire   [3:0] do_quant_U0_as_stream_adpt_din;
wire    do_quant_U0_as_stream_adpt_write;
wire    do_quant_U0_start_out;
wire    do_quant_U0_start_write;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_aq_stream_adpt_read;
wire   [63:0] do_adapt_1_U0_aq_stream_TDATA;
wire    do_adapt_1_U0_aq_stream_TVALID;
wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire    do_adapt_U0_as_stream_adpt_read;
wire   [7:0] do_adapt_U0_as_stream_TDATA;
wire    do_adapt_U0_as_stream_TVALID;
wire    a_stream_full_n;
wire   [159:0] a_stream_dout;
wire    a_stream_empty_n;
wire   [2:0] a_stream_num_data_valid;
wire   [2:0] a_stream_fifo_cap;
wire    a_stream_adpt_full_n;
wire   [159:0] a_stream_adpt_dout;
wire    a_stream_adpt_empty_n;
wire   [2:0] a_stream_adpt_num_data_valid;
wire   [2:0] a_stream_adpt_fifo_cap;
wire    aq_stream_adpt_full_n;
wire   [63:0] aq_stream_adpt_dout;
wire    aq_stream_adpt_empty_n;
wire   [2:0] aq_stream_adpt_num_data_valid;
wire   [2:0] aq_stream_adpt_fifo_cap;
wire    as_stream_adpt_full_n;
wire   [3:0] as_stream_adpt_dout;
wire    as_stream_adpt_empty_n;
wire   [2:0] as_stream_adpt_num_data_valid;
wire   [2:0] as_stream_adpt_fifo_cap;
wire    ap_sync_done;
wire   [0:0] start_for_do_adapt_2_U0_din;
wire    start_for_do_adapt_2_U0_full_n;
wire   [0:0] start_for_do_adapt_2_U0_dout;
wire    start_for_do_adapt_2_U0_empty_n;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;
wire   [0:0] start_for_do_adapt_1_U0_din;
wire    start_for_do_adapt_1_U0_full_n;
wire   [0:0] start_for_do_adapt_1_U0_dout;
wire    start_for_do_adapt_1_U0_empty_n;
wire   [0:0] start_for_do_adapt_U0_din;
wire    start_for_do_adapt_U0_full_n;
wire   [0:0] start_for_do_adapt_U0_dout;
wire    start_for_do_adapt_U0_empty_n;

RV_GEMM_do_rv_gemm do_rv_gemm_U0(
    .ap_start(do_rv_gemm_U0_ap_start),
    .start_full_n(start_for_do_adapt_2_U0_full_n),
    .start_out(do_rv_gemm_U0_start_out),
    .start_write(do_rv_gemm_U0_start_write),
    .pos_r(pos_id),
    .rq_stream_TDATA(rq_stream_TDATA),
    .rs_stream_TDATA(rs_stream_TDATA),
    .v_stream_TDATA(v_stream_TDATA),
    .vq_cache_i_stream_TDATA(vq_cache_i_stream_TDATA),
    .vs_cache_i_stream_TDATA(vs_cache_i_stream_TDATA),
    .vq_cache_o_stream_TDATA(do_rv_gemm_U0_vq_cache_o_stream_TDATA),
    .vs_cache_o_stream_TDATA(do_rv_gemm_U0_vs_cache_o_stream_TDATA),
    .a_stream_din(do_rv_gemm_U0_a_stream_din),
    .a_stream_full_n(a_stream_full_n),
    .a_stream_write(do_rv_gemm_U0_a_stream_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .v_stream_TVALID(v_stream_TVALID),
    .v_stream_TREADY(do_rv_gemm_U0_v_stream_TREADY),
    .pos_r_ap_vld(pos_id_ap_vld),
    .vq_cache_i_stream_TVALID(vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(do_rv_gemm_U0_vq_cache_i_stream_TREADY),
    .vq_cache_o_stream_TVALID(do_rv_gemm_U0_vq_cache_o_stream_TVALID),
    .vq_cache_o_stream_TREADY(vq_cache_o_stream_TREADY),
    .vs_cache_i_stream_TVALID(vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(do_rv_gemm_U0_vs_cache_i_stream_TREADY),
    .vs_cache_o_stream_TVALID(do_rv_gemm_U0_vs_cache_o_stream_TVALID),
    .vs_cache_o_stream_TREADY(vs_cache_o_stream_TREADY),
    .ap_done(do_rv_gemm_U0_ap_done),
    .rq_stream_TVALID(rq_stream_TVALID),
    .rq_stream_TREADY(do_rv_gemm_U0_rq_stream_TREADY),
    .rs_stream_TVALID(rs_stream_TVALID),
    .rs_stream_TREADY(do_rv_gemm_U0_rs_stream_TREADY),
    .ap_ready(do_rv_gemm_U0_ap_ready),
    .ap_idle(do_rv_gemm_U0_ap_idle),
    .ap_continue(do_rv_gemm_U0_ap_continue)
);

RV_GEMM_do_adapt_2 do_adapt_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_2_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .ap_done(do_adapt_2_U0_ap_done),
    .ap_continue(do_adapt_2_U0_ap_continue),
    .ap_idle(do_adapt_2_U0_ap_idle),
    .ap_ready(do_adapt_2_U0_ap_ready),
    .start_out(do_adapt_2_U0_start_out),
    .start_write(do_adapt_2_U0_start_write),
    .a_stream_dout(a_stream_dout),
    .a_stream_empty_n(a_stream_empty_n),
    .a_stream_read(do_adapt_2_U0_a_stream_read),
    .a_stream_num_data_valid(a_stream_num_data_valid),
    .a_stream_fifo_cap(a_stream_fifo_cap),
    .a_stream_adpt_din(do_adapt_2_U0_a_stream_adpt_din),
    .a_stream_adpt_full_n(a_stream_adpt_full_n),
    .a_stream_adpt_write(do_adapt_2_U0_a_stream_adpt_write),
    .a_stream_adpt_num_data_valid(a_stream_adpt_num_data_valid),
    .a_stream_adpt_fifo_cap(a_stream_adpt_fifo_cap)
);

RV_GEMM_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .start_full_n(do_quant_U0_start_full_n),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .a_stream_adpt_dout(a_stream_adpt_dout),
    .a_stream_adpt_empty_n(a_stream_adpt_empty_n),
    .a_stream_adpt_read(do_quant_U0_a_stream_adpt_read),
    .a_stream_adpt_num_data_valid(a_stream_adpt_num_data_valid),
    .a_stream_adpt_fifo_cap(a_stream_adpt_fifo_cap),
    .aq_stream_adpt_din(do_quant_U0_aq_stream_adpt_din),
    .aq_stream_adpt_full_n(aq_stream_adpt_full_n),
    .aq_stream_adpt_write(do_quant_U0_aq_stream_adpt_write),
    .aq_stream_adpt_num_data_valid(aq_stream_adpt_num_data_valid),
    .aq_stream_adpt_fifo_cap(aq_stream_adpt_fifo_cap),
    .as_stream_adpt_din(do_quant_U0_as_stream_adpt_din),
    .as_stream_adpt_full_n(as_stream_adpt_full_n),
    .as_stream_adpt_write(do_quant_U0_as_stream_adpt_write),
    .as_stream_adpt_num_data_valid(as_stream_adpt_num_data_valid),
    .as_stream_adpt_fifo_cap(as_stream_adpt_fifo_cap),
    .start_out(do_quant_U0_start_out),
    .start_write(do_quant_U0_start_write)
);

RV_GEMM_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .aq_stream_adpt_dout(aq_stream_adpt_dout),
    .aq_stream_adpt_empty_n(aq_stream_adpt_empty_n),
    .aq_stream_adpt_read(do_adapt_1_U0_aq_stream_adpt_read),
    .aq_stream_adpt_num_data_valid(aq_stream_adpt_num_data_valid),
    .aq_stream_adpt_fifo_cap(aq_stream_adpt_fifo_cap),
    .aq_stream_TDATA(do_adapt_1_U0_aq_stream_TDATA),
    .aq_stream_TVALID(do_adapt_1_U0_aq_stream_TVALID),
    .aq_stream_TREADY(aq_stream_TREADY)
);

RV_GEMM_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .as_stream_adpt_dout(as_stream_adpt_dout),
    .as_stream_adpt_empty_n(as_stream_adpt_empty_n),
    .as_stream_adpt_read(do_adapt_U0_as_stream_adpt_read),
    .as_stream_adpt_num_data_valid(as_stream_adpt_num_data_valid),
    .as_stream_adpt_fifo_cap(as_stream_adpt_fifo_cap),
    .as_stream_TREADY(as_stream_TREADY),
    .as_stream_TDATA(do_adapt_U0_as_stream_TDATA),
    .as_stream_TVALID(do_adapt_U0_as_stream_TVALID)
);

RV_GEMM_fifo_w160_d2_S_x a_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_rv_gemm_U0_a_stream_din),
    .if_full_n(a_stream_full_n),
    .if_write(do_rv_gemm_U0_a_stream_write),
    .if_dout(a_stream_dout),
    .if_empty_n(a_stream_empty_n),
    .if_read(do_adapt_2_U0_a_stream_read),
    .if_num_data_valid(a_stream_num_data_valid),
    .if_fifo_cap(a_stream_fifo_cap)
);

RV_GEMM_fifo_w160_d2_S_x a_stream_adpt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_2_U0_a_stream_adpt_din),
    .if_full_n(a_stream_adpt_full_n),
    .if_write(do_adapt_2_U0_a_stream_adpt_write),
    .if_dout(a_stream_adpt_dout),
    .if_empty_n(a_stream_adpt_empty_n),
    .if_read(do_quant_U0_a_stream_adpt_read),
    .if_num_data_valid(a_stream_adpt_num_data_valid),
    .if_fifo_cap(a_stream_adpt_fifo_cap)
);

RV_GEMM_fifo_w64_d2_S_x0 aq_stream_adpt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_U0_aq_stream_adpt_din),
    .if_full_n(aq_stream_adpt_full_n),
    .if_write(do_quant_U0_aq_stream_adpt_write),
    .if_dout(aq_stream_adpt_dout),
    .if_empty_n(aq_stream_adpt_empty_n),
    .if_read(do_adapt_1_U0_aq_stream_adpt_read),
    .if_num_data_valid(aq_stream_adpt_num_data_valid),
    .if_fifo_cap(aq_stream_adpt_fifo_cap)
);

RV_GEMM_fifo_w4_d2_S_x0 as_stream_adpt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_U0_as_stream_adpt_din),
    .if_full_n(as_stream_adpt_full_n),
    .if_write(do_quant_U0_as_stream_adpt_write),
    .if_dout(as_stream_adpt_dout),
    .if_empty_n(as_stream_adpt_empty_n),
    .if_read(do_adapt_U0_as_stream_adpt_read),
    .if_num_data_valid(as_stream_adpt_num_data_valid),
    .if_fifo_cap(as_stream_adpt_fifo_cap)
);

RV_GEMM_start_for_do_adapt_2_U0 start_for_do_adapt_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_2_U0_din),
    .if_full_n(start_for_do_adapt_2_U0_full_n),
    .if_write(do_rv_gemm_U0_start_write),
    .if_dout(start_for_do_adapt_2_U0_dout),
    .if_empty_n(start_for_do_adapt_2_U0_empty_n),
    .if_read(do_adapt_2_U0_ap_ready)
);

RV_GEMM_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(do_adapt_2_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

RV_GEMM_start_for_do_adapt_1_U0 start_for_do_adapt_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_1_U0_din),
    .if_full_n(start_for_do_adapt_1_U0_full_n),
    .if_write(do_quant_U0_start_write),
    .if_dout(start_for_do_adapt_1_U0_dout),
    .if_empty_n(start_for_do_adapt_1_U0_empty_n),
    .if_read(do_adapt_1_U0_ap_ready)
);

RV_GEMM_start_for_do_adapt_U0 start_for_do_adapt_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_U0_din),
    .if_full_n(start_for_do_adapt_U0_full_n),
    .if_write(do_quant_U0_start_write),
    .if_dout(start_for_do_adapt_U0_dout),
    .if_empty_n(start_for_do_adapt_U0_empty_n),
    .if_read(do_adapt_U0_ap_ready)
);

assign ap_done = ap_sync_done;

assign ap_idle = (do_rv_gemm_U0_ap_idle & do_quant_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_2_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = do_rv_gemm_U0_ap_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (do_rv_gemm_U0_ap_done & do_adapt_U0_ap_done & do_adapt_1_U0_ap_done);

assign aq_stream_TDATA = do_adapt_1_U0_aq_stream_TDATA;

assign aq_stream_TVALID = do_adapt_1_U0_aq_stream_TVALID;

assign as_stream_TDATA = do_adapt_U0_as_stream_TDATA;

assign as_stream_TVALID = do_adapt_U0_as_stream_TVALID;

assign do_adapt_1_U0_ap_continue = ap_sync_continue;

assign do_adapt_1_U0_ap_start = start_for_do_adapt_1_U0_empty_n;

assign do_adapt_2_U0_ap_continue = 1'b1;

assign do_adapt_2_U0_ap_start = start_for_do_adapt_2_U0_empty_n;

assign do_adapt_U0_ap_continue = ap_sync_continue;

assign do_adapt_U0_ap_start = start_for_do_adapt_U0_empty_n;

assign do_quant_U0_ap_continue = 1'b1;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_quant_U0_start_full_n = (start_for_do_adapt_U0_full_n & start_for_do_adapt_1_U0_full_n);

assign do_rv_gemm_U0_ap_continue = ap_sync_continue;

assign do_rv_gemm_U0_ap_start = ap_start;

assign rq_stream_TREADY = do_rv_gemm_U0_rq_stream_TREADY;

assign rs_stream_TREADY = do_rv_gemm_U0_rs_stream_TREADY;

assign start_for_do_adapt_1_U0_din = 1'b1;

assign start_for_do_adapt_2_U0_din = 1'b1;

assign start_for_do_adapt_U0_din = 1'b1;

assign start_for_do_quant_U0_din = 1'b1;

assign v_stream_TREADY = do_rv_gemm_U0_v_stream_TREADY;

assign vq_cache_i_stream_TREADY = do_rv_gemm_U0_vq_cache_i_stream_TREADY;

assign vq_cache_o_stream_TDATA = do_rv_gemm_U0_vq_cache_o_stream_TDATA;

assign vq_cache_o_stream_TVALID = do_rv_gemm_U0_vq_cache_o_stream_TVALID;

assign vs_cache_i_stream_TREADY = do_rv_gemm_U0_vs_cache_i_stream_TREADY;

assign vs_cache_o_stream_TDATA = do_rv_gemm_U0_vs_cache_o_stream_TDATA;

assign vs_cache_o_stream_TVALID = do_rv_gemm_U0_vs_cache_o_stream_TVALID;

endmodule //RV_GEMM_dataflow_in_loop_VITIS_LOOP_98_1_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_dataflow_in_loop_x_1 (
        ap_clk,
        ap_rst,
        rq_stream_TDATA,
        rs_stream_TDATA,
        rq_stream_r_din,
        rq_stream_r_full_n,
        rq_stream_r_write,
        rs_stream_r_din,
        rs_stream_r_full_n,
        rs_stream_r_write,
        rq_stream_TVALID,
        rq_stream_TREADY,
        ap_start,
        rs_stream_TVALID,
        rs_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [63:0] rq_stream_TDATA;
input  [7:0] rs_stream_TDATA;
output  [63:0] rq_stream_r_din;
input   rq_stream_r_full_n;
output   rq_stream_r_write;
output  [3:0] rs_stream_r_din;
input   rs_stream_r_full_n;
output   rs_stream_r_write;
input   rq_stream_TVALID;
output   rq_stream_TREADY;
input   ap_start;
input   rs_stream_TVALID;
output   rs_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [3:0] rs_buffer_i_q0;
wire   [3:0] rs_buffer_t_q0;
wire   [63:0] rq_buffer_i_q0;
wire   [63:0] rq_buffer_t_q0;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_ap_start;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_ap_done;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_ap_continue;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_ap_idle;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_rq_stream_TREADY;
wire   [7:0] buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_address1;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_ce1;
wire    buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_we1;
wire   [63:0] buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_d1;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_start;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_done;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_continue;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_idle;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_rs_stream_TREADY;
wire   [7:0] buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_address1;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_ce1;
wire    buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_we1;
wire   [3:0] buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_d1;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_start;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_done;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_continue;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_idle;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_ready;
wire   [63:0] repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_rq_stream_r_din;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_rq_stream_r_write;
wire   [7:0] repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_src_address0;
wire    repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_src_ce0;
wire    ap_sync_continue;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_start;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_done;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_continue;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_idle;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_ready;
wire   [3:0] repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_rs_stream_r_din;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_rs_stream_r_write;
wire   [7:0] repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_src_address0;
wire    repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_src_ce0;
wire    rq_buffer_i_full_n;
wire    rq_buffer_t_empty_n;
wire    rs_buffer_i_full_n;
wire    rs_buffer_t_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready;
wire    ap_sync_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready;
reg    ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready;
wire    ap_sync_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready = 1'b0;
end

RV_GEMM_dataflow_in_loop_x_1_rs_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
rs_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(8'd0),
    .i_ce0(1'b0),
    .i_q0(rs_buffer_i_q0),
    .i_address1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_address1),
    .i_ce1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_ce1),
    .i_we1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_we1),
    .i_d1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_d1),
    .t_address0(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_src_address0),
    .t_ce0(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_src_ce0),
    .t_q0(rs_buffer_t_q0),
    .t_address1(8'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(rs_buffer_i_full_n),
    .i_write(buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_done),
    .t_empty_n(rs_buffer_t_empty_n),
    .t_read(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_1_rq_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
rq_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(8'd0),
    .i_ce0(1'b0),
    .i_q0(rq_buffer_i_q0),
    .i_address1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_address1),
    .i_ce1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_ce1),
    .i_we1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_we1),
    .i_d1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_d1),
    .t_address0(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_src_address0),
    .t_ce0(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_src_ce0),
    .t_q0(rq_buffer_t_q0),
    .t_address1(8'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(rq_buffer_i_full_n),
    .i_write(buffer_tokens_ap_int_8_8_1_192_8_U0_ap_done),
    .t_empty_n(rq_buffer_t_empty_n),
    .t_read(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_ready)
);

RV_GEMM_buffer_tokens_ap_int_8_8_1_192_8_s buffer_tokens_ap_int_8_8_1_192_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(buffer_tokens_ap_int_8_8_1_192_8_U0_ap_start),
    .ap_done(buffer_tokens_ap_int_8_8_1_192_8_U0_ap_done),
    .ap_continue(buffer_tokens_ap_int_8_8_1_192_8_U0_ap_continue),
    .ap_idle(buffer_tokens_ap_int_8_8_1_192_8_U0_ap_idle),
    .ap_ready(buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready),
    .rq_stream_TVALID(rq_stream_TVALID),
    .rq_stream_TDATA(rq_stream_TDATA),
    .rq_stream_TREADY(buffer_tokens_ap_int_8_8_1_192_8_U0_rq_stream_TREADY),
    .buffer_r_address1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_address1),
    .buffer_r_ce1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_ce1),
    .buffer_r_we1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_we1),
    .buffer_r_d1(buffer_tokens_ap_int_8_8_1_192_8_U0_buffer_r_d1)
);

RV_GEMM_buffer_tokens_ap_uint_4_8_1_24_1_s buffer_tokens_ap_uint_4_8_1_24_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_start),
    .ap_done(buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_done),
    .ap_continue(buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_continue),
    .ap_idle(buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_idle),
    .ap_ready(buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready),
    .rs_stream_TVALID(rs_stream_TVALID),
    .rs_stream_TDATA(rs_stream_TDATA),
    .rs_stream_TREADY(buffer_tokens_ap_uint_4_8_1_24_1_U0_rs_stream_TREADY),
    .buffer_r_address1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_address1),
    .buffer_r_ce1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_ce1),
    .buffer_r_we1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_we1),
    .buffer_r_d1(buffer_tokens_ap_uint_4_8_1_24_1_U0_buffer_r_d1)
);

RV_GEMM_repeat_x_tokens_ap_int_8_8_8_1_192_8_s repeat_x_tokens_ap_int_8_8_8_1_192_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_start),
    .ap_done(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_done),
    .ap_continue(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_continue),
    .ap_idle(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_idle),
    .ap_ready(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_ready),
    .rq_stream_r_din(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_rq_stream_r_din),
    .rq_stream_r_full_n(rq_stream_r_full_n),
    .rq_stream_r_write(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_rq_stream_r_write),
    .rq_stream_r_num_data_valid(3'd0),
    .rq_stream_r_fifo_cap(3'd0),
    .src_address0(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_src_address0),
    .src_ce0(repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_src_ce0),
    .src_q0(rq_buffer_t_q0)
);

RV_GEMM_repeat_x_tokens_ap_uint_4_8_8_1_24_1_s repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_start),
    .ap_done(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_done),
    .ap_continue(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_continue),
    .ap_idle(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_idle),
    .ap_ready(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_ready),
    .rs_stream_r_din(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_rs_stream_r_din),
    .rs_stream_r_full_n(rs_stream_r_full_n),
    .rs_stream_r_write(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_rs_stream_r_write),
    .rs_stream_r_num_data_valid(3'd0),
    .rs_stream_r_fifo_cap(3'd0),
    .src_address0(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_src_address0),
    .src_ce0(repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_src_ce0),
    .src_q0(rs_buffer_t_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready <= ap_sync_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready <= ap_sync_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready;
        end
    end
end

assign ap_done = ap_sync_done;

assign ap_idle = (repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_idle & repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_idle & (rs_buffer_t_empty_n ^ 1'b1) & (rq_buffer_t_empty_n ^ 1'b1) & buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_idle & buffer_tokens_ap_int_8_8_1_192_8_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready = (buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready | ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready);

assign ap_sync_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready = (buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready | ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready);

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_done & repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_done);

assign ap_sync_ready = (ap_sync_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready & ap_sync_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready);

assign buffer_tokens_ap_int_8_8_1_192_8_U0_ap_continue = rq_buffer_i_full_n;

assign buffer_tokens_ap_int_8_8_1_192_8_U0_ap_start = ((ap_sync_reg_buffer_tokens_ap_int_8_8_1_192_8_U0_ap_ready ^ 1'b1) & ap_start);

assign buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_continue = rs_buffer_i_full_n;

assign buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_start = ((ap_sync_reg_buffer_tokens_ap_uint_4_8_1_24_1_U0_ap_ready ^ 1'b1) & ap_start);

assign repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_continue = ap_sync_continue;

assign repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_ap_start = rq_buffer_t_empty_n;

assign repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_continue = ap_sync_continue;

assign repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_ap_start = rs_buffer_t_empty_n;

assign rq_stream_TREADY = buffer_tokens_ap_int_8_8_1_192_8_U0_rq_stream_TREADY;

assign rq_stream_r_din = repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_rq_stream_r_din;

assign rq_stream_r_write = repeat_x_tokens_ap_int_8_8_8_1_192_8_U0_rq_stream_r_write;

assign rs_stream_TREADY = buffer_tokens_ap_uint_4_8_1_24_1_U0_rs_stream_TREADY;

assign rs_stream_r_din = repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_rs_stream_r_din;

assign rs_stream_r_write = repeat_x_tokens_ap_uint_4_8_8_1_24_1_U0_rs_stream_r_write;

endmodule //RV_GEMM_dataflow_in_loop_x_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_dataflow_in_loop_x_165_1 (
        ap_clk,
        ap_rst,
        v_stream_TDATA,
        pos_r,
        vq_cache_i_stream_TDATA,
        vq_cache_o_stream_TDATA,
        vs_cache_i_stream_TDATA,
        vs_cache_o_stream_TDATA,
        vq_stream_r_din,
        vq_stream_r_full_n,
        vq_stream_r_write,
        vs_stream_r_din,
        vs_stream_r_full_n,
        vs_stream_r_write,
        pos_r_ap_vld,
        ap_start,
        v_stream_TVALID,
        v_stream_TREADY,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
input  [159:0] v_stream_TDATA;
input  [31:0] pos_r;
input  [63:0] vq_cache_i_stream_TDATA;
output  [63:0] vq_cache_o_stream_TDATA;
input  [7:0] vs_cache_i_stream_TDATA;
output  [7:0] vs_cache_o_stream_TDATA;
output  [511:0] vq_stream_r_din;
input   vq_stream_r_full_n;
output   vq_stream_r_write;
output  [31:0] vs_stream_r_din;
input   vs_stream_r_full_n;
output   vs_stream_r_write;
input   pos_r_ap_vld;
input   ap_start;
input   v_stream_TVALID;
output   v_stream_TREADY;
input   vq_cache_i_stream_TVALID;
output   vq_cache_i_stream_TREADY;
output   vq_cache_o_stream_TVALID;
input   vq_cache_o_stream_TREADY;
input   vs_cache_i_stream_TVALID;
output   vs_cache_i_stream_TREADY;
output   vs_cache_o_stream_TVALID;
input   vs_cache_o_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [3:0] vs_cache_buffer_i_q0;
wire   [3:0] vs_cache_buffer_i_q1;
wire   [3:0] vs_cache_buffer_t_q0;
wire   [3:0] vs_cache_buffer_t_q1;
wire   [3:0] vs_cache_buffer_1_i_q0;
wire   [3:0] vs_cache_buffer_1_i_q1;
wire   [3:0] vs_cache_buffer_1_t_q0;
wire   [3:0] vs_cache_buffer_1_t_q1;
wire   [3:0] vs_cache_buffer_2_i_q0;
wire   [3:0] vs_cache_buffer_2_i_q1;
wire   [3:0] vs_cache_buffer_2_t_q0;
wire   [3:0] vs_cache_buffer_2_t_q1;
wire   [3:0] vs_cache_buffer_3_i_q0;
wire   [3:0] vs_cache_buffer_3_i_q1;
wire   [3:0] vs_cache_buffer_3_t_q0;
wire   [3:0] vs_cache_buffer_3_t_q1;
wire   [63:0] vq_cache_buffer_i_q0;
wire   [63:0] vq_cache_buffer_i_q1;
wire   [63:0] vq_cache_buffer_t_q0;
wire   [63:0] vq_cache_buffer_t_q1;
wire   [63:0] vq_cache_buffer_1_i_q0;
wire   [63:0] vq_cache_buffer_1_i_q1;
wire   [63:0] vq_cache_buffer_1_t_q0;
wire   [63:0] vq_cache_buffer_1_t_q1;
wire   [63:0] vq_cache_buffer_2_i_q0;
wire   [63:0] vq_cache_buffer_2_i_q1;
wire   [63:0] vq_cache_buffer_2_t_q0;
wire   [63:0] vq_cache_buffer_2_t_q1;
wire   [63:0] vq_cache_buffer_3_i_q0;
wire   [63:0] vq_cache_buffer_3_i_q1;
wire   [63:0] vq_cache_buffer_3_t_q0;
wire   [63:0] vq_cache_buffer_3_t_q1;
wire   [159:0] v_buffer_i_q0;
wire   [159:0] v_buffer_i_q1;
wire   [159:0] v_buffer_t_q0;
wire   [159:0] v_buffer_t_q1;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_start_full_n;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire    entry_proc_U0_start_out;
wire    entry_proc_U0_start_write;
wire   [31:0] entry_proc_U0_pos_c_din;
wire    entry_proc_U0_pos_c_write;
wire   [31:0] entry_proc_U0_pos_c1_din;
wire    entry_proc_U0_pos_c1_write;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_ap_start;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_ap_done;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_ap_continue;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_ap_idle;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_v_stream_TREADY;
wire   [5:0] pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_address1;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_ce1;
wire    pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_we1;
wire   [159:0] pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_d1;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_start;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_done;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_continue;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_idle;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_ready;
wire   [159:0] transpose_tokens_ap_int_20_8_8_64_1_3_U0_vt_stream_din;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_vt_stream_write;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_start_out;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_start_write;
wire   [5:0] transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_address0;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_ce0;
wire   [5:0] transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_address1;
wire    transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_ce1;
wire    do_quant4_U0_ap_start;
wire    do_quant4_U0_ap_done;
wire    do_quant4_U0_ap_continue;
wire    do_quant4_U0_ap_idle;
wire    do_quant4_U0_ap_ready;
wire    do_quant4_U0_vt_stream_read;
wire   [63:0] do_quant4_U0_vq_stream_din;
wire    do_quant4_U0_vq_stream_write;
wire   [3:0] do_quant4_U0_vs_stream_din;
wire    do_quant4_U0_vs_stream_write;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_start;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_done;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_continue;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_idle;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_ready;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_pos_r_read;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_stream_read;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_i_stream_TREADY;
wire   [63:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_o_stream_TDATA;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_o_stream_TVALID;
wire   [8:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_address1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_ce1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_we1;
wire   [63:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_d1;
wire   [8:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_address1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_ce1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_we1;
wire   [63:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_d1;
wire   [8:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_address1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_ce1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_we1;
wire   [63:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_d1;
wire   [8:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_address1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_ce1;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_we1;
wire   [63:0] update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_d1;
wire    ap_channel_done_vq_cache_buffer;
wire    update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_full_n;
reg    ap_sync_reg_channel_write_vq_cache_buffer;
wire    ap_sync_channel_write_vq_cache_buffer;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_start;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_done;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_continue;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_idle;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_ready;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_pos_r_read;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_stream_i_read;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_i_stream_TREADY;
wire   [7:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_o_stream_TDATA;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_o_stream_TVALID;
wire   [8:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_address1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_ce1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_we1;
wire   [3:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_d1;
wire   [8:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_address1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_ce1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_we1;
wire   [3:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_d1;
wire   [8:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_address1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_ce1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_we1;
wire   [3:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_d1;
wire   [8:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_address1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_ce1;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_we1;
wire   [3:0] update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_d1;
wire    ap_channel_done_vs_cache_buffer;
wire    update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_full_n;
reg    ap_sync_reg_channel_write_vs_cache_buffer;
wire    ap_sync_channel_write_vs_cache_buffer;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_start;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_done;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_continue;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_idle;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_ready;
wire   [511:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_vq_stream_r_din;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_vq_stream_r_write;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_address0;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_address1;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_ce1;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_address0;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_address1;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_ce1;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_address0;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_address1;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_ce1;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_address0;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_ce0;
wire   [8:0] repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_address1;
wire    repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_ce1;
wire    ap_sync_continue;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_start;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_done;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_continue;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_idle;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_ready;
wire   [31:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_vs_stream_r_din;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_vs_stream_r_write;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_address0;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_address1;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_ce1;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_address0;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_address1;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_ce1;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_address0;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_address1;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_ce1;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_address0;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_ce0;
wire   [8:0] repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_address1;
wire    repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_ce1;
wire    v_buffer_i_full_n;
wire    v_buffer_t_empty_n;
wire    vq_cache_buffer_3_i_full_n;
wire    vq_cache_buffer_3_t_empty_n;
wire    vq_cache_buffer_2_i_full_n;
wire    vq_cache_buffer_2_t_empty_n;
wire    vq_cache_buffer_1_i_full_n;
wire    vq_cache_buffer_1_t_empty_n;
wire    vq_cache_buffer_i_full_n;
wire    vq_cache_buffer_t_empty_n;
wire    vs_cache_buffer_3_i_full_n;
wire    vs_cache_buffer_3_t_empty_n;
wire    vs_cache_buffer_2_i_full_n;
wire    vs_cache_buffer_2_t_empty_n;
wire    vs_cache_buffer_1_i_full_n;
wire    vs_cache_buffer_1_t_empty_n;
wire    vs_cache_buffer_i_full_n;
wire    vs_cache_buffer_t_empty_n;
wire    pos_c_full_n;
wire   [31:0] pos_c_dout;
wire    pos_c_empty_n;
wire   [3:0] pos_c_num_data_valid;
wire   [3:0] pos_c_fifo_cap;
wire    pos_c1_full_n;
wire   [31:0] pos_c1_dout;
wire    pos_c1_empty_n;
wire   [3:0] pos_c1_num_data_valid;
wire   [3:0] pos_c1_fifo_cap;
wire    vt_stream_i_full_n;
wire   [159:0] vt_stream_i_dout;
wire    vt_stream_i_empty_n;
wire   [2:0] vt_stream_i_num_data_valid;
wire   [2:0] vt_stream_i_fifo_cap;
wire    vq_stream_i_full_n;
wire   [63:0] vq_stream_i_dout;
wire    vq_stream_i_empty_n;
wire   [2:0] vq_stream_i_num_data_valid;
wire   [2:0] vq_stream_i_fifo_cap;
wire    vs_stream_i_full_n;
wire   [3:0] vs_stream_i_dout;
wire    vs_stream_i_empty_n;
wire   [2:0] vs_stream_i_num_data_valid;
wire   [2:0] vs_stream_i_fifo_cap;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready;
wire    ap_sync_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready;
wire   [0:0] start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_din;
wire    start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_full_n;
wire   [0:0] start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_dout;
wire    start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_empty_n;
wire   [0:0] start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_din;
wire    start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_full_n;
wire   [0:0] start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_dout;
wire    start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_empty_n;
wire   [0:0] start_for_do_quant4_U0_din;
wire    start_for_do_quant4_U0_full_n;
wire   [0:0] start_for_do_quant4_U0_dout;
wire    start_for_do_quant4_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_channel_write_vq_cache_buffer = 1'b0;
//#0 ap_sync_reg_channel_write_vs_cache_buffer = 1'b0;
//#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready = 1'b0;
end

RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vs_cache_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vs_cache_buffer_i_q0),
    .i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_address1),
    .i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_ce1),
    .i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_we1),
    .i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_d1),
    .i_q1(vs_cache_buffer_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_ce0),
    .t_q0(vs_cache_buffer_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(vs_cache_buffer_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vs_cache_buffer_i_full_n),
    .i_write(ap_channel_done_vs_cache_buffer),
    .t_empty_n(vs_cache_buffer_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vs_cache_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vs_cache_buffer_1_i_q0),
    .i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_address1),
    .i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_ce1),
    .i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_we1),
    .i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_d1),
    .i_q1(vs_cache_buffer_1_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_ce0),
    .t_q0(vs_cache_buffer_1_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(vs_cache_buffer_1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vs_cache_buffer_1_i_full_n),
    .i_write(ap_channel_done_vs_cache_buffer),
    .t_empty_n(vs_cache_buffer_1_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vs_cache_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vs_cache_buffer_2_i_q0),
    .i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_address1),
    .i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_ce1),
    .i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_we1),
    .i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_d1),
    .i_q1(vs_cache_buffer_2_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_ce0),
    .t_q0(vs_cache_buffer_2_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(vs_cache_buffer_2_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vs_cache_buffer_2_i_full_n),
    .i_write(ap_channel_done_vs_cache_buffer),
    .t_empty_n(vs_cache_buffer_2_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vs_cache_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vs_cache_buffer_3_i_q0),
    .i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_address1),
    .i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_ce1),
    .i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_we1),
    .i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_d1),
    .i_q1(vs_cache_buffer_3_i_q1),
    .t_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_address0),
    .t_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_ce0),
    .t_q0(vs_cache_buffer_3_t_q0),
    .t_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_address1),
    .t_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_ce1),
    .t_we1(1'b0),
    .t_d1(4'd0),
    .t_q1(vs_cache_buffer_3_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vs_cache_buffer_3_i_full_n),
    .i_write(ap_channel_done_vs_cache_buffer),
    .t_empty_n(vs_cache_buffer_3_t_empty_n),
    .t_read(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vq_cache_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vq_cache_buffer_i_q0),
    .i_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_address1),
    .i_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_ce1),
    .i_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_we1),
    .i_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_d1),
    .i_q1(vq_cache_buffer_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_ce0),
    .t_q0(vq_cache_buffer_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(vq_cache_buffer_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vq_cache_buffer_i_full_n),
    .i_write(ap_channel_done_vq_cache_buffer),
    .t_empty_n(vq_cache_buffer_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vq_cache_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vq_cache_buffer_1_i_q0),
    .i_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_address1),
    .i_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_ce1),
    .i_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_we1),
    .i_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_d1),
    .i_q1(vq_cache_buffer_1_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_ce0),
    .t_q0(vq_cache_buffer_1_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(vq_cache_buffer_1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vq_cache_buffer_1_i_full_n),
    .i_write(ap_channel_done_vq_cache_buffer),
    .t_empty_n(vq_cache_buffer_1_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vq_cache_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vq_cache_buffer_2_i_q0),
    .i_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_address1),
    .i_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_ce1),
    .i_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_we1),
    .i_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_d1),
    .i_q1(vq_cache_buffer_2_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_ce0),
    .t_q0(vq_cache_buffer_2_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(vq_cache_buffer_2_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vq_cache_buffer_2_i_full_n),
    .i_write(ap_channel_done_vq_cache_buffer),
    .t_empty_n(vq_cache_buffer_2_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
vq_cache_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(9'd0),
    .i_ce0(1'b0),
    .i_q0(vq_cache_buffer_3_i_q0),
    .i_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_address1),
    .i_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_ce1),
    .i_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_we1),
    .i_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_d1),
    .i_q1(vq_cache_buffer_3_i_q1),
    .t_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_address0),
    .t_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_ce0),
    .t_q0(vq_cache_buffer_3_t_q0),
    .t_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_address1),
    .t_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_ce1),
    .t_we1(1'b0),
    .t_d1(64'd0),
    .t_q1(vq_cache_buffer_3_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(vq_cache_buffer_3_i_full_n),
    .i_write(ap_channel_done_vq_cache_buffer),
    .t_empty_n(vq_cache_buffer_3_t_empty_n),
    .t_read(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_ready)
);

RV_GEMM_dataflow_in_loop_x_165_1_v_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 160 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
v_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(6'd0),
    .i_ce0(1'b0),
    .i_q0(v_buffer_i_q0),
    .i_address1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_address1),
    .i_ce1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_ce1),
    .i_we1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_we1),
    .i_d1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_d1),
    .i_q1(v_buffer_i_q1),
    .t_address0(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_address0),
    .t_ce0(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_ce0),
    .t_q0(v_buffer_t_q0),
    .t_address1(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_address1),
    .t_ce1(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_ce1),
    .t_we1(1'b0),
    .t_d1(160'd0),
    .t_q1(v_buffer_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(v_buffer_i_full_n),
    .i_write(pack_tokens_ap_int_20_8_64_8_2_U0_ap_done),
    .t_empty_n(v_buffer_t_empty_n),
    .t_read(transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_ready)
);

RV_GEMM_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .start_full_n(entry_proc_U0_start_full_n),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .start_out(entry_proc_U0_start_out),
    .start_write(entry_proc_U0_start_write),
    .pos_r(pos_r),
    .pos_c_din(entry_proc_U0_pos_c_din),
    .pos_c_full_n(pos_c_full_n),
    .pos_c_write(entry_proc_U0_pos_c_write),
    .pos_c_num_data_valid(pos_c_num_data_valid),
    .pos_c_fifo_cap(pos_c_fifo_cap),
    .pos_c1_din(entry_proc_U0_pos_c1_din),
    .pos_c1_full_n(pos_c1_full_n),
    .pos_c1_write(entry_proc_U0_pos_c1_write),
    .pos_c1_num_data_valid(pos_c1_num_data_valid),
    .pos_c1_fifo_cap(pos_c1_fifo_cap)
);

RV_GEMM_pack_tokens_ap_int_20_8_64_8_2 pack_tokens_ap_int_20_8_64_8_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(pack_tokens_ap_int_20_8_64_8_2_U0_ap_start),
    .ap_done(pack_tokens_ap_int_20_8_64_8_2_U0_ap_done),
    .ap_continue(pack_tokens_ap_int_20_8_64_8_2_U0_ap_continue),
    .ap_idle(pack_tokens_ap_int_20_8_64_8_2_U0_ap_idle),
    .ap_ready(pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready),
    .v_stream_TVALID(v_stream_TVALID),
    .v_stream_TDATA(v_stream_TDATA),
    .v_stream_TREADY(pack_tokens_ap_int_20_8_64_8_2_U0_v_stream_TREADY),
    .buffer_r_address1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_address1),
    .buffer_r_ce1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_ce1),
    .buffer_r_we1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_we1),
    .buffer_r_d1(pack_tokens_ap_int_20_8_64_8_2_U0_buffer_r_d1)
);

RV_GEMM_transpose_tokens_ap_int_20_8_8_64_1_3 transpose_tokens_ap_int_20_8_8_64_1_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_start),
    .start_full_n(start_for_do_quant4_U0_full_n),
    .ap_done(transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_done),
    .ap_continue(transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_continue),
    .ap_idle(transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_idle),
    .ap_ready(transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_ready),
    .vt_stream_din(transpose_tokens_ap_int_20_8_8_64_1_3_U0_vt_stream_din),
    .vt_stream_full_n(vt_stream_i_full_n),
    .vt_stream_write(transpose_tokens_ap_int_20_8_8_64_1_3_U0_vt_stream_write),
    .vt_stream_num_data_valid(vt_stream_i_num_data_valid),
    .vt_stream_fifo_cap(vt_stream_i_fifo_cap),
    .start_out(transpose_tokens_ap_int_20_8_8_64_1_3_U0_start_out),
    .start_write(transpose_tokens_ap_int_20_8_8_64_1_3_U0_start_write),
    .buffer_r_address0(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_address0),
    .buffer_r_ce0(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_ce0),
    .buffer_r_q0(v_buffer_t_q0),
    .buffer_r_address1(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_address1),
    .buffer_r_ce1(transpose_tokens_ap_int_20_8_8_64_1_3_U0_buffer_r_ce1),
    .buffer_r_q1(v_buffer_t_q1)
);

RV_GEMM_do_quant4 do_quant4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant4_U0_ap_start),
    .ap_done(do_quant4_U0_ap_done),
    .ap_continue(do_quant4_U0_ap_continue),
    .ap_idle(do_quant4_U0_ap_idle),
    .ap_ready(do_quant4_U0_ap_ready),
    .vt_stream_dout(vt_stream_i_dout),
    .vt_stream_empty_n(vt_stream_i_empty_n),
    .vt_stream_read(do_quant4_U0_vt_stream_read),
    .vt_stream_num_data_valid(vt_stream_i_num_data_valid),
    .vt_stream_fifo_cap(vt_stream_i_fifo_cap),
    .vq_stream_din(do_quant4_U0_vq_stream_din),
    .vq_stream_full_n(vq_stream_i_full_n),
    .vq_stream_write(do_quant4_U0_vq_stream_write),
    .vq_stream_num_data_valid(vq_stream_i_num_data_valid),
    .vq_stream_fifo_cap(vq_stream_i_fifo_cap),
    .vs_stream_din(do_quant4_U0_vs_stream_din),
    .vs_stream_full_n(vs_stream_i_full_n),
    .vs_stream_write(do_quant4_U0_vs_stream_write),
    .vs_stream_num_data_valid(vs_stream_i_num_data_valid),
    .vs_stream_fifo_cap(vs_stream_i_fifo_cap)
);

RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5 update_v_cache_ap_int_8_64_8_192_8_5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_start),
    .ap_done(update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_done),
    .ap_continue(update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_continue),
    .ap_idle(update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_idle),
    .ap_ready(update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_ready),
    .pos_r_dout(pos_c1_dout),
    .pos_r_empty_n(pos_c1_empty_n),
    .pos_r_read(update_v_cache_ap_int_8_64_8_192_8_5_U0_pos_r_read),
    .pos_r_num_data_valid(pos_c1_num_data_valid),
    .pos_r_fifo_cap(pos_c1_fifo_cap),
    .vq_stream_dout(vq_stream_i_dout),
    .vq_stream_empty_n(vq_stream_i_empty_n),
    .vq_stream_read(update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_stream_read),
    .vq_stream_num_data_valid(vq_stream_i_num_data_valid),
    .vq_stream_fifo_cap(vq_stream_i_fifo_cap),
    .vq_cache_i_stream_TDATA(vq_cache_i_stream_TDATA),
    .vq_cache_i_stream_TVALID(vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_i_stream_TREADY),
    .vq_cache_o_stream_TDATA(update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_o_stream_TDATA),
    .vq_cache_o_stream_TVALID(update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_o_stream_TVALID),
    .vq_cache_o_stream_TREADY(vq_cache_o_stream_TREADY),
    .cache_0_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_address1),
    .cache_0_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_ce1),
    .cache_0_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_we1),
    .cache_0_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_0_d1),
    .cache_1_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_address1),
    .cache_1_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_ce1),
    .cache_1_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_we1),
    .cache_1_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_1_d1),
    .cache_2_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_address1),
    .cache_2_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_ce1),
    .cache_2_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_we1),
    .cache_2_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_2_d1),
    .cache_3_address1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_address1),
    .cache_3_ce1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_ce1),
    .cache_3_we1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_we1),
    .cache_3_d1(update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_d1)
);

RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6 update_v_cache_ap_uint_4_64_1_24_1_6_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_start),
    .ap_done(update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_done),
    .ap_continue(update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_continue),
    .ap_idle(update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_idle),
    .ap_ready(update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_ready),
    .pos_r_dout(pos_c_dout),
    .pos_r_empty_n(pos_c_empty_n),
    .pos_r_read(update_v_cache_ap_uint_4_64_1_24_1_6_U0_pos_r_read),
    .pos_r_num_data_valid(pos_c_num_data_valid),
    .pos_r_fifo_cap(pos_c_fifo_cap),
    .vs_stream_i_dout(vs_stream_i_dout),
    .vs_stream_i_empty_n(vs_stream_i_empty_n),
    .vs_stream_i_read(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_stream_i_read),
    .vs_stream_i_num_data_valid(vs_stream_i_num_data_valid),
    .vs_stream_i_fifo_cap(vs_stream_i_fifo_cap),
    .vs_cache_i_stream_TDATA(vs_cache_i_stream_TDATA),
    .vs_cache_i_stream_TVALID(vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_i_stream_TREADY),
    .vs_cache_o_stream_TDATA(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_o_stream_TDATA),
    .vs_cache_o_stream_TVALID(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_o_stream_TVALID),
    .vs_cache_o_stream_TREADY(vs_cache_o_stream_TREADY),
    .vs_cache_buffer_2_i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_address1),
    .vs_cache_buffer_2_i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_ce1),
    .vs_cache_buffer_2_i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_we1),
    .vs_cache_buffer_2_i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_2_i_d1),
    .vs_cache_buffer_1_i_11_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_address1),
    .vs_cache_buffer_1_i_11_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_ce1),
    .vs_cache_buffer_1_i_11_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_we1),
    .vs_cache_buffer_1_i_11_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_11_d1),
    .vs_cache_buffer_1_i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_address1),
    .vs_cache_buffer_1_i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_ce1),
    .vs_cache_buffer_1_i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_we1),
    .vs_cache_buffer_1_i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_1_i_d1),
    .vs_cache_buffer_i_address1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_address1),
    .vs_cache_buffer_i_ce1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_ce1),
    .vs_cache_buffer_i_we1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_we1),
    .vs_cache_buffer_i_d1(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_d1)
);

RV_GEMM_repeat_w_tokens_ap_int_8_8_64_8_192_8_7 repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_start),
    .ap_done(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_done),
    .ap_continue(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_continue),
    .ap_idle(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_idle),
    .ap_ready(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_ready),
    .vq_stream_r_din(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_vq_stream_r_din),
    .vq_stream_r_full_n(vq_stream_r_full_n),
    .vq_stream_r_write(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_vq_stream_r_write),
    .vq_stream_r_num_data_valid(3'd0),
    .vq_stream_r_fifo_cap(3'd0),
    .src_0_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_address0),
    .src_0_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_ce0),
    .src_0_q0(vq_cache_buffer_3_t_q0),
    .src_0_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_address1),
    .src_0_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_0_ce1),
    .src_0_q1(vq_cache_buffer_3_t_q1),
    .src_1_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_address0),
    .src_1_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_ce0),
    .src_1_q0(vq_cache_buffer_2_t_q0),
    .src_1_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_address1),
    .src_1_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_1_ce1),
    .src_1_q1(vq_cache_buffer_2_t_q1),
    .src_2_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_address0),
    .src_2_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_ce0),
    .src_2_q0(vq_cache_buffer_1_t_q0),
    .src_2_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_address1),
    .src_2_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_2_ce1),
    .src_2_q1(vq_cache_buffer_1_t_q1),
    .src_3_address0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_address0),
    .src_3_ce0(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_ce0),
    .src_3_q0(vq_cache_buffer_t_q0),
    .src_3_address1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_address1),
    .src_3_ce1(repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_src_3_ce1),
    .src_3_q1(vq_cache_buffer_t_q1)
);

RV_GEMM_repeat_w_tokens_ap_uint_4_8_64_8_24_1_8 repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_start),
    .ap_done(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_done),
    .ap_continue(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_continue),
    .ap_idle(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_idle),
    .ap_ready(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_ready),
    .vs_stream_r_din(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_vs_stream_r_din),
    .vs_stream_r_full_n(vs_stream_r_full_n),
    .vs_stream_r_write(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_vs_stream_r_write),
    .vs_stream_r_num_data_valid(3'd0),
    .vs_stream_r_fifo_cap(3'd0),
    .src_0_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_address0),
    .src_0_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_ce0),
    .src_0_q0(vs_cache_buffer_3_t_q0),
    .src_0_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_address1),
    .src_0_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_0_ce1),
    .src_0_q1(vs_cache_buffer_3_t_q1),
    .src_1_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_address0),
    .src_1_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_ce0),
    .src_1_q0(vs_cache_buffer_2_t_q0),
    .src_1_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_address1),
    .src_1_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_1_ce1),
    .src_1_q1(vs_cache_buffer_2_t_q1),
    .src_2_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_address0),
    .src_2_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_ce0),
    .src_2_q0(vs_cache_buffer_1_t_q0),
    .src_2_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_address1),
    .src_2_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_2_ce1),
    .src_2_q1(vs_cache_buffer_1_t_q1),
    .src_3_address0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_address0),
    .src_3_ce0(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_ce0),
    .src_3_q0(vs_cache_buffer_t_q0),
    .src_3_address1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_address1),
    .src_3_ce1(repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_src_3_ce1),
    .src_3_q1(vs_cache_buffer_t_q1)
);

RV_GEMM_fifo_w32_d5_S pos_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_pos_c_din),
    .if_full_n(pos_c_full_n),
    .if_write(entry_proc_U0_pos_c_write),
    .if_dout(pos_c_dout),
    .if_empty_n(pos_c_empty_n),
    .if_read(update_v_cache_ap_uint_4_64_1_24_1_6_U0_pos_r_read),
    .if_num_data_valid(pos_c_num_data_valid),
    .if_fifo_cap(pos_c_fifo_cap)
);

RV_GEMM_fifo_w32_d5_S pos_c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_pos_c1_din),
    .if_full_n(pos_c1_full_n),
    .if_write(entry_proc_U0_pos_c1_write),
    .if_dout(pos_c1_dout),
    .if_empty_n(pos_c1_empty_n),
    .if_read(update_v_cache_ap_int_8_64_8_192_8_5_U0_pos_r_read),
    .if_num_data_valid(pos_c1_num_data_valid),
    .if_fifo_cap(pos_c1_fifo_cap)
);

RV_GEMM_fifo_w160_d2_S vt_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(transpose_tokens_ap_int_20_8_8_64_1_3_U0_vt_stream_din),
    .if_full_n(vt_stream_i_full_n),
    .if_write(transpose_tokens_ap_int_20_8_8_64_1_3_U0_vt_stream_write),
    .if_dout(vt_stream_i_dout),
    .if_empty_n(vt_stream_i_empty_n),
    .if_read(do_quant4_U0_vt_stream_read),
    .if_num_data_valid(vt_stream_i_num_data_valid),
    .if_fifo_cap(vt_stream_i_fifo_cap)
);

RV_GEMM_fifo_w64_d2_S vq_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant4_U0_vq_stream_din),
    .if_full_n(vq_stream_i_full_n),
    .if_write(do_quant4_U0_vq_stream_write),
    .if_dout(vq_stream_i_dout),
    .if_empty_n(vq_stream_i_empty_n),
    .if_read(update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_stream_read),
    .if_num_data_valid(vq_stream_i_num_data_valid),
    .if_fifo_cap(vq_stream_i_fifo_cap)
);

RV_GEMM_fifo_w4_d2_S vs_stream_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant4_U0_vs_stream_din),
    .if_full_n(vs_stream_i_full_n),
    .if_write(do_quant4_U0_vs_stream_write),
    .if_dout(vs_stream_i_dout),
    .if_empty_n(vs_stream_i_empty_n),
    .if_read(update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_stream_i_read),
    .if_num_data_valid(vs_stream_i_num_data_valid),
    .if_fifo_cap(vs_stream_i_fifo_cap)
);

RV_GEMM_start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0 start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_din),
    .if_full_n(start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_dout),
    .if_empty_n(start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_empty_n),
    .if_read(update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_ready)
);

RV_GEMM_start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0 start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_din),
    .if_full_n(start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_dout),
    .if_empty_n(start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_empty_n),
    .if_read(update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_ready)
);

RV_GEMM_start_for_do_quant4_U0 start_for_do_quant4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant4_U0_din),
    .if_full_n(start_for_do_quant4_U0_full_n),
    .if_write(transpose_tokens_ap_int_20_8_8_64_1_3_U0_start_write),
    .if_dout(start_for_do_quant4_U0_dout),
    .if_empty_n(start_for_do_quant4_U0_empty_n),
    .if_read(do_quant4_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_vq_cache_buffer <= 1'b0;
    end else begin
        if (((update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_done & update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_vq_cache_buffer <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_vq_cache_buffer <= ap_sync_channel_write_vq_cache_buffer;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_vs_cache_buffer <= 1'b0;
    end else begin
        if (((update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_done & update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_vs_cache_buffer <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_vs_cache_buffer <= ap_sync_channel_write_vs_cache_buffer;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready <= ap_sync_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready;
        end
    end
end

assign ap_channel_done_vq_cache_buffer = (update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_done & (ap_sync_reg_channel_write_vq_cache_buffer ^ 1'b1));

assign ap_channel_done_vs_cache_buffer = (update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_done & (ap_sync_reg_channel_write_vs_cache_buffer ^ 1'b1));

assign ap_done = ap_sync_done;

assign ap_idle = (update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_idle & update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_idle & transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_idle & repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_idle & repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_idle & pack_tokens_ap_int_20_8_64_8_2_U0_ap_idle & (vs_cache_buffer_t_empty_n ^ 1'b1) & (vq_cache_buffer_t_empty_n ^ 1'b1) & (v_buffer_t_empty_n ^ 1'b1) & entry_proc_U0_ap_idle & do_quant4_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_vq_cache_buffer = ((update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_full_n & ap_channel_done_vq_cache_buffer) | ap_sync_reg_channel_write_vq_cache_buffer);

assign ap_sync_channel_write_vs_cache_buffer = ((update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_full_n & ap_channel_done_vs_cache_buffer) | ap_sync_reg_channel_write_vs_cache_buffer);

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_done & repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_done);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready = (pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready | ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready);

assign ap_sync_ready = (ap_sync_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready);

assign do_quant4_U0_ap_continue = 1'b1;

assign do_quant4_U0_ap_start = start_for_do_quant4_U0_empty_n;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign entry_proc_U0_start_full_n = (start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_full_n & start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_full_n);

assign pack_tokens_ap_int_20_8_64_8_2_U0_ap_continue = v_buffer_i_full_n;

assign pack_tokens_ap_int_20_8_64_8_2_U0_ap_start = ((ap_sync_reg_pack_tokens_ap_int_20_8_64_8_2_U0_ap_ready ^ 1'b1) & ap_start);

assign repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_continue = ap_sync_continue;

assign repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_ap_start = vq_cache_buffer_t_empty_n;

assign repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_continue = ap_sync_continue;

assign repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_ap_start = vs_cache_buffer_t_empty_n;

assign start_for_do_quant4_U0_din = 1'b1;

assign start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_din = 1'b1;

assign start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_din = 1'b1;

assign transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_continue = 1'b1;

assign transpose_tokens_ap_int_20_8_8_64_1_3_U0_ap_start = v_buffer_t_empty_n;

assign update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_continue = ap_sync_channel_write_vq_cache_buffer;

assign update_v_cache_ap_int_8_64_8_192_8_5_U0_ap_start = start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_empty_n;

assign update_v_cache_ap_int_8_64_8_192_8_5_U0_cache_3_full_n = vq_cache_buffer_i_full_n;

assign update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_continue = ap_sync_channel_write_vs_cache_buffer;

assign update_v_cache_ap_uint_4_64_1_24_1_6_U0_ap_start = start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_empty_n;

assign update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_buffer_i_full_n = vs_cache_buffer_i_full_n;

assign v_stream_TREADY = pack_tokens_ap_int_20_8_64_8_2_U0_v_stream_TREADY;

assign vq_cache_i_stream_TREADY = update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_i_stream_TREADY;

assign vq_cache_o_stream_TDATA = update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_o_stream_TDATA;

assign vq_cache_o_stream_TVALID = update_v_cache_ap_int_8_64_8_192_8_5_U0_vq_cache_o_stream_TVALID;

assign vq_stream_r_din = repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_vq_stream_r_din;

assign vq_stream_r_write = repeat_w_tokens_ap_int_8_8_64_8_192_8_7_U0_vq_stream_r_write;

assign vs_cache_i_stream_TREADY = update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_i_stream_TREADY;

assign vs_cache_o_stream_TDATA = update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_o_stream_TDATA;

assign vs_cache_o_stream_TVALID = update_v_cache_ap_uint_4_64_1_24_1_6_U0_vs_cache_o_stream_TVALID;

assign vs_stream_r_din = repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_vs_stream_r_din;

assign vs_stream_r_write = repeat_w_tokens_ap_uint_4_8_64_8_24_1_8_U0_vs_stream_r_write;

endmodule //RV_GEMM_dataflow_in_loop_x_165_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W
#(parameter
    DataWidth    = 64,
    AddressRange = 384,
    AddressWidth = 9,
    BufferCount  = 2,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    output wire [DataWidth-1:0]    i_q1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                    t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    output wire [DataWidth-1:0]    t_q1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b1; // whether all buffers are written
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W_memcore RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .q1       ( buf_q1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];
assign i_q1      = buf_q1[prev_iptr];
assign t_q1      = reg_valid1 ? reg_q1 : buf_q1[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end
// reg_q1 and reg_valid1
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q1     <= 1'b0;
        reg_valid1 <= 1'b0;
    end else if (!t_ce1 && !reg_valid1) begin
        reg_q1     <= buf_q1[prev_tptr];
        reg_valid1 <= 1'b1;
    end else if (t_ce1) begin
        reg_valid1 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push_buf && !pop_buf && count == BufferCount - 2'd2)
        full_n <= 1'b0;
    else if (!push_buf && pop_buf)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if ((!write_buf && pop_buf && count == 1'b1)
             || (pop_buf && count == 1'b0))
        empty_n <= 1'b0;
    else if (write_buf && !pop_buf)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RV_GEMM_dataflow_in_loop_x_165_1_vq_cache_buffer_RAM_2P_BRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 64;
parameter AddressWidth = 9;
parameter AddressRange = 384;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "block"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W
#(parameter
    DataWidth    = 4,
    AddressRange = 384,
    AddressWidth = 9,
    BufferCount  = 2,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    output wire [DataWidth-1:0]    i_q1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                    t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    output wire [DataWidth-1:0]    t_q1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b1; // whether all buffers are written
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W_memcore RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .q1       ( buf_q1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];
assign i_q1      = buf_q1[prev_iptr];
assign t_q1      = reg_valid1 ? reg_q1 : buf_q1[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end
// reg_q1 and reg_valid1
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q1     <= 1'b0;
        reg_valid1 <= 1'b0;
    end else if (!t_ce1 && !reg_valid1) begin
        reg_q1     <= buf_q1[prev_tptr];
        reg_valid1 <= 1'b1;
    end else if (t_ce1) begin
        reg_valid1 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push_buf && !pop_buf && count == BufferCount - 2'd2)
        full_n <= 1'b0;
    else if (!push_buf && pop_buf)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if ((!write_buf && pop_buf && count == 1'b1)
             || (pop_buf && count == 1'b0))
        empty_n <= 1'b0;
    else if (write_buf && !pop_buf)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RV_GEMM_dataflow_in_loop_x_165_1_vs_cache_buffer_RAM_2P_LUTRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 9;
parameter AddressRange = 384;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module RV_GEMM_dataflow_in_loop_x_165_1_v_buffer_RAM_2P_LUTRAM_1R1W
#(parameter
    DataWidth    = 160,
    AddressRange = 64,
    AddressWidth = 6,
    BufferCount  = 1,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    output wire [DataWidth-1:0]    i_q1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                    t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    output wire [DataWidth-1:0]    t_q1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b0; // whether all buffers are written"
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        RV_GEMM_dataflow_in_loop_x_165_1_v_buffer_RAM_2P_LUTRAM_1R1W_memcore RV_GEMM_dataflow_in_loop_x_165_1_v_buffer_RAM_2P_LUTRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .q1       ( buf_q1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];
assign i_q1      = buf_q1[prev_iptr];
assign t_q1      = reg_valid1 ? reg_q1 : buf_q1[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end
// reg_q1 and reg_valid1
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q1     <= 1'b0;
        reg_valid1 <= 1'b0;
    end else if (!t_ce1 && !reg_valid1) begin
        reg_q1     <= buf_q1[prev_tptr];
        reg_valid1 <= 1'b1;
    end else if (t_ce1) begin
        reg_valid1 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b0;
    else if (!pop_buf)
        full_n <= 1'b0;
    else
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (pop_buf)
        empty_n <= 1'b0;
    else if (write_buf && !full_n)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RV_GEMM_dataflow_in_loop_x_165_1_v_buffer_RAM_2P_LUTRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 160;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module RV_GEMM_dataflow_in_loop_x_1_rq_buffer_RAM_2P_LUTRAM_1R1W
#(parameter
    DataWidth    = 64,
    AddressRange = 192,
    AddressWidth = 8,
    BufferCount  = 1,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                     t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b0; // whether all buffers are written"
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        RV_GEMM_dataflow_in_loop_x_1_rq_buffer_RAM_2P_LUTRAM_1R1W_memcore RV_GEMM_dataflow_in_loop_x_1_rq_buffer_RAM_2P_LUTRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b0;
    else if (!pop_buf)
        full_n <= 1'b0;
    else
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (pop_buf)
        empty_n <= 1'b0;
    else if (write_buf && !full_n)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RV_GEMM_dataflow_in_loop_x_1_rq_buffer_RAM_2P_LUTRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 64;
parameter AddressWidth = 8;
parameter AddressRange = 192;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps
module RV_GEMM_dataflow_in_loop_x_1_rs_buffer_RAM_2P_LUTRAM_1R1W
#(parameter
    DataWidth    = 4,
    AddressRange = 192,
    AddressWidth = 8,
    BufferCount  = 1,
    MemLatency   = 1,
    IndexWidth   = 1
) (
    // initiator
    input  wire                    i_ce,
    input  wire                    i_write,
    output wire                    i_full_n,
    input  wire                    i_ce0,
    input  wire [AddressWidth-1:0] i_address0,
    output wire [DataWidth-1:0]    i_q0,
    input  wire                    i_ce1,
    input  wire                     i_we1,
    input  wire [AddressWidth-1:0] i_address1,
    input  wire [DataWidth-1:0]    i_d1,
    // target
    input  wire                    t_ce,
    input  wire                    t_read,
    output wire                    t_empty_n,
    input  wire                    t_ce0,
    input  wire [AddressWidth-1:0] t_address0,
    output wire [DataWidth-1:0]    t_q0,
    input  wire                    t_ce1,
    input  wire                     t_we1,
    input  wire [AddressWidth-1:0] t_address1,
    input  wire [DataWidth-1:0]    t_d1,
    // system signals
    input  wire                    clk,
    input  wire                    reset
);
//------------------------Local signal-------------------
// control/status
reg  [IndexWidth-1:0]   iptr    = 1'b0; // initiator index
reg  [IndexWidth-1:0]   tptr    = 1'b0; // target index
reg  [IndexWidth-1:0]   prev_iptr    = 1'b0; // previous initiator index
reg  [IndexWidth-1:0]   prev_tptr    = 1'b0; // previous target index
reg  [DataWidth-1:0]    reg_q0      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid0    = 1'b0; // buffer has valid data
reg  [DataWidth-1:0]    reg_q1      = 1'b0; // buffer used if reader is stalled
reg                     reg_valid1    = 1'b0; // buffer has valid data
reg  [IndexWidth:0]     count   = 1'b0; // count of written buffers

reg                     full_n  = 1'b0; // whether all buffers are written"
reg                     empty_n = 1'b0; // whether none of the buffers is written
wire                    push_buf;       // finish writing a buffer
wire                    write_buf;      // write a buffer
wire                    pop_buf;        // finish reading a buffer
// buffer signals
wire                    buf_ce0[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a0[0:BufferCount-1];
wire [DataWidth-1:0]    buf_q0[0:BufferCount-1];
wire                    buf_ce1[0:BufferCount-1];
wire                    buf_we1[0:BufferCount-1];
wire [AddressWidth-1:0] buf_a1[0:BufferCount-1];
wire [DataWidth-1:0]    buf_d1[0:BufferCount-1];
//------------------------Instantiation------------------
genvar i;
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : gen_buffer
        RV_GEMM_dataflow_in_loop_x_1_rs_buffer_RAM_2P_LUTRAM_1R1W_memcore RV_GEMM_dataflow_in_loop_x_1_rs_buffer_RAM_2P_LUTRAM_1R1W_memcore_U (
            .ce0      ( buf_ce0[i] ),
            .address0 ( buf_a0[i] ),
            .q0       ( buf_q0[i] ),
            .ce1      ( buf_ce1[i] ),
            .we1      ( buf_we1[i] ),
            .address1 ( buf_a1[i] ),
            .d1       ( buf_d1[i] ),
            .clk      ( clk ),
            .reset    ( reset )
        );
    end
endgenerate

//++++++++++++++++++++++++buffer signals+++++++++++++++++
generate
    for (i = 0; i < BufferCount; i = i + 1) begin : connect_buffer
assign buf_ce0[i] = (tptr == i && empty_n) ? t_ce0
                             : (iptr == i) ? i_ce0 : 1'b0;
assign buf_a0[i]  = (tptr == i && empty_n) ?  t_address0 : i_address0;
assign buf_ce1[i] = (tptr == i && empty_n) ? t_ce1
                             : (iptr == i) ? i_ce1 : 1'b0;
assign buf_a1[i]  = (tptr == i && empty_n) ?  t_address1 : i_address1;
assign buf_we1[i] = (tptr == i && empty_n)  ? t_we1
                             : (iptr == i) ? i_we1 : 1'b0;
assign buf_d1[i]  = (tptr == i && empty_n) ? t_d1       : i_d1;
    end
endgenerate
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------Body---------------------------
assign i_q0      = buf_q0[prev_iptr];
assign t_q0      = reg_valid0 ? reg_q0 : buf_q0[prev_tptr];

//++++++++++++++++++++++++output+++++++++++++++++++++++++
assign i_full_n  = full_n;
assign t_empty_n = empty_n;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++control/status+++++++++++++++++
assign push_buf = i_ce & i_write & full_n;
assign write_buf = i_ce & i_write;
assign pop_buf  = t_ce & t_read & empty_n;

// iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        iptr <= 1'b0;
    else if (push_buf) begin
        if (iptr == BufferCount - 1'b1)
            iptr <= 1'b0;
        else
            iptr <= iptr + 1'b1;
    end
end

// tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        tptr <= 1'b0;
    else if (pop_buf) begin
        if (tptr == BufferCount - 1'b1)
            tptr <= 1'b0;
        else
            tptr <= tptr + 1'b1;
    end
end

// prev_iptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_iptr <= 1'b0;
    else begin
        prev_iptr <= iptr;
    end
end

// prev_tptr
always @(posedge clk) begin
    if (reset == 1'b1)
        prev_tptr <= 1'b0;
    else begin
        prev_tptr <= tptr;
    end
end
// reg_q0 and reg_valid0
always @(posedge clk) begin
    if (reset == 1'b1) begin
        reg_q0     <= 1'b0;
        reg_valid0 <= 1'b0;
    end else if (!t_ce0 && !reg_valid0) begin
        reg_q0     <= buf_q0[prev_tptr];
        reg_valid0 <= 1'b1;
    end else if (t_ce0) begin
        reg_valid0 <= 1'b0;
    end
end

// count
always @(posedge clk) begin
    if (reset == 1'b1)
        count <= 1'b0;
    else if (push_buf && !pop_buf)
        count <= count + 1'b1;
    else if (!push_buf && pop_buf)
        count <= count - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b0;
    else if (!pop_buf)
        full_n <= 1'b0;
    else
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (pop_buf)
        empty_n <= 1'b0;
    else if (write_buf && !full_n)
        empty_n <= 1'b1;
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module RV_GEMM_dataflow_in_loop_x_1_rs_buffer_RAM_2P_LUTRAM_1R1W_memcore (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 4;
parameter AddressWidth = 8;
parameter AddressRange = 192;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        as_stream_adpt_dout,
        as_stream_adpt_empty_n,
        as_stream_adpt_read,
        as_stream_adpt_num_data_valid,
        as_stream_adpt_fifo_cap,
        as_stream_TREADY,
        as_stream_TDATA,
        as_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [3:0] as_stream_adpt_dout;
input   as_stream_adpt_empty_n;
output   as_stream_adpt_read;
input  [2:0] as_stream_adpt_num_data_valid;
input  [2:0] as_stream_adpt_fifo_cap;
input   as_stream_TREADY;
output  [7:0] as_stream_TDATA;
output   as_stream_TVALID;

reg ap_idle;
reg as_stream_adpt_read;
reg as_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_93;
wire   [0:0] icmp_ln83_reg_93_pp0_iter0_reg;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln83_fu_65_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    as_stream_adpt_blk_n;
reg    as_stream_TDATA_blk_n;
wire   [9:0] tt_6_fu_71_p2;
reg   [9:0] tt_6_reg_97;
reg   [9:0] tt_fu_40;
reg   [9:0] ap_sig_allocacmp_tt_5;
wire    ap_loop_init;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 tt_fu_40 = 10'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tt_fu_40 <= 10'd0;
    end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (icmp_ln83_reg_93 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tt_fu_40 <= tt_6_reg_97;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln83_reg_93 <= icmp_ln83_fu_65_p2;
        tt_6_reg_97 <= tt_6_fu_71_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln83_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_tt_5 = 10'd0;
    end else if (((icmp_ln83_reg_93 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_tt_5 = tt_6_reg_97;
    end else begin
        ap_sig_allocacmp_tt_5 = tt_fu_40;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_93 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        as_stream_TDATA_blk_n = as_stream_TREADY;
    end else begin
        as_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (icmp_ln83_reg_93 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        as_stream_TVALID = 1'b1;
    end else begin
        as_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_93 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        as_stream_adpt_blk_n = as_stream_adpt_empty_n;
    end else begin
        as_stream_adpt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (icmp_ln83_reg_93 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        as_stream_adpt_read = 1'b1;
    end else begin
        as_stream_adpt_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (icmp_ln83_reg_93_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((as_stream_TREADY == 1'b0) & (icmp_ln83_reg_93 == 1'd0)) | ((icmp_ln83_reg_93 == 1'd0) & (as_stream_adpt_empty_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign as_stream_TDATA = as_stream_adpt_dout;

assign icmp_ln83_fu_65_p2 = ((ap_sig_allocacmp_tt_5 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln83_reg_93_pp0_iter0_reg = icmp_ln83_reg_93;

assign tt_6_fu_71_p2 = (ap_sig_allocacmp_tt_5 + 10'd1);

endmodule //RV_GEMM_do_adapt
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        aq_stream_adpt_dout,
        aq_stream_adpt_empty_n,
        aq_stream_adpt_read,
        aq_stream_adpt_num_data_valid,
        aq_stream_adpt_fifo_cap,
        aq_stream_TDATA,
        aq_stream_TVALID,
        aq_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] aq_stream_adpt_dout;
input   aq_stream_adpt_empty_n;
output   aq_stream_adpt_read;
input  [2:0] aq_stream_adpt_num_data_valid;
input  [2:0] aq_stream_adpt_fifo_cap;
output  [63:0] aq_stream_TDATA;
output   aq_stream_TVALID;
input   aq_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] aq_stream_TDATA;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_pack_fu_20_ap_start;
wire    grp_pack_fu_20_ap_done;
wire    grp_pack_fu_20_ap_idle;
wire    grp_pack_fu_20_ap_ready;
wire    grp_pack_fu_20_aq_stream_adpt_read;
wire    grp_pack_fu_20_aq_stream_TREADY;
wire   [63:0] grp_pack_fu_20_aq_stream_TDATA;
wire    grp_pack_fu_20_aq_stream_TVALID;
reg    grp_pack_fu_20_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg   [63:0] aq_stream_TDATA_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 grp_pack_fu_20_ap_start_reg = 1'b0;
end

RV_GEMM_pack grp_pack_fu_20(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pack_fu_20_ap_start),
    .ap_done(grp_pack_fu_20_ap_done),
    .ap_idle(grp_pack_fu_20_ap_idle),
    .ap_ready(grp_pack_fu_20_ap_ready),
    .aq_stream_adpt_dout(aq_stream_adpt_dout),
    .aq_stream_adpt_empty_n(aq_stream_adpt_empty_n),
    .aq_stream_adpt_read(grp_pack_fu_20_aq_stream_adpt_read),
    .aq_stream_adpt_num_data_valid(3'd0),
    .aq_stream_adpt_fifo_cap(3'd0),
    .aq_stream_TREADY(grp_pack_fu_20_aq_stream_TREADY),
    .aq_stream_TDATA(grp_pack_fu_20_aq_stream_TDATA),
    .aq_stream_TVALID(grp_pack_fu_20_aq_stream_TVALID)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_pack_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pack_fu_20_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pack_fu_20_ap_start_reg <= 1'b1;
        end else if ((grp_pack_fu_20_ap_ready == 1'b1)) begin
            grp_pack_fu_20_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_pack_fu_20_aq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        aq_stream_TDATA_reg <= grp_pack_fu_20_aq_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_pack_fu_20_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_fu_20_aq_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        aq_stream_TDATA = grp_pack_fu_20_aq_stream_TDATA;
    end else begin
        aq_stream_TDATA = aq_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pack_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign aq_stream_TVALID = grp_pack_fu_20_aq_stream_TVALID;

assign aq_stream_adpt_read = grp_pack_fu_20_aq_stream_adpt_read;

assign grp_pack_fu_20_ap_start = grp_pack_fu_20_ap_start_reg;

assign grp_pack_fu_20_aq_stream_TREADY = (aq_stream_TREADY & ap_CS_fsm_state2);

endmodule //RV_GEMM_do_adapt_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_adapt_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        a_stream_dout,
        a_stream_empty_n,
        a_stream_read,
        a_stream_num_data_valid,
        a_stream_fifo_cap,
        a_stream_adpt_din,
        a_stream_adpt_full_n,
        a_stream_adpt_write,
        a_stream_adpt_num_data_valid,
        a_stream_adpt_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [159:0] a_stream_dout;
input   a_stream_empty_n;
output   a_stream_read;
input  [2:0] a_stream_num_data_valid;
input  [2:0] a_stream_fifo_cap;
output  [159:0] a_stream_adpt_din;
input   a_stream_adpt_full_n;
output   a_stream_adpt_write;
input  [2:0] a_stream_adpt_num_data_valid;
input  [2:0] a_stream_adpt_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    grp_pack_1_fu_16_ap_start;
wire    grp_pack_1_fu_16_ap_done;
wire    grp_pack_1_fu_16_ap_idle;
wire    grp_pack_1_fu_16_ap_ready;
wire    grp_pack_1_fu_16_a_stream_read;
wire   [159:0] grp_pack_1_fu_16_a_stream_adpt_din;
wire    grp_pack_1_fu_16_a_stream_adpt_write;
reg    grp_pack_1_fu_16_ap_start_reg;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 grp_pack_1_fu_16_ap_start_reg = 1'b0;
end

RV_GEMM_pack_1 grp_pack_1_fu_16(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pack_1_fu_16_ap_start),
    .ap_done(grp_pack_1_fu_16_ap_done),
    .ap_idle(grp_pack_1_fu_16_ap_idle),
    .ap_ready(grp_pack_1_fu_16_ap_ready),
    .a_stream_dout(a_stream_dout),
    .a_stream_empty_n(a_stream_empty_n),
    .a_stream_read(grp_pack_1_fu_16_a_stream_read),
    .a_stream_num_data_valid(3'd0),
    .a_stream_fifo_cap(3'd0),
    .a_stream_adpt_din(grp_pack_1_fu_16_a_stream_adpt_din),
    .a_stream_adpt_full_n(a_stream_adpt_full_n),
    .a_stream_adpt_write(grp_pack_1_fu_16_a_stream_adpt_write),
    .a_stream_adpt_num_data_valid(3'd0),
    .a_stream_adpt_fifo_cap(3'd0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_pack_1_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pack_1_fu_16_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pack_1_fu_16_ap_start_reg <= 1'b1;
        end else if ((grp_pack_1_fu_16_ap_ready == 1'b1)) begin
            grp_pack_1_fu_16_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_pack_1_fu_16_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_1_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pack_1_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pack_1_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_stream_adpt_din = grp_pack_1_fu_16_a_stream_adpt_din;

assign a_stream_adpt_write = grp_pack_1_fu_16_a_stream_adpt_write;

assign a_stream_read = grp_pack_1_fu_16_a_stream_read;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_pack_1_fu_16_ap_start = grp_pack_1_fu_16_ap_start_reg;

assign start_out = real_start;

endmodule //RV_GEMM_do_adapt_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_bmm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rq_stream_r_dout,
        rq_stream_r_empty_n,
        rq_stream_r_read,
        rq_stream_r_num_data_valid,
        rq_stream_r_fifo_cap,
        rs_stream_r_dout,
        rs_stream_r_empty_n,
        rs_stream_r_read,
        rs_stream_r_num_data_valid,
        rs_stream_r_fifo_cap,
        vq_stream_r_dout,
        vq_stream_r_empty_n,
        vq_stream_r_read,
        vq_stream_r_num_data_valid,
        vq_stream_r_fifo_cap,
        vs_stream_r_dout,
        vs_stream_r_empty_n,
        vs_stream_r_read,
        vs_stream_r_num_data_valid,
        vs_stream_r_fifo_cap,
        a_stream_din,
        a_stream_full_n,
        a_stream_write,
        a_stream_num_data_valid,
        a_stream_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] rq_stream_r_dout;
input   rq_stream_r_empty_n;
output   rq_stream_r_read;
input  [2:0] rq_stream_r_num_data_valid;
input  [2:0] rq_stream_r_fifo_cap;
input  [3:0] rs_stream_r_dout;
input   rs_stream_r_empty_n;
output   rs_stream_r_read;
input  [2:0] rs_stream_r_num_data_valid;
input  [2:0] rs_stream_r_fifo_cap;
input  [511:0] vq_stream_r_dout;
input   vq_stream_r_empty_n;
output   vq_stream_r_read;
input  [2:0] vq_stream_r_num_data_valid;
input  [2:0] vq_stream_r_fifo_cap;
input  [31:0] vs_stream_r_dout;
input   vs_stream_r_empty_n;
output   vs_stream_r_read;
input  [2:0] vs_stream_r_num_data_valid;
input  [2:0] vs_stream_r_fifo_cap;
output  [159:0] a_stream_din;
input   a_stream_full_n;
output   a_stream_write;
input  [2:0] a_stream_num_data_valid;
input  [2:0] a_stream_fifo_cap;

reg ap_idle;
reg rq_stream_r_read;
reg rs_stream_r_read;
reg vq_stream_r_read;
reg vs_stream_r_read;
reg a_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
wire   [0:0] icmp_ln48_fu_496_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter4_fsm_state5;
reg   [0:0] icmp_ln48_reg_2904;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter9_reg;
reg   [0:0] icmp_ln93_reg_4130;
reg    ap_predicate_op733_write_state11;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_CS_iter10_fsm_state11;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg;
reg    ap_loop_exit_ready_delayed;
reg    rq_stream_r_blk_n;
reg    rs_stream_r_blk_n;
reg    vq_stream_r_blk_n;
reg    vs_stream_r_blk_n;
reg    a_stream_blk_n;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter1_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter2_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter3_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter4_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter5_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter6_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter7_reg;
reg   [0:0] icmp_ln48_reg_2904_pp0_iter8_reg;
wire   [7:0] trunc_ln64_fu_508_p1;
reg   [7:0] trunc_ln64_reg_2908;
reg   [7:0] trunc_ln64_1_reg_2913;
reg   [7:0] trunc_ln64_1_reg_2913_pp0_iter1_reg;
reg   [7:0] trunc_ln64_1_reg_2913_pp0_iter2_reg;
reg   [7:0] trunc_ln64_1_reg_2913_pp0_iter3_reg;
reg   [7:0] trunc_ln64_2_reg_2918;
reg   [7:0] trunc_ln64_2_reg_2918_pp0_iter1_reg;
reg   [7:0] trunc_ln64_2_reg_2918_pp0_iter2_reg;
reg   [7:0] trunc_ln64_3_reg_2923;
reg   [7:0] trunc_ln64_3_reg_2923_pp0_iter1_reg;
reg   [7:0] trunc_ln64_3_reg_2923_pp0_iter2_reg;
reg   [7:0] trunc_ln64_3_reg_2923_pp0_iter3_reg;
reg   [7:0] trunc_ln64_3_reg_2923_pp0_iter4_reg;
reg   [7:0] trunc_ln64_4_reg_2928;
reg   [7:0] trunc_ln64_4_reg_2928_pp0_iter1_reg;
reg   [7:0] trunc_ln64_4_reg_2928_pp0_iter2_reg;
reg   [7:0] trunc_ln64_4_reg_2928_pp0_iter3_reg;
reg   [7:0] trunc_ln64_4_reg_2928_pp0_iter4_reg;
reg   [7:0] trunc_ln64_5_reg_2933;
reg   [7:0] trunc_ln64_6_reg_2938;
reg   [7:0] trunc_ln64_6_reg_2938_pp0_iter1_reg;
reg   [7:0] trunc_ln64_6_reg_2938_pp0_iter2_reg;
reg   [7:0] trunc_ln64_6_reg_2938_pp0_iter3_reg;
reg   [7:0] trunc_ln64_7_reg_2943;
reg   [7:0] trunc_ln64_7_reg_2943_pp0_iter1_reg;
reg   [7:0] trunc_ln64_7_reg_2943_pp0_iter2_reg;
reg   [7:0] trunc_ln64_7_reg_2943_pp0_iter3_reg;
reg   [7:0] trunc_ln64_7_reg_2943_pp0_iter4_reg;
reg   [7:0] trunc_ln64_7_reg_2943_pp0_iter5_reg;
reg   [3:0] rs_stream_r_read_reg_2948;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter1_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter2_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter3_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter4_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter5_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter6_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter7_reg;
reg   [3:0] rs_stream_r_read_reg_2948_pp0_iter8_reg;
wire   [7:0] trunc_ln66_fu_582_p1;
reg  signed [7:0] trunc_ln66_reg_2953;
reg   [7:0] trunc_ln66_1_reg_2958;
reg   [7:0] trunc_ln66_1_reg_2958_pp0_iter1_reg;
reg   [7:0] trunc_ln66_1_reg_2958_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_1_reg_2958_pp0_iter3_reg;
reg   [7:0] trunc_ln66_2_reg_2963;
reg   [7:0] trunc_ln66_2_reg_2963_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_2_reg_2963_pp0_iter2_reg;
reg   [7:0] trunc_ln66_3_reg_2968;
reg   [7:0] trunc_ln66_3_reg_2968_pp0_iter1_reg;
reg   [7:0] trunc_ln66_3_reg_2968_pp0_iter2_reg;
reg   [7:0] trunc_ln66_3_reg_2968_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_3_reg_2968_pp0_iter4_reg;
reg   [7:0] trunc_ln66_4_reg_2973;
reg   [7:0] trunc_ln66_4_reg_2973_pp0_iter1_reg;
reg   [7:0] trunc_ln66_4_reg_2973_pp0_iter2_reg;
reg   [7:0] trunc_ln66_4_reg_2973_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_4_reg_2973_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_5_reg_2978;
reg   [7:0] trunc_ln66_6_reg_2983;
reg   [7:0] trunc_ln66_6_reg_2983_pp0_iter1_reg;
reg   [7:0] trunc_ln66_6_reg_2983_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_6_reg_2983_pp0_iter3_reg;
reg   [7:0] trunc_ln66_7_reg_2988;
reg   [7:0] trunc_ln66_7_reg_2988_pp0_iter1_reg;
reg   [7:0] trunc_ln66_7_reg_2988_pp0_iter2_reg;
reg   [7:0] trunc_ln66_7_reg_2988_pp0_iter3_reg;
reg   [7:0] trunc_ln66_7_reg_2988_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_7_reg_2988_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_8_reg_2993;
reg   [7:0] trunc_ln66_9_reg_2998;
reg   [7:0] trunc_ln66_9_reg_2998_pp0_iter1_reg;
reg   [7:0] trunc_ln66_9_reg_2998_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_9_reg_2998_pp0_iter3_reg;
reg   [7:0] trunc_ln66_s_reg_3003;
reg   [7:0] trunc_ln66_s_reg_3003_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_s_reg_3003_pp0_iter2_reg;
reg   [7:0] trunc_ln66_10_reg_3008;
reg   [7:0] trunc_ln66_10_reg_3008_pp0_iter1_reg;
reg   [7:0] trunc_ln66_10_reg_3008_pp0_iter2_reg;
reg   [7:0] trunc_ln66_10_reg_3008_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_10_reg_3008_pp0_iter4_reg;
reg   [7:0] trunc_ln66_11_reg_3013;
reg   [7:0] trunc_ln66_11_reg_3013_pp0_iter1_reg;
reg   [7:0] trunc_ln66_11_reg_3013_pp0_iter2_reg;
reg   [7:0] trunc_ln66_11_reg_3013_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_11_reg_3013_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_12_reg_3018;
reg   [7:0] trunc_ln66_13_reg_3023;
reg   [7:0] trunc_ln66_13_reg_3023_pp0_iter1_reg;
reg   [7:0] trunc_ln66_13_reg_3023_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_13_reg_3023_pp0_iter3_reg;
reg   [7:0] trunc_ln66_14_reg_3028;
reg   [7:0] trunc_ln66_14_reg_3028_pp0_iter1_reg;
reg   [7:0] trunc_ln66_14_reg_3028_pp0_iter2_reg;
reg   [7:0] trunc_ln66_14_reg_3028_pp0_iter3_reg;
reg   [7:0] trunc_ln66_14_reg_3028_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_14_reg_3028_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_15_reg_3033;
reg   [7:0] trunc_ln66_16_reg_3038;
reg   [7:0] trunc_ln66_16_reg_3038_pp0_iter1_reg;
reg   [7:0] trunc_ln66_16_reg_3038_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_16_reg_3038_pp0_iter3_reg;
reg   [7:0] trunc_ln66_17_reg_3043;
reg   [7:0] trunc_ln66_17_reg_3043_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_17_reg_3043_pp0_iter2_reg;
reg   [7:0] trunc_ln66_18_reg_3048;
reg   [7:0] trunc_ln66_18_reg_3048_pp0_iter1_reg;
reg   [7:0] trunc_ln66_18_reg_3048_pp0_iter2_reg;
reg   [7:0] trunc_ln66_18_reg_3048_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_18_reg_3048_pp0_iter4_reg;
reg   [7:0] trunc_ln66_19_reg_3053;
reg   [7:0] trunc_ln66_19_reg_3053_pp0_iter1_reg;
reg   [7:0] trunc_ln66_19_reg_3053_pp0_iter2_reg;
reg   [7:0] trunc_ln66_19_reg_3053_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_19_reg_3053_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_20_reg_3058;
reg   [7:0] trunc_ln66_21_reg_3063;
reg   [7:0] trunc_ln66_21_reg_3063_pp0_iter1_reg;
reg   [7:0] trunc_ln66_21_reg_3063_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_21_reg_3063_pp0_iter3_reg;
reg   [7:0] trunc_ln66_22_reg_3068;
reg   [7:0] trunc_ln66_22_reg_3068_pp0_iter1_reg;
reg   [7:0] trunc_ln66_22_reg_3068_pp0_iter2_reg;
reg   [7:0] trunc_ln66_22_reg_3068_pp0_iter3_reg;
reg   [7:0] trunc_ln66_22_reg_3068_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_22_reg_3068_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_23_reg_3073;
reg   [7:0] trunc_ln66_24_reg_3078;
reg   [7:0] trunc_ln66_24_reg_3078_pp0_iter1_reg;
reg   [7:0] trunc_ln66_24_reg_3078_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_24_reg_3078_pp0_iter3_reg;
reg   [7:0] trunc_ln66_25_reg_3083;
reg   [7:0] trunc_ln66_25_reg_3083_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_25_reg_3083_pp0_iter2_reg;
reg   [7:0] trunc_ln66_26_reg_3088;
reg   [7:0] trunc_ln66_26_reg_3088_pp0_iter1_reg;
reg   [7:0] trunc_ln66_26_reg_3088_pp0_iter2_reg;
reg   [7:0] trunc_ln66_26_reg_3088_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_26_reg_3088_pp0_iter4_reg;
reg   [7:0] trunc_ln66_27_reg_3093;
reg   [7:0] trunc_ln66_27_reg_3093_pp0_iter1_reg;
reg   [7:0] trunc_ln66_27_reg_3093_pp0_iter2_reg;
reg   [7:0] trunc_ln66_27_reg_3093_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_27_reg_3093_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_28_reg_3098;
reg   [7:0] trunc_ln66_29_reg_3103;
reg   [7:0] trunc_ln66_29_reg_3103_pp0_iter1_reg;
reg   [7:0] trunc_ln66_29_reg_3103_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_29_reg_3103_pp0_iter3_reg;
reg   [7:0] trunc_ln66_30_reg_3108;
reg   [7:0] trunc_ln66_30_reg_3108_pp0_iter1_reg;
reg   [7:0] trunc_ln66_30_reg_3108_pp0_iter2_reg;
reg   [7:0] trunc_ln66_30_reg_3108_pp0_iter3_reg;
reg   [7:0] trunc_ln66_30_reg_3108_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_30_reg_3108_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_31_reg_3113;
reg   [7:0] trunc_ln66_32_reg_3118;
reg   [7:0] trunc_ln66_32_reg_3118_pp0_iter1_reg;
reg   [7:0] trunc_ln66_32_reg_3118_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_32_reg_3118_pp0_iter3_reg;
reg   [7:0] trunc_ln66_33_reg_3123;
reg   [7:0] trunc_ln66_33_reg_3123_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_33_reg_3123_pp0_iter2_reg;
reg   [7:0] trunc_ln66_34_reg_3128;
reg   [7:0] trunc_ln66_34_reg_3128_pp0_iter1_reg;
reg   [7:0] trunc_ln66_34_reg_3128_pp0_iter2_reg;
reg   [7:0] trunc_ln66_34_reg_3128_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_34_reg_3128_pp0_iter4_reg;
reg   [7:0] trunc_ln66_35_reg_3133;
reg   [7:0] trunc_ln66_35_reg_3133_pp0_iter1_reg;
reg   [7:0] trunc_ln66_35_reg_3133_pp0_iter2_reg;
reg   [7:0] trunc_ln66_35_reg_3133_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_35_reg_3133_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_36_reg_3138;
reg   [7:0] trunc_ln66_37_reg_3143;
reg   [7:0] trunc_ln66_37_reg_3143_pp0_iter1_reg;
reg   [7:0] trunc_ln66_37_reg_3143_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_37_reg_3143_pp0_iter3_reg;
reg   [7:0] trunc_ln66_38_reg_3148;
reg   [7:0] trunc_ln66_38_reg_3148_pp0_iter1_reg;
reg   [7:0] trunc_ln66_38_reg_3148_pp0_iter2_reg;
reg   [7:0] trunc_ln66_38_reg_3148_pp0_iter3_reg;
reg   [7:0] trunc_ln66_38_reg_3148_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_38_reg_3148_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_39_reg_3153;
reg   [7:0] trunc_ln66_40_reg_3158;
reg   [7:0] trunc_ln66_40_reg_3158_pp0_iter1_reg;
reg   [7:0] trunc_ln66_40_reg_3158_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_40_reg_3158_pp0_iter3_reg;
reg   [7:0] trunc_ln66_41_reg_3163;
reg   [7:0] trunc_ln66_41_reg_3163_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_41_reg_3163_pp0_iter2_reg;
reg   [7:0] trunc_ln66_42_reg_3168;
reg   [7:0] trunc_ln66_42_reg_3168_pp0_iter1_reg;
reg   [7:0] trunc_ln66_42_reg_3168_pp0_iter2_reg;
reg   [7:0] trunc_ln66_42_reg_3168_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_42_reg_3168_pp0_iter4_reg;
reg   [7:0] trunc_ln66_43_reg_3173;
reg   [7:0] trunc_ln66_43_reg_3173_pp0_iter1_reg;
reg   [7:0] trunc_ln66_43_reg_3173_pp0_iter2_reg;
reg   [7:0] trunc_ln66_43_reg_3173_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_43_reg_3173_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_44_reg_3178;
reg   [7:0] trunc_ln66_45_reg_3183;
reg   [7:0] trunc_ln66_45_reg_3183_pp0_iter1_reg;
reg   [7:0] trunc_ln66_45_reg_3183_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_45_reg_3183_pp0_iter3_reg;
reg   [7:0] trunc_ln66_46_reg_3188;
reg   [7:0] trunc_ln66_46_reg_3188_pp0_iter1_reg;
reg   [7:0] trunc_ln66_46_reg_3188_pp0_iter2_reg;
reg   [7:0] trunc_ln66_46_reg_3188_pp0_iter3_reg;
reg   [7:0] trunc_ln66_46_reg_3188_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_46_reg_3188_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_47_reg_3193;
reg   [7:0] trunc_ln66_48_reg_3198;
reg   [7:0] trunc_ln66_48_reg_3198_pp0_iter1_reg;
reg   [7:0] trunc_ln66_48_reg_3198_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_48_reg_3198_pp0_iter3_reg;
reg   [7:0] trunc_ln66_49_reg_3203;
reg   [7:0] trunc_ln66_49_reg_3203_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_49_reg_3203_pp0_iter2_reg;
reg   [7:0] trunc_ln66_50_reg_3208;
reg   [7:0] trunc_ln66_50_reg_3208_pp0_iter1_reg;
reg   [7:0] trunc_ln66_50_reg_3208_pp0_iter2_reg;
reg   [7:0] trunc_ln66_50_reg_3208_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_50_reg_3208_pp0_iter4_reg;
reg   [7:0] trunc_ln66_51_reg_3213;
reg   [7:0] trunc_ln66_51_reg_3213_pp0_iter1_reg;
reg   [7:0] trunc_ln66_51_reg_3213_pp0_iter2_reg;
reg   [7:0] trunc_ln66_51_reg_3213_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_51_reg_3213_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_52_reg_3218;
reg   [7:0] trunc_ln66_53_reg_3223;
reg   [7:0] trunc_ln66_53_reg_3223_pp0_iter1_reg;
reg   [7:0] trunc_ln66_53_reg_3223_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_53_reg_3223_pp0_iter3_reg;
reg   [7:0] trunc_ln66_54_reg_3228;
reg   [7:0] trunc_ln66_54_reg_3228_pp0_iter1_reg;
reg   [7:0] trunc_ln66_54_reg_3228_pp0_iter2_reg;
reg   [7:0] trunc_ln66_54_reg_3228_pp0_iter3_reg;
reg   [7:0] trunc_ln66_54_reg_3228_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_54_reg_3228_pp0_iter5_reg;
reg  signed [7:0] trunc_ln66_55_reg_3233;
reg   [7:0] trunc_ln66_56_reg_3238;
reg   [7:0] trunc_ln66_56_reg_3238_pp0_iter1_reg;
reg   [7:0] trunc_ln66_56_reg_3238_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_56_reg_3238_pp0_iter3_reg;
reg   [7:0] trunc_ln66_57_reg_3243;
reg   [7:0] trunc_ln66_57_reg_3243_pp0_iter1_reg;
reg  signed [7:0] trunc_ln66_57_reg_3243_pp0_iter2_reg;
reg   [7:0] trunc_ln66_58_reg_3248;
reg   [7:0] trunc_ln66_58_reg_3248_pp0_iter1_reg;
reg   [7:0] trunc_ln66_58_reg_3248_pp0_iter2_reg;
reg   [7:0] trunc_ln66_58_reg_3248_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_58_reg_3248_pp0_iter4_reg;
reg   [7:0] trunc_ln66_59_reg_3253;
reg   [7:0] trunc_ln66_59_reg_3253_pp0_iter1_reg;
reg   [7:0] trunc_ln66_59_reg_3253_pp0_iter2_reg;
reg   [7:0] trunc_ln66_59_reg_3253_pp0_iter3_reg;
reg  signed [7:0] trunc_ln66_59_reg_3253_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_60_reg_3258;
reg   [7:0] trunc_ln66_61_reg_3263;
reg   [7:0] trunc_ln66_61_reg_3263_pp0_iter1_reg;
reg   [7:0] trunc_ln66_61_reg_3263_pp0_iter2_reg;
reg  signed [7:0] trunc_ln66_61_reg_3263_pp0_iter3_reg;
reg   [7:0] trunc_ln66_62_reg_3268;
reg   [7:0] trunc_ln66_62_reg_3268_pp0_iter1_reg;
reg   [7:0] trunc_ln66_62_reg_3268_pp0_iter2_reg;
reg   [7:0] trunc_ln66_62_reg_3268_pp0_iter3_reg;
reg   [7:0] trunc_ln66_62_reg_3268_pp0_iter4_reg;
reg  signed [7:0] trunc_ln66_62_reg_3268_pp0_iter5_reg;
wire   [3:0] trunc_ln67_fu_1216_p1;
reg   [3:0] trunc_ln67_reg_3273;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter1_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter2_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter3_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter4_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter5_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter6_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter7_reg;
reg   [3:0] trunc_ln67_reg_3273_pp0_iter8_reg;
reg   [3:0] tmp_reg_3278;
reg   [3:0] tmp_reg_3278_pp0_iter1_reg;
reg   [3:0] tmp_reg_3278_pp0_iter2_reg;
reg   [3:0] tmp_reg_3278_pp0_iter3_reg;
reg   [3:0] tmp_reg_3278_pp0_iter4_reg;
reg   [3:0] tmp_reg_3278_pp0_iter5_reg;
reg   [3:0] tmp_reg_3278_pp0_iter6_reg;
reg   [3:0] tmp_reg_3278_pp0_iter7_reg;
reg   [3:0] tmp_reg_3278_pp0_iter8_reg;
reg   [3:0] tmp_s_reg_3283;
reg   [3:0] tmp_s_reg_3283_pp0_iter1_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter2_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter3_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter4_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter5_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter6_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter7_reg;
reg   [3:0] tmp_s_reg_3283_pp0_iter8_reg;
reg   [3:0] tmp_1_reg_3288;
reg   [3:0] tmp_1_reg_3288_pp0_iter1_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter2_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter3_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter4_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter5_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter6_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter7_reg;
reg   [3:0] tmp_1_reg_3288_pp0_iter8_reg;
reg   [3:0] tmp_2_reg_3293;
reg   [3:0] tmp_2_reg_3293_pp0_iter1_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter2_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter3_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter4_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter5_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter6_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter7_reg;
reg   [3:0] tmp_2_reg_3293_pp0_iter8_reg;
reg   [3:0] tmp_3_reg_3298;
reg   [3:0] tmp_3_reg_3298_pp0_iter1_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter2_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter3_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter4_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter5_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter6_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter7_reg;
reg   [3:0] tmp_3_reg_3298_pp0_iter8_reg;
reg   [3:0] tmp_4_reg_3303;
reg   [3:0] tmp_4_reg_3303_pp0_iter1_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter2_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter3_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter4_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter5_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter6_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter7_reg;
reg   [3:0] tmp_4_reg_3303_pp0_iter8_reg;
reg   [3:0] tmp_5_reg_3308;
reg   [3:0] tmp_5_reg_3308_pp0_iter1_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter2_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter3_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter4_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter5_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter6_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter7_reg;
reg   [3:0] tmp_5_reg_3308_pp0_iter8_reg;
wire  signed [15:0] sext_ln79_fu_1295_p1;
wire  signed [15:0] sext_ln79_15_fu_1307_p1;
wire  signed [15:0] sext_ln79_6_fu_1445_p1;
wire  signed [15:0] sext_ln79_3_fu_1472_p1;
wire  signed [15:0] sext_ln79_18_fu_1478_p1;
wire  signed [15:0] sext_ln79_9_fu_1530_p1;
wire  signed [15:0] sext_ln79_12_fu_1536_p1;
wire   [15:0] grp_fu_1313_p2;
reg  signed [15:0] mul_ln79_5_reg_3612;
wire   [15:0] grp_fu_1331_p2;
reg  signed [15:0] mul_ln79_13_reg_3632;
wire   [15:0] grp_fu_1349_p2;
reg  signed [15:0] mul_ln79_21_reg_3652;
wire   [15:0] grp_fu_1367_p2;
reg  signed [15:0] mul_ln79_29_reg_3672;
wire   [15:0] grp_fu_1385_p2;
reg  signed [15:0] mul_ln79_37_reg_3692;
wire   [15:0] grp_fu_1403_p2;
reg  signed [15:0] mul_ln79_45_reg_3712;
wire   [15:0] grp_fu_1421_p2;
reg  signed [15:0] mul_ln79_53_reg_3732;
wire   [15:0] grp_fu_1439_p2;
reg  signed [15:0] mul_ln79_61_reg_3752;
wire   [0:0] icmp_ln49_fu_1615_p2;
reg   [0:0] icmp_ln49_reg_3757;
reg   [0:0] icmp_ln49_reg_3757_pp0_iter7_reg;
wire  signed [15:0] sext_ln79_21_fu_1624_p1;
wire  signed [16:0] grp_fu_2412_p3;
wire  signed [16:0] grp_fu_2420_p3;
wire  signed [16:0] grp_fu_2428_p3;
wire  signed [16:0] grp_fu_2436_p3;
wire  signed [16:0] grp_fu_2444_p3;
wire  signed [16:0] grp_fu_2452_p3;
wire  signed [16:0] grp_fu_2460_p3;
wire  signed [16:0] grp_fu_2468_p3;
wire   [0:0] xor_ln48_fu_1694_p2;
reg   [0:0] xor_ln48_reg_3897;
wire   [0:0] icmp_ln50_fu_1699_p2;
reg   [0:0] icmp_ln50_reg_3902;
wire   [0:0] and_ln48_1_fu_1705_p2;
reg   [0:0] and_ln48_1_reg_3907;
wire  signed [16:0] grp_fu_2485_p3;
wire  signed [16:0] grp_fu_2502_p3;
wire  signed [16:0] grp_fu_2519_p3;
wire  signed [16:0] grp_fu_2536_p3;
wire  signed [16:0] grp_fu_2553_p3;
wire  signed [16:0] grp_fu_2570_p3;
wire  signed [16:0] grp_fu_2587_p3;
wire  signed [16:0] grp_fu_2604_p3;
wire   [4:0] select_ln50_fu_1799_p3;
reg   [4:0] select_ln50_reg_3992;
wire   [0:0] icmp_ln54_fu_1914_p2;
reg   [0:0] icmp_ln54_reg_4038;
wire  signed [18:0] grp_fu_2756_p3;
reg  signed [18:0] add_ln79_6_reg_4050;
wire  signed [18:0] grp_fu_2764_p3;
reg  signed [18:0] add_ln79_13_reg_4055;
wire  signed [18:0] grp_fu_2772_p3;
reg  signed [18:0] add_ln79_20_reg_4060;
wire  signed [18:0] grp_fu_2780_p3;
reg  signed [18:0] add_ln79_27_reg_4065;
wire  signed [18:0] grp_fu_2788_p3;
reg  signed [18:0] add_ln79_34_reg_4070;
wire  signed [18:0] grp_fu_2796_p3;
reg  signed [18:0] add_ln79_41_reg_4075;
wire  signed [18:0] grp_fu_2804_p3;
reg  signed [18:0] add_ln79_48_reg_4080;
wire  signed [18:0] grp_fu_2812_p3;
reg  signed [18:0] add_ln79_55_reg_4085;
wire   [4:0] add_ln89_fu_1925_p2;
reg   [4:0] add_ln89_reg_4090;
wire   [4:0] add_ln89_2_fu_1934_p2;
reg   [4:0] add_ln89_2_reg_4095;
wire   [4:0] add_ln89_4_fu_1943_p2;
reg   [4:0] add_ln89_4_reg_4100;
wire   [4:0] add_ln89_6_fu_1952_p2;
reg   [4:0] add_ln89_6_reg_4105;
wire   [4:0] add_ln89_8_fu_1961_p2;
reg   [4:0] add_ln89_8_reg_4110;
wire   [4:0] add_ln89_10_fu_1970_p2;
reg   [4:0] add_ln89_10_reg_4115;
wire   [4:0] add_ln89_12_fu_1979_p2;
reg   [4:0] add_ln89_12_reg_4120;
wire   [4:0] add_ln89_14_fu_1988_p2;
reg   [4:0] add_ln89_14_reg_4125;
wire   [0:0] icmp_ln93_fu_1994_p2;
reg   [4:0] cit_fu_354;
wire   [4:0] cit_1_fu_1903_p2;
wire    ap_loop_init;
reg   [31:0] empty_fu_358;
wire   [31:0] add_ln89_1_fu_2112_p2;
reg   [31:0] empty_55_fu_362;
wire   [31:0] add_ln89_3_fu_2127_p2;
reg   [31:0] empty_56_fu_366;
wire   [31:0] add_ln89_5_fu_2142_p2;
reg   [31:0] empty_57_fu_370;
wire   [31:0] add_ln89_7_fu_2157_p2;
reg   [31:0] empty_58_fu_374;
wire   [31:0] add_ln89_9_fu_2172_p2;
reg   [31:0] empty_59_fu_378;
wire   [31:0] add_ln89_11_fu_2187_p2;
reg   [31:0] empty_60_fu_382;
wire   [31:0] add_ln89_13_fu_2202_p2;
reg   [31:0] empty_61_fu_386;
wire   [31:0] add_ln89_15_fu_2217_p2;
reg   [8:0] indvar_flatten_fu_390;
wire   [8:0] select_ln50_1_fu_1746_p3;
reg   [11:0] indvar_flatten33_fu_394;
wire   [11:0] select_ln49_fu_1678_p3;
reg   [14:0] indvar_flatten76_fu_398;
wire   [14:0] add_ln48_fu_502_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten76_load;
wire  signed [7:0] grp_fu_1301_p1;
wire  signed [7:0] grp_fu_1313_p1;
wire  signed [7:0] grp_fu_1322_p1;
wire  signed [7:0] grp_fu_1331_p1;
wire  signed [7:0] grp_fu_1340_p1;
wire  signed [7:0] grp_fu_1349_p1;
wire  signed [7:0] grp_fu_1358_p1;
wire  signed [7:0] grp_fu_1367_p1;
wire  signed [7:0] grp_fu_1376_p1;
wire  signed [7:0] grp_fu_1385_p1;
wire  signed [7:0] grp_fu_1394_p1;
wire  signed [7:0] grp_fu_1403_p1;
wire  signed [7:0] grp_fu_1412_p1;
wire  signed [7:0] grp_fu_1421_p1;
wire  signed [7:0] grp_fu_1430_p1;
wire  signed [7:0] grp_fu_1439_p1;
wire  signed [15:0] grp_fu_1301_p2;
wire  signed [15:0] grp_fu_1322_p2;
wire  signed [15:0] grp_fu_1340_p2;
wire  signed [15:0] grp_fu_1358_p2;
wire  signed [15:0] grp_fu_1376_p2;
wire  signed [15:0] grp_fu_1394_p2;
wire  signed [15:0] grp_fu_1412_p2;
wire  signed [15:0] grp_fu_1430_p2;
wire   [11:0] add_ln49_fu_1672_p2;
wire  signed [16:0] grp_fu_2476_p3;
wire  signed [16:0] grp_fu_2493_p3;
wire  signed [16:0] grp_fu_2510_p3;
wire  signed [16:0] grp_fu_2527_p3;
wire  signed [16:0] grp_fu_2544_p3;
wire  signed [16:0] grp_fu_2561_p3;
wire  signed [16:0] grp_fu_2578_p3;
wire  signed [16:0] grp_fu_2595_p3;
wire   [0:0] or_ln50_1_fu_1741_p2;
wire   [8:0] add_ln50_fu_1735_p2;
wire   [0:0] xor_ln49_fu_1768_p2;
wire   [0:0] icmp_ln51_fu_1762_p2;
wire   [0:0] and_ln48_fu_1778_p2;
wire   [0:0] or_ln49_fu_1773_p2;
wire   [0:0] and_ln49_fu_1783_p2;
wire   [0:0] or_ln50_fu_1789_p2;
wire   [0:0] or_ln50_2_fu_1794_p2;
wire  signed [16:0] grp_fu_2621_p3;
wire  signed [17:0] sext_ln79_39_fu_1807_p1;
wire  signed [17:0] grp_fu_2612_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_5_fu_1810_p2;
wire  signed [16:0] grp_fu_2639_p3;
wire  signed [17:0] sext_ln79_63_fu_1819_p1;
wire  signed [17:0] grp_fu_2630_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_12_fu_1822_p2;
wire  signed [16:0] grp_fu_2657_p3;
wire  signed [17:0] sext_ln79_87_fu_1831_p1;
wire  signed [17:0] grp_fu_2648_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_19_fu_1834_p2;
wire  signed [16:0] grp_fu_2675_p3;
wire  signed [17:0] sext_ln79_127_fu_1843_p1;
wire  signed [17:0] grp_fu_2666_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_26_fu_1846_p2;
wire  signed [16:0] grp_fu_2693_p3;
wire  signed [17:0] sext_ln79_143_fu_1855_p1;
wire  signed [17:0] grp_fu_2684_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_33_fu_1858_p2;
wire  signed [16:0] grp_fu_2711_p3;
wire  signed [17:0] sext_ln79_155_fu_1867_p1;
wire  signed [17:0] grp_fu_2702_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_40_fu_1870_p2;
wire  signed [16:0] grp_fu_2729_p3;
wire  signed [17:0] sext_ln79_162_fu_1879_p1;
wire  signed [17:0] grp_fu_2720_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_47_fu_1882_p2;
wire  signed [16:0] grp_fu_2747_p3;
wire  signed [17:0] sext_ln79_166_fu_1891_p1;
wire  signed [17:0] grp_fu_2738_p3;
(* use_dsp48 = "no" *) wire  signed [17:0] add_ln79_54_fu_1894_p2;
wire   [4:0] zext_ln89_1_fu_1922_p1;
wire   [4:0] zext_ln89_fu_1919_p1;
wire   [4:0] zext_ln89_10_fu_1931_p1;
wire   [4:0] zext_ln89_11_fu_1940_p1;
wire   [4:0] zext_ln89_12_fu_1949_p1;
wire   [4:0] zext_ln89_13_fu_1958_p1;
wire   [4:0] zext_ln89_14_fu_1967_p1;
wire   [4:0] zext_ln89_15_fu_1976_p1;
wire   [4:0] zext_ln89_16_fu_1985_p1;
wire  signed [31:0] sext_ln79_29_fu_2079_p1;
wire   [31:0] zext_ln89_2_fu_2103_p1;
wire   [31:0] shl_ln89_fu_2106_p2;
wire   [31:0] select_ln54_7_fu_2072_p3;
wire  signed [31:0] sext_ln79_51_fu_2082_p1;
wire   [31:0] zext_ln89_3_fu_2118_p1;
wire   [31:0] shl_ln89_1_fu_2121_p2;
wire   [31:0] select_ln54_6_fu_2065_p3;
wire  signed [31:0] sext_ln79_73_fu_2085_p1;
wire   [31:0] zext_ln89_4_fu_2133_p1;
wire   [31:0] shl_ln89_2_fu_2136_p2;
wire   [31:0] select_ln54_5_fu_2058_p3;
wire  signed [31:0] sext_ln79_95_fu_2088_p1;
wire   [31:0] zext_ln89_5_fu_2148_p1;
wire   [31:0] shl_ln89_3_fu_2151_p2;
wire   [31:0] select_ln54_4_fu_2051_p3;
wire  signed [31:0] sext_ln79_117_fu_2091_p1;
wire   [31:0] zext_ln89_6_fu_2163_p1;
wire   [31:0] shl_ln89_4_fu_2166_p2;
wire   [31:0] select_ln54_3_fu_2044_p3;
wire  signed [31:0] sext_ln79_137_fu_2094_p1;
wire   [31:0] zext_ln89_7_fu_2178_p1;
wire   [31:0] shl_ln89_5_fu_2181_p2;
wire   [31:0] select_ln54_2_fu_2037_p3;
wire  signed [31:0] sext_ln79_148_fu_2097_p1;
wire   [31:0] zext_ln89_8_fu_2193_p1;
wire   [31:0] shl_ln89_6_fu_2196_p2;
wire   [31:0] select_ln54_1_fu_2030_p3;
wire  signed [31:0] sext_ln89_fu_2100_p1;
wire   [31:0] zext_ln89_9_fu_2208_p1;
wire   [31:0] shl_ln89_7_fu_2211_p2;
wire   [31:0] select_ln54_fu_2023_p3;
wire   [31:0] add_ln89_23_fu_2265_p2;
wire   [31:0] add_ln89_22_fu_2259_p2;
wire   [31:0] add_ln89_21_fu_2253_p2;
wire   [31:0] add_ln89_20_fu_2247_p2;
wire   [31:0] add_ln89_19_fu_2241_p2;
wire   [31:0] add_ln89_18_fu_2235_p2;
wire   [31:0] add_ln89_17_fu_2229_p2;
wire   [31:0] add_ln89_16_fu_2223_p2;
wire   [19:0] trunc_ln99_7_fu_2341_p4;
wire   [19:0] trunc_ln99_6_fu_2331_p4;
wire   [19:0] trunc_ln99_5_fu_2321_p4;
wire   [19:0] trunc_ln99_4_fu_2311_p4;
wire   [19:0] trunc_ln99_3_fu_2301_p4;
wire   [19:0] trunc_ln99_2_fu_2291_p4;
wire   [19:0] trunc_ln99_1_fu_2281_p4;
wire   [19:0] trunc_ln_fu_2271_p4;
wire  signed [7:0] grp_fu_2412_p1;
wire  signed [7:0] grp_fu_2420_p1;
wire  signed [7:0] grp_fu_2428_p1;
wire  signed [7:0] grp_fu_2436_p1;
wire  signed [7:0] grp_fu_2444_p1;
wire  signed [7:0] grp_fu_2452_p1;
wire  signed [7:0] grp_fu_2460_p1;
wire  signed [7:0] grp_fu_2468_p1;
wire  signed [7:0] grp_fu_2476_p1;
wire  signed [7:0] grp_fu_2485_p1;
wire  signed [7:0] grp_fu_2493_p1;
wire  signed [7:0] grp_fu_2502_p1;
wire  signed [7:0] grp_fu_2510_p1;
wire  signed [7:0] grp_fu_2519_p1;
wire  signed [7:0] grp_fu_2527_p1;
wire  signed [7:0] grp_fu_2536_p1;
wire  signed [7:0] grp_fu_2544_p1;
wire  signed [7:0] grp_fu_2553_p1;
wire  signed [7:0] grp_fu_2561_p1;
wire  signed [7:0] grp_fu_2570_p1;
wire  signed [7:0] grp_fu_2578_p1;
wire  signed [7:0] grp_fu_2587_p1;
wire  signed [7:0] grp_fu_2595_p1;
wire  signed [7:0] grp_fu_2604_p1;
wire  signed [7:0] grp_fu_2612_p1;
wire  signed [7:0] grp_fu_2621_p1;
wire  signed [7:0] grp_fu_2630_p1;
wire  signed [7:0] grp_fu_2639_p1;
wire  signed [7:0] grp_fu_2648_p1;
wire  signed [7:0] grp_fu_2657_p1;
wire  signed [7:0] grp_fu_2666_p1;
wire  signed [7:0] grp_fu_2675_p1;
wire  signed [7:0] grp_fu_2684_p1;
wire  signed [7:0] grp_fu_2693_p1;
wire  signed [7:0] grp_fu_2702_p1;
wire  signed [7:0] grp_fu_2711_p1;
wire  signed [7:0] grp_fu_2720_p1;
wire  signed [7:0] grp_fu_2729_p1;
wire  signed [7:0] grp_fu_2738_p1;
wire  signed [7:0] grp_fu_2747_p1;
wire  signed [7:0] grp_fu_2756_p1;
wire  signed [7:0] grp_fu_2764_p1;
wire  signed [7:0] grp_fu_2772_p1;
wire  signed [7:0] grp_fu_2780_p1;
wire  signed [7:0] grp_fu_2788_p1;
wire  signed [7:0] grp_fu_2796_p1;
wire  signed [7:0] grp_fu_2804_p1;
wire  signed [7:0] grp_fu_2812_p1;
reg    grp_fu_1301_ce;
reg    grp_fu_1313_ce;
reg    grp_fu_1322_ce;
reg    grp_fu_1331_ce;
reg    grp_fu_1340_ce;
reg    grp_fu_1349_ce;
reg    grp_fu_1358_ce;
reg    grp_fu_1367_ce;
reg    grp_fu_1376_ce;
reg    grp_fu_1385_ce;
reg    grp_fu_1394_ce;
reg    grp_fu_1403_ce;
reg    grp_fu_1412_ce;
reg    grp_fu_1421_ce;
reg    grp_fu_1430_ce;
reg    grp_fu_1439_ce;
reg    grp_fu_2412_ce;
reg    grp_fu_2420_ce;
reg    grp_fu_2428_ce;
reg    grp_fu_2436_ce;
reg    grp_fu_2444_ce;
reg    grp_fu_2452_ce;
reg    grp_fu_2460_ce;
reg    grp_fu_2468_ce;
reg    grp_fu_2476_ce;
reg    grp_fu_2485_ce;
reg    grp_fu_2493_ce;
reg    grp_fu_2502_ce;
reg    grp_fu_2510_ce;
reg    grp_fu_2519_ce;
reg    grp_fu_2527_ce;
reg    grp_fu_2536_ce;
reg    grp_fu_2544_ce;
reg    grp_fu_2553_ce;
reg    grp_fu_2561_ce;
reg    grp_fu_2570_ce;
reg    grp_fu_2578_ce;
reg    grp_fu_2587_ce;
reg    grp_fu_2595_ce;
reg    grp_fu_2604_ce;
reg    grp_fu_2612_ce;
reg    grp_fu_2621_ce;
reg    grp_fu_2630_ce;
reg    grp_fu_2639_ce;
reg    grp_fu_2648_ce;
reg    grp_fu_2657_ce;
reg    grp_fu_2666_ce;
reg    grp_fu_2675_ce;
reg    grp_fu_2684_ce;
reg    grp_fu_2693_ce;
reg    grp_fu_2702_ce;
reg    grp_fu_2711_ce;
reg    grp_fu_2720_ce;
reg    grp_fu_2729_ce;
reg    grp_fu_2738_ce;
reg    grp_fu_2747_ce;
reg    grp_fu_2756_ce;
reg    grp_fu_2764_ce;
reg    grp_fu_2772_ce;
reg    grp_fu_2780_ce;
reg    grp_fu_2788_ce;
reg    grp_fu_2796_ce;
reg    grp_fu_2804_ce;
reg    grp_fu_2812_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
reg    ap_ST_iter10_fsm_state11_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_226;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg = 1'b0;
//#0 cit_fu_354 = 5'd0;
//#0 empty_fu_358 = 32'd0;
//#0 empty_55_fu_362 = 32'd0;
//#0 empty_56_fu_366 = 32'd0;
//#0 empty_57_fu_370 = 32'd0;
//#0 empty_58_fu_374 = 32'd0;
//#0 empty_59_fu_378 = 32'd0;
//#0 empty_60_fu_382 = 32'd0;
//#0 empty_61_fu_386 = 32'd0;
//#0 indvar_flatten_fu_390 = 9'd0;
//#0 indvar_flatten33_fu_394 = 12'd0;
//#0 indvar_flatten76_fu_398 = 15'd0;
end

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_reg_2953),
    .din1(grp_fu_1301_p1),
    .ce(grp_fu_1301_ce),
    .dout(grp_fu_1301_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_5_reg_2978),
    .din1(grp_fu_1313_p1),
    .ce(grp_fu_1313_ce),
    .dout(grp_fu_1313_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_8_reg_2993),
    .din1(grp_fu_1322_p1),
    .ce(grp_fu_1322_ce),
    .dout(grp_fu_1322_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_12_reg_3018),
    .din1(grp_fu_1331_p1),
    .ce(grp_fu_1331_ce),
    .dout(grp_fu_1331_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_15_reg_3033),
    .din1(grp_fu_1340_p1),
    .ce(grp_fu_1340_ce),
    .dout(grp_fu_1340_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_20_reg_3058),
    .din1(grp_fu_1349_p1),
    .ce(grp_fu_1349_ce),
    .dout(grp_fu_1349_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_23_reg_3073),
    .din1(grp_fu_1358_p1),
    .ce(grp_fu_1358_ce),
    .dout(grp_fu_1358_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_28_reg_3098),
    .din1(grp_fu_1367_p1),
    .ce(grp_fu_1367_ce),
    .dout(grp_fu_1367_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_31_reg_3113),
    .din1(grp_fu_1376_p1),
    .ce(grp_fu_1376_ce),
    .dout(grp_fu_1376_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_36_reg_3138),
    .din1(grp_fu_1385_p1),
    .ce(grp_fu_1385_ce),
    .dout(grp_fu_1385_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U123(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_39_reg_3153),
    .din1(grp_fu_1394_p1),
    .ce(grp_fu_1394_ce),
    .dout(grp_fu_1394_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_44_reg_3178),
    .din1(grp_fu_1403_p1),
    .ce(grp_fu_1403_ce),
    .dout(grp_fu_1403_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U125(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_47_reg_3193),
    .din1(grp_fu_1412_p1),
    .ce(grp_fu_1412_ce),
    .dout(grp_fu_1412_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_52_reg_3218),
    .din1(grp_fu_1421_p1),
    .ce(grp_fu_1421_ce),
    .dout(grp_fu_1421_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_55_reg_3233),
    .din1(grp_fu_1430_p1),
    .ce(grp_fu_1430_ce),
    .dout(grp_fu_1430_p2)
);

RV_GEMM_mul_8s_8s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_5_1_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_60_reg_3258),
    .din1(grp_fu_1439_p1),
    .ce(grp_fu_1439_ce),
    .dout(grp_fu_1439_p2)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U129(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_2_reg_2963_pp0_iter2_reg),
    .din1(grp_fu_2412_p1),
    .din2(grp_fu_1301_p2),
    .ce(grp_fu_2412_ce),
    .dout(grp_fu_2412_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U130(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_s_reg_3003_pp0_iter2_reg),
    .din1(grp_fu_2420_p1),
    .din2(grp_fu_1322_p2),
    .ce(grp_fu_2420_ce),
    .dout(grp_fu_2420_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U131(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_17_reg_3043_pp0_iter2_reg),
    .din1(grp_fu_2428_p1),
    .din2(grp_fu_1340_p2),
    .ce(grp_fu_2428_ce),
    .dout(grp_fu_2428_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U132(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_25_reg_3083_pp0_iter2_reg),
    .din1(grp_fu_2436_p1),
    .din2(grp_fu_1358_p2),
    .ce(grp_fu_2436_ce),
    .dout(grp_fu_2436_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U133(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_33_reg_3123_pp0_iter2_reg),
    .din1(grp_fu_2444_p1),
    .din2(grp_fu_1376_p2),
    .ce(grp_fu_2444_ce),
    .dout(grp_fu_2444_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U134(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_41_reg_3163_pp0_iter2_reg),
    .din1(grp_fu_2452_p1),
    .din2(grp_fu_1394_p2),
    .ce(grp_fu_2452_ce),
    .dout(grp_fu_2452_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U135(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_49_reg_3203_pp0_iter2_reg),
    .din1(grp_fu_2460_p1),
    .din2(grp_fu_1412_p2),
    .ce(grp_fu_2460_ce),
    .dout(grp_fu_2460_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_57_reg_3243_pp0_iter2_reg),
    .din1(grp_fu_2468_p1),
    .din2(grp_fu_1430_p2),
    .ce(grp_fu_2468_ce),
    .dout(grp_fu_2468_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_1_reg_2958_pp0_iter3_reg),
    .din1(grp_fu_2476_p1),
    .din2(grp_fu_2412_p3),
    .ce(grp_fu_2476_ce),
    .dout(grp_fu_2476_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_6_reg_2983_pp0_iter3_reg),
    .din1(grp_fu_2485_p1),
    .din2(mul_ln79_5_reg_3612),
    .ce(grp_fu_2485_ce),
    .dout(grp_fu_2485_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_9_reg_2998_pp0_iter3_reg),
    .din1(grp_fu_2493_p1),
    .din2(grp_fu_2420_p3),
    .ce(grp_fu_2493_ce),
    .dout(grp_fu_2493_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_13_reg_3023_pp0_iter3_reg),
    .din1(grp_fu_2502_p1),
    .din2(mul_ln79_13_reg_3632),
    .ce(grp_fu_2502_ce),
    .dout(grp_fu_2502_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_16_reg_3038_pp0_iter3_reg),
    .din1(grp_fu_2510_p1),
    .din2(grp_fu_2428_p3),
    .ce(grp_fu_2510_ce),
    .dout(grp_fu_2510_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_21_reg_3063_pp0_iter3_reg),
    .din1(grp_fu_2519_p1),
    .din2(mul_ln79_21_reg_3652),
    .ce(grp_fu_2519_ce),
    .dout(grp_fu_2519_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_24_reg_3078_pp0_iter3_reg),
    .din1(grp_fu_2527_p1),
    .din2(grp_fu_2436_p3),
    .ce(grp_fu_2527_ce),
    .dout(grp_fu_2527_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_29_reg_3103_pp0_iter3_reg),
    .din1(grp_fu_2536_p1),
    .din2(mul_ln79_29_reg_3672),
    .ce(grp_fu_2536_ce),
    .dout(grp_fu_2536_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_32_reg_3118_pp0_iter3_reg),
    .din1(grp_fu_2544_p1),
    .din2(grp_fu_2444_p3),
    .ce(grp_fu_2544_ce),
    .dout(grp_fu_2544_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_37_reg_3143_pp0_iter3_reg),
    .din1(grp_fu_2553_p1),
    .din2(mul_ln79_37_reg_3692),
    .ce(grp_fu_2553_ce),
    .dout(grp_fu_2553_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_40_reg_3158_pp0_iter3_reg),
    .din1(grp_fu_2561_p1),
    .din2(grp_fu_2452_p3),
    .ce(grp_fu_2561_ce),
    .dout(grp_fu_2561_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_45_reg_3183_pp0_iter3_reg),
    .din1(grp_fu_2570_p1),
    .din2(mul_ln79_45_reg_3712),
    .ce(grp_fu_2570_ce),
    .dout(grp_fu_2570_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_48_reg_3198_pp0_iter3_reg),
    .din1(grp_fu_2578_p1),
    .din2(grp_fu_2460_p3),
    .ce(grp_fu_2578_ce),
    .dout(grp_fu_2578_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_53_reg_3223_pp0_iter3_reg),
    .din1(grp_fu_2587_p1),
    .din2(mul_ln79_53_reg_3732),
    .ce(grp_fu_2587_ce),
    .dout(grp_fu_2587_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_56_reg_3238_pp0_iter3_reg),
    .din1(grp_fu_2595_p1),
    .din2(grp_fu_2468_p3),
    .ce(grp_fu_2595_ce),
    .dout(grp_fu_2595_p3)
);

RV_GEMM_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_61_reg_3263_pp0_iter3_reg),
    .din1(grp_fu_2604_p1),
    .din2(mul_ln79_61_reg_3752),
    .ce(grp_fu_2604_ce),
    .dout(grp_fu_2604_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_3_reg_2968_pp0_iter4_reg),
    .din1(grp_fu_2612_p1),
    .din2(grp_fu_2476_p3),
    .ce(grp_fu_2612_ce),
    .dout(grp_fu_2612_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_4_reg_2973_pp0_iter4_reg),
    .din1(grp_fu_2621_p1),
    .din2(grp_fu_2485_p3),
    .ce(grp_fu_2621_ce),
    .dout(grp_fu_2621_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U155(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_10_reg_3008_pp0_iter4_reg),
    .din1(grp_fu_2630_p1),
    .din2(grp_fu_2493_p3),
    .ce(grp_fu_2630_ce),
    .dout(grp_fu_2630_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_11_reg_3013_pp0_iter4_reg),
    .din1(grp_fu_2639_p1),
    .din2(grp_fu_2502_p3),
    .ce(grp_fu_2639_ce),
    .dout(grp_fu_2639_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_18_reg_3048_pp0_iter4_reg),
    .din1(grp_fu_2648_p1),
    .din2(grp_fu_2510_p3),
    .ce(grp_fu_2648_ce),
    .dout(grp_fu_2648_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_19_reg_3053_pp0_iter4_reg),
    .din1(grp_fu_2657_p1),
    .din2(grp_fu_2519_p3),
    .ce(grp_fu_2657_ce),
    .dout(grp_fu_2657_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_26_reg_3088_pp0_iter4_reg),
    .din1(grp_fu_2666_p1),
    .din2(grp_fu_2527_p3),
    .ce(grp_fu_2666_ce),
    .dout(grp_fu_2666_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_27_reg_3093_pp0_iter4_reg),
    .din1(grp_fu_2675_p1),
    .din2(grp_fu_2536_p3),
    .ce(grp_fu_2675_ce),
    .dout(grp_fu_2675_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_34_reg_3128_pp0_iter4_reg),
    .din1(grp_fu_2684_p1),
    .din2(grp_fu_2544_p3),
    .ce(grp_fu_2684_ce),
    .dout(grp_fu_2684_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_35_reg_3133_pp0_iter4_reg),
    .din1(grp_fu_2693_p1),
    .din2(grp_fu_2553_p3),
    .ce(grp_fu_2693_ce),
    .dout(grp_fu_2693_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_42_reg_3168_pp0_iter4_reg),
    .din1(grp_fu_2702_p1),
    .din2(grp_fu_2561_p3),
    .ce(grp_fu_2702_ce),
    .dout(grp_fu_2702_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_43_reg_3173_pp0_iter4_reg),
    .din1(grp_fu_2711_p1),
    .din2(grp_fu_2570_p3),
    .ce(grp_fu_2711_ce),
    .dout(grp_fu_2711_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_50_reg_3208_pp0_iter4_reg),
    .din1(grp_fu_2720_p1),
    .din2(grp_fu_2578_p3),
    .ce(grp_fu_2720_ce),
    .dout(grp_fu_2720_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_51_reg_3213_pp0_iter4_reg),
    .din1(grp_fu_2729_p1),
    .din2(grp_fu_2587_p3),
    .ce(grp_fu_2729_ce),
    .dout(grp_fu_2729_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_4_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_58_reg_3248_pp0_iter4_reg),
    .din1(grp_fu_2738_p1),
    .din2(grp_fu_2595_p3),
    .ce(grp_fu_2738_ce),
    .dout(grp_fu_2738_p3)
);

RV_GEMM_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_59_reg_3253_pp0_iter4_reg),
    .din1(grp_fu_2747_p1),
    .din2(grp_fu_2604_p3),
    .ce(grp_fu_2747_ce),
    .dout(grp_fu_2747_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_7_reg_2988_pp0_iter5_reg),
    .din1(grp_fu_2756_p1),
    .din2(add_ln79_5_fu_1810_p2),
    .ce(grp_fu_2756_ce),
    .dout(grp_fu_2756_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_14_reg_3028_pp0_iter5_reg),
    .din1(grp_fu_2764_p1),
    .din2(add_ln79_12_fu_1822_p2),
    .ce(grp_fu_2764_ce),
    .dout(grp_fu_2764_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_22_reg_3068_pp0_iter5_reg),
    .din1(grp_fu_2772_p1),
    .din2(add_ln79_19_fu_1834_p2),
    .ce(grp_fu_2772_ce),
    .dout(grp_fu_2772_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_30_reg_3108_pp0_iter5_reg),
    .din1(grp_fu_2780_p1),
    .din2(add_ln79_26_fu_1846_p2),
    .ce(grp_fu_2780_ce),
    .dout(grp_fu_2780_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_38_reg_3148_pp0_iter5_reg),
    .din1(grp_fu_2788_p1),
    .din2(add_ln79_33_fu_1858_p2),
    .ce(grp_fu_2788_ce),
    .dout(grp_fu_2788_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_46_reg_3188_pp0_iter5_reg),
    .din1(grp_fu_2796_p1),
    .din2(add_ln79_40_fu_1870_p2),
    .ce(grp_fu_2796_ce),
    .dout(grp_fu_2796_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U175(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_54_reg_3228_pp0_iter5_reg),
    .din1(grp_fu_2804_p1),
    .din2(add_ln79_47_fu_1882_p2),
    .ce(grp_fu_2804_ce),
    .dout(grp_fu_2804_p3)
);

RV_GEMM_mac_muladd_8s_8s_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_4_1_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln66_62_reg_3268_pp0_iter5_reg),
    .din1(grp_fu_2812_p1),
    .din2(add_ln79_54_fu_1894_p2),
    .ce(grp_fu_2812_ce),
    .dout(grp_fu_2812_p3)
);

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter9_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter2_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter3_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter4_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter5_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter6_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter7_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter8_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        cit_fu_354 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (icmp_ln48_reg_2904_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        cit_fu_354 <= cit_1_fu_1903_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_55_fu_362 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_55_fu_362 <= add_ln89_3_fu_2127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_56_fu_366 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_56_fu_366 <= add_ln89_5_fu_2142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_57_fu_370 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_57_fu_370 <= add_ln89_7_fu_2157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_58_fu_374 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_58_fu_374 <= add_ln89_9_fu_2172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_59_fu_378 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_59_fu_378 <= add_ln89_11_fu_2187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_60_fu_382 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_60_fu_382 <= add_ln89_13_fu_2202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_61_fu_386 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_61_fu_386 <= add_ln89_15_fu_2217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        empty_fu_358 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        empty_fu_358 <= add_ln89_1_fu_2112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        indvar_flatten33_fu_394 <= 12'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (icmp_ln48_reg_2904_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        indvar_flatten33_fu_394 <= select_ln49_fu_1678_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_226)) begin
        if ((icmp_ln48_fu_496_p2 == 1'd0)) begin
            indvar_flatten76_fu_398 <= add_ln48_fu_502_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten76_fu_398 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        indvar_flatten_fu_390 <= 9'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (icmp_ln48_reg_2904_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        indvar_flatten_fu_390 <= select_ln50_1_fu_1746_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        add_ln79_13_reg_4055 <= grp_fu_2764_p3;
        add_ln79_20_reg_4060 <= grp_fu_2772_p3;
        add_ln79_27_reg_4065 <= grp_fu_2780_p3;
        add_ln79_34_reg_4070 <= grp_fu_2788_p3;
        add_ln79_41_reg_4075 <= grp_fu_2796_p3;
        add_ln79_48_reg_4080 <= grp_fu_2804_p3;
        add_ln79_55_reg_4085 <= grp_fu_2812_p3;
        add_ln79_6_reg_4050 <= grp_fu_2756_p3;
        add_ln89_10_reg_4115 <= add_ln89_10_fu_1970_p2;
        add_ln89_12_reg_4120 <= add_ln89_12_fu_1979_p2;
        add_ln89_14_reg_4125 <= add_ln89_14_fu_1988_p2;
        add_ln89_2_reg_4095 <= add_ln89_2_fu_1934_p2;
        add_ln89_4_reg_4100 <= add_ln89_4_fu_1943_p2;
        add_ln89_6_reg_4105 <= add_ln89_6_fu_1952_p2;
        add_ln89_8_reg_4110 <= add_ln89_8_fu_1961_p2;
        add_ln89_reg_4090 <= add_ln89_fu_1925_p2;
        icmp_ln48_reg_2904_pp0_iter9_reg <= icmp_ln48_reg_2904_pp0_iter8_reg;
        icmp_ln54_reg_4038 <= icmp_ln54_fu_1914_p2;
        icmp_ln93_reg_4130 <= icmp_ln93_fu_1994_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        and_ln48_1_reg_3907 <= and_ln48_1_fu_1705_p2;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln48_reg_2904_pp0_iter7_reg <= icmp_ln48_reg_2904_pp0_iter6_reg;
        icmp_ln49_reg_3757_pp0_iter7_reg <= icmp_ln49_reg_3757;
        icmp_ln50_reg_3902 <= icmp_ln50_fu_1699_p2;
        rs_stream_r_read_reg_2948_pp0_iter7_reg <= rs_stream_r_read_reg_2948_pp0_iter6_reg;
        tmp_1_reg_3288_pp0_iter7_reg <= tmp_1_reg_3288_pp0_iter6_reg;
        tmp_2_reg_3293_pp0_iter7_reg <= tmp_2_reg_3293_pp0_iter6_reg;
        tmp_3_reg_3298_pp0_iter7_reg <= tmp_3_reg_3298_pp0_iter6_reg;
        tmp_4_reg_3303_pp0_iter7_reg <= tmp_4_reg_3303_pp0_iter6_reg;
        tmp_5_reg_3308_pp0_iter7_reg <= tmp_5_reg_3308_pp0_iter6_reg;
        tmp_reg_3278_pp0_iter7_reg <= tmp_reg_3278_pp0_iter6_reg;
        tmp_s_reg_3283_pp0_iter7_reg <= tmp_s_reg_3283_pp0_iter6_reg;
        trunc_ln67_reg_3273_pp0_iter7_reg <= trunc_ln67_reg_3273_pp0_iter6_reg;
        xor_ln48_reg_3897 <= xor_ln48_fu_1694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln48_reg_2904 <= icmp_ln48_fu_496_p2;
        rs_stream_r_read_reg_2948 <= rs_stream_r_dout;
        tmp_1_reg_3288 <= {{vs_stream_r_dout[15:12]}};
        tmp_2_reg_3293 <= {{vs_stream_r_dout[19:16]}};
        tmp_3_reg_3298 <= {{vs_stream_r_dout[23:20]}};
        tmp_4_reg_3303 <= {{vs_stream_r_dout[27:24]}};
        tmp_5_reg_3308 <= {{vs_stream_r_dout[31:28]}};
        tmp_reg_3278 <= {{vs_stream_r_dout[7:4]}};
        tmp_s_reg_3283 <= {{vs_stream_r_dout[11:8]}};
        trunc_ln64_1_reg_2913 <= {{rq_stream_r_dout[15:8]}};
        trunc_ln64_2_reg_2918 <= {{rq_stream_r_dout[23:16]}};
        trunc_ln64_3_reg_2923 <= {{rq_stream_r_dout[31:24]}};
        trunc_ln64_4_reg_2928 <= {{rq_stream_r_dout[39:32]}};
        trunc_ln64_5_reg_2933 <= {{rq_stream_r_dout[47:40]}};
        trunc_ln64_6_reg_2938 <= {{rq_stream_r_dout[55:48]}};
        trunc_ln64_7_reg_2943 <= {{rq_stream_r_dout[63:56]}};
        trunc_ln64_reg_2908 <= trunc_ln64_fu_508_p1;
        trunc_ln66_10_reg_3008 <= {{vq_stream_r_dout[95:88]}};
        trunc_ln66_11_reg_3013 <= {{vq_stream_r_dout[103:96]}};
        trunc_ln66_12_reg_3018 <= {{vq_stream_r_dout[111:104]}};
        trunc_ln66_13_reg_3023 <= {{vq_stream_r_dout[119:112]}};
        trunc_ln66_14_reg_3028 <= {{vq_stream_r_dout[127:120]}};
        trunc_ln66_15_reg_3033 <= {{vq_stream_r_dout[135:128]}};
        trunc_ln66_16_reg_3038 <= {{vq_stream_r_dout[143:136]}};
        trunc_ln66_17_reg_3043 <= {{vq_stream_r_dout[151:144]}};
        trunc_ln66_18_reg_3048 <= {{vq_stream_r_dout[159:152]}};
        trunc_ln66_19_reg_3053 <= {{vq_stream_r_dout[167:160]}};
        trunc_ln66_1_reg_2958 <= {{vq_stream_r_dout[15:8]}};
        trunc_ln66_20_reg_3058 <= {{vq_stream_r_dout[175:168]}};
        trunc_ln66_21_reg_3063 <= {{vq_stream_r_dout[183:176]}};
        trunc_ln66_22_reg_3068 <= {{vq_stream_r_dout[191:184]}};
        trunc_ln66_23_reg_3073 <= {{vq_stream_r_dout[199:192]}};
        trunc_ln66_24_reg_3078 <= {{vq_stream_r_dout[207:200]}};
        trunc_ln66_25_reg_3083 <= {{vq_stream_r_dout[215:208]}};
        trunc_ln66_26_reg_3088 <= {{vq_stream_r_dout[223:216]}};
        trunc_ln66_27_reg_3093 <= {{vq_stream_r_dout[231:224]}};
        trunc_ln66_28_reg_3098 <= {{vq_stream_r_dout[239:232]}};
        trunc_ln66_29_reg_3103 <= {{vq_stream_r_dout[247:240]}};
        trunc_ln66_2_reg_2963 <= {{vq_stream_r_dout[23:16]}};
        trunc_ln66_30_reg_3108 <= {{vq_stream_r_dout[255:248]}};
        trunc_ln66_31_reg_3113 <= {{vq_stream_r_dout[263:256]}};
        trunc_ln66_32_reg_3118 <= {{vq_stream_r_dout[271:264]}};
        trunc_ln66_33_reg_3123 <= {{vq_stream_r_dout[279:272]}};
        trunc_ln66_34_reg_3128 <= {{vq_stream_r_dout[287:280]}};
        trunc_ln66_35_reg_3133 <= {{vq_stream_r_dout[295:288]}};
        trunc_ln66_36_reg_3138 <= {{vq_stream_r_dout[303:296]}};
        trunc_ln66_37_reg_3143 <= {{vq_stream_r_dout[311:304]}};
        trunc_ln66_38_reg_3148 <= {{vq_stream_r_dout[319:312]}};
        trunc_ln66_39_reg_3153 <= {{vq_stream_r_dout[327:320]}};
        trunc_ln66_3_reg_2968 <= {{vq_stream_r_dout[31:24]}};
        trunc_ln66_40_reg_3158 <= {{vq_stream_r_dout[335:328]}};
        trunc_ln66_41_reg_3163 <= {{vq_stream_r_dout[343:336]}};
        trunc_ln66_42_reg_3168 <= {{vq_stream_r_dout[351:344]}};
        trunc_ln66_43_reg_3173 <= {{vq_stream_r_dout[359:352]}};
        trunc_ln66_44_reg_3178 <= {{vq_stream_r_dout[367:360]}};
        trunc_ln66_45_reg_3183 <= {{vq_stream_r_dout[375:368]}};
        trunc_ln66_46_reg_3188 <= {{vq_stream_r_dout[383:376]}};
        trunc_ln66_47_reg_3193 <= {{vq_stream_r_dout[391:384]}};
        trunc_ln66_48_reg_3198 <= {{vq_stream_r_dout[399:392]}};
        trunc_ln66_49_reg_3203 <= {{vq_stream_r_dout[407:400]}};
        trunc_ln66_4_reg_2973 <= {{vq_stream_r_dout[39:32]}};
        trunc_ln66_50_reg_3208 <= {{vq_stream_r_dout[415:408]}};
        trunc_ln66_51_reg_3213 <= {{vq_stream_r_dout[423:416]}};
        trunc_ln66_52_reg_3218 <= {{vq_stream_r_dout[431:424]}};
        trunc_ln66_53_reg_3223 <= {{vq_stream_r_dout[439:432]}};
        trunc_ln66_54_reg_3228 <= {{vq_stream_r_dout[447:440]}};
        trunc_ln66_55_reg_3233 <= {{vq_stream_r_dout[455:448]}};
        trunc_ln66_56_reg_3238 <= {{vq_stream_r_dout[463:456]}};
        trunc_ln66_57_reg_3243 <= {{vq_stream_r_dout[471:464]}};
        trunc_ln66_58_reg_3248 <= {{vq_stream_r_dout[479:472]}};
        trunc_ln66_59_reg_3253 <= {{vq_stream_r_dout[487:480]}};
        trunc_ln66_5_reg_2978 <= {{vq_stream_r_dout[47:40]}};
        trunc_ln66_60_reg_3258 <= {{vq_stream_r_dout[495:488]}};
        trunc_ln66_61_reg_3263 <= {{vq_stream_r_dout[503:496]}};
        trunc_ln66_62_reg_3268 <= {{vq_stream_r_dout[511:504]}};
        trunc_ln66_6_reg_2983 <= {{vq_stream_r_dout[55:48]}};
        trunc_ln66_7_reg_2988 <= {{vq_stream_r_dout[63:56]}};
        trunc_ln66_8_reg_2993 <= {{vq_stream_r_dout[71:64]}};
        trunc_ln66_9_reg_2998 <= {{vq_stream_r_dout[79:72]}};
        trunc_ln66_reg_2953 <= trunc_ln66_fu_582_p1;
        trunc_ln66_s_reg_3003 <= {{vq_stream_r_dout[87:80]}};
        trunc_ln67_reg_3273 <= trunc_ln67_fu_1216_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln48_reg_2904_pp0_iter1_reg <= icmp_ln48_reg_2904;
        rs_stream_r_read_reg_2948_pp0_iter1_reg <= rs_stream_r_read_reg_2948;
        tmp_1_reg_3288_pp0_iter1_reg <= tmp_1_reg_3288;
        tmp_2_reg_3293_pp0_iter1_reg <= tmp_2_reg_3293;
        tmp_3_reg_3298_pp0_iter1_reg <= tmp_3_reg_3298;
        tmp_4_reg_3303_pp0_iter1_reg <= tmp_4_reg_3303;
        tmp_5_reg_3308_pp0_iter1_reg <= tmp_5_reg_3308;
        tmp_reg_3278_pp0_iter1_reg <= tmp_reg_3278;
        tmp_s_reg_3283_pp0_iter1_reg <= tmp_s_reg_3283;
        trunc_ln64_1_reg_2913_pp0_iter1_reg <= trunc_ln64_1_reg_2913;
        trunc_ln64_2_reg_2918_pp0_iter1_reg <= trunc_ln64_2_reg_2918;
        trunc_ln64_3_reg_2923_pp0_iter1_reg <= trunc_ln64_3_reg_2923;
        trunc_ln64_4_reg_2928_pp0_iter1_reg <= trunc_ln64_4_reg_2928;
        trunc_ln64_6_reg_2938_pp0_iter1_reg <= trunc_ln64_6_reg_2938;
        trunc_ln64_7_reg_2943_pp0_iter1_reg <= trunc_ln64_7_reg_2943;
        trunc_ln66_10_reg_3008_pp0_iter1_reg <= trunc_ln66_10_reg_3008;
        trunc_ln66_11_reg_3013_pp0_iter1_reg <= trunc_ln66_11_reg_3013;
        trunc_ln66_13_reg_3023_pp0_iter1_reg <= trunc_ln66_13_reg_3023;
        trunc_ln66_14_reg_3028_pp0_iter1_reg <= trunc_ln66_14_reg_3028;
        trunc_ln66_16_reg_3038_pp0_iter1_reg <= trunc_ln66_16_reg_3038;
        trunc_ln66_17_reg_3043_pp0_iter1_reg <= trunc_ln66_17_reg_3043;
        trunc_ln66_18_reg_3048_pp0_iter1_reg <= trunc_ln66_18_reg_3048;
        trunc_ln66_19_reg_3053_pp0_iter1_reg <= trunc_ln66_19_reg_3053;
        trunc_ln66_1_reg_2958_pp0_iter1_reg <= trunc_ln66_1_reg_2958;
        trunc_ln66_21_reg_3063_pp0_iter1_reg <= trunc_ln66_21_reg_3063;
        trunc_ln66_22_reg_3068_pp0_iter1_reg <= trunc_ln66_22_reg_3068;
        trunc_ln66_24_reg_3078_pp0_iter1_reg <= trunc_ln66_24_reg_3078;
        trunc_ln66_25_reg_3083_pp0_iter1_reg <= trunc_ln66_25_reg_3083;
        trunc_ln66_26_reg_3088_pp0_iter1_reg <= trunc_ln66_26_reg_3088;
        trunc_ln66_27_reg_3093_pp0_iter1_reg <= trunc_ln66_27_reg_3093;
        trunc_ln66_29_reg_3103_pp0_iter1_reg <= trunc_ln66_29_reg_3103;
        trunc_ln66_2_reg_2963_pp0_iter1_reg <= trunc_ln66_2_reg_2963;
        trunc_ln66_30_reg_3108_pp0_iter1_reg <= trunc_ln66_30_reg_3108;
        trunc_ln66_32_reg_3118_pp0_iter1_reg <= trunc_ln66_32_reg_3118;
        trunc_ln66_33_reg_3123_pp0_iter1_reg <= trunc_ln66_33_reg_3123;
        trunc_ln66_34_reg_3128_pp0_iter1_reg <= trunc_ln66_34_reg_3128;
        trunc_ln66_35_reg_3133_pp0_iter1_reg <= trunc_ln66_35_reg_3133;
        trunc_ln66_37_reg_3143_pp0_iter1_reg <= trunc_ln66_37_reg_3143;
        trunc_ln66_38_reg_3148_pp0_iter1_reg <= trunc_ln66_38_reg_3148;
        trunc_ln66_3_reg_2968_pp0_iter1_reg <= trunc_ln66_3_reg_2968;
        trunc_ln66_40_reg_3158_pp0_iter1_reg <= trunc_ln66_40_reg_3158;
        trunc_ln66_41_reg_3163_pp0_iter1_reg <= trunc_ln66_41_reg_3163;
        trunc_ln66_42_reg_3168_pp0_iter1_reg <= trunc_ln66_42_reg_3168;
        trunc_ln66_43_reg_3173_pp0_iter1_reg <= trunc_ln66_43_reg_3173;
        trunc_ln66_45_reg_3183_pp0_iter1_reg <= trunc_ln66_45_reg_3183;
        trunc_ln66_46_reg_3188_pp0_iter1_reg <= trunc_ln66_46_reg_3188;
        trunc_ln66_48_reg_3198_pp0_iter1_reg <= trunc_ln66_48_reg_3198;
        trunc_ln66_49_reg_3203_pp0_iter1_reg <= trunc_ln66_49_reg_3203;
        trunc_ln66_4_reg_2973_pp0_iter1_reg <= trunc_ln66_4_reg_2973;
        trunc_ln66_50_reg_3208_pp0_iter1_reg <= trunc_ln66_50_reg_3208;
        trunc_ln66_51_reg_3213_pp0_iter1_reg <= trunc_ln66_51_reg_3213;
        trunc_ln66_53_reg_3223_pp0_iter1_reg <= trunc_ln66_53_reg_3223;
        trunc_ln66_54_reg_3228_pp0_iter1_reg <= trunc_ln66_54_reg_3228;
        trunc_ln66_56_reg_3238_pp0_iter1_reg <= trunc_ln66_56_reg_3238;
        trunc_ln66_57_reg_3243_pp0_iter1_reg <= trunc_ln66_57_reg_3243;
        trunc_ln66_58_reg_3248_pp0_iter1_reg <= trunc_ln66_58_reg_3248;
        trunc_ln66_59_reg_3253_pp0_iter1_reg <= trunc_ln66_59_reg_3253;
        trunc_ln66_61_reg_3263_pp0_iter1_reg <= trunc_ln66_61_reg_3263;
        trunc_ln66_62_reg_3268_pp0_iter1_reg <= trunc_ln66_62_reg_3268;
        trunc_ln66_6_reg_2983_pp0_iter1_reg <= trunc_ln66_6_reg_2983;
        trunc_ln66_7_reg_2988_pp0_iter1_reg <= trunc_ln66_7_reg_2988;
        trunc_ln66_9_reg_2998_pp0_iter1_reg <= trunc_ln66_9_reg_2998;
        trunc_ln66_s_reg_3003_pp0_iter1_reg <= trunc_ln66_s_reg_3003;
        trunc_ln67_reg_3273_pp0_iter1_reg <= trunc_ln67_reg_3273;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln48_reg_2904_pp0_iter2_reg <= icmp_ln48_reg_2904_pp0_iter1_reg;
        rs_stream_r_read_reg_2948_pp0_iter2_reg <= rs_stream_r_read_reg_2948_pp0_iter1_reg;
        tmp_1_reg_3288_pp0_iter2_reg <= tmp_1_reg_3288_pp0_iter1_reg;
        tmp_2_reg_3293_pp0_iter2_reg <= tmp_2_reg_3293_pp0_iter1_reg;
        tmp_3_reg_3298_pp0_iter2_reg <= tmp_3_reg_3298_pp0_iter1_reg;
        tmp_4_reg_3303_pp0_iter2_reg <= tmp_4_reg_3303_pp0_iter1_reg;
        tmp_5_reg_3308_pp0_iter2_reg <= tmp_5_reg_3308_pp0_iter1_reg;
        tmp_reg_3278_pp0_iter2_reg <= tmp_reg_3278_pp0_iter1_reg;
        tmp_s_reg_3283_pp0_iter2_reg <= tmp_s_reg_3283_pp0_iter1_reg;
        trunc_ln64_1_reg_2913_pp0_iter2_reg <= trunc_ln64_1_reg_2913_pp0_iter1_reg;
        trunc_ln64_2_reg_2918_pp0_iter2_reg <= trunc_ln64_2_reg_2918_pp0_iter1_reg;
        trunc_ln64_3_reg_2923_pp0_iter2_reg <= trunc_ln64_3_reg_2923_pp0_iter1_reg;
        trunc_ln64_4_reg_2928_pp0_iter2_reg <= trunc_ln64_4_reg_2928_pp0_iter1_reg;
        trunc_ln64_6_reg_2938_pp0_iter2_reg <= trunc_ln64_6_reg_2938_pp0_iter1_reg;
        trunc_ln64_7_reg_2943_pp0_iter2_reg <= trunc_ln64_7_reg_2943_pp0_iter1_reg;
        trunc_ln66_10_reg_3008_pp0_iter2_reg <= trunc_ln66_10_reg_3008_pp0_iter1_reg;
        trunc_ln66_11_reg_3013_pp0_iter2_reg <= trunc_ln66_11_reg_3013_pp0_iter1_reg;
        trunc_ln66_13_reg_3023_pp0_iter2_reg <= trunc_ln66_13_reg_3023_pp0_iter1_reg;
        trunc_ln66_14_reg_3028_pp0_iter2_reg <= trunc_ln66_14_reg_3028_pp0_iter1_reg;
        trunc_ln66_16_reg_3038_pp0_iter2_reg <= trunc_ln66_16_reg_3038_pp0_iter1_reg;
        trunc_ln66_17_reg_3043_pp0_iter2_reg <= trunc_ln66_17_reg_3043_pp0_iter1_reg;
        trunc_ln66_18_reg_3048_pp0_iter2_reg <= trunc_ln66_18_reg_3048_pp0_iter1_reg;
        trunc_ln66_19_reg_3053_pp0_iter2_reg <= trunc_ln66_19_reg_3053_pp0_iter1_reg;
        trunc_ln66_1_reg_2958_pp0_iter2_reg <= trunc_ln66_1_reg_2958_pp0_iter1_reg;
        trunc_ln66_21_reg_3063_pp0_iter2_reg <= trunc_ln66_21_reg_3063_pp0_iter1_reg;
        trunc_ln66_22_reg_3068_pp0_iter2_reg <= trunc_ln66_22_reg_3068_pp0_iter1_reg;
        trunc_ln66_24_reg_3078_pp0_iter2_reg <= trunc_ln66_24_reg_3078_pp0_iter1_reg;
        trunc_ln66_25_reg_3083_pp0_iter2_reg <= trunc_ln66_25_reg_3083_pp0_iter1_reg;
        trunc_ln66_26_reg_3088_pp0_iter2_reg <= trunc_ln66_26_reg_3088_pp0_iter1_reg;
        trunc_ln66_27_reg_3093_pp0_iter2_reg <= trunc_ln66_27_reg_3093_pp0_iter1_reg;
        trunc_ln66_29_reg_3103_pp0_iter2_reg <= trunc_ln66_29_reg_3103_pp0_iter1_reg;
        trunc_ln66_2_reg_2963_pp0_iter2_reg <= trunc_ln66_2_reg_2963_pp0_iter1_reg;
        trunc_ln66_30_reg_3108_pp0_iter2_reg <= trunc_ln66_30_reg_3108_pp0_iter1_reg;
        trunc_ln66_32_reg_3118_pp0_iter2_reg <= trunc_ln66_32_reg_3118_pp0_iter1_reg;
        trunc_ln66_33_reg_3123_pp0_iter2_reg <= trunc_ln66_33_reg_3123_pp0_iter1_reg;
        trunc_ln66_34_reg_3128_pp0_iter2_reg <= trunc_ln66_34_reg_3128_pp0_iter1_reg;
        trunc_ln66_35_reg_3133_pp0_iter2_reg <= trunc_ln66_35_reg_3133_pp0_iter1_reg;
        trunc_ln66_37_reg_3143_pp0_iter2_reg <= trunc_ln66_37_reg_3143_pp0_iter1_reg;
        trunc_ln66_38_reg_3148_pp0_iter2_reg <= trunc_ln66_38_reg_3148_pp0_iter1_reg;
        trunc_ln66_3_reg_2968_pp0_iter2_reg <= trunc_ln66_3_reg_2968_pp0_iter1_reg;
        trunc_ln66_40_reg_3158_pp0_iter2_reg <= trunc_ln66_40_reg_3158_pp0_iter1_reg;
        trunc_ln66_41_reg_3163_pp0_iter2_reg <= trunc_ln66_41_reg_3163_pp0_iter1_reg;
        trunc_ln66_42_reg_3168_pp0_iter2_reg <= trunc_ln66_42_reg_3168_pp0_iter1_reg;
        trunc_ln66_43_reg_3173_pp0_iter2_reg <= trunc_ln66_43_reg_3173_pp0_iter1_reg;
        trunc_ln66_45_reg_3183_pp0_iter2_reg <= trunc_ln66_45_reg_3183_pp0_iter1_reg;
        trunc_ln66_46_reg_3188_pp0_iter2_reg <= trunc_ln66_46_reg_3188_pp0_iter1_reg;
        trunc_ln66_48_reg_3198_pp0_iter2_reg <= trunc_ln66_48_reg_3198_pp0_iter1_reg;
        trunc_ln66_49_reg_3203_pp0_iter2_reg <= trunc_ln66_49_reg_3203_pp0_iter1_reg;
        trunc_ln66_4_reg_2973_pp0_iter2_reg <= trunc_ln66_4_reg_2973_pp0_iter1_reg;
        trunc_ln66_50_reg_3208_pp0_iter2_reg <= trunc_ln66_50_reg_3208_pp0_iter1_reg;
        trunc_ln66_51_reg_3213_pp0_iter2_reg <= trunc_ln66_51_reg_3213_pp0_iter1_reg;
        trunc_ln66_53_reg_3223_pp0_iter2_reg <= trunc_ln66_53_reg_3223_pp0_iter1_reg;
        trunc_ln66_54_reg_3228_pp0_iter2_reg <= trunc_ln66_54_reg_3228_pp0_iter1_reg;
        trunc_ln66_56_reg_3238_pp0_iter2_reg <= trunc_ln66_56_reg_3238_pp0_iter1_reg;
        trunc_ln66_57_reg_3243_pp0_iter2_reg <= trunc_ln66_57_reg_3243_pp0_iter1_reg;
        trunc_ln66_58_reg_3248_pp0_iter2_reg <= trunc_ln66_58_reg_3248_pp0_iter1_reg;
        trunc_ln66_59_reg_3253_pp0_iter2_reg <= trunc_ln66_59_reg_3253_pp0_iter1_reg;
        trunc_ln66_61_reg_3263_pp0_iter2_reg <= trunc_ln66_61_reg_3263_pp0_iter1_reg;
        trunc_ln66_62_reg_3268_pp0_iter2_reg <= trunc_ln66_62_reg_3268_pp0_iter1_reg;
        trunc_ln66_6_reg_2983_pp0_iter2_reg <= trunc_ln66_6_reg_2983_pp0_iter1_reg;
        trunc_ln66_7_reg_2988_pp0_iter2_reg <= trunc_ln66_7_reg_2988_pp0_iter1_reg;
        trunc_ln66_9_reg_2998_pp0_iter2_reg <= trunc_ln66_9_reg_2998_pp0_iter1_reg;
        trunc_ln66_s_reg_3003_pp0_iter2_reg <= trunc_ln66_s_reg_3003_pp0_iter1_reg;
        trunc_ln67_reg_3273_pp0_iter2_reg <= trunc_ln67_reg_3273_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln48_reg_2904_pp0_iter3_reg <= icmp_ln48_reg_2904_pp0_iter2_reg;
        rs_stream_r_read_reg_2948_pp0_iter3_reg <= rs_stream_r_read_reg_2948_pp0_iter2_reg;
        tmp_1_reg_3288_pp0_iter3_reg <= tmp_1_reg_3288_pp0_iter2_reg;
        tmp_2_reg_3293_pp0_iter3_reg <= tmp_2_reg_3293_pp0_iter2_reg;
        tmp_3_reg_3298_pp0_iter3_reg <= tmp_3_reg_3298_pp0_iter2_reg;
        tmp_4_reg_3303_pp0_iter3_reg <= tmp_4_reg_3303_pp0_iter2_reg;
        tmp_5_reg_3308_pp0_iter3_reg <= tmp_5_reg_3308_pp0_iter2_reg;
        tmp_reg_3278_pp0_iter3_reg <= tmp_reg_3278_pp0_iter2_reg;
        tmp_s_reg_3283_pp0_iter3_reg <= tmp_s_reg_3283_pp0_iter2_reg;
        trunc_ln64_1_reg_2913_pp0_iter3_reg <= trunc_ln64_1_reg_2913_pp0_iter2_reg;
        trunc_ln64_3_reg_2923_pp0_iter3_reg <= trunc_ln64_3_reg_2923_pp0_iter2_reg;
        trunc_ln64_4_reg_2928_pp0_iter3_reg <= trunc_ln64_4_reg_2928_pp0_iter2_reg;
        trunc_ln64_6_reg_2938_pp0_iter3_reg <= trunc_ln64_6_reg_2938_pp0_iter2_reg;
        trunc_ln64_7_reg_2943_pp0_iter3_reg <= trunc_ln64_7_reg_2943_pp0_iter2_reg;
        trunc_ln66_10_reg_3008_pp0_iter3_reg <= trunc_ln66_10_reg_3008_pp0_iter2_reg;
        trunc_ln66_11_reg_3013_pp0_iter3_reg <= trunc_ln66_11_reg_3013_pp0_iter2_reg;
        trunc_ln66_13_reg_3023_pp0_iter3_reg <= trunc_ln66_13_reg_3023_pp0_iter2_reg;
        trunc_ln66_14_reg_3028_pp0_iter3_reg <= trunc_ln66_14_reg_3028_pp0_iter2_reg;
        trunc_ln66_16_reg_3038_pp0_iter3_reg <= trunc_ln66_16_reg_3038_pp0_iter2_reg;
        trunc_ln66_18_reg_3048_pp0_iter3_reg <= trunc_ln66_18_reg_3048_pp0_iter2_reg;
        trunc_ln66_19_reg_3053_pp0_iter3_reg <= trunc_ln66_19_reg_3053_pp0_iter2_reg;
        trunc_ln66_1_reg_2958_pp0_iter3_reg <= trunc_ln66_1_reg_2958_pp0_iter2_reg;
        trunc_ln66_21_reg_3063_pp0_iter3_reg <= trunc_ln66_21_reg_3063_pp0_iter2_reg;
        trunc_ln66_22_reg_3068_pp0_iter3_reg <= trunc_ln66_22_reg_3068_pp0_iter2_reg;
        trunc_ln66_24_reg_3078_pp0_iter3_reg <= trunc_ln66_24_reg_3078_pp0_iter2_reg;
        trunc_ln66_26_reg_3088_pp0_iter3_reg <= trunc_ln66_26_reg_3088_pp0_iter2_reg;
        trunc_ln66_27_reg_3093_pp0_iter3_reg <= trunc_ln66_27_reg_3093_pp0_iter2_reg;
        trunc_ln66_29_reg_3103_pp0_iter3_reg <= trunc_ln66_29_reg_3103_pp0_iter2_reg;
        trunc_ln66_30_reg_3108_pp0_iter3_reg <= trunc_ln66_30_reg_3108_pp0_iter2_reg;
        trunc_ln66_32_reg_3118_pp0_iter3_reg <= trunc_ln66_32_reg_3118_pp0_iter2_reg;
        trunc_ln66_34_reg_3128_pp0_iter3_reg <= trunc_ln66_34_reg_3128_pp0_iter2_reg;
        trunc_ln66_35_reg_3133_pp0_iter3_reg <= trunc_ln66_35_reg_3133_pp0_iter2_reg;
        trunc_ln66_37_reg_3143_pp0_iter3_reg <= trunc_ln66_37_reg_3143_pp0_iter2_reg;
        trunc_ln66_38_reg_3148_pp0_iter3_reg <= trunc_ln66_38_reg_3148_pp0_iter2_reg;
        trunc_ln66_3_reg_2968_pp0_iter3_reg <= trunc_ln66_3_reg_2968_pp0_iter2_reg;
        trunc_ln66_40_reg_3158_pp0_iter3_reg <= trunc_ln66_40_reg_3158_pp0_iter2_reg;
        trunc_ln66_42_reg_3168_pp0_iter3_reg <= trunc_ln66_42_reg_3168_pp0_iter2_reg;
        trunc_ln66_43_reg_3173_pp0_iter3_reg <= trunc_ln66_43_reg_3173_pp0_iter2_reg;
        trunc_ln66_45_reg_3183_pp0_iter3_reg <= trunc_ln66_45_reg_3183_pp0_iter2_reg;
        trunc_ln66_46_reg_3188_pp0_iter3_reg <= trunc_ln66_46_reg_3188_pp0_iter2_reg;
        trunc_ln66_48_reg_3198_pp0_iter3_reg <= trunc_ln66_48_reg_3198_pp0_iter2_reg;
        trunc_ln66_4_reg_2973_pp0_iter3_reg <= trunc_ln66_4_reg_2973_pp0_iter2_reg;
        trunc_ln66_50_reg_3208_pp0_iter3_reg <= trunc_ln66_50_reg_3208_pp0_iter2_reg;
        trunc_ln66_51_reg_3213_pp0_iter3_reg <= trunc_ln66_51_reg_3213_pp0_iter2_reg;
        trunc_ln66_53_reg_3223_pp0_iter3_reg <= trunc_ln66_53_reg_3223_pp0_iter2_reg;
        trunc_ln66_54_reg_3228_pp0_iter3_reg <= trunc_ln66_54_reg_3228_pp0_iter2_reg;
        trunc_ln66_56_reg_3238_pp0_iter3_reg <= trunc_ln66_56_reg_3238_pp0_iter2_reg;
        trunc_ln66_58_reg_3248_pp0_iter3_reg <= trunc_ln66_58_reg_3248_pp0_iter2_reg;
        trunc_ln66_59_reg_3253_pp0_iter3_reg <= trunc_ln66_59_reg_3253_pp0_iter2_reg;
        trunc_ln66_61_reg_3263_pp0_iter3_reg <= trunc_ln66_61_reg_3263_pp0_iter2_reg;
        trunc_ln66_62_reg_3268_pp0_iter3_reg <= trunc_ln66_62_reg_3268_pp0_iter2_reg;
        trunc_ln66_6_reg_2983_pp0_iter3_reg <= trunc_ln66_6_reg_2983_pp0_iter2_reg;
        trunc_ln66_7_reg_2988_pp0_iter3_reg <= trunc_ln66_7_reg_2988_pp0_iter2_reg;
        trunc_ln66_9_reg_2998_pp0_iter3_reg <= trunc_ln66_9_reg_2998_pp0_iter2_reg;
        trunc_ln67_reg_3273_pp0_iter3_reg <= trunc_ln67_reg_3273_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln48_reg_2904_pp0_iter4_reg <= icmp_ln48_reg_2904_pp0_iter3_reg;
        rs_stream_r_read_reg_2948_pp0_iter4_reg <= rs_stream_r_read_reg_2948_pp0_iter3_reg;
        tmp_1_reg_3288_pp0_iter4_reg <= tmp_1_reg_3288_pp0_iter3_reg;
        tmp_2_reg_3293_pp0_iter4_reg <= tmp_2_reg_3293_pp0_iter3_reg;
        tmp_3_reg_3298_pp0_iter4_reg <= tmp_3_reg_3298_pp0_iter3_reg;
        tmp_4_reg_3303_pp0_iter4_reg <= tmp_4_reg_3303_pp0_iter3_reg;
        tmp_5_reg_3308_pp0_iter4_reg <= tmp_5_reg_3308_pp0_iter3_reg;
        tmp_reg_3278_pp0_iter4_reg <= tmp_reg_3278_pp0_iter3_reg;
        tmp_s_reg_3283_pp0_iter4_reg <= tmp_s_reg_3283_pp0_iter3_reg;
        trunc_ln64_3_reg_2923_pp0_iter4_reg <= trunc_ln64_3_reg_2923_pp0_iter3_reg;
        trunc_ln64_4_reg_2928_pp0_iter4_reg <= trunc_ln64_4_reg_2928_pp0_iter3_reg;
        trunc_ln64_7_reg_2943_pp0_iter4_reg <= trunc_ln64_7_reg_2943_pp0_iter3_reg;
        trunc_ln66_10_reg_3008_pp0_iter4_reg <= trunc_ln66_10_reg_3008_pp0_iter3_reg;
        trunc_ln66_11_reg_3013_pp0_iter4_reg <= trunc_ln66_11_reg_3013_pp0_iter3_reg;
        trunc_ln66_14_reg_3028_pp0_iter4_reg <= trunc_ln66_14_reg_3028_pp0_iter3_reg;
        trunc_ln66_18_reg_3048_pp0_iter4_reg <= trunc_ln66_18_reg_3048_pp0_iter3_reg;
        trunc_ln66_19_reg_3053_pp0_iter4_reg <= trunc_ln66_19_reg_3053_pp0_iter3_reg;
        trunc_ln66_22_reg_3068_pp0_iter4_reg <= trunc_ln66_22_reg_3068_pp0_iter3_reg;
        trunc_ln66_26_reg_3088_pp0_iter4_reg <= trunc_ln66_26_reg_3088_pp0_iter3_reg;
        trunc_ln66_27_reg_3093_pp0_iter4_reg <= trunc_ln66_27_reg_3093_pp0_iter3_reg;
        trunc_ln66_30_reg_3108_pp0_iter4_reg <= trunc_ln66_30_reg_3108_pp0_iter3_reg;
        trunc_ln66_34_reg_3128_pp0_iter4_reg <= trunc_ln66_34_reg_3128_pp0_iter3_reg;
        trunc_ln66_35_reg_3133_pp0_iter4_reg <= trunc_ln66_35_reg_3133_pp0_iter3_reg;
        trunc_ln66_38_reg_3148_pp0_iter4_reg <= trunc_ln66_38_reg_3148_pp0_iter3_reg;
        trunc_ln66_3_reg_2968_pp0_iter4_reg <= trunc_ln66_3_reg_2968_pp0_iter3_reg;
        trunc_ln66_42_reg_3168_pp0_iter4_reg <= trunc_ln66_42_reg_3168_pp0_iter3_reg;
        trunc_ln66_43_reg_3173_pp0_iter4_reg <= trunc_ln66_43_reg_3173_pp0_iter3_reg;
        trunc_ln66_46_reg_3188_pp0_iter4_reg <= trunc_ln66_46_reg_3188_pp0_iter3_reg;
        trunc_ln66_4_reg_2973_pp0_iter4_reg <= trunc_ln66_4_reg_2973_pp0_iter3_reg;
        trunc_ln66_50_reg_3208_pp0_iter4_reg <= trunc_ln66_50_reg_3208_pp0_iter3_reg;
        trunc_ln66_51_reg_3213_pp0_iter4_reg <= trunc_ln66_51_reg_3213_pp0_iter3_reg;
        trunc_ln66_54_reg_3228_pp0_iter4_reg <= trunc_ln66_54_reg_3228_pp0_iter3_reg;
        trunc_ln66_58_reg_3248_pp0_iter4_reg <= trunc_ln66_58_reg_3248_pp0_iter3_reg;
        trunc_ln66_59_reg_3253_pp0_iter4_reg <= trunc_ln66_59_reg_3253_pp0_iter3_reg;
        trunc_ln66_62_reg_3268_pp0_iter4_reg <= trunc_ln66_62_reg_3268_pp0_iter3_reg;
        trunc_ln66_7_reg_2988_pp0_iter4_reg <= trunc_ln66_7_reg_2988_pp0_iter3_reg;
        trunc_ln67_reg_3273_pp0_iter4_reg <= trunc_ln67_reg_3273_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln48_reg_2904_pp0_iter5_reg <= icmp_ln48_reg_2904_pp0_iter4_reg;
        mul_ln79_13_reg_3632 <= grp_fu_1331_p2;
        mul_ln79_21_reg_3652 <= grp_fu_1349_p2;
        mul_ln79_29_reg_3672 <= grp_fu_1367_p2;
        mul_ln79_37_reg_3692 <= grp_fu_1385_p2;
        mul_ln79_45_reg_3712 <= grp_fu_1403_p2;
        mul_ln79_53_reg_3732 <= grp_fu_1421_p2;
        mul_ln79_5_reg_3612 <= grp_fu_1313_p2;
        mul_ln79_61_reg_3752 <= grp_fu_1439_p2;
        rs_stream_r_read_reg_2948_pp0_iter5_reg <= rs_stream_r_read_reg_2948_pp0_iter4_reg;
        tmp_1_reg_3288_pp0_iter5_reg <= tmp_1_reg_3288_pp0_iter4_reg;
        tmp_2_reg_3293_pp0_iter5_reg <= tmp_2_reg_3293_pp0_iter4_reg;
        tmp_3_reg_3298_pp0_iter5_reg <= tmp_3_reg_3298_pp0_iter4_reg;
        tmp_4_reg_3303_pp0_iter5_reg <= tmp_4_reg_3303_pp0_iter4_reg;
        tmp_5_reg_3308_pp0_iter5_reg <= tmp_5_reg_3308_pp0_iter4_reg;
        tmp_reg_3278_pp0_iter5_reg <= tmp_reg_3278_pp0_iter4_reg;
        tmp_s_reg_3283_pp0_iter5_reg <= tmp_s_reg_3283_pp0_iter4_reg;
        trunc_ln64_7_reg_2943_pp0_iter5_reg <= trunc_ln64_7_reg_2943_pp0_iter4_reg;
        trunc_ln66_14_reg_3028_pp0_iter5_reg <= trunc_ln66_14_reg_3028_pp0_iter4_reg;
        trunc_ln66_22_reg_3068_pp0_iter5_reg <= trunc_ln66_22_reg_3068_pp0_iter4_reg;
        trunc_ln66_30_reg_3108_pp0_iter5_reg <= trunc_ln66_30_reg_3108_pp0_iter4_reg;
        trunc_ln66_38_reg_3148_pp0_iter5_reg <= trunc_ln66_38_reg_3148_pp0_iter4_reg;
        trunc_ln66_46_reg_3188_pp0_iter5_reg <= trunc_ln66_46_reg_3188_pp0_iter4_reg;
        trunc_ln66_54_reg_3228_pp0_iter5_reg <= trunc_ln66_54_reg_3228_pp0_iter4_reg;
        trunc_ln66_62_reg_3268_pp0_iter5_reg <= trunc_ln66_62_reg_3268_pp0_iter4_reg;
        trunc_ln66_7_reg_2988_pp0_iter5_reg <= trunc_ln66_7_reg_2988_pp0_iter4_reg;
        trunc_ln67_reg_3273_pp0_iter5_reg <= trunc_ln67_reg_3273_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln48_reg_2904_pp0_iter6_reg <= icmp_ln48_reg_2904_pp0_iter5_reg;
        icmp_ln49_reg_3757 <= icmp_ln49_fu_1615_p2;
        rs_stream_r_read_reg_2948_pp0_iter6_reg <= rs_stream_r_read_reg_2948_pp0_iter5_reg;
        tmp_1_reg_3288_pp0_iter6_reg <= tmp_1_reg_3288_pp0_iter5_reg;
        tmp_2_reg_3293_pp0_iter6_reg <= tmp_2_reg_3293_pp0_iter5_reg;
        tmp_3_reg_3298_pp0_iter6_reg <= tmp_3_reg_3298_pp0_iter5_reg;
        tmp_4_reg_3303_pp0_iter6_reg <= tmp_4_reg_3303_pp0_iter5_reg;
        tmp_5_reg_3308_pp0_iter6_reg <= tmp_5_reg_3308_pp0_iter5_reg;
        tmp_reg_3278_pp0_iter6_reg <= tmp_reg_3278_pp0_iter5_reg;
        tmp_s_reg_3283_pp0_iter6_reg <= tmp_s_reg_3283_pp0_iter5_reg;
        trunc_ln67_reg_3273_pp0_iter6_reg <= trunc_ln67_reg_3273_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln48_reg_2904_pp0_iter8_reg <= icmp_ln48_reg_2904_pp0_iter7_reg;
        rs_stream_r_read_reg_2948_pp0_iter8_reg <= rs_stream_r_read_reg_2948_pp0_iter7_reg;
        select_ln50_reg_3992 <= select_ln50_fu_1799_p3;
        tmp_1_reg_3288_pp0_iter8_reg <= tmp_1_reg_3288_pp0_iter7_reg;
        tmp_2_reg_3293_pp0_iter8_reg <= tmp_2_reg_3293_pp0_iter7_reg;
        tmp_3_reg_3298_pp0_iter8_reg <= tmp_3_reg_3298_pp0_iter7_reg;
        tmp_4_reg_3303_pp0_iter8_reg <= tmp_4_reg_3303_pp0_iter7_reg;
        tmp_5_reg_3308_pp0_iter8_reg <= tmp_5_reg_3308_pp0_iter7_reg;
        tmp_reg_3278_pp0_iter8_reg <= tmp_reg_3278_pp0_iter7_reg;
        tmp_s_reg_3283_pp0_iter8_reg <= tmp_s_reg_3283_pp0_iter7_reg;
        trunc_ln67_reg_3273_pp0_iter8_reg <= trunc_ln67_reg_3273_pp0_iter7_reg;
    end
end

always @ (*) begin
    if (((ap_predicate_op733_write_state11 == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        a_stream_blk_n = a_stream_full_n;
    end else begin
        a_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_predicate_op733_write_state11 == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        a_stream_write = 1'b1;
    end else begin
        a_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state11_pp0_stage0_iter10)) begin
        ap_ST_iter10_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_iter10_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten76_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten76_load = indvar_flatten76_fu_398;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1301_ce = 1'b1;
    end else begin
        grp_fu_1301_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1313_ce = 1'b1;
    end else begin
        grp_fu_1313_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1322_ce = 1'b1;
    end else begin
        grp_fu_1322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1331_ce = 1'b1;
    end else begin
        grp_fu_1331_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1340_ce = 1'b1;
    end else begin
        grp_fu_1340_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1349_ce = 1'b1;
    end else begin
        grp_fu_1349_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1358_ce = 1'b1;
    end else begin
        grp_fu_1358_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1367_ce = 1'b1;
    end else begin
        grp_fu_1367_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1376_ce = 1'b1;
    end else begin
        grp_fu_1376_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1385_ce = 1'b1;
    end else begin
        grp_fu_1385_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1394_ce = 1'b1;
    end else begin
        grp_fu_1394_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1403_ce = 1'b1;
    end else begin
        grp_fu_1403_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1412_ce = 1'b1;
    end else begin
        grp_fu_1412_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1421_ce = 1'b1;
    end else begin
        grp_fu_1421_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1430_ce = 1'b1;
    end else begin
        grp_fu_1430_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        grp_fu_1439_ce = 1'b1;
    end else begin
        grp_fu_1439_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2412_ce = 1'b1;
    end else begin
        grp_fu_2412_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2420_ce = 1'b1;
    end else begin
        grp_fu_2420_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2428_ce = 1'b1;
    end else begin
        grp_fu_2428_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2436_ce = 1'b1;
    end else begin
        grp_fu_2436_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2444_ce = 1'b1;
    end else begin
        grp_fu_2444_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2452_ce = 1'b1;
    end else begin
        grp_fu_2452_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2460_ce = 1'b1;
    end else begin
        grp_fu_2460_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
        grp_fu_2468_ce = 1'b1;
    end else begin
        grp_fu_2468_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2476_ce = 1'b1;
    end else begin
        grp_fu_2476_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2485_ce = 1'b1;
    end else begin
        grp_fu_2485_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2493_ce = 1'b1;
    end else begin
        grp_fu_2493_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2502_ce = 1'b1;
    end else begin
        grp_fu_2502_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2510_ce = 1'b1;
    end else begin
        grp_fu_2510_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2519_ce = 1'b1;
    end else begin
        grp_fu_2519_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2527_ce = 1'b1;
    end else begin
        grp_fu_2527_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2536_ce = 1'b1;
    end else begin
        grp_fu_2536_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2544_ce = 1'b1;
    end else begin
        grp_fu_2544_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2553_ce = 1'b1;
    end else begin
        grp_fu_2553_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2561_ce = 1'b1;
    end else begin
        grp_fu_2561_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2570_ce = 1'b1;
    end else begin
        grp_fu_2570_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2578_ce = 1'b1;
    end else begin
        grp_fu_2578_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2587_ce = 1'b1;
    end else begin
        grp_fu_2587_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2595_ce = 1'b1;
    end else begin
        grp_fu_2595_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)))) begin
        grp_fu_2604_ce = 1'b1;
    end else begin
        grp_fu_2604_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2612_ce = 1'b1;
    end else begin
        grp_fu_2612_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2621_ce = 1'b1;
    end else begin
        grp_fu_2621_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2630_ce = 1'b1;
    end else begin
        grp_fu_2630_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2639_ce = 1'b1;
    end else begin
        grp_fu_2639_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2648_ce = 1'b1;
    end else begin
        grp_fu_2648_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2657_ce = 1'b1;
    end else begin
        grp_fu_2657_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2666_ce = 1'b1;
    end else begin
        grp_fu_2666_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2675_ce = 1'b1;
    end else begin
        grp_fu_2675_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2684_ce = 1'b1;
    end else begin
        grp_fu_2684_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2693_ce = 1'b1;
    end else begin
        grp_fu_2693_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2702_ce = 1'b1;
    end else begin
        grp_fu_2702_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2711_ce = 1'b1;
    end else begin
        grp_fu_2711_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2720_ce = 1'b1;
    end else begin
        grp_fu_2720_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2729_ce = 1'b1;
    end else begin
        grp_fu_2729_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2738_ce = 1'b1;
    end else begin
        grp_fu_2738_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)))) begin
        grp_fu_2747_ce = 1'b1;
    end else begin
        grp_fu_2747_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2756_ce = 1'b1;
    end else begin
        grp_fu_2756_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2764_ce = 1'b1;
    end else begin
        grp_fu_2764_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2772_ce = 1'b1;
    end else begin
        grp_fu_2772_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2780_ce = 1'b1;
    end else begin
        grp_fu_2780_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2788_ce = 1'b1;
    end else begin
        grp_fu_2788_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2796_ce = 1'b1;
    end else begin
        grp_fu_2796_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2804_ce = 1'b1;
    end else begin
        grp_fu_2804_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
        grp_fu_2812_ce = 1'b1;
    end else begin
        grp_fu_2812_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        rq_stream_r_blk_n = rq_stream_r_empty_n;
    end else begin
        rq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        rq_stream_r_read = 1'b1;
    end else begin
        rq_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        rs_stream_r_blk_n = rs_stream_r_empty_n;
    end else begin
        rs_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        rs_stream_r_read = 1'b1;
    end else begin
        rs_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        vq_stream_r_blk_n = vq_stream_r_empty_n;
    end else begin
        vq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        vq_stream_r_read = 1'b1;
    end else begin
        vq_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        vs_stream_r_blk_n = vs_stream_r_empty_n;
    end else begin
        vs_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln48_fu_496_p2 == 1'd0))) begin
        vs_stream_r_read = 1'b1;
    end else begin
        vs_stream_r_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else if (((~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd1) & (1'b1 == ap_CS_iter10_fsm_state11)) | (~((1'b1 == ap_block_state11_pp0_stage0_iter10) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter9_fsm_state10)))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

assign a_stream_din = {{{{{{{{trunc_ln99_7_fu_2341_p4}, {trunc_ln99_6_fu_2331_p4}}, {trunc_ln99_5_fu_2321_p4}}, {trunc_ln99_4_fu_2311_p4}}, {trunc_ln99_3_fu_2301_p4}}, {trunc_ln99_2_fu_2291_p4}}, {trunc_ln99_1_fu_2281_p4}}, {trunc_ln_fu_2271_p4}};

assign add_ln48_fu_502_p2 = (ap_sig_allocacmp_indvar_flatten76_load + 15'd1);

assign add_ln49_fu_1672_p2 = (indvar_flatten33_fu_394 + 12'd1);

assign add_ln50_fu_1735_p2 = (indvar_flatten_fu_390 + 9'd1);

assign add_ln79_12_fu_1822_p2 = ($signed(sext_ln79_63_fu_1819_p1) + $signed(grp_fu_2630_p3));

assign add_ln79_19_fu_1834_p2 = ($signed(sext_ln79_87_fu_1831_p1) + $signed(grp_fu_2648_p3));

assign add_ln79_26_fu_1846_p2 = ($signed(sext_ln79_127_fu_1843_p1) + $signed(grp_fu_2666_p3));

assign add_ln79_33_fu_1858_p2 = ($signed(sext_ln79_143_fu_1855_p1) + $signed(grp_fu_2684_p3));

assign add_ln79_40_fu_1870_p2 = ($signed(sext_ln79_155_fu_1867_p1) + $signed(grp_fu_2702_p3));

assign add_ln79_47_fu_1882_p2 = ($signed(sext_ln79_162_fu_1879_p1) + $signed(grp_fu_2720_p3));

assign add_ln79_54_fu_1894_p2 = ($signed(sext_ln79_166_fu_1891_p1) + $signed(grp_fu_2738_p3));

assign add_ln79_5_fu_1810_p2 = ($signed(sext_ln79_39_fu_1807_p1) + $signed(grp_fu_2612_p3));

assign add_ln89_10_fu_1970_p2 = (zext_ln89_14_fu_1967_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_11_fu_2187_p2 = (shl_ln89_5_fu_2181_p2 + select_ln54_2_fu_2037_p3);

assign add_ln89_12_fu_1979_p2 = (zext_ln89_15_fu_1976_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_13_fu_2202_p2 = (shl_ln89_6_fu_2196_p2 + select_ln54_1_fu_2030_p3);

assign add_ln89_14_fu_1988_p2 = (zext_ln89_16_fu_1985_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_15_fu_2217_p2 = (shl_ln89_7_fu_2211_p2 + select_ln54_fu_2023_p3);

assign add_ln89_16_fu_2223_p2 = (shl_ln89_7_fu_2211_p2 + empty_61_fu_386);

assign add_ln89_17_fu_2229_p2 = (shl_ln89_6_fu_2196_p2 + empty_60_fu_382);

assign add_ln89_18_fu_2235_p2 = (shl_ln89_5_fu_2181_p2 + empty_59_fu_378);

assign add_ln89_19_fu_2241_p2 = (shl_ln89_4_fu_2166_p2 + empty_58_fu_374);

assign add_ln89_1_fu_2112_p2 = (shl_ln89_fu_2106_p2 + select_ln54_7_fu_2072_p3);

assign add_ln89_20_fu_2247_p2 = (shl_ln89_3_fu_2151_p2 + empty_57_fu_370);

assign add_ln89_21_fu_2253_p2 = (shl_ln89_2_fu_2136_p2 + empty_56_fu_366);

assign add_ln89_22_fu_2259_p2 = (shl_ln89_1_fu_2121_p2 + empty_55_fu_362);

assign add_ln89_23_fu_2265_p2 = (shl_ln89_fu_2106_p2 + empty_fu_358);

assign add_ln89_2_fu_1934_p2 = (zext_ln89_10_fu_1931_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_3_fu_2127_p2 = (shl_ln89_1_fu_2121_p2 + select_ln54_6_fu_2065_p3);

assign add_ln89_4_fu_1943_p2 = (zext_ln89_11_fu_1940_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_5_fu_2142_p2 = (shl_ln89_2_fu_2136_p2 + select_ln54_5_fu_2058_p3);

assign add_ln89_6_fu_1952_p2 = (zext_ln89_12_fu_1949_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_7_fu_2157_p2 = (shl_ln89_3_fu_2151_p2 + select_ln54_4_fu_2051_p3);

assign add_ln89_8_fu_1961_p2 = (zext_ln89_13_fu_1958_p1 + zext_ln89_fu_1919_p1);

assign add_ln89_9_fu_2172_p2 = (shl_ln89_4_fu_2166_p2 + select_ln54_3_fu_2044_p3);

assign add_ln89_fu_1925_p2 = (zext_ln89_1_fu_1922_p1 + zext_ln89_fu_1919_p1);

assign and_ln48_1_fu_1705_p2 = (xor_ln48_fu_1694_p2 & icmp_ln50_fu_1699_p2);

assign and_ln48_fu_1778_p2 = (xor_ln48_reg_3897 & icmp_ln51_fu_1762_p2);

assign and_ln49_fu_1783_p2 = (or_ln49_fu_1773_p2 & and_ln48_fu_1778_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((ap_predicate_op733_write_state11 == 1'b1) & (1'b0 == a_stream_full_n));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((vs_stream_r_empty_n == 1'b0) & (icmp_ln48_fu_496_p2 == 1'd0)) | ((vq_stream_r_empty_n == 1'b0) & (icmp_ln48_fu_496_p2 == 1'd0)) | ((rs_stream_r_empty_n == 1'b0) & (icmp_ln48_fu_496_p2 == 1'd0)) | ((icmp_ln48_fu_496_p2 == 1'd0) & (rq_stream_r_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_226 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state11_pp0_stage0_iter10) & (1'b1 == ap_CS_iter10_fsm_state11))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op733_write_state11 = ((icmp_ln93_reg_4130 == 1'd1) & (icmp_ln48_reg_2904_pp0_iter9_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign cit_1_fu_1903_p2 = (select_ln50_fu_1799_p3 + 5'd1);

assign grp_fu_1301_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1313_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1322_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1331_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1340_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1349_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1358_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1367_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1376_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1385_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1394_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1403_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1412_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1421_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_1430_p1 = sext_ln79_fu_1295_p1;

assign grp_fu_1439_p1 = sext_ln79_15_fu_1307_p1;

assign grp_fu_2412_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2420_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2428_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2436_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2444_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2452_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2460_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2468_p1 = sext_ln79_6_fu_1445_p1;

assign grp_fu_2476_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2485_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2493_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2502_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2510_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2519_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2527_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2536_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2544_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2553_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2561_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2570_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2578_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2587_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2595_p1 = sext_ln79_3_fu_1472_p1;

assign grp_fu_2604_p1 = sext_ln79_18_fu_1478_p1;

assign grp_fu_2612_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2621_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2630_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2639_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2648_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2657_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2666_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2675_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2684_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2693_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2702_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2711_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2720_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2729_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2738_p1 = sext_ln79_9_fu_1530_p1;

assign grp_fu_2747_p1 = sext_ln79_12_fu_1536_p1;

assign grp_fu_2756_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2764_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2772_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2780_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2788_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2796_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2804_p1 = sext_ln79_21_fu_1624_p1;

assign grp_fu_2812_p1 = sext_ln79_21_fu_1624_p1;

assign icmp_ln48_fu_496_p2 = ((ap_sig_allocacmp_indvar_flatten76_load == 15'd21504) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1615_p2 = ((indvar_flatten33_fu_394 == 12'd1536) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1699_p2 = ((indvar_flatten_fu_390 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1762_p2 = ((cit_fu_354 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1914_p2 = ((select_ln50_reg_3992 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_1994_p2 = ((select_ln50_reg_3992 == 5'd23) ? 1'b1 : 1'b0);

assign or_ln49_fu_1773_p2 = (xor_ln49_fu_1768_p2 | icmp_ln49_reg_3757_pp0_iter7_reg);

assign or_ln50_1_fu_1741_p2 = (icmp_ln49_reg_3757 | and_ln48_1_fu_1705_p2);

assign or_ln50_2_fu_1794_p2 = (or_ln50_fu_1789_p2 | icmp_ln49_reg_3757_pp0_iter7_reg);

assign or_ln50_fu_1789_p2 = (and_ln49_fu_1783_p2 | and_ln48_1_reg_3907);

assign select_ln49_fu_1678_p3 = ((icmp_ln49_fu_1615_p2[0:0] == 1'b1) ? 12'd1 : add_ln49_fu_1672_p2);

assign select_ln50_1_fu_1746_p3 = ((or_ln50_1_fu_1741_p2[0:0] == 1'b1) ? 9'd1 : add_ln50_fu_1735_p2);

assign select_ln50_fu_1799_p3 = ((or_ln50_2_fu_1794_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_354);

assign select_ln54_1_fu_2030_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_60_fu_382);

assign select_ln54_2_fu_2037_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_59_fu_378);

assign select_ln54_3_fu_2044_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_58_fu_374);

assign select_ln54_4_fu_2051_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_57_fu_370);

assign select_ln54_5_fu_2058_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_56_fu_366);

assign select_ln54_6_fu_2065_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_55_fu_362);

assign select_ln54_7_fu_2072_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_fu_358);

assign select_ln54_fu_2023_p3 = ((icmp_ln54_reg_4038[0:0] == 1'b1) ? 32'd0 : empty_61_fu_386);

assign sext_ln79_117_fu_2091_p1 = add_ln79_34_reg_4070;

assign sext_ln79_127_fu_1843_p1 = grp_fu_2675_p3;

assign sext_ln79_12_fu_1536_p1 = $signed(trunc_ln64_4_reg_2928_pp0_iter4_reg);

assign sext_ln79_137_fu_2094_p1 = add_ln79_41_reg_4075;

assign sext_ln79_143_fu_1855_p1 = grp_fu_2693_p3;

assign sext_ln79_148_fu_2097_p1 = add_ln79_48_reg_4080;

assign sext_ln79_155_fu_1867_p1 = grp_fu_2711_p3;

assign sext_ln79_15_fu_1307_p1 = $signed(trunc_ln64_5_reg_2933);

assign sext_ln79_162_fu_1879_p1 = grp_fu_2729_p3;

assign sext_ln79_166_fu_1891_p1 = grp_fu_2747_p3;

assign sext_ln79_18_fu_1478_p1 = $signed(trunc_ln64_6_reg_2938_pp0_iter3_reg);

assign sext_ln79_21_fu_1624_p1 = $signed(trunc_ln64_7_reg_2943_pp0_iter5_reg);

assign sext_ln79_29_fu_2079_p1 = add_ln79_6_reg_4050;

assign sext_ln79_39_fu_1807_p1 = grp_fu_2621_p3;

assign sext_ln79_3_fu_1472_p1 = $signed(trunc_ln64_1_reg_2913_pp0_iter3_reg);

assign sext_ln79_51_fu_2082_p1 = add_ln79_13_reg_4055;

assign sext_ln79_63_fu_1819_p1 = grp_fu_2639_p3;

assign sext_ln79_6_fu_1445_p1 = $signed(trunc_ln64_2_reg_2918_pp0_iter2_reg);

assign sext_ln79_73_fu_2085_p1 = add_ln79_20_reg_4060;

assign sext_ln79_87_fu_1831_p1 = grp_fu_2657_p3;

assign sext_ln79_95_fu_2088_p1 = add_ln79_27_reg_4065;

assign sext_ln79_9_fu_1530_p1 = $signed(trunc_ln64_3_reg_2923_pp0_iter4_reg);

assign sext_ln79_fu_1295_p1 = $signed(trunc_ln64_reg_2908);

assign sext_ln89_fu_2100_p1 = add_ln79_55_reg_4085;

assign shl_ln89_1_fu_2121_p2 = sext_ln79_51_fu_2082_p1 << zext_ln89_3_fu_2118_p1;

assign shl_ln89_2_fu_2136_p2 = sext_ln79_73_fu_2085_p1 << zext_ln89_4_fu_2133_p1;

assign shl_ln89_3_fu_2151_p2 = sext_ln79_95_fu_2088_p1 << zext_ln89_5_fu_2148_p1;

assign shl_ln89_4_fu_2166_p2 = sext_ln79_117_fu_2091_p1 << zext_ln89_6_fu_2163_p1;

assign shl_ln89_5_fu_2181_p2 = sext_ln79_137_fu_2094_p1 << zext_ln89_7_fu_2178_p1;

assign shl_ln89_6_fu_2196_p2 = sext_ln79_148_fu_2097_p1 << zext_ln89_8_fu_2193_p1;

assign shl_ln89_7_fu_2211_p2 = sext_ln89_fu_2100_p1 << zext_ln89_9_fu_2208_p1;

assign shl_ln89_fu_2106_p2 = sext_ln79_29_fu_2079_p1 << zext_ln89_2_fu_2103_p1;

assign trunc_ln64_fu_508_p1 = rq_stream_r_dout[7:0];

assign trunc_ln66_fu_582_p1 = vq_stream_r_dout[7:0];

assign trunc_ln67_fu_1216_p1 = vs_stream_r_dout[3:0];

assign trunc_ln99_1_fu_2281_p4 = {{add_ln89_22_fu_2259_p2[31:12]}};

assign trunc_ln99_2_fu_2291_p4 = {{add_ln89_21_fu_2253_p2[31:12]}};

assign trunc_ln99_3_fu_2301_p4 = {{add_ln89_20_fu_2247_p2[31:12]}};

assign trunc_ln99_4_fu_2311_p4 = {{add_ln89_19_fu_2241_p2[31:12]}};

assign trunc_ln99_5_fu_2321_p4 = {{add_ln89_18_fu_2235_p2[31:12]}};

assign trunc_ln99_6_fu_2331_p4 = {{add_ln89_17_fu_2229_p2[31:12]}};

assign trunc_ln99_7_fu_2341_p4 = {{add_ln89_16_fu_2223_p2[31:12]}};

assign trunc_ln_fu_2271_p4 = {{add_ln89_23_fu_2265_p2[31:12]}};

assign xor_ln48_fu_1694_p2 = (icmp_ln49_reg_3757 ^ 1'd1);

assign xor_ln49_fu_1768_p2 = (icmp_ln50_reg_3902 ^ 1'd1);

assign zext_ln89_10_fu_1931_p1 = tmp_reg_3278_pp0_iter8_reg;

assign zext_ln89_11_fu_1940_p1 = tmp_s_reg_3283_pp0_iter8_reg;

assign zext_ln89_12_fu_1949_p1 = tmp_1_reg_3288_pp0_iter8_reg;

assign zext_ln89_13_fu_1958_p1 = tmp_2_reg_3293_pp0_iter8_reg;

assign zext_ln89_14_fu_1967_p1 = tmp_3_reg_3298_pp0_iter8_reg;

assign zext_ln89_15_fu_1976_p1 = tmp_4_reg_3303_pp0_iter8_reg;

assign zext_ln89_16_fu_1985_p1 = tmp_5_reg_3308_pp0_iter8_reg;

assign zext_ln89_1_fu_1922_p1 = trunc_ln67_reg_3273_pp0_iter8_reg;

assign zext_ln89_2_fu_2103_p1 = add_ln89_reg_4090;

assign zext_ln89_3_fu_2118_p1 = add_ln89_2_reg_4095;

assign zext_ln89_4_fu_2133_p1 = add_ln89_4_reg_4100;

assign zext_ln89_5_fu_2148_p1 = add_ln89_6_reg_4105;

assign zext_ln89_6_fu_2163_p1 = add_ln89_8_reg_4110;

assign zext_ln89_7_fu_2178_p1 = add_ln89_10_reg_4115;

assign zext_ln89_8_fu_2193_p1 = add_ln89_12_reg_4120;

assign zext_ln89_9_fu_2208_p1 = add_ln89_14_reg_4125;

assign zext_ln89_fu_1919_p1 = rs_stream_r_read_reg_2948_pp0_iter8_reg;

endmodule //RV_GEMM_do_bmm
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        a_stream_adpt_dout,
        a_stream_adpt_empty_n,
        a_stream_adpt_read,
        a_stream_adpt_num_data_valid,
        a_stream_adpt_fifo_cap,
        aq_stream_adpt_din,
        aq_stream_adpt_full_n,
        aq_stream_adpt_write,
        aq_stream_adpt_num_data_valid,
        aq_stream_adpt_fifo_cap,
        as_stream_adpt_din,
        as_stream_adpt_full_n,
        as_stream_adpt_write,
        as_stream_adpt_num_data_valid,
        as_stream_adpt_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter16_fsm_state17 = 2'd2;
parameter    ap_ST_iter17_fsm_state18 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;
parameter    ap_ST_iter16_fsm_state0 = 2'd1;
parameter    ap_ST_iter17_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [159:0] a_stream_adpt_dout;
input   a_stream_adpt_empty_n;
output   a_stream_adpt_read;
input  [2:0] a_stream_adpt_num_data_valid;
input  [2:0] a_stream_adpt_fifo_cap;
output  [63:0] aq_stream_adpt_din;
input   aq_stream_adpt_full_n;
output   aq_stream_adpt_write;
input  [2:0] aq_stream_adpt_num_data_valid;
input  [2:0] aq_stream_adpt_fifo_cap;
output  [3:0] as_stream_adpt_din;
input   as_stream_adpt_full_n;
output   as_stream_adpt_write;
input  [2:0] as_stream_adpt_num_data_valid;
input  [2:0] as_stream_adpt_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg a_stream_adpt_read;
reg aq_stream_adpt_write;
reg as_stream_adpt_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg   [1:0] ap_CS_iter16_fsm;
wire    ap_CS_iter16_fsm_state0;
reg   [1:0] ap_CS_iter17_fsm;
wire    ap_CS_iter17_fsm_state0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln61_reg_1382;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_CS_iter13_fsm_state14;
wire    ap_CS_iter14_fsm_state15;
wire    ap_CS_iter15_fsm_state16;
wire    ap_CS_iter16_fsm_state17;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter16_reg;
reg    ap_block_state18_pp0_stage0_iter17;
wire    ap_CS_iter17_fsm_state18;
wire   [0:0] icmp_ln61_fu_353_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    a_stream_adpt_blk_n;
reg    aq_stream_adpt_blk_n;
reg    as_stream_adpt_blk_n;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter1_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter2_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter3_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter4_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter5_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter6_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter7_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter8_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter9_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter10_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter11_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter12_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter13_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter14_reg;
reg   [0:0] icmp_ln61_reg_1382_pp0_iter15_reg;
wire   [19:0] trunc_ln67_fu_370_p1;
reg   [19:0] trunc_ln67_reg_1386;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter2_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter3_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter4_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter5_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter6_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter7_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter8_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter9_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter10_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter11_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter12_reg;
reg   [19:0] trunc_ln67_reg_1386_pp0_iter13_reg;
reg   [19:0] trunc_ln67_1_reg_1394;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter2_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter3_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter4_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter5_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter6_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter7_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter8_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter9_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter10_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter11_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter12_reg;
reg   [19:0] trunc_ln67_1_reg_1394_pp0_iter13_reg;
reg   [19:0] trunc_ln67_2_reg_1402;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter2_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter3_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter4_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter5_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter6_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter7_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter8_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter9_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter10_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter11_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter12_reg;
reg   [19:0] trunc_ln67_2_reg_1402_pp0_iter13_reg;
reg   [19:0] trunc_ln67_3_reg_1410;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter2_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter3_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter4_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter5_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter6_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter7_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter8_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter9_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter10_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter11_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter12_reg;
reg   [19:0] trunc_ln67_3_reg_1410_pp0_iter13_reg;
reg   [19:0] trunc_ln67_4_reg_1418;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter2_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter3_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter4_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter5_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter6_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter7_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter8_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter9_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter10_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter11_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter12_reg;
reg   [19:0] trunc_ln67_4_reg_1418_pp0_iter13_reg;
reg   [19:0] trunc_ln67_5_reg_1426;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter2_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter3_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter4_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter5_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter6_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter7_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter8_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter9_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter10_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter11_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter12_reg;
reg   [19:0] trunc_ln67_5_reg_1426_pp0_iter13_reg;
reg   [19:0] trunc_ln67_6_reg_1434;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter2_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter3_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter4_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter5_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter6_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter7_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter8_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter9_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter10_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter11_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter12_reg;
reg   [19:0] trunc_ln67_6_reg_1434_pp0_iter13_reg;
reg   [19:0] trunc_ln67_7_reg_1442;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter2_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter3_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter4_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter5_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter6_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter7_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter8_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter9_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter10_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter11_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter12_reg;
reg   [19:0] trunc_ln67_7_reg_1442_pp0_iter13_reg;
reg   [0:0] tmp_reg_1450;
reg   [0:0] tmp_reg_1450_pp0_iter2_reg;
reg   [0:0] tmp_50_reg_1455;
reg   [0:0] tmp_50_reg_1455_pp0_iter2_reg;
reg   [0:0] tmp_50_reg_1455_pp0_iter3_reg;
reg   [0:0] tmp_51_reg_1460;
reg   [0:0] tmp_51_reg_1460_pp0_iter2_reg;
reg   [0:0] tmp_51_reg_1460_pp0_iter3_reg;
reg   [0:0] tmp_51_reg_1460_pp0_iter4_reg;
reg   [0:0] tmp_52_reg_1465;
reg   [0:0] tmp_52_reg_1465_pp0_iter2_reg;
reg   [0:0] tmp_52_reg_1465_pp0_iter3_reg;
reg   [0:0] tmp_52_reg_1465_pp0_iter4_reg;
reg   [0:0] tmp_52_reg_1465_pp0_iter5_reg;
reg   [0:0] tmp_53_reg_1470;
reg   [0:0] tmp_53_reg_1470_pp0_iter2_reg;
reg   [0:0] tmp_53_reg_1470_pp0_iter3_reg;
reg   [0:0] tmp_53_reg_1470_pp0_iter4_reg;
reg   [0:0] tmp_53_reg_1470_pp0_iter5_reg;
reg   [0:0] tmp_53_reg_1470_pp0_iter6_reg;
reg   [0:0] tmp_54_reg_1475;
reg   [0:0] tmp_54_reg_1475_pp0_iter2_reg;
reg   [0:0] tmp_54_reg_1475_pp0_iter3_reg;
reg   [0:0] tmp_54_reg_1475_pp0_iter4_reg;
reg   [0:0] tmp_54_reg_1475_pp0_iter5_reg;
reg   [0:0] tmp_54_reg_1475_pp0_iter6_reg;
reg   [0:0] tmp_54_reg_1475_pp0_iter7_reg;
reg   [0:0] tmp_55_reg_1480;
reg   [0:0] tmp_55_reg_1480_pp0_iter2_reg;
reg   [0:0] tmp_55_reg_1480_pp0_iter3_reg;
reg   [0:0] tmp_55_reg_1480_pp0_iter4_reg;
reg   [0:0] tmp_55_reg_1480_pp0_iter5_reg;
reg   [0:0] tmp_55_reg_1480_pp0_iter6_reg;
reg   [0:0] tmp_55_reg_1480_pp0_iter7_reg;
reg   [0:0] tmp_55_reg_1480_pp0_iter8_reg;
reg   [0:0] tmp_56_reg_1485;
reg   [0:0] tmp_56_reg_1485_pp0_iter2_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter3_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter4_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter5_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter6_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter7_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter8_reg;
reg   [0:0] tmp_56_reg_1485_pp0_iter9_reg;
wire   [19:0] sub_ln99_fu_508_p2;
reg   [19:0] sub_ln99_reg_1490;
wire   [18:0] trunc_ln224_fu_518_p1;
reg   [18:0] trunc_ln224_reg_1495;
wire   [0:0] icmp_ln224_fu_522_p2;
reg   [0:0] icmp_ln224_reg_1500;
wire   [19:0] sub_ln99_1_fu_528_p2;
reg   [19:0] sub_ln99_1_reg_1505;
wire   [18:0] select_ln99_1_fu_533_p3;
reg   [18:0] select_ln99_1_reg_1510;
wire   [18:0] trunc_ln224_8_fu_548_p1;
reg   [18:0] trunc_ln224_8_reg_1515;
wire   [0:0] icmp_ln224_1_fu_552_p2;
reg   [0:0] icmp_ln224_1_reg_1520;
wire   [19:0] sub_ln99_2_fu_558_p2;
reg   [19:0] sub_ln99_2_reg_1525;
wire   [18:0] select_ln99_3_fu_563_p3;
reg   [18:0] select_ln99_3_reg_1530;
wire   [18:0] trunc_ln224_9_fu_577_p1;
reg   [18:0] trunc_ln224_9_reg_1535;
wire   [0:0] icmp_ln224_2_fu_581_p2;
reg   [0:0] icmp_ln224_2_reg_1540;
wire   [19:0] sub_ln99_3_fu_587_p2;
reg   [19:0] sub_ln99_3_reg_1545;
wire   [18:0] select_ln99_5_fu_592_p3;
reg   [18:0] select_ln99_5_reg_1550;
wire   [18:0] trunc_ln224_10_fu_606_p1;
reg   [18:0] trunc_ln224_10_reg_1555;
wire   [0:0] icmp_ln224_3_fu_610_p2;
reg   [0:0] icmp_ln224_3_reg_1560;
wire   [19:0] sub_ln99_4_fu_616_p2;
reg   [19:0] sub_ln99_4_reg_1565;
wire   [18:0] select_ln99_7_fu_621_p3;
reg   [18:0] select_ln99_7_reg_1570;
wire   [18:0] trunc_ln224_11_fu_635_p1;
reg   [18:0] trunc_ln224_11_reg_1575;
wire   [0:0] icmp_ln224_4_fu_639_p2;
reg   [0:0] icmp_ln224_4_reg_1580;
wire   [19:0] sub_ln99_5_fu_645_p2;
reg   [19:0] sub_ln99_5_reg_1585;
wire   [18:0] select_ln99_9_fu_650_p3;
reg   [18:0] select_ln99_9_reg_1590;
wire   [18:0] trunc_ln224_12_fu_664_p1;
reg   [18:0] trunc_ln224_12_reg_1595;
wire   [0:0] icmp_ln224_5_fu_668_p2;
reg   [0:0] icmp_ln224_5_reg_1600;
wire   [19:0] sub_ln99_6_fu_674_p2;
reg   [19:0] sub_ln99_6_reg_1605;
wire   [18:0] select_ln99_11_fu_679_p3;
reg   [18:0] select_ln99_11_reg_1610;
wire   [18:0] trunc_ln224_13_fu_693_p1;
reg   [18:0] trunc_ln224_13_reg_1615;
wire   [0:0] icmp_ln224_6_fu_697_p2;
reg   [0:0] icmp_ln224_6_reg_1620;
wire   [19:0] sub_ln99_7_fu_703_p2;
reg   [19:0] sub_ln99_7_reg_1625;
wire   [18:0] select_ln99_13_fu_708_p3;
reg   [18:0] select_ln99_13_reg_1630;
wire   [18:0] trunc_ln224_14_fu_722_p1;
reg   [18:0] trunc_ln224_14_reg_1635;
wire   [0:0] icmp_ln224_7_fu_726_p2;
reg   [0:0] icmp_ln224_7_reg_1640;
wire   [0:0] icmp_ln12_fu_737_p2;
reg   [0:0] icmp_ln12_reg_1645;
wire   [18:0] x_3_fu_743_p2;
reg   [18:0] x_3_reg_1650;
wire   [0:0] tmp_57_fu_755_p3;
wire   [0:0] tmp_58_fu_763_p3;
wire   [0:0] tmp_59_fu_771_p3;
wire   [0:0] tmp_60_fu_779_p3;
wire   [0:0] tmp_61_fu_787_p3;
wire   [0:0] tmp_62_fu_795_p3;
wire   [0:0] tmp_63_fu_803_p3;
wire   [0:0] tmp_64_fu_811_p3;
wire   [0:0] tmp_65_fu_819_p3;
wire   [0:0] tmp_66_fu_827_p3;
wire   [0:0] tmp_67_fu_835_p3;
wire   [0:0] tmp_68_fu_843_p3;
wire   [0:0] tmp_69_fu_851_p3;
wire   [0:0] tmp_70_fu_859_p3;
wire   [0:0] tmp_71_fu_867_p3;
wire   [0:0] tmp_72_fu_875_p3;
wire   [0:0] tmp_73_fu_883_p3;
wire   [0:0] tmp_74_fu_891_p3;
wire   [4:0] select_ln16_fu_903_p3;
wire   [3:0] s_val_fu_923_p3;
reg   [3:0] s_val_reg_1732;
reg   [3:0] s_val_reg_1732_pp0_iter14_reg;
reg   [3:0] s_val_reg_1732_pp0_iter15_reg;
reg   [3:0] s_val_reg_1732_pp0_iter16_reg;
wire   [0:0] icmp_ln118_fu_931_p2;
reg   [0:0] icmp_ln118_reg_1737;
reg   [0:0] icmp_ln118_reg_1737_pp0_iter14_reg;
wire   [3:0] add_ln119_fu_937_p2;
reg   [3:0] add_ln119_reg_1741;
wire   [19:0] ashr_ln119_fu_946_p2;
reg   [19:0] ashr_ln119_reg_1746;
wire   [19:0] ashr_ln119_1_fu_951_p2;
reg   [19:0] ashr_ln119_1_reg_1751;
wire   [19:0] ashr_ln119_2_fu_956_p2;
reg   [19:0] ashr_ln119_2_reg_1756;
wire   [19:0] ashr_ln119_3_fu_961_p2;
reg   [19:0] ashr_ln119_3_reg_1761;
wire   [19:0] ashr_ln119_4_fu_966_p2;
reg   [19:0] ashr_ln119_4_reg_1766;
wire   [19:0] ashr_ln119_5_fu_971_p2;
reg   [19:0] ashr_ln119_5_reg_1771;
wire   [19:0] ashr_ln119_6_fu_976_p2;
reg   [19:0] ashr_ln119_6_reg_1776;
wire   [19:0] ashr_ln119_7_fu_981_p2;
reg   [19:0] ashr_ln119_7_reg_1781;
wire  signed [19:0] sext_ln121_fu_1001_p1;
wire  signed [19:0] sext_ln121_1_fu_1020_p1;
wire  signed [19:0] sext_ln121_2_fu_1039_p1;
wire  signed [19:0] sext_ln121_3_fu_1058_p1;
wire  signed [19:0] sext_ln121_4_fu_1077_p1;
wire  signed [19:0] sext_ln121_5_fu_1096_p1;
wire  signed [19:0] sext_ln121_6_fu_1115_p1;
wire  signed [19:0] sext_ln121_7_fu_1134_p1;
wire   [7:0] select_ln123_fu_1158_p3;
reg   [7:0] select_ln123_reg_1826;
wire   [7:0] select_ln123_1_fu_1186_p3;
reg   [7:0] select_ln123_1_reg_1831;
wire   [7:0] select_ln123_2_fu_1234_p3;
reg   [7:0] select_ln123_2_reg_1836;
wire   [7:0] select_ln123_3_fu_1282_p3;
reg   [7:0] select_ln123_3_reg_1841;
wire   [7:0] select_ln123_4_fu_1330_p3;
reg   [7:0] select_ln123_4_reg_1846;
wire   [7:0] select_ln123_5_fu_1338_p3;
reg   [7:0] select_ln123_5_reg_1851;
wire   [7:0] select_ln123_6_fu_1346_p3;
reg   [7:0] select_ln123_6_reg_1856;
wire   [7:0] select_ln123_7_fu_1354_p3;
reg   [7:0] select_ln123_7_reg_1861;
wire   [4:0] ap_phi_reg_pp0_iter0_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter1_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter2_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter3_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter4_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter5_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter6_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter7_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter8_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter9_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter10_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter11_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter12_s_val_2_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter13_s_val_2_reg_194;
wire   [19:0] ap_phi_reg_pp0_iter0_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter1_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter2_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter3_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter4_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter5_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter6_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter7_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter8_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter9_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter10_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter11_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter12_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter13_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter14_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter15_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter16_q_val_reg_273;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_reg_282;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_49_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_49_reg_291;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_50_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_50_reg_300;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_51_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_51_reg_309;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_52_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_52_reg_318;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_53_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_53_reg_327;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_54_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter16_empty_54_reg_336;
reg   [9:0] indvar_flatten10_fu_170;
wire   [9:0] add_ln61_fu_359_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_indvar_flatten10_load;
wire   [19:0] select_ln99_fu_513_p3;
wire   [19:0] select_ln99_2_fu_543_p3;
wire   [19:0] zext_ln99_fu_539_p1;
wire   [19:0] select_ln99_4_fu_572_p3;
wire   [19:0] zext_ln99_1_fu_568_p1;
wire   [19:0] select_ln99_6_fu_601_p3;
wire   [19:0] zext_ln99_2_fu_597_p1;
wire   [19:0] select_ln99_8_fu_630_p3;
wire   [19:0] zext_ln99_3_fu_626_p1;
wire   [19:0] select_ln99_10_fu_659_p3;
wire   [19:0] zext_ln99_4_fu_655_p1;
wire   [19:0] select_ln99_12_fu_688_p3;
wire   [19:0] zext_ln99_5_fu_684_p1;
wire   [19:0] select_ln99_14_fu_717_p3;
wire   [19:0] zext_ln99_6_fu_713_p1;
wire   [18:0] abs_max_fu_732_p3;
wire   [18:0] x_4_fu_749_p3;
wire   [0:0] trunc_ln16_fu_899_p1;
wire   [0:0] tmp_75_fu_911_p3;
wire   [3:0] trunc_ln108_fu_919_p1;
wire   [19:0] zext_ln119_fu_943_p1;
wire   [19:0] add_ln120_fu_986_p2;
wire   [18:0] trunc_ln121_1_fu_991_p4;
wire   [19:0] add_ln120_1_fu_1005_p2;
wire   [18:0] trunc_ln_fu_1010_p4;
wire   [19:0] add_ln120_2_fu_1024_p2;
wire   [18:0] trunc_ln121_2_fu_1029_p4;
wire   [19:0] add_ln120_3_fu_1043_p2;
wire   [18:0] trunc_ln121_3_fu_1048_p4;
wire   [19:0] add_ln120_4_fu_1062_p2;
wire   [18:0] trunc_ln121_4_fu_1067_p4;
wire   [19:0] add_ln120_5_fu_1081_p2;
wire   [18:0] trunc_ln121_5_fu_1086_p4;
wire   [19:0] add_ln120_6_fu_1100_p2;
wire   [18:0] trunc_ln121_6_fu_1105_p4;
wire   [19:0] add_ln120_7_fu_1119_p2;
wire   [18:0] trunc_ln121_7_fu_1124_p4;
wire   [12:0] tmp_76_fu_1138_p4;
wire   [0:0] icmp_ln200_fu_1148_p2;
wire   [7:0] trunc_ln123_fu_1154_p1;
wire   [12:0] tmp_77_fu_1166_p4;
wire   [0:0] icmp_ln200_8_fu_1176_p2;
wire   [7:0] trunc_ln123_8_fu_1182_p1;
wire   [12:0] tmp_78_fu_1194_p4;
wire   [12:0] tmp_79_fu_1214_p4;
wire   [0:0] icmp_ln200_10_fu_1224_p2;
wire   [7:0] trunc_ln123_10_fu_1230_p1;
wire   [12:0] tmp_80_fu_1242_p4;
wire   [12:0] tmp_81_fu_1262_p4;
wire   [0:0] icmp_ln200_12_fu_1272_p2;
wire   [7:0] trunc_ln123_12_fu_1278_p1;
wire   [12:0] tmp_82_fu_1290_p4;
wire   [12:0] tmp_83_fu_1310_p4;
wire   [0:0] icmp_ln200_14_fu_1320_p2;
wire   [7:0] trunc_ln123_14_fu_1326_p1;
wire   [0:0] icmp_ln200_9_fu_1204_p2;
wire   [7:0] trunc_ln123_9_fu_1210_p1;
wire   [0:0] icmp_ln200_11_fu_1252_p2;
wire   [7:0] trunc_ln123_11_fu_1258_p1;
wire   [0:0] icmp_ln200_13_fu_1300_p2;
wire   [7:0] trunc_ln123_13_fu_1306_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg   [1:0] ap_NS_iter16_fsm;
reg   [1:0] ap_NS_iter17_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
wire    ap_ST_iter15_fsm_state16_blk;
wire    ap_ST_iter16_fsm_state17_blk;
reg    ap_ST_iter17_fsm_state18_blk;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_972;
reg    ap_condition_978;
reg    ap_condition_985;
reg    ap_condition_991;
reg    ap_condition_997;
reg    ap_condition_1003;
reg    ap_condition_1009;
reg    ap_condition_1015;
reg    ap_condition_1021;
reg    ap_condition_1027;
reg    ap_condition_1033;
reg    ap_condition_1039;
reg    ap_condition_1045;
reg    ap_condition_1051;
reg    ap_condition_1057;
reg    ap_condition_1063;
reg    ap_condition_1069;
reg    ap_condition_1072;
reg    ap_condition_368;
reg    ap_condition_370;
reg    ap_condition_374;
reg    ap_condition_302;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_CS_iter16_fsm = 2'd1;
//#0 ap_CS_iter17_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten10_fu_170 = 10'd0;
end

RV_GEMM_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter16_fsm <= ap_ST_iter16_fsm_state0;
    end else begin
        ap_CS_iter16_fsm <= ap_NS_iter16_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter17_fsm <= ap_ST_iter17_fsm_state0;
    end else begin
        ap_CS_iter17_fsm <= ap_NS_iter17_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter17_fsm_state18) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter17_fsm_state18) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter17_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_368)) begin
        if ((1'b1 == ap_condition_1072)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= select_ln16_fu_903_p3;
        end else if ((1'b1 == ap_condition_1069)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd27;
        end else if ((1'b1 == ap_condition_1063)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd28;
        end else if ((1'b1 == ap_condition_1057)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd29;
        end else if ((1'b1 == ap_condition_1051)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd30;
        end else if ((1'b1 == ap_condition_1045)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd31;
        end else if ((1'b1 == ap_condition_1039)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd0;
        end else if ((1'b1 == ap_condition_1033)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd1;
        end else if ((1'b1 == ap_condition_1027)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd2;
        end else if ((1'b1 == ap_condition_1021)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd3;
        end else if ((1'b1 == ap_condition_1015)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd4;
        end else if ((1'b1 == ap_condition_1009)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd5;
        end else if ((1'b1 == ap_condition_1003)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd6;
        end else if ((1'b1 == ap_condition_997)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd7;
        end else if ((1'b1 == ap_condition_991)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd8;
        end else if ((1'b1 == ap_condition_985)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd9;
        end else if ((1'b1 == ap_condition_978)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd10;
        end else if ((1'b1 == ap_condition_972)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd11;
        end else if (((tmp_57_fu_755_p3 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= 5'd12;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_s_val_2_reg_194 <= ap_phi_reg_pp0_iter12_s_val_2_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_49_reg_291 <= trunc_ln67_4_reg_1418_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_49_reg_291 <= ap_phi_reg_pp0_iter13_empty_49_reg_291;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_50_reg_300 <= trunc_ln67_2_reg_1402_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_50_reg_300 <= ap_phi_reg_pp0_iter13_empty_50_reg_300;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_51_reg_309 <= trunc_ln67_reg_1386_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_51_reg_309 <= ap_phi_reg_pp0_iter13_empty_51_reg_309;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_52_reg_318 <= trunc_ln67_1_reg_1394_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_52_reg_318 <= ap_phi_reg_pp0_iter13_empty_52_reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_53_reg_327 <= trunc_ln67_3_reg_1410_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_53_reg_327 <= ap_phi_reg_pp0_iter13_empty_53_reg_327;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_54_reg_336 <= trunc_ln67_5_reg_1426_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_54_reg_336 <= ap_phi_reg_pp0_iter13_empty_54_reg_336;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_empty_reg_282 <= trunc_ln67_6_reg_1434_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_empty_reg_282 <= ap_phi_reg_pp0_iter13_empty_reg_282;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_370)) begin
        if (((icmp_ln118_fu_931_p2 == 1'd1) & (icmp_ln61_reg_1382_pp0_iter12_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter14_q_val_reg_273 <= trunc_ln67_7_reg_1442_pp0_iter12_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter14_q_val_reg_273 <= ap_phi_reg_pp0_iter13_q_val_reg_273;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_49_reg_291 <= sext_ln121_4_fu_1077_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_49_reg_291 <= ap_phi_reg_pp0_iter15_empty_49_reg_291;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_50_reg_300 <= sext_ln121_2_fu_1039_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_50_reg_300 <= ap_phi_reg_pp0_iter15_empty_50_reg_300;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_51_reg_309 <= sext_ln121_fu_1001_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_51_reg_309 <= ap_phi_reg_pp0_iter15_empty_51_reg_309;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_52_reg_318 <= sext_ln121_1_fu_1020_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_52_reg_318 <= ap_phi_reg_pp0_iter15_empty_52_reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_53_reg_327 <= sext_ln121_3_fu_1058_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_53_reg_327 <= ap_phi_reg_pp0_iter15_empty_53_reg_327;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_54_reg_336 <= sext_ln121_5_fu_1096_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_54_reg_336 <= ap_phi_reg_pp0_iter15_empty_54_reg_336;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_empty_reg_282 <= sext_ln121_6_fu_1115_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_empty_reg_282 <= ap_phi_reg_pp0_iter15_empty_reg_282;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_374)) begin
        if (((icmp_ln118_reg_1737_pp0_iter14_reg == 1'd0) & (icmp_ln61_reg_1382_pp0_iter14_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter16_q_val_reg_273 <= sext_ln121_7_fu_1134_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter16_q_val_reg_273 <= ap_phi_reg_pp0_iter15_q_val_reg_273;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_302)) begin
        if ((icmp_ln61_fu_353_p2 == 1'd0)) begin
            indvar_flatten10_fu_170 <= add_ln61_fu_359_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_170 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        add_ln119_reg_1741 <= add_ln119_fu_937_p2;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        icmp_ln118_reg_1737 <= icmp_ln118_fu_931_p2;
        icmp_ln61_reg_1382_pp0_iter13_reg <= icmp_ln61_reg_1382_pp0_iter12_reg;
        s_val_reg_1732 <= s_val_fu_923_p3;
        trunc_ln67_1_reg_1394_pp0_iter13_reg <= trunc_ln67_1_reg_1394_pp0_iter12_reg;
        trunc_ln67_2_reg_1402_pp0_iter13_reg <= trunc_ln67_2_reg_1402_pp0_iter12_reg;
        trunc_ln67_3_reg_1410_pp0_iter13_reg <= trunc_ln67_3_reg_1410_pp0_iter12_reg;
        trunc_ln67_4_reg_1418_pp0_iter13_reg <= trunc_ln67_4_reg_1418_pp0_iter12_reg;
        trunc_ln67_5_reg_1426_pp0_iter13_reg <= trunc_ln67_5_reg_1426_pp0_iter12_reg;
        trunc_ln67_6_reg_1434_pp0_iter13_reg <= trunc_ln67_6_reg_1434_pp0_iter12_reg;
        trunc_ln67_7_reg_1442_pp0_iter13_reg <= trunc_ln67_7_reg_1442_pp0_iter12_reg;
        trunc_ln67_reg_1386_pp0_iter13_reg <= trunc_ln67_reg_1386_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_phi_reg_pp0_iter10_empty_49_reg_291 <= ap_phi_reg_pp0_iter9_empty_49_reg_291;
        ap_phi_reg_pp0_iter10_empty_50_reg_300 <= ap_phi_reg_pp0_iter9_empty_50_reg_300;
        ap_phi_reg_pp0_iter10_empty_51_reg_309 <= ap_phi_reg_pp0_iter9_empty_51_reg_309;
        ap_phi_reg_pp0_iter10_empty_52_reg_318 <= ap_phi_reg_pp0_iter9_empty_52_reg_318;
        ap_phi_reg_pp0_iter10_empty_53_reg_327 <= ap_phi_reg_pp0_iter9_empty_53_reg_327;
        ap_phi_reg_pp0_iter10_empty_54_reg_336 <= ap_phi_reg_pp0_iter9_empty_54_reg_336;
        ap_phi_reg_pp0_iter10_empty_reg_282 <= ap_phi_reg_pp0_iter9_empty_reg_282;
        ap_phi_reg_pp0_iter10_q_val_reg_273 <= ap_phi_reg_pp0_iter9_q_val_reg_273;
        ap_phi_reg_pp0_iter10_s_val_2_reg_194 <= ap_phi_reg_pp0_iter9_s_val_2_reg_194;
        icmp_ln224_6_reg_1620 <= icmp_ln224_6_fu_697_p2;
        icmp_ln61_reg_1382_pp0_iter9_reg <= icmp_ln61_reg_1382_pp0_iter8_reg;
        select_ln99_11_reg_1610 <= select_ln99_11_fu_679_p3;
        sub_ln99_7_reg_1625 <= sub_ln99_7_fu_703_p2;
        tmp_56_reg_1485_pp0_iter9_reg <= tmp_56_reg_1485_pp0_iter8_reg;
        trunc_ln224_13_reg_1615 <= trunc_ln224_13_fu_693_p1;
        trunc_ln67_1_reg_1394_pp0_iter9_reg <= trunc_ln67_1_reg_1394_pp0_iter8_reg;
        trunc_ln67_2_reg_1402_pp0_iter9_reg <= trunc_ln67_2_reg_1402_pp0_iter8_reg;
        trunc_ln67_3_reg_1410_pp0_iter9_reg <= trunc_ln67_3_reg_1410_pp0_iter8_reg;
        trunc_ln67_4_reg_1418_pp0_iter9_reg <= trunc_ln67_4_reg_1418_pp0_iter8_reg;
        trunc_ln67_5_reg_1426_pp0_iter9_reg <= trunc_ln67_5_reg_1426_pp0_iter8_reg;
        trunc_ln67_6_reg_1434_pp0_iter9_reg <= trunc_ln67_6_reg_1434_pp0_iter8_reg;
        trunc_ln67_7_reg_1442_pp0_iter9_reg <= trunc_ln67_7_reg_1442_pp0_iter8_reg;
        trunc_ln67_reg_1386_pp0_iter9_reg <= trunc_ln67_reg_1386_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_phi_reg_pp0_iter11_empty_49_reg_291 <= ap_phi_reg_pp0_iter10_empty_49_reg_291;
        ap_phi_reg_pp0_iter11_empty_50_reg_300 <= ap_phi_reg_pp0_iter10_empty_50_reg_300;
        ap_phi_reg_pp0_iter11_empty_51_reg_309 <= ap_phi_reg_pp0_iter10_empty_51_reg_309;
        ap_phi_reg_pp0_iter11_empty_52_reg_318 <= ap_phi_reg_pp0_iter10_empty_52_reg_318;
        ap_phi_reg_pp0_iter11_empty_53_reg_327 <= ap_phi_reg_pp0_iter10_empty_53_reg_327;
        ap_phi_reg_pp0_iter11_empty_54_reg_336 <= ap_phi_reg_pp0_iter10_empty_54_reg_336;
        ap_phi_reg_pp0_iter11_empty_reg_282 <= ap_phi_reg_pp0_iter10_empty_reg_282;
        ap_phi_reg_pp0_iter11_q_val_reg_273 <= ap_phi_reg_pp0_iter10_q_val_reg_273;
        ap_phi_reg_pp0_iter11_s_val_2_reg_194 <= ap_phi_reg_pp0_iter10_s_val_2_reg_194;
        icmp_ln224_7_reg_1640 <= icmp_ln224_7_fu_726_p2;
        icmp_ln61_reg_1382_pp0_iter10_reg <= icmp_ln61_reg_1382_pp0_iter9_reg;
        select_ln99_13_reg_1630 <= select_ln99_13_fu_708_p3;
        trunc_ln224_14_reg_1635 <= trunc_ln224_14_fu_722_p1;
        trunc_ln67_1_reg_1394_pp0_iter10_reg <= trunc_ln67_1_reg_1394_pp0_iter9_reg;
        trunc_ln67_2_reg_1402_pp0_iter10_reg <= trunc_ln67_2_reg_1402_pp0_iter9_reg;
        trunc_ln67_3_reg_1410_pp0_iter10_reg <= trunc_ln67_3_reg_1410_pp0_iter9_reg;
        trunc_ln67_4_reg_1418_pp0_iter10_reg <= trunc_ln67_4_reg_1418_pp0_iter9_reg;
        trunc_ln67_5_reg_1426_pp0_iter10_reg <= trunc_ln67_5_reg_1426_pp0_iter9_reg;
        trunc_ln67_6_reg_1434_pp0_iter10_reg <= trunc_ln67_6_reg_1434_pp0_iter9_reg;
        trunc_ln67_7_reg_1442_pp0_iter10_reg <= trunc_ln67_7_reg_1442_pp0_iter9_reg;
        trunc_ln67_reg_1386_pp0_iter10_reg <= trunc_ln67_reg_1386_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_phi_reg_pp0_iter12_empty_49_reg_291 <= ap_phi_reg_pp0_iter11_empty_49_reg_291;
        ap_phi_reg_pp0_iter12_empty_50_reg_300 <= ap_phi_reg_pp0_iter11_empty_50_reg_300;
        ap_phi_reg_pp0_iter12_empty_51_reg_309 <= ap_phi_reg_pp0_iter11_empty_51_reg_309;
        ap_phi_reg_pp0_iter12_empty_52_reg_318 <= ap_phi_reg_pp0_iter11_empty_52_reg_318;
        ap_phi_reg_pp0_iter12_empty_53_reg_327 <= ap_phi_reg_pp0_iter11_empty_53_reg_327;
        ap_phi_reg_pp0_iter12_empty_54_reg_336 <= ap_phi_reg_pp0_iter11_empty_54_reg_336;
        ap_phi_reg_pp0_iter12_empty_reg_282 <= ap_phi_reg_pp0_iter11_empty_reg_282;
        ap_phi_reg_pp0_iter12_q_val_reg_273 <= ap_phi_reg_pp0_iter11_q_val_reg_273;
        ap_phi_reg_pp0_iter12_s_val_2_reg_194 <= ap_phi_reg_pp0_iter11_s_val_2_reg_194;
        icmp_ln12_reg_1645 <= icmp_ln12_fu_737_p2;
        icmp_ln61_reg_1382_pp0_iter11_reg <= icmp_ln61_reg_1382_pp0_iter10_reg;
        trunc_ln67_1_reg_1394_pp0_iter11_reg <= trunc_ln67_1_reg_1394_pp0_iter10_reg;
        trunc_ln67_2_reg_1402_pp0_iter11_reg <= trunc_ln67_2_reg_1402_pp0_iter10_reg;
        trunc_ln67_3_reg_1410_pp0_iter11_reg <= trunc_ln67_3_reg_1410_pp0_iter10_reg;
        trunc_ln67_4_reg_1418_pp0_iter11_reg <= trunc_ln67_4_reg_1418_pp0_iter10_reg;
        trunc_ln67_5_reg_1426_pp0_iter11_reg <= trunc_ln67_5_reg_1426_pp0_iter10_reg;
        trunc_ln67_6_reg_1434_pp0_iter11_reg <= trunc_ln67_6_reg_1434_pp0_iter10_reg;
        trunc_ln67_7_reg_1442_pp0_iter11_reg <= trunc_ln67_7_reg_1442_pp0_iter10_reg;
        trunc_ln67_reg_1386_pp0_iter11_reg <= trunc_ln67_reg_1386_pp0_iter10_reg;
        x_3_reg_1650 <= x_3_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_phi_reg_pp0_iter13_empty_49_reg_291 <= ap_phi_reg_pp0_iter12_empty_49_reg_291;
        ap_phi_reg_pp0_iter13_empty_50_reg_300 <= ap_phi_reg_pp0_iter12_empty_50_reg_300;
        ap_phi_reg_pp0_iter13_empty_51_reg_309 <= ap_phi_reg_pp0_iter12_empty_51_reg_309;
        ap_phi_reg_pp0_iter13_empty_52_reg_318 <= ap_phi_reg_pp0_iter12_empty_52_reg_318;
        ap_phi_reg_pp0_iter13_empty_53_reg_327 <= ap_phi_reg_pp0_iter12_empty_53_reg_327;
        ap_phi_reg_pp0_iter13_empty_54_reg_336 <= ap_phi_reg_pp0_iter12_empty_54_reg_336;
        ap_phi_reg_pp0_iter13_empty_reg_282 <= ap_phi_reg_pp0_iter12_empty_reg_282;
        ap_phi_reg_pp0_iter13_q_val_reg_273 <= ap_phi_reg_pp0_iter12_q_val_reg_273;
        icmp_ln61_reg_1382_pp0_iter12_reg <= icmp_ln61_reg_1382_pp0_iter11_reg;
        trunc_ln67_1_reg_1394_pp0_iter12_reg <= trunc_ln67_1_reg_1394_pp0_iter11_reg;
        trunc_ln67_2_reg_1402_pp0_iter12_reg <= trunc_ln67_2_reg_1402_pp0_iter11_reg;
        trunc_ln67_3_reg_1410_pp0_iter12_reg <= trunc_ln67_3_reg_1410_pp0_iter11_reg;
        trunc_ln67_4_reg_1418_pp0_iter12_reg <= trunc_ln67_4_reg_1418_pp0_iter11_reg;
        trunc_ln67_5_reg_1426_pp0_iter12_reg <= trunc_ln67_5_reg_1426_pp0_iter11_reg;
        trunc_ln67_6_reg_1434_pp0_iter12_reg <= trunc_ln67_6_reg_1434_pp0_iter11_reg;
        trunc_ln67_7_reg_1442_pp0_iter12_reg <= trunc_ln67_7_reg_1442_pp0_iter11_reg;
        trunc_ln67_reg_1386_pp0_iter12_reg <= trunc_ln67_reg_1386_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_phi_reg_pp0_iter15_empty_49_reg_291 <= ap_phi_reg_pp0_iter14_empty_49_reg_291;
        ap_phi_reg_pp0_iter15_empty_50_reg_300 <= ap_phi_reg_pp0_iter14_empty_50_reg_300;
        ap_phi_reg_pp0_iter15_empty_51_reg_309 <= ap_phi_reg_pp0_iter14_empty_51_reg_309;
        ap_phi_reg_pp0_iter15_empty_52_reg_318 <= ap_phi_reg_pp0_iter14_empty_52_reg_318;
        ap_phi_reg_pp0_iter15_empty_53_reg_327 <= ap_phi_reg_pp0_iter14_empty_53_reg_327;
        ap_phi_reg_pp0_iter15_empty_54_reg_336 <= ap_phi_reg_pp0_iter14_empty_54_reg_336;
        ap_phi_reg_pp0_iter15_empty_reg_282 <= ap_phi_reg_pp0_iter14_empty_reg_282;
        ap_phi_reg_pp0_iter15_q_val_reg_273 <= ap_phi_reg_pp0_iter14_q_val_reg_273;
        ashr_ln119_1_reg_1751 <= ashr_ln119_1_fu_951_p2;
        ashr_ln119_2_reg_1756 <= ashr_ln119_2_fu_956_p2;
        ashr_ln119_3_reg_1761 <= ashr_ln119_3_fu_961_p2;
        ashr_ln119_4_reg_1766 <= ashr_ln119_4_fu_966_p2;
        ashr_ln119_5_reg_1771 <= ashr_ln119_5_fu_971_p2;
        ashr_ln119_6_reg_1776 <= ashr_ln119_6_fu_976_p2;
        ashr_ln119_7_reg_1781 <= ashr_ln119_7_fu_981_p2;
        ashr_ln119_reg_1746 <= ashr_ln119_fu_946_p2;
        icmp_ln118_reg_1737_pp0_iter14_reg <= icmp_ln118_reg_1737;
        icmp_ln61_reg_1382_pp0_iter14_reg <= icmp_ln61_reg_1382_pp0_iter13_reg;
        s_val_reg_1732_pp0_iter14_reg <= s_val_reg_1732;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        icmp_ln61_reg_1382_pp0_iter15_reg <= icmp_ln61_reg_1382_pp0_iter14_reg;
        s_val_reg_1732_pp0_iter15_reg <= s_val_reg_1732_pp0_iter14_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_empty_49_reg_291 <= ap_phi_reg_pp0_iter0_empty_49_reg_291;
        ap_phi_reg_pp0_iter1_empty_50_reg_300 <= ap_phi_reg_pp0_iter0_empty_50_reg_300;
        ap_phi_reg_pp0_iter1_empty_51_reg_309 <= ap_phi_reg_pp0_iter0_empty_51_reg_309;
        ap_phi_reg_pp0_iter1_empty_52_reg_318 <= ap_phi_reg_pp0_iter0_empty_52_reg_318;
        ap_phi_reg_pp0_iter1_empty_53_reg_327 <= ap_phi_reg_pp0_iter0_empty_53_reg_327;
        ap_phi_reg_pp0_iter1_empty_54_reg_336 <= ap_phi_reg_pp0_iter0_empty_54_reg_336;
        ap_phi_reg_pp0_iter1_empty_reg_282 <= ap_phi_reg_pp0_iter0_empty_reg_282;
        ap_phi_reg_pp0_iter1_q_val_reg_273 <= ap_phi_reg_pp0_iter0_q_val_reg_273;
        ap_phi_reg_pp0_iter1_s_val_2_reg_194 <= ap_phi_reg_pp0_iter0_s_val_2_reg_194;
        icmp_ln61_reg_1382 <= icmp_ln61_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_empty_49_reg_291 <= ap_phi_reg_pp0_iter1_empty_49_reg_291;
        ap_phi_reg_pp0_iter2_empty_50_reg_300 <= ap_phi_reg_pp0_iter1_empty_50_reg_300;
        ap_phi_reg_pp0_iter2_empty_51_reg_309 <= ap_phi_reg_pp0_iter1_empty_51_reg_309;
        ap_phi_reg_pp0_iter2_empty_52_reg_318 <= ap_phi_reg_pp0_iter1_empty_52_reg_318;
        ap_phi_reg_pp0_iter2_empty_53_reg_327 <= ap_phi_reg_pp0_iter1_empty_53_reg_327;
        ap_phi_reg_pp0_iter2_empty_54_reg_336 <= ap_phi_reg_pp0_iter1_empty_54_reg_336;
        ap_phi_reg_pp0_iter2_empty_reg_282 <= ap_phi_reg_pp0_iter1_empty_reg_282;
        ap_phi_reg_pp0_iter2_q_val_reg_273 <= ap_phi_reg_pp0_iter1_q_val_reg_273;
        ap_phi_reg_pp0_iter2_s_val_2_reg_194 <= ap_phi_reg_pp0_iter1_s_val_2_reg_194;
        icmp_ln61_reg_1382_pp0_iter1_reg <= icmp_ln61_reg_1382;
        tmp_50_reg_1455 <= a_stream_adpt_dout[32'd39];
        tmp_51_reg_1460 <= a_stream_adpt_dout[32'd59];
        tmp_52_reg_1465 <= a_stream_adpt_dout[32'd79];
        tmp_53_reg_1470 <= a_stream_adpt_dout[32'd99];
        tmp_54_reg_1475 <= a_stream_adpt_dout[32'd119];
        tmp_55_reg_1480 <= a_stream_adpt_dout[32'd139];
        tmp_56_reg_1485 <= a_stream_adpt_dout[32'd159];
        tmp_reg_1450 <= a_stream_adpt_dout[32'd19];
        trunc_ln67_1_reg_1394 <= {{a_stream_adpt_dout[39:20]}};
        trunc_ln67_2_reg_1402 <= {{a_stream_adpt_dout[59:40]}};
        trunc_ln67_3_reg_1410 <= {{a_stream_adpt_dout[79:60]}};
        trunc_ln67_4_reg_1418 <= {{a_stream_adpt_dout[99:80]}};
        trunc_ln67_5_reg_1426 <= {{a_stream_adpt_dout[119:100]}};
        trunc_ln67_6_reg_1434 <= {{a_stream_adpt_dout[139:120]}};
        trunc_ln67_7_reg_1442 <= {{a_stream_adpt_dout[159:140]}};
        trunc_ln67_reg_1386 <= trunc_ln67_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_phi_reg_pp0_iter3_empty_49_reg_291 <= ap_phi_reg_pp0_iter2_empty_49_reg_291;
        ap_phi_reg_pp0_iter3_empty_50_reg_300 <= ap_phi_reg_pp0_iter2_empty_50_reg_300;
        ap_phi_reg_pp0_iter3_empty_51_reg_309 <= ap_phi_reg_pp0_iter2_empty_51_reg_309;
        ap_phi_reg_pp0_iter3_empty_52_reg_318 <= ap_phi_reg_pp0_iter2_empty_52_reg_318;
        ap_phi_reg_pp0_iter3_empty_53_reg_327 <= ap_phi_reg_pp0_iter2_empty_53_reg_327;
        ap_phi_reg_pp0_iter3_empty_54_reg_336 <= ap_phi_reg_pp0_iter2_empty_54_reg_336;
        ap_phi_reg_pp0_iter3_empty_reg_282 <= ap_phi_reg_pp0_iter2_empty_reg_282;
        ap_phi_reg_pp0_iter3_q_val_reg_273 <= ap_phi_reg_pp0_iter2_q_val_reg_273;
        ap_phi_reg_pp0_iter3_s_val_2_reg_194 <= ap_phi_reg_pp0_iter2_s_val_2_reg_194;
        icmp_ln61_reg_1382_pp0_iter2_reg <= icmp_ln61_reg_1382_pp0_iter1_reg;
        sub_ln99_reg_1490 <= sub_ln99_fu_508_p2;
        tmp_50_reg_1455_pp0_iter2_reg <= tmp_50_reg_1455;
        tmp_51_reg_1460_pp0_iter2_reg <= tmp_51_reg_1460;
        tmp_52_reg_1465_pp0_iter2_reg <= tmp_52_reg_1465;
        tmp_53_reg_1470_pp0_iter2_reg <= tmp_53_reg_1470;
        tmp_54_reg_1475_pp0_iter2_reg <= tmp_54_reg_1475;
        tmp_55_reg_1480_pp0_iter2_reg <= tmp_55_reg_1480;
        tmp_56_reg_1485_pp0_iter2_reg <= tmp_56_reg_1485;
        tmp_reg_1450_pp0_iter2_reg <= tmp_reg_1450;
        trunc_ln67_1_reg_1394_pp0_iter2_reg <= trunc_ln67_1_reg_1394;
        trunc_ln67_2_reg_1402_pp0_iter2_reg <= trunc_ln67_2_reg_1402;
        trunc_ln67_3_reg_1410_pp0_iter2_reg <= trunc_ln67_3_reg_1410;
        trunc_ln67_4_reg_1418_pp0_iter2_reg <= trunc_ln67_4_reg_1418;
        trunc_ln67_5_reg_1426_pp0_iter2_reg <= trunc_ln67_5_reg_1426;
        trunc_ln67_6_reg_1434_pp0_iter2_reg <= trunc_ln67_6_reg_1434;
        trunc_ln67_7_reg_1442_pp0_iter2_reg <= trunc_ln67_7_reg_1442;
        trunc_ln67_reg_1386_pp0_iter2_reg <= trunc_ln67_reg_1386;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_phi_reg_pp0_iter4_empty_49_reg_291 <= ap_phi_reg_pp0_iter3_empty_49_reg_291;
        ap_phi_reg_pp0_iter4_empty_50_reg_300 <= ap_phi_reg_pp0_iter3_empty_50_reg_300;
        ap_phi_reg_pp0_iter4_empty_51_reg_309 <= ap_phi_reg_pp0_iter3_empty_51_reg_309;
        ap_phi_reg_pp0_iter4_empty_52_reg_318 <= ap_phi_reg_pp0_iter3_empty_52_reg_318;
        ap_phi_reg_pp0_iter4_empty_53_reg_327 <= ap_phi_reg_pp0_iter3_empty_53_reg_327;
        ap_phi_reg_pp0_iter4_empty_54_reg_336 <= ap_phi_reg_pp0_iter3_empty_54_reg_336;
        ap_phi_reg_pp0_iter4_empty_reg_282 <= ap_phi_reg_pp0_iter3_empty_reg_282;
        ap_phi_reg_pp0_iter4_q_val_reg_273 <= ap_phi_reg_pp0_iter3_q_val_reg_273;
        ap_phi_reg_pp0_iter4_s_val_2_reg_194 <= ap_phi_reg_pp0_iter3_s_val_2_reg_194;
        icmp_ln224_reg_1500 <= icmp_ln224_fu_522_p2;
        icmp_ln61_reg_1382_pp0_iter3_reg <= icmp_ln61_reg_1382_pp0_iter2_reg;
        sub_ln99_1_reg_1505 <= sub_ln99_1_fu_528_p2;
        tmp_50_reg_1455_pp0_iter3_reg <= tmp_50_reg_1455_pp0_iter2_reg;
        tmp_51_reg_1460_pp0_iter3_reg <= tmp_51_reg_1460_pp0_iter2_reg;
        tmp_52_reg_1465_pp0_iter3_reg <= tmp_52_reg_1465_pp0_iter2_reg;
        tmp_53_reg_1470_pp0_iter3_reg <= tmp_53_reg_1470_pp0_iter2_reg;
        tmp_54_reg_1475_pp0_iter3_reg <= tmp_54_reg_1475_pp0_iter2_reg;
        tmp_55_reg_1480_pp0_iter3_reg <= tmp_55_reg_1480_pp0_iter2_reg;
        tmp_56_reg_1485_pp0_iter3_reg <= tmp_56_reg_1485_pp0_iter2_reg;
        trunc_ln224_reg_1495 <= trunc_ln224_fu_518_p1;
        trunc_ln67_1_reg_1394_pp0_iter3_reg <= trunc_ln67_1_reg_1394_pp0_iter2_reg;
        trunc_ln67_2_reg_1402_pp0_iter3_reg <= trunc_ln67_2_reg_1402_pp0_iter2_reg;
        trunc_ln67_3_reg_1410_pp0_iter3_reg <= trunc_ln67_3_reg_1410_pp0_iter2_reg;
        trunc_ln67_4_reg_1418_pp0_iter3_reg <= trunc_ln67_4_reg_1418_pp0_iter2_reg;
        trunc_ln67_5_reg_1426_pp0_iter3_reg <= trunc_ln67_5_reg_1426_pp0_iter2_reg;
        trunc_ln67_6_reg_1434_pp0_iter3_reg <= trunc_ln67_6_reg_1434_pp0_iter2_reg;
        trunc_ln67_7_reg_1442_pp0_iter3_reg <= trunc_ln67_7_reg_1442_pp0_iter2_reg;
        trunc_ln67_reg_1386_pp0_iter3_reg <= trunc_ln67_reg_1386_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_phi_reg_pp0_iter5_empty_49_reg_291 <= ap_phi_reg_pp0_iter4_empty_49_reg_291;
        ap_phi_reg_pp0_iter5_empty_50_reg_300 <= ap_phi_reg_pp0_iter4_empty_50_reg_300;
        ap_phi_reg_pp0_iter5_empty_51_reg_309 <= ap_phi_reg_pp0_iter4_empty_51_reg_309;
        ap_phi_reg_pp0_iter5_empty_52_reg_318 <= ap_phi_reg_pp0_iter4_empty_52_reg_318;
        ap_phi_reg_pp0_iter5_empty_53_reg_327 <= ap_phi_reg_pp0_iter4_empty_53_reg_327;
        ap_phi_reg_pp0_iter5_empty_54_reg_336 <= ap_phi_reg_pp0_iter4_empty_54_reg_336;
        ap_phi_reg_pp0_iter5_empty_reg_282 <= ap_phi_reg_pp0_iter4_empty_reg_282;
        ap_phi_reg_pp0_iter5_q_val_reg_273 <= ap_phi_reg_pp0_iter4_q_val_reg_273;
        ap_phi_reg_pp0_iter5_s_val_2_reg_194 <= ap_phi_reg_pp0_iter4_s_val_2_reg_194;
        icmp_ln224_1_reg_1520 <= icmp_ln224_1_fu_552_p2;
        icmp_ln61_reg_1382_pp0_iter4_reg <= icmp_ln61_reg_1382_pp0_iter3_reg;
        select_ln99_1_reg_1510 <= select_ln99_1_fu_533_p3;
        sub_ln99_2_reg_1525 <= sub_ln99_2_fu_558_p2;
        tmp_51_reg_1460_pp0_iter4_reg <= tmp_51_reg_1460_pp0_iter3_reg;
        tmp_52_reg_1465_pp0_iter4_reg <= tmp_52_reg_1465_pp0_iter3_reg;
        tmp_53_reg_1470_pp0_iter4_reg <= tmp_53_reg_1470_pp0_iter3_reg;
        tmp_54_reg_1475_pp0_iter4_reg <= tmp_54_reg_1475_pp0_iter3_reg;
        tmp_55_reg_1480_pp0_iter4_reg <= tmp_55_reg_1480_pp0_iter3_reg;
        tmp_56_reg_1485_pp0_iter4_reg <= tmp_56_reg_1485_pp0_iter3_reg;
        trunc_ln224_8_reg_1515 <= trunc_ln224_8_fu_548_p1;
        trunc_ln67_1_reg_1394_pp0_iter4_reg <= trunc_ln67_1_reg_1394_pp0_iter3_reg;
        trunc_ln67_2_reg_1402_pp0_iter4_reg <= trunc_ln67_2_reg_1402_pp0_iter3_reg;
        trunc_ln67_3_reg_1410_pp0_iter4_reg <= trunc_ln67_3_reg_1410_pp0_iter3_reg;
        trunc_ln67_4_reg_1418_pp0_iter4_reg <= trunc_ln67_4_reg_1418_pp0_iter3_reg;
        trunc_ln67_5_reg_1426_pp0_iter4_reg <= trunc_ln67_5_reg_1426_pp0_iter3_reg;
        trunc_ln67_6_reg_1434_pp0_iter4_reg <= trunc_ln67_6_reg_1434_pp0_iter3_reg;
        trunc_ln67_7_reg_1442_pp0_iter4_reg <= trunc_ln67_7_reg_1442_pp0_iter3_reg;
        trunc_ln67_reg_1386_pp0_iter4_reg <= trunc_ln67_reg_1386_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_phi_reg_pp0_iter6_empty_49_reg_291 <= ap_phi_reg_pp0_iter5_empty_49_reg_291;
        ap_phi_reg_pp0_iter6_empty_50_reg_300 <= ap_phi_reg_pp0_iter5_empty_50_reg_300;
        ap_phi_reg_pp0_iter6_empty_51_reg_309 <= ap_phi_reg_pp0_iter5_empty_51_reg_309;
        ap_phi_reg_pp0_iter6_empty_52_reg_318 <= ap_phi_reg_pp0_iter5_empty_52_reg_318;
        ap_phi_reg_pp0_iter6_empty_53_reg_327 <= ap_phi_reg_pp0_iter5_empty_53_reg_327;
        ap_phi_reg_pp0_iter6_empty_54_reg_336 <= ap_phi_reg_pp0_iter5_empty_54_reg_336;
        ap_phi_reg_pp0_iter6_empty_reg_282 <= ap_phi_reg_pp0_iter5_empty_reg_282;
        ap_phi_reg_pp0_iter6_q_val_reg_273 <= ap_phi_reg_pp0_iter5_q_val_reg_273;
        ap_phi_reg_pp0_iter6_s_val_2_reg_194 <= ap_phi_reg_pp0_iter5_s_val_2_reg_194;
        icmp_ln224_2_reg_1540 <= icmp_ln224_2_fu_581_p2;
        icmp_ln61_reg_1382_pp0_iter5_reg <= icmp_ln61_reg_1382_pp0_iter4_reg;
        select_ln99_3_reg_1530 <= select_ln99_3_fu_563_p3;
        sub_ln99_3_reg_1545 <= sub_ln99_3_fu_587_p2;
        tmp_52_reg_1465_pp0_iter5_reg <= tmp_52_reg_1465_pp0_iter4_reg;
        tmp_53_reg_1470_pp0_iter5_reg <= tmp_53_reg_1470_pp0_iter4_reg;
        tmp_54_reg_1475_pp0_iter5_reg <= tmp_54_reg_1475_pp0_iter4_reg;
        tmp_55_reg_1480_pp0_iter5_reg <= tmp_55_reg_1480_pp0_iter4_reg;
        tmp_56_reg_1485_pp0_iter5_reg <= tmp_56_reg_1485_pp0_iter4_reg;
        trunc_ln224_9_reg_1535 <= trunc_ln224_9_fu_577_p1;
        trunc_ln67_1_reg_1394_pp0_iter5_reg <= trunc_ln67_1_reg_1394_pp0_iter4_reg;
        trunc_ln67_2_reg_1402_pp0_iter5_reg <= trunc_ln67_2_reg_1402_pp0_iter4_reg;
        trunc_ln67_3_reg_1410_pp0_iter5_reg <= trunc_ln67_3_reg_1410_pp0_iter4_reg;
        trunc_ln67_4_reg_1418_pp0_iter5_reg <= trunc_ln67_4_reg_1418_pp0_iter4_reg;
        trunc_ln67_5_reg_1426_pp0_iter5_reg <= trunc_ln67_5_reg_1426_pp0_iter4_reg;
        trunc_ln67_6_reg_1434_pp0_iter5_reg <= trunc_ln67_6_reg_1434_pp0_iter4_reg;
        trunc_ln67_7_reg_1442_pp0_iter5_reg <= trunc_ln67_7_reg_1442_pp0_iter4_reg;
        trunc_ln67_reg_1386_pp0_iter5_reg <= trunc_ln67_reg_1386_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_phi_reg_pp0_iter7_empty_49_reg_291 <= ap_phi_reg_pp0_iter6_empty_49_reg_291;
        ap_phi_reg_pp0_iter7_empty_50_reg_300 <= ap_phi_reg_pp0_iter6_empty_50_reg_300;
        ap_phi_reg_pp0_iter7_empty_51_reg_309 <= ap_phi_reg_pp0_iter6_empty_51_reg_309;
        ap_phi_reg_pp0_iter7_empty_52_reg_318 <= ap_phi_reg_pp0_iter6_empty_52_reg_318;
        ap_phi_reg_pp0_iter7_empty_53_reg_327 <= ap_phi_reg_pp0_iter6_empty_53_reg_327;
        ap_phi_reg_pp0_iter7_empty_54_reg_336 <= ap_phi_reg_pp0_iter6_empty_54_reg_336;
        ap_phi_reg_pp0_iter7_empty_reg_282 <= ap_phi_reg_pp0_iter6_empty_reg_282;
        ap_phi_reg_pp0_iter7_q_val_reg_273 <= ap_phi_reg_pp0_iter6_q_val_reg_273;
        ap_phi_reg_pp0_iter7_s_val_2_reg_194 <= ap_phi_reg_pp0_iter6_s_val_2_reg_194;
        icmp_ln224_3_reg_1560 <= icmp_ln224_3_fu_610_p2;
        icmp_ln61_reg_1382_pp0_iter6_reg <= icmp_ln61_reg_1382_pp0_iter5_reg;
        select_ln99_5_reg_1550 <= select_ln99_5_fu_592_p3;
        sub_ln99_4_reg_1565 <= sub_ln99_4_fu_616_p2;
        tmp_53_reg_1470_pp0_iter6_reg <= tmp_53_reg_1470_pp0_iter5_reg;
        tmp_54_reg_1475_pp0_iter6_reg <= tmp_54_reg_1475_pp0_iter5_reg;
        tmp_55_reg_1480_pp0_iter6_reg <= tmp_55_reg_1480_pp0_iter5_reg;
        tmp_56_reg_1485_pp0_iter6_reg <= tmp_56_reg_1485_pp0_iter5_reg;
        trunc_ln224_10_reg_1555 <= trunc_ln224_10_fu_606_p1;
        trunc_ln67_1_reg_1394_pp0_iter6_reg <= trunc_ln67_1_reg_1394_pp0_iter5_reg;
        trunc_ln67_2_reg_1402_pp0_iter6_reg <= trunc_ln67_2_reg_1402_pp0_iter5_reg;
        trunc_ln67_3_reg_1410_pp0_iter6_reg <= trunc_ln67_3_reg_1410_pp0_iter5_reg;
        trunc_ln67_4_reg_1418_pp0_iter6_reg <= trunc_ln67_4_reg_1418_pp0_iter5_reg;
        trunc_ln67_5_reg_1426_pp0_iter6_reg <= trunc_ln67_5_reg_1426_pp0_iter5_reg;
        trunc_ln67_6_reg_1434_pp0_iter6_reg <= trunc_ln67_6_reg_1434_pp0_iter5_reg;
        trunc_ln67_7_reg_1442_pp0_iter6_reg <= trunc_ln67_7_reg_1442_pp0_iter5_reg;
        trunc_ln67_reg_1386_pp0_iter6_reg <= trunc_ln67_reg_1386_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_phi_reg_pp0_iter8_empty_49_reg_291 <= ap_phi_reg_pp0_iter7_empty_49_reg_291;
        ap_phi_reg_pp0_iter8_empty_50_reg_300 <= ap_phi_reg_pp0_iter7_empty_50_reg_300;
        ap_phi_reg_pp0_iter8_empty_51_reg_309 <= ap_phi_reg_pp0_iter7_empty_51_reg_309;
        ap_phi_reg_pp0_iter8_empty_52_reg_318 <= ap_phi_reg_pp0_iter7_empty_52_reg_318;
        ap_phi_reg_pp0_iter8_empty_53_reg_327 <= ap_phi_reg_pp0_iter7_empty_53_reg_327;
        ap_phi_reg_pp0_iter8_empty_54_reg_336 <= ap_phi_reg_pp0_iter7_empty_54_reg_336;
        ap_phi_reg_pp0_iter8_empty_reg_282 <= ap_phi_reg_pp0_iter7_empty_reg_282;
        ap_phi_reg_pp0_iter8_q_val_reg_273 <= ap_phi_reg_pp0_iter7_q_val_reg_273;
        ap_phi_reg_pp0_iter8_s_val_2_reg_194 <= ap_phi_reg_pp0_iter7_s_val_2_reg_194;
        icmp_ln224_4_reg_1580 <= icmp_ln224_4_fu_639_p2;
        icmp_ln61_reg_1382_pp0_iter7_reg <= icmp_ln61_reg_1382_pp0_iter6_reg;
        select_ln99_7_reg_1570 <= select_ln99_7_fu_621_p3;
        sub_ln99_5_reg_1585 <= sub_ln99_5_fu_645_p2;
        tmp_54_reg_1475_pp0_iter7_reg <= tmp_54_reg_1475_pp0_iter6_reg;
        tmp_55_reg_1480_pp0_iter7_reg <= tmp_55_reg_1480_pp0_iter6_reg;
        tmp_56_reg_1485_pp0_iter7_reg <= tmp_56_reg_1485_pp0_iter6_reg;
        trunc_ln224_11_reg_1575 <= trunc_ln224_11_fu_635_p1;
        trunc_ln67_1_reg_1394_pp0_iter7_reg <= trunc_ln67_1_reg_1394_pp0_iter6_reg;
        trunc_ln67_2_reg_1402_pp0_iter7_reg <= trunc_ln67_2_reg_1402_pp0_iter6_reg;
        trunc_ln67_3_reg_1410_pp0_iter7_reg <= trunc_ln67_3_reg_1410_pp0_iter6_reg;
        trunc_ln67_4_reg_1418_pp0_iter7_reg <= trunc_ln67_4_reg_1418_pp0_iter6_reg;
        trunc_ln67_5_reg_1426_pp0_iter7_reg <= trunc_ln67_5_reg_1426_pp0_iter6_reg;
        trunc_ln67_6_reg_1434_pp0_iter7_reg <= trunc_ln67_6_reg_1434_pp0_iter6_reg;
        trunc_ln67_7_reg_1442_pp0_iter7_reg <= trunc_ln67_7_reg_1442_pp0_iter6_reg;
        trunc_ln67_reg_1386_pp0_iter7_reg <= trunc_ln67_reg_1386_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_phi_reg_pp0_iter9_empty_49_reg_291 <= ap_phi_reg_pp0_iter8_empty_49_reg_291;
        ap_phi_reg_pp0_iter9_empty_50_reg_300 <= ap_phi_reg_pp0_iter8_empty_50_reg_300;
        ap_phi_reg_pp0_iter9_empty_51_reg_309 <= ap_phi_reg_pp0_iter8_empty_51_reg_309;
        ap_phi_reg_pp0_iter9_empty_52_reg_318 <= ap_phi_reg_pp0_iter8_empty_52_reg_318;
        ap_phi_reg_pp0_iter9_empty_53_reg_327 <= ap_phi_reg_pp0_iter8_empty_53_reg_327;
        ap_phi_reg_pp0_iter9_empty_54_reg_336 <= ap_phi_reg_pp0_iter8_empty_54_reg_336;
        ap_phi_reg_pp0_iter9_empty_reg_282 <= ap_phi_reg_pp0_iter8_empty_reg_282;
        ap_phi_reg_pp0_iter9_q_val_reg_273 <= ap_phi_reg_pp0_iter8_q_val_reg_273;
        ap_phi_reg_pp0_iter9_s_val_2_reg_194 <= ap_phi_reg_pp0_iter8_s_val_2_reg_194;
        icmp_ln224_5_reg_1600 <= icmp_ln224_5_fu_668_p2;
        icmp_ln61_reg_1382_pp0_iter8_reg <= icmp_ln61_reg_1382_pp0_iter7_reg;
        select_ln99_9_reg_1590 <= select_ln99_9_fu_650_p3;
        sub_ln99_6_reg_1605 <= sub_ln99_6_fu_674_p2;
        tmp_55_reg_1480_pp0_iter8_reg <= tmp_55_reg_1480_pp0_iter7_reg;
        tmp_56_reg_1485_pp0_iter8_reg <= tmp_56_reg_1485_pp0_iter7_reg;
        trunc_ln224_12_reg_1595 <= trunc_ln224_12_fu_664_p1;
        trunc_ln67_1_reg_1394_pp0_iter8_reg <= trunc_ln67_1_reg_1394_pp0_iter7_reg;
        trunc_ln67_2_reg_1402_pp0_iter8_reg <= trunc_ln67_2_reg_1402_pp0_iter7_reg;
        trunc_ln67_3_reg_1410_pp0_iter8_reg <= trunc_ln67_3_reg_1410_pp0_iter7_reg;
        trunc_ln67_4_reg_1418_pp0_iter8_reg <= trunc_ln67_4_reg_1418_pp0_iter7_reg;
        trunc_ln67_5_reg_1426_pp0_iter8_reg <= trunc_ln67_5_reg_1426_pp0_iter7_reg;
        trunc_ln67_6_reg_1434_pp0_iter8_reg <= trunc_ln67_6_reg_1434_pp0_iter7_reg;
        trunc_ln67_7_reg_1442_pp0_iter8_reg <= trunc_ln67_7_reg_1442_pp0_iter7_reg;
        trunc_ln67_reg_1386_pp0_iter8_reg <= trunc_ln67_reg_1386_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        icmp_ln61_reg_1382_pp0_iter16_reg <= icmp_ln61_reg_1382_pp0_iter15_reg;
        s_val_reg_1732_pp0_iter16_reg <= s_val_reg_1732_pp0_iter15_reg;
        select_ln123_1_reg_1831 <= select_ln123_1_fu_1186_p3;
        select_ln123_2_reg_1836 <= select_ln123_2_fu_1234_p3;
        select_ln123_3_reg_1841 <= select_ln123_3_fu_1282_p3;
        select_ln123_4_reg_1846 <= select_ln123_4_fu_1330_p3;
        select_ln123_5_reg_1851 <= select_ln123_5_fu_1338_p3;
        select_ln123_6_reg_1856 <= select_ln123_6_fu_1346_p3;
        select_ln123_7_reg_1861 <= select_ln123_7_fu_1354_p3;
        select_ln123_reg_1826 <= select_ln123_fu_1158_p3;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1382 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_stream_adpt_blk_n = a_stream_adpt_empty_n;
    end else begin
        a_stream_adpt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (icmp_ln61_reg_1382 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_stream_adpt_read = 1'b1;
    end else begin
        a_stream_adpt_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

assign ap_ST_iter15_fsm_state16_blk = 1'b0;

assign ap_ST_iter16_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state18_pp0_stage0_iter17)) begin
        ap_ST_iter17_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_iter17_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (icmp_ln61_fu_353_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter17_fsm_state18) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter17_fsm_state0) & (1'b1 == ap_CS_iter16_fsm_state0) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0) & (1'b1 == ap_CS_iter5_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_170;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1382_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        aq_stream_adpt_blk_n = aq_stream_adpt_full_n;
    end else begin
        aq_stream_adpt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1382_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        aq_stream_adpt_write = 1'b1;
    end else begin
        aq_stream_adpt_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_1382_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        as_stream_adpt_blk_n = as_stream_adpt_full_n;
    end else begin
        as_stream_adpt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1382_pp0_iter16_reg == 1'd0) & (1'b1 == ap_CS_iter17_fsm_state18))) begin
        as_stream_adpt_write = 1'b1;
    end else begin
        as_stream_adpt_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_pp0_stage0_iter1) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter16_fsm)
        ap_ST_iter16_fsm_state17 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b0 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end
        end
        ap_ST_iter16_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter16_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter17_fsm)
        ap_ST_iter17_fsm_state18 : begin
            if ((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter16_fsm_state17))) begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state0;
            end else if (((~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17)) | (~((1'b1 == ap_block_state18_pp0_stage0_iter17) | (ap_done_reg == 1'b1)) & (icmp_ln61_reg_1382_pp0_iter16_reg == 1'd1) & (1'b1 == ap_CS_iter17_fsm_state18)))) begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state18;
            end else begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state18;
            end
        end
        ap_ST_iter17_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state18;
            end else begin
                ap_NS_iter17_fsm = ap_ST_iter17_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter17_fsm = 'bx;
        end
    endcase
end

assign abs_max_fu_732_p3 = ((icmp_ln224_7_reg_1640[0:0] == 1'b1) ? trunc_ln224_14_reg_1635 : select_ln99_13_reg_1630);

assign add_ln119_fu_937_p2 = ($signed(s_val_fu_923_p3) + $signed(4'd15));

assign add_ln120_1_fu_1005_p2 = (ashr_ln119_1_reg_1751 + 20'd1);

assign add_ln120_2_fu_1024_p2 = (ashr_ln119_2_reg_1756 + 20'd1);

assign add_ln120_3_fu_1043_p2 = (ashr_ln119_3_reg_1761 + 20'd1);

assign add_ln120_4_fu_1062_p2 = (ashr_ln119_4_reg_1766 + 20'd1);

assign add_ln120_5_fu_1081_p2 = (ashr_ln119_5_reg_1771 + 20'd1);

assign add_ln120_6_fu_1100_p2 = (ashr_ln119_6_reg_1776 + 20'd1);

assign add_ln120_7_fu_1119_p2 = (ashr_ln119_7_reg_1781 + 20'd1);

assign add_ln120_fu_986_p2 = (ashr_ln119_reg_1746 + 20'd1);

assign add_ln61_fu_359_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 10'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter16_fsm_state0 = ap_CS_iter16_fsm[32'd0];

assign ap_CS_iter16_fsm_state17 = ap_CS_iter16_fsm[32'd1];

assign ap_CS_iter17_fsm_state0 = ap_CS_iter17_fsm[32'd0];

assign ap_CS_iter17_fsm_state18 = ap_CS_iter17_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17 = (((as_stream_adpt_full_n == 1'b0) & (icmp_ln61_reg_1382_pp0_iter16_reg == 1'd0)) | ((icmp_ln61_reg_1382_pp0_iter16_reg == 1'd0) & (aq_stream_adpt_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'b0 == a_stream_adpt_empty_n) & (icmp_ln61_reg_1382 == 1'd0));
end

always @ (*) begin
    ap_condition_1003 = ((tmp_63_fu_803_p3 == 1'd1) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1009 = ((tmp_64_fu_811_p3 == 1'd1) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1015 = ((tmp_65_fu_819_p3 == 1'd1) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1021 = ((tmp_66_fu_827_p3 == 1'd1) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1027 = ((tmp_67_fu_835_p3 == 1'd1) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1033 = ((tmp_68_fu_843_p3 == 1'd1) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1039 = ((tmp_69_fu_851_p3 == 1'd1) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1045 = ((tmp_70_fu_859_p3 == 1'd1) & (tmp_69_fu_851_p3 == 1'd0) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1051 = ((tmp_71_fu_867_p3 == 1'd1) & (tmp_70_fu_859_p3 == 1'd0) & (tmp_69_fu_851_p3 == 1'd0) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1057 = ((tmp_72_fu_875_p3 == 1'd1) & (tmp_71_fu_867_p3 == 1'd0) & (tmp_70_fu_859_p3 == 1'd0) & (tmp_69_fu_851_p3 == 1'd0) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1063 = ((tmp_73_fu_883_p3 == 1'd1) & (tmp_72_fu_875_p3 == 1'd0) & (tmp_71_fu_867_p3 == 1'd0) & (tmp_70_fu_859_p3 == 1'd0) & (tmp_69_fu_851_p3 == 1'd0) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1069 = ((tmp_74_fu_891_p3 == 1'd1) & (tmp_73_fu_883_p3 == 1'd0) & (tmp_72_fu_875_p3 == 1'd0) & (tmp_71_fu_867_p3 == 1'd0) & (tmp_70_fu_859_p3 == 1'd0) & (tmp_69_fu_851_p3 == 1'd0) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1072 = ((tmp_74_fu_891_p3 == 1'd0) & (tmp_73_fu_883_p3 == 1'd0) & (tmp_72_fu_875_p3 == 1'd0) & (tmp_71_fu_867_p3 == 1'd0) & (tmp_70_fu_859_p3 == 1'd0) & (tmp_69_fu_851_p3 == 1'd0) & (tmp_68_fu_843_p3 == 1'd0) & (tmp_67_fu_835_p3 == 1'd0) & (tmp_66_fu_827_p3 == 1'd0) & (tmp_65_fu_819_p3 == 1'd0) & (tmp_64_fu_811_p3 == 1'd0) & (tmp_63_fu_803_p3 == 1'd0) & (tmp_62_fu_795_p3 == 1'd0) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_302 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18)) | ((1'b1 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_368 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter12_fsm_state13));
end

always @ (*) begin
    ap_condition_370 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter13_fsm_state14));
end

always @ (*) begin
    ap_condition_374 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state18_pp0_stage0_iter17) & (1'b1 == ap_CS_iter17_fsm_state18))) & (1'b1 == ap_CS_iter15_fsm_state16));
end

always @ (*) begin
    ap_condition_972 = ((tmp_58_fu_763_p3 == 1'd1) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_978 = ((tmp_59_fu_771_p3 == 1'd1) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_985 = ((tmp_60_fu_779_p3 == 1'd1) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_991 = ((tmp_61_fu_787_p3 == 1'd1) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

always @ (*) begin
    ap_condition_997 = ((tmp_62_fu_795_p3 == 1'd1) & (tmp_61_fu_787_p3 == 1'd0) & (tmp_60_fu_779_p3 == 1'd0) & (tmp_59_fu_771_p3 == 1'd0) & (tmp_58_fu_763_p3 == 1'd0) & (tmp_57_fu_755_p3 == 1'd0) & (icmp_ln61_reg_1382_pp0_iter11_reg == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_49_reg_291 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_50_reg_300 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_51_reg_309 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_52_reg_318 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_53_reg_327 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_54_reg_336 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_282 = 'bx;

assign ap_phi_reg_pp0_iter0_q_val_reg_273 = 'bx;

assign ap_phi_reg_pp0_iter0_s_val_2_reg_194 = 'bx;

assign ap_ready = internal_ap_ready;

assign aq_stream_adpt_din = {{{{{{{{select_ln123_4_reg_1846}, {select_ln123_7_reg_1861}}, {select_ln123_3_reg_1841}}, {select_ln123_6_reg_1856}}, {select_ln123_2_reg_1836}}, {select_ln123_5_reg_1851}}, {select_ln123_1_reg_1831}}, {select_ln123_reg_1826}};

assign as_stream_adpt_din = s_val_reg_1732_pp0_iter16_reg;

assign ashr_ln119_1_fu_951_p2 = $signed(trunc_ln67_1_reg_1394_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_2_fu_956_p2 = $signed(trunc_ln67_2_reg_1402_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_3_fu_961_p2 = $signed(trunc_ln67_3_reg_1410_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_4_fu_966_p2 = $signed(trunc_ln67_4_reg_1418_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_5_fu_971_p2 = $signed(trunc_ln67_5_reg_1426_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_6_fu_976_p2 = $signed(trunc_ln67_6_reg_1434_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_7_fu_981_p2 = $signed(trunc_ln67_7_reg_1442_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign ashr_ln119_fu_946_p2 = $signed(trunc_ln67_reg_1386_pp0_iter13_reg) >>> zext_ln119_fu_943_p1;

assign icmp_ln118_fu_931_p2 = ((s_val_fu_923_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_737_p2 = ((abs_max_fu_732_p3 != 19'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_10_fu_1224_p2 = (($signed(tmp_79_fu_1214_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_11_fu_1252_p2 = (($signed(tmp_80_fu_1242_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_12_fu_1272_p2 = (($signed(tmp_81_fu_1262_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_13_fu_1300_p2 = (($signed(tmp_82_fu_1290_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_14_fu_1320_p2 = (($signed(tmp_83_fu_1310_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_8_fu_1176_p2 = (($signed(tmp_77_fu_1166_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_9_fu_1204_p2 = (($signed(tmp_78_fu_1194_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_1148_p2 = (($signed(tmp_76_fu_1138_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_552_p2 = (($signed(zext_ln99_fu_539_p1) < $signed(select_ln99_2_fu_543_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_581_p2 = (($signed(zext_ln99_1_fu_568_p1) < $signed(select_ln99_4_fu_572_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_610_p2 = (($signed(zext_ln99_2_fu_597_p1) < $signed(select_ln99_6_fu_601_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_4_fu_639_p2 = (($signed(zext_ln99_3_fu_626_p1) < $signed(select_ln99_8_fu_630_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_5_fu_668_p2 = (($signed(zext_ln99_4_fu_655_p1) < $signed(select_ln99_10_fu_659_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_6_fu_697_p2 = (($signed(zext_ln99_5_fu_684_p1) < $signed(select_ln99_12_fu_688_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_7_fu_726_p2 = (($signed(zext_ln99_6_fu_713_p1) < $signed(select_ln99_14_fu_717_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_522_p2 = (($signed(select_ln99_fu_513_p3) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_353_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 10'd896) ? 1'b1 : 1'b0);

assign s_val_fu_923_p3 = ((tmp_75_fu_911_p3[0:0] == 1'b1) ? 4'd0 : trunc_ln108_fu_919_p1);

assign select_ln123_1_fu_1186_p3 = ((icmp_ln200_8_fu_1176_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_8_fu_1182_p1);

assign select_ln123_2_fu_1234_p3 = ((icmp_ln200_10_fu_1224_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_10_fu_1230_p1);

assign select_ln123_3_fu_1282_p3 = ((icmp_ln200_12_fu_1272_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_12_fu_1278_p1);

assign select_ln123_4_fu_1330_p3 = ((icmp_ln200_14_fu_1320_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_14_fu_1326_p1);

assign select_ln123_5_fu_1338_p3 = ((icmp_ln200_9_fu_1204_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_9_fu_1210_p1);

assign select_ln123_6_fu_1346_p3 = ((icmp_ln200_11_fu_1252_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_11_fu_1258_p1);

assign select_ln123_7_fu_1354_p3 = ((icmp_ln200_13_fu_1300_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_13_fu_1306_p1);

assign select_ln123_fu_1158_p3 = ((icmp_ln200_fu_1148_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_fu_1154_p1);

assign select_ln16_fu_903_p3 = ((trunc_ln16_fu_899_p1[0:0] == 1'b1) ? 5'd26 : 5'd25);

assign select_ln99_10_fu_659_p3 = ((tmp_54_reg_1475_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln99_5_reg_1585 : trunc_ln67_5_reg_1426_pp0_iter7_reg);

assign select_ln99_11_fu_679_p3 = ((icmp_ln224_5_reg_1600[0:0] == 1'b1) ? trunc_ln224_12_reg_1595 : select_ln99_9_reg_1590);

assign select_ln99_12_fu_688_p3 = ((tmp_55_reg_1480_pp0_iter8_reg[0:0] == 1'b1) ? sub_ln99_6_reg_1605 : trunc_ln67_6_reg_1434_pp0_iter8_reg);

assign select_ln99_13_fu_708_p3 = ((icmp_ln224_6_reg_1620[0:0] == 1'b1) ? trunc_ln224_13_reg_1615 : select_ln99_11_reg_1610);

assign select_ln99_14_fu_717_p3 = ((tmp_56_reg_1485_pp0_iter9_reg[0:0] == 1'b1) ? sub_ln99_7_reg_1625 : trunc_ln67_7_reg_1442_pp0_iter9_reg);

assign select_ln99_1_fu_533_p3 = ((icmp_ln224_reg_1500[0:0] == 1'b1) ? trunc_ln224_reg_1495 : 19'd0);

assign select_ln99_2_fu_543_p3 = ((tmp_50_reg_1455_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln99_1_reg_1505 : trunc_ln67_1_reg_1394_pp0_iter3_reg);

assign select_ln99_3_fu_563_p3 = ((icmp_ln224_1_reg_1520[0:0] == 1'b1) ? trunc_ln224_8_reg_1515 : select_ln99_1_reg_1510);

assign select_ln99_4_fu_572_p3 = ((tmp_51_reg_1460_pp0_iter4_reg[0:0] == 1'b1) ? sub_ln99_2_reg_1525 : trunc_ln67_2_reg_1402_pp0_iter4_reg);

assign select_ln99_5_fu_592_p3 = ((icmp_ln224_2_reg_1540[0:0] == 1'b1) ? trunc_ln224_9_reg_1535 : select_ln99_3_reg_1530);

assign select_ln99_6_fu_601_p3 = ((tmp_52_reg_1465_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln99_3_reg_1545 : trunc_ln67_3_reg_1410_pp0_iter5_reg);

assign select_ln99_7_fu_621_p3 = ((icmp_ln224_3_reg_1560[0:0] == 1'b1) ? trunc_ln224_10_reg_1555 : select_ln99_5_reg_1550);

assign select_ln99_8_fu_630_p3 = ((tmp_53_reg_1470_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln99_4_reg_1565 : trunc_ln67_4_reg_1418_pp0_iter6_reg);

assign select_ln99_9_fu_650_p3 = ((icmp_ln224_4_reg_1580[0:0] == 1'b1) ? trunc_ln224_11_reg_1575 : select_ln99_7_reg_1570);

assign select_ln99_fu_513_p3 = ((tmp_reg_1450_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln99_reg_1490 : trunc_ln67_reg_1386_pp0_iter2_reg);

assign sext_ln121_1_fu_1020_p1 = $signed(trunc_ln_fu_1010_p4);

assign sext_ln121_2_fu_1039_p1 = $signed(trunc_ln121_2_fu_1029_p4);

assign sext_ln121_3_fu_1058_p1 = $signed(trunc_ln121_3_fu_1048_p4);

assign sext_ln121_4_fu_1077_p1 = $signed(trunc_ln121_4_fu_1067_p4);

assign sext_ln121_5_fu_1096_p1 = $signed(trunc_ln121_5_fu_1086_p4);

assign sext_ln121_6_fu_1115_p1 = $signed(trunc_ln121_6_fu_1105_p4);

assign sext_ln121_7_fu_1134_p1 = $signed(trunc_ln121_7_fu_1124_p4);

assign sext_ln121_fu_1001_p1 = $signed(trunc_ln121_1_fu_991_p4);

assign start_out = real_start;

assign sub_ln99_1_fu_528_p2 = (20'd0 - trunc_ln67_1_reg_1394_pp0_iter2_reg);

assign sub_ln99_2_fu_558_p2 = (20'd0 - trunc_ln67_2_reg_1402_pp0_iter3_reg);

assign sub_ln99_3_fu_587_p2 = (20'd0 - trunc_ln67_3_reg_1410_pp0_iter4_reg);

assign sub_ln99_4_fu_616_p2 = (20'd0 - trunc_ln67_4_reg_1418_pp0_iter5_reg);

assign sub_ln99_5_fu_645_p2 = (20'd0 - trunc_ln67_5_reg_1426_pp0_iter6_reg);

assign sub_ln99_6_fu_674_p2 = (20'd0 - trunc_ln67_6_reg_1434_pp0_iter7_reg);

assign sub_ln99_7_fu_703_p2 = (20'd0 - trunc_ln67_7_reg_1442_pp0_iter8_reg);

assign sub_ln99_fu_508_p2 = (20'd0 - trunc_ln67_reg_1386);

assign tmp_57_fu_755_p3 = x_4_fu_749_p3[32'd18];

assign tmp_58_fu_763_p3 = x_4_fu_749_p3[32'd17];

assign tmp_59_fu_771_p3 = x_4_fu_749_p3[32'd16];

assign tmp_60_fu_779_p3 = x_4_fu_749_p3[32'd15];

assign tmp_61_fu_787_p3 = x_4_fu_749_p3[32'd14];

assign tmp_62_fu_795_p3 = x_4_fu_749_p3[32'd13];

assign tmp_63_fu_803_p3 = x_4_fu_749_p3[32'd12];

assign tmp_64_fu_811_p3 = x_4_fu_749_p3[32'd11];

assign tmp_65_fu_819_p3 = x_4_fu_749_p3[32'd10];

assign tmp_66_fu_827_p3 = x_4_fu_749_p3[32'd9];

assign tmp_67_fu_835_p3 = x_4_fu_749_p3[32'd8];

assign tmp_68_fu_843_p3 = x_4_fu_749_p3[32'd7];

assign tmp_69_fu_851_p3 = x_4_fu_749_p3[32'd6];

assign tmp_70_fu_859_p3 = x_4_fu_749_p3[32'd5];

assign tmp_71_fu_867_p3 = x_4_fu_749_p3[32'd4];

assign tmp_72_fu_875_p3 = x_4_fu_749_p3[32'd3];

assign tmp_73_fu_883_p3 = x_4_fu_749_p3[32'd2];

assign tmp_74_fu_891_p3 = x_4_fu_749_p3[32'd1];

assign tmp_75_fu_911_p3 = ap_phi_reg_pp0_iter13_s_val_2_reg_194[32'd4];

assign tmp_76_fu_1138_p4 = {{ap_phi_reg_pp0_iter16_empty_51_reg_309[19:7]}};

assign tmp_77_fu_1166_p4 = {{ap_phi_reg_pp0_iter16_empty_52_reg_318[19:7]}};

assign tmp_78_fu_1194_p4 = {{ap_phi_reg_pp0_iter16_empty_50_reg_300[19:7]}};

assign tmp_79_fu_1214_p4 = {{ap_phi_reg_pp0_iter16_empty_53_reg_327[19:7]}};

assign tmp_80_fu_1242_p4 = {{ap_phi_reg_pp0_iter16_empty_49_reg_291[19:7]}};

assign tmp_81_fu_1262_p4 = {{ap_phi_reg_pp0_iter16_empty_54_reg_336[19:7]}};

assign tmp_82_fu_1290_p4 = {{ap_phi_reg_pp0_iter16_empty_reg_282[19:7]}};

assign tmp_83_fu_1310_p4 = {{ap_phi_reg_pp0_iter16_q_val_reg_273[19:7]}};

assign trunc_ln108_fu_919_p1 = ap_phi_reg_pp0_iter13_s_val_2_reg_194[3:0];

assign trunc_ln121_1_fu_991_p4 = {{add_ln120_fu_986_p2[19:1]}};

assign trunc_ln121_2_fu_1029_p4 = {{add_ln120_2_fu_1024_p2[19:1]}};

assign trunc_ln121_3_fu_1048_p4 = {{add_ln120_3_fu_1043_p2[19:1]}};

assign trunc_ln121_4_fu_1067_p4 = {{add_ln120_4_fu_1062_p2[19:1]}};

assign trunc_ln121_5_fu_1086_p4 = {{add_ln120_5_fu_1081_p2[19:1]}};

assign trunc_ln121_6_fu_1105_p4 = {{add_ln120_6_fu_1100_p2[19:1]}};

assign trunc_ln121_7_fu_1124_p4 = {{add_ln120_7_fu_1119_p2[19:1]}};

assign trunc_ln123_10_fu_1230_p1 = ap_phi_reg_pp0_iter16_empty_53_reg_327[7:0];

assign trunc_ln123_11_fu_1258_p1 = ap_phi_reg_pp0_iter16_empty_49_reg_291[7:0];

assign trunc_ln123_12_fu_1278_p1 = ap_phi_reg_pp0_iter16_empty_54_reg_336[7:0];

assign trunc_ln123_13_fu_1306_p1 = ap_phi_reg_pp0_iter16_empty_reg_282[7:0];

assign trunc_ln123_14_fu_1326_p1 = ap_phi_reg_pp0_iter16_q_val_reg_273[7:0];

assign trunc_ln123_8_fu_1182_p1 = ap_phi_reg_pp0_iter16_empty_52_reg_318[7:0];

assign trunc_ln123_9_fu_1210_p1 = ap_phi_reg_pp0_iter16_empty_50_reg_300[7:0];

assign trunc_ln123_fu_1154_p1 = ap_phi_reg_pp0_iter16_empty_51_reg_309[7:0];

assign trunc_ln16_fu_899_p1 = x_4_fu_749_p3[0:0];

assign trunc_ln224_10_fu_606_p1 = select_ln99_6_fu_601_p3[18:0];

assign trunc_ln224_11_fu_635_p1 = select_ln99_8_fu_630_p3[18:0];

assign trunc_ln224_12_fu_664_p1 = select_ln99_10_fu_659_p3[18:0];

assign trunc_ln224_13_fu_693_p1 = select_ln99_12_fu_688_p3[18:0];

assign trunc_ln224_14_fu_722_p1 = select_ln99_14_fu_717_p3[18:0];

assign trunc_ln224_8_fu_548_p1 = select_ln99_2_fu_543_p3[18:0];

assign trunc_ln224_9_fu_577_p1 = select_ln99_4_fu_572_p3[18:0];

assign trunc_ln224_fu_518_p1 = select_ln99_fu_513_p3[18:0];

assign trunc_ln67_fu_370_p1 = a_stream_adpt_dout[19:0];

assign trunc_ln_fu_1010_p4 = {{add_ln120_1_fu_1005_p2[19:1]}};

assign x_3_fu_743_p2 = ($signed(abs_max_fu_732_p3) + $signed(19'd524287));

assign x_4_fu_749_p3 = ((icmp_ln12_reg_1645[0:0] == 1'b1) ? x_3_reg_1650 : 19'd0);

assign zext_ln119_fu_943_p1 = add_ln119_reg_1741;

assign zext_ln99_1_fu_568_p1 = select_ln99_3_fu_563_p3;

assign zext_ln99_2_fu_597_p1 = select_ln99_5_fu_592_p3;

assign zext_ln99_3_fu_626_p1 = select_ln99_7_fu_621_p3;

assign zext_ln99_4_fu_655_p1 = select_ln99_9_fu_650_p3;

assign zext_ln99_5_fu_684_p1 = select_ln99_11_fu_679_p3;

assign zext_ln99_6_fu_713_p1 = select_ln99_13_fu_708_p3;

assign zext_ln99_fu_539_p1 = select_ln99_1_fu_533_p3;

endmodule //RV_GEMM_do_quant
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_quant4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        vt_stream_dout,
        vt_stream_empty_n,
        vt_stream_read,
        vt_stream_num_data_valid,
        vt_stream_fifo_cap,
        vq_stream_din,
        vq_stream_full_n,
        vq_stream_write,
        vq_stream_num_data_valid,
        vq_stream_fifo_cap,
        vs_stream_din,
        vs_stream_full_n,
        vs_stream_write,
        vs_stream_num_data_valid,
        vs_stream_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter5_fsm_state6 = 2'd2;
parameter    ap_ST_iter6_fsm_state7 = 2'd2;
parameter    ap_ST_iter7_fsm_state8 = 2'd2;
parameter    ap_ST_iter8_fsm_state9 = 2'd2;
parameter    ap_ST_iter9_fsm_state10 = 2'd2;
parameter    ap_ST_iter10_fsm_state11 = 2'd2;
parameter    ap_ST_iter11_fsm_state12 = 2'd2;
parameter    ap_ST_iter12_fsm_state13 = 2'd2;
parameter    ap_ST_iter13_fsm_state14 = 2'd2;
parameter    ap_ST_iter14_fsm_state15 = 2'd2;
parameter    ap_ST_iter15_fsm_state16 = 2'd2;
parameter    ap_ST_iter16_fsm_state17 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;
parameter    ap_ST_iter5_fsm_state0 = 2'd1;
parameter    ap_ST_iter6_fsm_state0 = 2'd1;
parameter    ap_ST_iter7_fsm_state0 = 2'd1;
parameter    ap_ST_iter8_fsm_state0 = 2'd1;
parameter    ap_ST_iter9_fsm_state0 = 2'd1;
parameter    ap_ST_iter10_fsm_state0 = 2'd1;
parameter    ap_ST_iter11_fsm_state0 = 2'd1;
parameter    ap_ST_iter12_fsm_state0 = 2'd1;
parameter    ap_ST_iter13_fsm_state0 = 2'd1;
parameter    ap_ST_iter14_fsm_state0 = 2'd1;
parameter    ap_ST_iter15_fsm_state0 = 2'd1;
parameter    ap_ST_iter16_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [159:0] vt_stream_dout;
input   vt_stream_empty_n;
output   vt_stream_read;
input  [2:0] vt_stream_num_data_valid;
input  [2:0] vt_stream_fifo_cap;
output  [63:0] vq_stream_din;
input   vq_stream_full_n;
output   vq_stream_write;
input  [2:0] vq_stream_num_data_valid;
input  [2:0] vq_stream_fifo_cap;
output  [3:0] vs_stream_din;
input   vs_stream_full_n;
output   vs_stream_write;
input  [2:0] vs_stream_num_data_valid;
input  [2:0] vs_stream_fifo_cap;

reg ap_idle;
reg vt_stream_read;
reg vq_stream_write;
reg vs_stream_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg   [1:0] ap_CS_iter5_fsm;
wire    ap_CS_iter5_fsm_state0;
reg   [1:0] ap_CS_iter6_fsm;
wire    ap_CS_iter6_fsm_state0;
reg   [1:0] ap_CS_iter7_fsm;
wire    ap_CS_iter7_fsm_state0;
reg   [1:0] ap_CS_iter8_fsm;
wire    ap_CS_iter8_fsm_state0;
reg   [1:0] ap_CS_iter9_fsm;
wire    ap_CS_iter9_fsm_state0;
reg   [1:0] ap_CS_iter10_fsm;
wire    ap_CS_iter10_fsm_state0;
reg   [1:0] ap_CS_iter11_fsm;
wire    ap_CS_iter11_fsm_state0;
reg   [1:0] ap_CS_iter12_fsm;
wire    ap_CS_iter12_fsm_state0;
reg   [1:0] ap_CS_iter13_fsm;
wire    ap_CS_iter13_fsm_state0;
reg   [1:0] ap_CS_iter14_fsm;
wire    ap_CS_iter14_fsm_state0;
reg   [1:0] ap_CS_iter15_fsm;
wire    ap_CS_iter15_fsm_state0;
reg   [1:0] ap_CS_iter16_fsm;
wire    ap_CS_iter16_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
wire    ap_CS_iter4_fsm_state5;
wire    ap_CS_iter5_fsm_state6;
wire    ap_CS_iter6_fsm_state7;
wire    ap_CS_iter7_fsm_state8;
wire    ap_CS_iter8_fsm_state9;
wire    ap_CS_iter9_fsm_state10;
wire    ap_CS_iter10_fsm_state11;
wire    ap_CS_iter11_fsm_state12;
wire    ap_CS_iter12_fsm_state13;
wire    ap_CS_iter13_fsm_state14;
wire    ap_CS_iter14_fsm_state15;
wire    ap_CS_iter15_fsm_state16;
reg    ap_block_state17_pp0_stage0_iter16;
wire    ap_CS_iter16_fsm_state17;
wire   [0:0] icmp_ln62_fu_497_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    vt_stream_blk_n;
reg    vq_stream_blk_n;
reg    vs_stream_blk_n;
wire   [19:0] trunc_ln67_fu_353_p1;
reg   [19:0] trunc_ln67_reg_1381;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter1_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter2_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter3_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter4_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter5_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter6_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter7_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter8_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter9_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter10_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter11_reg;
reg   [19:0] trunc_ln67_reg_1381_pp0_iter12_reg;
reg   [19:0] trunc_ln67_8_reg_1389;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter1_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter2_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter3_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter4_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter5_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter6_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter7_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter8_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter9_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter10_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter11_reg;
reg   [19:0] trunc_ln67_8_reg_1389_pp0_iter12_reg;
reg   [19:0] trunc_ln67_9_reg_1397;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter1_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter2_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter3_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter4_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter5_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter6_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter7_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter8_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter9_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter10_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter11_reg;
reg   [19:0] trunc_ln67_9_reg_1397_pp0_iter12_reg;
reg   [19:0] trunc_ln67_s_reg_1405;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter1_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter2_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter3_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter4_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter5_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter6_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter7_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter8_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter9_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter10_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter11_reg;
reg   [19:0] trunc_ln67_s_reg_1405_pp0_iter12_reg;
reg   [19:0] trunc_ln67_1_reg_1413;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter1_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter2_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter3_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter4_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter5_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter6_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter7_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter8_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter9_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter10_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter11_reg;
reg   [19:0] trunc_ln67_1_reg_1413_pp0_iter12_reg;
reg   [19:0] trunc_ln67_2_reg_1421;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter1_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter2_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter3_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter4_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter5_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter6_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter7_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter8_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter9_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter10_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter11_reg;
reg   [19:0] trunc_ln67_2_reg_1421_pp0_iter12_reg;
reg   [19:0] trunc_ln67_3_reg_1429;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter1_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter2_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter3_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter4_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter5_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter6_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter7_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter8_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter9_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter10_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter11_reg;
reg   [19:0] trunc_ln67_3_reg_1429_pp0_iter12_reg;
reg   [19:0] trunc_ln67_4_reg_1437;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter1_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter2_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter3_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter4_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter5_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter6_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter7_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter8_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter9_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter10_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter11_reg;
reg   [19:0] trunc_ln67_4_reg_1437_pp0_iter12_reg;
reg   [0:0] tmp_reg_1445;
reg   [0:0] tmp_reg_1445_pp0_iter1_reg;
reg   [0:0] tmp_16_reg_1450;
reg   [0:0] tmp_16_reg_1450_pp0_iter1_reg;
reg   [0:0] tmp_16_reg_1450_pp0_iter2_reg;
reg   [0:0] tmp_17_reg_1455;
reg   [0:0] tmp_17_reg_1455_pp0_iter1_reg;
reg   [0:0] tmp_17_reg_1455_pp0_iter2_reg;
reg   [0:0] tmp_17_reg_1455_pp0_iter3_reg;
reg   [0:0] tmp_18_reg_1460;
reg   [0:0] tmp_18_reg_1460_pp0_iter1_reg;
reg   [0:0] tmp_18_reg_1460_pp0_iter2_reg;
reg   [0:0] tmp_18_reg_1460_pp0_iter3_reg;
reg   [0:0] tmp_18_reg_1460_pp0_iter4_reg;
reg   [0:0] tmp_19_reg_1465;
reg   [0:0] tmp_19_reg_1465_pp0_iter1_reg;
reg   [0:0] tmp_19_reg_1465_pp0_iter2_reg;
reg   [0:0] tmp_19_reg_1465_pp0_iter3_reg;
reg   [0:0] tmp_19_reg_1465_pp0_iter4_reg;
reg   [0:0] tmp_19_reg_1465_pp0_iter5_reg;
reg   [0:0] tmp_20_reg_1470;
reg   [0:0] tmp_20_reg_1470_pp0_iter1_reg;
reg   [0:0] tmp_20_reg_1470_pp0_iter2_reg;
reg   [0:0] tmp_20_reg_1470_pp0_iter3_reg;
reg   [0:0] tmp_20_reg_1470_pp0_iter4_reg;
reg   [0:0] tmp_20_reg_1470_pp0_iter5_reg;
reg   [0:0] tmp_20_reg_1470_pp0_iter6_reg;
reg   [0:0] tmp_21_reg_1475;
reg   [0:0] tmp_21_reg_1475_pp0_iter1_reg;
reg   [0:0] tmp_21_reg_1475_pp0_iter2_reg;
reg   [0:0] tmp_21_reg_1475_pp0_iter3_reg;
reg   [0:0] tmp_21_reg_1475_pp0_iter4_reg;
reg   [0:0] tmp_21_reg_1475_pp0_iter5_reg;
reg   [0:0] tmp_21_reg_1475_pp0_iter6_reg;
reg   [0:0] tmp_21_reg_1475_pp0_iter7_reg;
reg   [0:0] tmp_22_reg_1480;
reg   [0:0] tmp_22_reg_1480_pp0_iter1_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter2_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter3_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter4_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter5_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter6_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter7_reg;
reg   [0:0] tmp_22_reg_1480_pp0_iter8_reg;
wire   [5:0] tt_fu_491_p2;
reg   [5:0] tt_reg_1485;
reg   [0:0] icmp_ln62_reg_1490;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter1_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter2_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter3_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter4_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter5_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter6_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter7_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter8_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter9_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter10_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter11_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter12_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter13_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter14_reg;
reg   [0:0] icmp_ln62_reg_1490_pp0_iter15_reg;
wire   [19:0] sub_ln99_fu_503_p2;
reg   [19:0] sub_ln99_reg_1494;
wire   [18:0] trunc_ln224_fu_517_p1;
reg   [18:0] trunc_ln224_reg_1499;
wire   [0:0] icmp_ln224_fu_521_p2;
reg   [0:0] icmp_ln224_reg_1504;
wire   [19:0] sub_ln99_1_fu_527_p2;
reg   [19:0] sub_ln99_1_reg_1509;
wire   [18:0] select_ln99_1_fu_532_p3;
reg   [18:0] select_ln99_1_reg_1514;
wire   [18:0] trunc_ln224_1_fu_547_p1;
reg   [18:0] trunc_ln224_1_reg_1519;
wire   [0:0] icmp_ln224_1_fu_551_p2;
reg   [0:0] icmp_ln224_1_reg_1524;
wire   [19:0] sub_ln99_2_fu_557_p2;
reg   [19:0] sub_ln99_2_reg_1529;
wire   [18:0] select_ln99_3_fu_562_p3;
reg   [18:0] select_ln99_3_reg_1534;
wire   [18:0] trunc_ln224_2_fu_576_p1;
reg   [18:0] trunc_ln224_2_reg_1539;
wire   [0:0] icmp_ln224_2_fu_580_p2;
reg   [0:0] icmp_ln224_2_reg_1544;
wire   [19:0] sub_ln99_3_fu_586_p2;
reg   [19:0] sub_ln99_3_reg_1549;
wire   [18:0] select_ln99_5_fu_591_p3;
reg   [18:0] select_ln99_5_reg_1554;
wire   [18:0] trunc_ln224_3_fu_605_p1;
reg   [18:0] trunc_ln224_3_reg_1559;
wire   [0:0] icmp_ln224_3_fu_609_p2;
reg   [0:0] icmp_ln224_3_reg_1564;
wire   [19:0] sub_ln99_4_fu_615_p2;
reg   [19:0] sub_ln99_4_reg_1569;
wire   [18:0] select_ln99_7_fu_620_p3;
reg   [18:0] select_ln99_7_reg_1574;
wire   [18:0] trunc_ln224_4_fu_634_p1;
reg   [18:0] trunc_ln224_4_reg_1579;
wire   [0:0] icmp_ln224_4_fu_638_p2;
reg   [0:0] icmp_ln224_4_reg_1584;
wire   [19:0] sub_ln99_5_fu_644_p2;
reg   [19:0] sub_ln99_5_reg_1589;
wire   [18:0] select_ln99_9_fu_649_p3;
reg   [18:0] select_ln99_9_reg_1594;
wire   [18:0] trunc_ln224_5_fu_663_p1;
reg   [18:0] trunc_ln224_5_reg_1599;
wire   [0:0] icmp_ln224_5_fu_667_p2;
reg   [0:0] icmp_ln224_5_reg_1604;
wire   [19:0] sub_ln99_6_fu_673_p2;
reg   [19:0] sub_ln99_6_reg_1609;
wire   [18:0] select_ln99_11_fu_678_p3;
reg   [18:0] select_ln99_11_reg_1614;
wire   [18:0] trunc_ln224_6_fu_692_p1;
reg   [18:0] trunc_ln224_6_reg_1619;
wire   [0:0] icmp_ln224_6_fu_696_p2;
reg   [0:0] icmp_ln224_6_reg_1624;
wire   [19:0] sub_ln99_7_fu_702_p2;
reg   [19:0] sub_ln99_7_reg_1629;
wire   [18:0] select_ln99_13_fu_707_p3;
reg   [18:0] select_ln99_13_reg_1634;
wire   [18:0] trunc_ln224_7_fu_721_p1;
reg   [18:0] trunc_ln224_7_reg_1639;
wire   [0:0] icmp_ln224_7_fu_725_p2;
reg   [0:0] icmp_ln224_7_reg_1644;
wire   [0:0] icmp_ln12_fu_736_p2;
reg   [0:0] icmp_ln12_reg_1649;
wire   [18:0] x_1_fu_742_p2;
reg   [18:0] x_1_reg_1654;
wire   [0:0] tmp_23_fu_754_p3;
wire   [0:0] tmp_24_fu_762_p3;
wire   [0:0] tmp_25_fu_770_p3;
wire   [0:0] tmp_26_fu_778_p3;
wire   [0:0] tmp_27_fu_786_p3;
wire   [0:0] tmp_28_fu_794_p3;
wire   [0:0] tmp_29_fu_802_p3;
wire   [0:0] tmp_30_fu_810_p3;
wire   [0:0] tmp_31_fu_818_p3;
wire   [0:0] tmp_32_fu_826_p3;
wire   [0:0] tmp_33_fu_834_p3;
wire   [0:0] tmp_34_fu_842_p3;
wire   [0:0] tmp_35_fu_850_p3;
wire   [0:0] tmp_36_fu_858_p3;
wire   [0:0] tmp_37_fu_866_p3;
wire   [0:0] tmp_38_fu_874_p3;
wire   [0:0] tmp_39_fu_882_p3;
wire   [0:0] tmp_40_fu_890_p3;
wire   [4:0] select_ln16_fu_902_p3;
wire   [3:0] s_val_fu_922_p3;
reg   [3:0] s_val_reg_1736;
reg   [3:0] s_val_reg_1736_pp0_iter13_reg;
reg   [3:0] s_val_reg_1736_pp0_iter14_reg;
reg   [3:0] s_val_reg_1736_pp0_iter15_reg;
wire   [0:0] icmp_ln118_fu_930_p2;
reg   [0:0] icmp_ln118_reg_1741;
reg   [0:0] icmp_ln118_reg_1741_pp0_iter13_reg;
wire   [3:0] add_ln119_fu_936_p2;
reg   [3:0] add_ln119_reg_1745;
wire   [19:0] ashr_ln119_fu_945_p2;
reg   [19:0] ashr_ln119_reg_1750;
wire   [19:0] ashr_ln119_1_fu_950_p2;
reg   [19:0] ashr_ln119_1_reg_1755;
wire   [19:0] ashr_ln119_2_fu_955_p2;
reg   [19:0] ashr_ln119_2_reg_1760;
wire   [19:0] ashr_ln119_3_fu_960_p2;
reg   [19:0] ashr_ln119_3_reg_1765;
wire   [19:0] ashr_ln119_4_fu_965_p2;
reg   [19:0] ashr_ln119_4_reg_1770;
wire   [19:0] ashr_ln119_5_fu_970_p2;
reg   [19:0] ashr_ln119_5_reg_1775;
wire   [19:0] ashr_ln119_6_fu_975_p2;
reg   [19:0] ashr_ln119_6_reg_1780;
wire   [19:0] ashr_ln119_7_fu_980_p2;
reg   [19:0] ashr_ln119_7_reg_1785;
wire  signed [19:0] sext_ln121_fu_1000_p1;
wire  signed [19:0] sext_ln121_1_fu_1019_p1;
wire  signed [19:0] sext_ln121_2_fu_1038_p1;
wire  signed [19:0] sext_ln121_3_fu_1057_p1;
wire  signed [19:0] sext_ln121_4_fu_1076_p1;
wire  signed [19:0] sext_ln121_5_fu_1095_p1;
wire  signed [19:0] sext_ln121_6_fu_1114_p1;
wire  signed [19:0] sext_ln121_7_fu_1133_p1;
wire   [7:0] select_ln123_fu_1157_p3;
reg   [7:0] select_ln123_reg_1830;
wire   [7:0] select_ln123_1_fu_1185_p3;
reg   [7:0] select_ln123_1_reg_1835;
wire   [7:0] select_ln123_2_fu_1233_p3;
reg   [7:0] select_ln123_2_reg_1840;
wire   [7:0] select_ln123_3_fu_1281_p3;
reg   [7:0] select_ln123_3_reg_1845;
wire   [7:0] select_ln123_4_fu_1329_p3;
reg   [7:0] select_ln123_4_reg_1850;
wire   [7:0] select_ln123_5_fu_1337_p3;
reg   [7:0] select_ln123_5_reg_1855;
wire   [7:0] select_ln123_6_fu_1345_p3;
reg   [7:0] select_ln123_6_reg_1860;
wire   [7:0] select_ln123_7_fu_1353_p3;
reg   [7:0] select_ln123_7_reg_1865;
wire   [4:0] ap_phi_reg_pp0_iter0_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter1_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter2_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter3_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter4_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter5_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter6_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter7_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter8_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter9_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter10_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter11_s_val_1_reg_194;
reg   [4:0] ap_phi_reg_pp0_iter12_s_val_1_reg_194;
wire   [19:0] ap_phi_reg_pp0_iter0_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter1_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter2_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter3_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter4_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter5_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter6_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter7_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter8_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter9_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter10_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter11_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter12_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter13_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter14_q_val_reg_273;
reg   [19:0] ap_phi_reg_pp0_iter15_q_val_reg_273;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_reg_282;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_reg_282;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_43_reg_291;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_43_reg_291;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_44_reg_300;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_44_reg_300;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_45_reg_309;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_45_reg_309;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_46_reg_318;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_46_reg_318;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_47_reg_327;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_47_reg_327;
wire   [19:0] ap_phi_reg_pp0_iter0_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter1_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter2_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter3_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter4_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter5_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter6_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter7_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter8_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter9_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter10_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter11_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter12_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter13_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter14_empty_48_reg_336;
reg   [19:0] ap_phi_reg_pp0_iter15_empty_48_reg_336;
reg   [5:0] tt1_fu_170;
reg   [5:0] ap_sig_allocacmp_tt1_load;
wire    ap_loop_init;
wire   [19:0] select_ln99_fu_512_p3;
wire   [19:0] select_ln99_2_fu_542_p3;
wire   [19:0] zext_ln99_fu_538_p1;
wire   [19:0] select_ln99_4_fu_571_p3;
wire   [19:0] zext_ln99_1_fu_567_p1;
wire   [19:0] select_ln99_6_fu_600_p3;
wire   [19:0] zext_ln99_2_fu_596_p1;
wire   [19:0] select_ln99_8_fu_629_p3;
wire   [19:0] zext_ln99_3_fu_625_p1;
wire   [19:0] select_ln99_10_fu_658_p3;
wire   [19:0] zext_ln99_4_fu_654_p1;
wire   [19:0] select_ln99_12_fu_687_p3;
wire   [19:0] zext_ln99_5_fu_683_p1;
wire   [19:0] select_ln99_14_fu_716_p3;
wire   [19:0] zext_ln99_6_fu_712_p1;
wire   [18:0] abs_max_fu_731_p3;
wire   [18:0] x_2_fu_748_p3;
wire   [0:0] trunc_ln16_fu_898_p1;
wire   [0:0] tmp_41_fu_910_p3;
wire   [3:0] trunc_ln108_fu_918_p1;
wire   [19:0] zext_ln119_fu_942_p1;
wire   [19:0] add_ln120_fu_985_p2;
wire   [18:0] trunc_ln121_8_fu_990_p4;
wire   [19:0] add_ln120_1_fu_1004_p2;
wire   [18:0] trunc_ln8_fu_1009_p4;
wire   [19:0] add_ln120_2_fu_1023_p2;
wire   [18:0] trunc_ln121_9_fu_1028_p4;
wire   [19:0] add_ln120_3_fu_1042_p2;
wire   [18:0] trunc_ln121_s_fu_1047_p4;
wire   [19:0] add_ln120_4_fu_1061_p2;
wire   [18:0] trunc_ln121_1_fu_1066_p4;
wire   [19:0] add_ln120_5_fu_1080_p2;
wire   [18:0] trunc_ln121_2_fu_1085_p4;
wire   [19:0] add_ln120_6_fu_1099_p2;
wire   [18:0] trunc_ln121_3_fu_1104_p4;
wire   [19:0] add_ln120_7_fu_1118_p2;
wire   [18:0] trunc_ln121_4_fu_1123_p4;
wire   [12:0] tmp_42_fu_1137_p4;
wire   [0:0] icmp_ln200_fu_1147_p2;
wire   [7:0] trunc_ln123_fu_1153_p1;
wire   [12:0] tmp_43_fu_1165_p4;
wire   [0:0] icmp_ln200_1_fu_1175_p2;
wire   [7:0] trunc_ln123_1_fu_1181_p1;
wire   [12:0] tmp_44_fu_1193_p4;
wire   [12:0] tmp_45_fu_1213_p4;
wire   [0:0] icmp_ln200_3_fu_1223_p2;
wire   [7:0] trunc_ln123_3_fu_1229_p1;
wire   [12:0] tmp_46_fu_1241_p4;
wire   [12:0] tmp_47_fu_1261_p4;
wire   [0:0] icmp_ln200_5_fu_1271_p2;
wire   [7:0] trunc_ln123_5_fu_1277_p1;
wire   [12:0] tmp_48_fu_1289_p4;
wire   [12:0] tmp_49_fu_1309_p4;
wire   [0:0] icmp_ln200_7_fu_1319_p2;
wire   [7:0] trunc_ln123_7_fu_1325_p1;
wire   [0:0] icmp_ln200_2_fu_1203_p2;
wire   [7:0] trunc_ln123_2_fu_1209_p1;
wire   [0:0] icmp_ln200_4_fu_1251_p2;
wire   [7:0] trunc_ln123_4_fu_1257_p1;
wire   [0:0] icmp_ln200_6_fu_1299_p2;
wire   [7:0] trunc_ln123_6_fu_1305_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg   [1:0] ap_NS_iter5_fsm;
reg   [1:0] ap_NS_iter6_fsm;
reg   [1:0] ap_NS_iter7_fsm;
reg   [1:0] ap_NS_iter8_fsm;
reg   [1:0] ap_NS_iter9_fsm;
reg   [1:0] ap_NS_iter10_fsm;
reg   [1:0] ap_NS_iter11_fsm;
reg   [1:0] ap_NS_iter12_fsm;
reg   [1:0] ap_NS_iter13_fsm;
reg   [1:0] ap_NS_iter14_fsm;
reg   [1:0] ap_NS_iter15_fsm;
reg   [1:0] ap_NS_iter16_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_ST_iter4_fsm_state5_blk;
wire    ap_ST_iter5_fsm_state6_blk;
wire    ap_ST_iter6_fsm_state7_blk;
wire    ap_ST_iter7_fsm_state8_blk;
wire    ap_ST_iter8_fsm_state9_blk;
wire    ap_ST_iter9_fsm_state10_blk;
wire    ap_ST_iter10_fsm_state11_blk;
wire    ap_ST_iter11_fsm_state12_blk;
wire    ap_ST_iter12_fsm_state13_blk;
wire    ap_ST_iter13_fsm_state14_blk;
wire    ap_ST_iter14_fsm_state15_blk;
wire    ap_ST_iter15_fsm_state16_blk;
reg    ap_ST_iter16_fsm_state17_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_946;
reg    ap_condition_952;
reg    ap_condition_958;
reg    ap_condition_964;
reg    ap_condition_970;
reg    ap_condition_976;
reg    ap_condition_982;
reg    ap_condition_988;
reg    ap_condition_994;
reg    ap_condition_1000;
reg    ap_condition_1006;
reg    ap_condition_1012;
reg    ap_condition_1018;
reg    ap_condition_1024;
reg    ap_condition_1030;
reg    ap_condition_1036;
reg    ap_condition_1039;
reg    ap_condition_335;
reg    ap_condition_337;
reg    ap_condition_540;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_CS_iter5_fsm = 2'd1;
//#0 ap_CS_iter6_fsm = 2'd1;
//#0 ap_CS_iter7_fsm = 2'd1;
//#0 ap_CS_iter8_fsm = 2'd1;
//#0 ap_CS_iter9_fsm = 2'd1;
//#0 ap_CS_iter10_fsm = 2'd1;
//#0 ap_CS_iter11_fsm = 2'd1;
//#0 ap_CS_iter12_fsm = 2'd1;
//#0 ap_CS_iter13_fsm = 2'd1;
//#0 ap_CS_iter14_fsm = 2'd1;
//#0 ap_CS_iter15_fsm = 2'd1;
//#0 ap_CS_iter16_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 tt1_fu_170 = 6'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter10_fsm <= ap_ST_iter10_fsm_state0;
    end else begin
        ap_CS_iter10_fsm <= ap_NS_iter10_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter11_fsm <= ap_ST_iter11_fsm_state0;
    end else begin
        ap_CS_iter11_fsm <= ap_NS_iter11_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter12_fsm <= ap_ST_iter12_fsm_state0;
    end else begin
        ap_CS_iter12_fsm <= ap_NS_iter12_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter13_fsm <= ap_ST_iter13_fsm_state0;
    end else begin
        ap_CS_iter13_fsm <= ap_NS_iter13_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter14_fsm <= ap_ST_iter14_fsm_state0;
    end else begin
        ap_CS_iter14_fsm <= ap_NS_iter14_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter15_fsm <= ap_ST_iter15_fsm_state0;
    end else begin
        ap_CS_iter15_fsm <= ap_NS_iter15_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter16_fsm <= ap_ST_iter16_fsm_state0;
    end else begin
        ap_CS_iter16_fsm <= ap_NS_iter16_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter5_fsm <= ap_ST_iter5_fsm_state0;
    end else begin
        ap_CS_iter5_fsm <= ap_NS_iter5_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter6_fsm <= ap_ST_iter6_fsm_state0;
    end else begin
        ap_CS_iter6_fsm <= ap_NS_iter6_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter7_fsm <= ap_ST_iter7_fsm_state0;
    end else begin
        ap_CS_iter7_fsm <= ap_NS_iter7_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter8_fsm <= ap_ST_iter8_fsm_state0;
    end else begin
        ap_CS_iter8_fsm <= ap_NS_iter8_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter9_fsm <= ap_ST_iter9_fsm_state0;
    end else begin
        ap_CS_iter9_fsm <= ap_NS_iter9_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b0) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_335)) begin
        if ((1'b1 == ap_condition_1039)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= select_ln16_fu_902_p3;
        end else if ((1'b1 == ap_condition_1036)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd27;
        end else if ((1'b1 == ap_condition_1030)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd28;
        end else if ((1'b1 == ap_condition_1024)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd29;
        end else if ((1'b1 == ap_condition_1018)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd30;
        end else if ((1'b1 == ap_condition_1012)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd31;
        end else if ((1'b1 == ap_condition_1006)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd0;
        end else if ((1'b1 == ap_condition_1000)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd1;
        end else if ((1'b1 == ap_condition_994)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd2;
        end else if ((1'b1 == ap_condition_988)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd3;
        end else if ((1'b1 == ap_condition_982)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd4;
        end else if ((1'b1 == ap_condition_976)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd5;
        end else if ((1'b1 == ap_condition_970)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd6;
        end else if ((1'b1 == ap_condition_964)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd7;
        end else if ((1'b1 == ap_condition_958)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd8;
        end else if ((1'b1 == ap_condition_952)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd9;
        end else if ((1'b1 == ap_condition_946)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd10;
        end else if (((tmp_24_fu_762_p3 == 1'd1) & (tmp_23_fu_754_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd11;
        end else if ((tmp_23_fu_754_p3 == 1'd1)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= 5'd12;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter12_s_val_1_reg_194 <= ap_phi_reg_pp0_iter11_s_val_1_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_43_reg_291 <= trunc_ln67_1_reg_1413_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_43_reg_291 <= ap_phi_reg_pp0_iter12_empty_43_reg_291;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_44_reg_300 <= trunc_ln67_9_reg_1397_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_44_reg_300 <= ap_phi_reg_pp0_iter12_empty_44_reg_300;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_45_reg_309 <= trunc_ln67_reg_1381_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_45_reg_309 <= ap_phi_reg_pp0_iter12_empty_45_reg_309;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_46_reg_318 <= trunc_ln67_8_reg_1389_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_46_reg_318 <= ap_phi_reg_pp0_iter12_empty_46_reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_47_reg_327 <= trunc_ln67_s_reg_1405_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_47_reg_327 <= ap_phi_reg_pp0_iter12_empty_47_reg_327;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_48_reg_336 <= trunc_ln67_2_reg_1421_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_48_reg_336 <= ap_phi_reg_pp0_iter12_empty_48_reg_336;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_empty_reg_282 <= trunc_ln67_3_reg_1429_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_empty_reg_282 <= ap_phi_reg_pp0_iter12_empty_reg_282;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_337)) begin
        if ((icmp_ln118_fu_930_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter13_q_val_reg_273 <= trunc_ln67_4_reg_1437_pp0_iter11_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter13_q_val_reg_273 <= ap_phi_reg_pp0_iter12_q_val_reg_273;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_43_reg_291 <= sext_ln121_4_fu_1076_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_43_reg_291 <= ap_phi_reg_pp0_iter14_empty_43_reg_291;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_44_reg_300 <= sext_ln121_2_fu_1038_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_44_reg_300 <= ap_phi_reg_pp0_iter14_empty_44_reg_300;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_45_reg_309 <= sext_ln121_fu_1000_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_45_reg_309 <= ap_phi_reg_pp0_iter14_empty_45_reg_309;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_46_reg_318 <= sext_ln121_1_fu_1019_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_46_reg_318 <= ap_phi_reg_pp0_iter14_empty_46_reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_47_reg_327 <= sext_ln121_3_fu_1057_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_47_reg_327 <= ap_phi_reg_pp0_iter14_empty_47_reg_327;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_48_reg_336 <= sext_ln121_5_fu_1095_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_48_reg_336 <= ap_phi_reg_pp0_iter14_empty_48_reg_336;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_empty_reg_282 <= sext_ln121_6_fu_1114_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_empty_reg_282 <= ap_phi_reg_pp0_iter14_empty_reg_282;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_540)) begin
        if ((icmp_ln118_reg_1741_pp0_iter13_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter15_q_val_reg_273 <= sext_ln121_7_fu_1133_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter15_q_val_reg_273 <= ap_phi_reg_pp0_iter14_q_val_reg_273;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt1_fu_170 <= 6'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tt1_fu_170 <= tt_reg_1485;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
        add_ln119_reg_1745 <= add_ln119_fu_936_p2;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        icmp_ln118_reg_1741 <= icmp_ln118_fu_930_p2;
        icmp_ln62_reg_1490_pp0_iter12_reg <= icmp_ln62_reg_1490_pp0_iter11_reg;
        s_val_reg_1736 <= s_val_fu_922_p3;
        trunc_ln67_1_reg_1413_pp0_iter12_reg <= trunc_ln67_1_reg_1413_pp0_iter11_reg;
        trunc_ln67_2_reg_1421_pp0_iter12_reg <= trunc_ln67_2_reg_1421_pp0_iter11_reg;
        trunc_ln67_3_reg_1429_pp0_iter12_reg <= trunc_ln67_3_reg_1429_pp0_iter11_reg;
        trunc_ln67_4_reg_1437_pp0_iter12_reg <= trunc_ln67_4_reg_1437_pp0_iter11_reg;
        trunc_ln67_8_reg_1389_pp0_iter12_reg <= trunc_ln67_8_reg_1389_pp0_iter11_reg;
        trunc_ln67_9_reg_1397_pp0_iter12_reg <= trunc_ln67_9_reg_1397_pp0_iter11_reg;
        trunc_ln67_reg_1381_pp0_iter12_reg <= trunc_ln67_reg_1381_pp0_iter11_reg;
        trunc_ln67_s_reg_1405_pp0_iter12_reg <= trunc_ln67_s_reg_1405_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_phi_reg_pp0_iter10_empty_43_reg_291 <= ap_phi_reg_pp0_iter9_empty_43_reg_291;
        ap_phi_reg_pp0_iter10_empty_44_reg_300 <= ap_phi_reg_pp0_iter9_empty_44_reg_300;
        ap_phi_reg_pp0_iter10_empty_45_reg_309 <= ap_phi_reg_pp0_iter9_empty_45_reg_309;
        ap_phi_reg_pp0_iter10_empty_46_reg_318 <= ap_phi_reg_pp0_iter9_empty_46_reg_318;
        ap_phi_reg_pp0_iter10_empty_47_reg_327 <= ap_phi_reg_pp0_iter9_empty_47_reg_327;
        ap_phi_reg_pp0_iter10_empty_48_reg_336 <= ap_phi_reg_pp0_iter9_empty_48_reg_336;
        ap_phi_reg_pp0_iter10_empty_reg_282 <= ap_phi_reg_pp0_iter9_empty_reg_282;
        ap_phi_reg_pp0_iter10_q_val_reg_273 <= ap_phi_reg_pp0_iter9_q_val_reg_273;
        ap_phi_reg_pp0_iter10_s_val_1_reg_194 <= ap_phi_reg_pp0_iter9_s_val_1_reg_194;
        icmp_ln224_7_reg_1644 <= icmp_ln224_7_fu_725_p2;
        icmp_ln62_reg_1490_pp0_iter9_reg <= icmp_ln62_reg_1490_pp0_iter8_reg;
        select_ln99_13_reg_1634 <= select_ln99_13_fu_707_p3;
        trunc_ln224_7_reg_1639 <= trunc_ln224_7_fu_721_p1;
        trunc_ln67_1_reg_1413_pp0_iter9_reg <= trunc_ln67_1_reg_1413_pp0_iter8_reg;
        trunc_ln67_2_reg_1421_pp0_iter9_reg <= trunc_ln67_2_reg_1421_pp0_iter8_reg;
        trunc_ln67_3_reg_1429_pp0_iter9_reg <= trunc_ln67_3_reg_1429_pp0_iter8_reg;
        trunc_ln67_4_reg_1437_pp0_iter9_reg <= trunc_ln67_4_reg_1437_pp0_iter8_reg;
        trunc_ln67_8_reg_1389_pp0_iter9_reg <= trunc_ln67_8_reg_1389_pp0_iter8_reg;
        trunc_ln67_9_reg_1397_pp0_iter9_reg <= trunc_ln67_9_reg_1397_pp0_iter8_reg;
        trunc_ln67_reg_1381_pp0_iter9_reg <= trunc_ln67_reg_1381_pp0_iter8_reg;
        trunc_ln67_s_reg_1405_pp0_iter9_reg <= trunc_ln67_s_reg_1405_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_phi_reg_pp0_iter11_empty_43_reg_291 <= ap_phi_reg_pp0_iter10_empty_43_reg_291;
        ap_phi_reg_pp0_iter11_empty_44_reg_300 <= ap_phi_reg_pp0_iter10_empty_44_reg_300;
        ap_phi_reg_pp0_iter11_empty_45_reg_309 <= ap_phi_reg_pp0_iter10_empty_45_reg_309;
        ap_phi_reg_pp0_iter11_empty_46_reg_318 <= ap_phi_reg_pp0_iter10_empty_46_reg_318;
        ap_phi_reg_pp0_iter11_empty_47_reg_327 <= ap_phi_reg_pp0_iter10_empty_47_reg_327;
        ap_phi_reg_pp0_iter11_empty_48_reg_336 <= ap_phi_reg_pp0_iter10_empty_48_reg_336;
        ap_phi_reg_pp0_iter11_empty_reg_282 <= ap_phi_reg_pp0_iter10_empty_reg_282;
        ap_phi_reg_pp0_iter11_q_val_reg_273 <= ap_phi_reg_pp0_iter10_q_val_reg_273;
        ap_phi_reg_pp0_iter11_s_val_1_reg_194 <= ap_phi_reg_pp0_iter10_s_val_1_reg_194;
        icmp_ln12_reg_1649 <= icmp_ln12_fu_736_p2;
        icmp_ln62_reg_1490_pp0_iter10_reg <= icmp_ln62_reg_1490_pp0_iter9_reg;
        trunc_ln67_1_reg_1413_pp0_iter10_reg <= trunc_ln67_1_reg_1413_pp0_iter9_reg;
        trunc_ln67_2_reg_1421_pp0_iter10_reg <= trunc_ln67_2_reg_1421_pp0_iter9_reg;
        trunc_ln67_3_reg_1429_pp0_iter10_reg <= trunc_ln67_3_reg_1429_pp0_iter9_reg;
        trunc_ln67_4_reg_1437_pp0_iter10_reg <= trunc_ln67_4_reg_1437_pp0_iter9_reg;
        trunc_ln67_8_reg_1389_pp0_iter10_reg <= trunc_ln67_8_reg_1389_pp0_iter9_reg;
        trunc_ln67_9_reg_1397_pp0_iter10_reg <= trunc_ln67_9_reg_1397_pp0_iter9_reg;
        trunc_ln67_reg_1381_pp0_iter10_reg <= trunc_ln67_reg_1381_pp0_iter9_reg;
        trunc_ln67_s_reg_1405_pp0_iter10_reg <= trunc_ln67_s_reg_1405_pp0_iter9_reg;
        x_1_reg_1654 <= x_1_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_phi_reg_pp0_iter12_empty_43_reg_291 <= ap_phi_reg_pp0_iter11_empty_43_reg_291;
        ap_phi_reg_pp0_iter12_empty_44_reg_300 <= ap_phi_reg_pp0_iter11_empty_44_reg_300;
        ap_phi_reg_pp0_iter12_empty_45_reg_309 <= ap_phi_reg_pp0_iter11_empty_45_reg_309;
        ap_phi_reg_pp0_iter12_empty_46_reg_318 <= ap_phi_reg_pp0_iter11_empty_46_reg_318;
        ap_phi_reg_pp0_iter12_empty_47_reg_327 <= ap_phi_reg_pp0_iter11_empty_47_reg_327;
        ap_phi_reg_pp0_iter12_empty_48_reg_336 <= ap_phi_reg_pp0_iter11_empty_48_reg_336;
        ap_phi_reg_pp0_iter12_empty_reg_282 <= ap_phi_reg_pp0_iter11_empty_reg_282;
        ap_phi_reg_pp0_iter12_q_val_reg_273 <= ap_phi_reg_pp0_iter11_q_val_reg_273;
        icmp_ln62_reg_1490_pp0_iter11_reg <= icmp_ln62_reg_1490_pp0_iter10_reg;
        trunc_ln67_1_reg_1413_pp0_iter11_reg <= trunc_ln67_1_reg_1413_pp0_iter10_reg;
        trunc_ln67_2_reg_1421_pp0_iter11_reg <= trunc_ln67_2_reg_1421_pp0_iter10_reg;
        trunc_ln67_3_reg_1429_pp0_iter11_reg <= trunc_ln67_3_reg_1429_pp0_iter10_reg;
        trunc_ln67_4_reg_1437_pp0_iter11_reg <= trunc_ln67_4_reg_1437_pp0_iter10_reg;
        trunc_ln67_8_reg_1389_pp0_iter11_reg <= trunc_ln67_8_reg_1389_pp0_iter10_reg;
        trunc_ln67_9_reg_1397_pp0_iter11_reg <= trunc_ln67_9_reg_1397_pp0_iter10_reg;
        trunc_ln67_reg_1381_pp0_iter11_reg <= trunc_ln67_reg_1381_pp0_iter10_reg;
        trunc_ln67_s_reg_1405_pp0_iter11_reg <= trunc_ln67_s_reg_1405_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_phi_reg_pp0_iter14_empty_43_reg_291 <= ap_phi_reg_pp0_iter13_empty_43_reg_291;
        ap_phi_reg_pp0_iter14_empty_44_reg_300 <= ap_phi_reg_pp0_iter13_empty_44_reg_300;
        ap_phi_reg_pp0_iter14_empty_45_reg_309 <= ap_phi_reg_pp0_iter13_empty_45_reg_309;
        ap_phi_reg_pp0_iter14_empty_46_reg_318 <= ap_phi_reg_pp0_iter13_empty_46_reg_318;
        ap_phi_reg_pp0_iter14_empty_47_reg_327 <= ap_phi_reg_pp0_iter13_empty_47_reg_327;
        ap_phi_reg_pp0_iter14_empty_48_reg_336 <= ap_phi_reg_pp0_iter13_empty_48_reg_336;
        ap_phi_reg_pp0_iter14_empty_reg_282 <= ap_phi_reg_pp0_iter13_empty_reg_282;
        ap_phi_reg_pp0_iter14_q_val_reg_273 <= ap_phi_reg_pp0_iter13_q_val_reg_273;
        ashr_ln119_1_reg_1755 <= ashr_ln119_1_fu_950_p2;
        ashr_ln119_2_reg_1760 <= ashr_ln119_2_fu_955_p2;
        ashr_ln119_3_reg_1765 <= ashr_ln119_3_fu_960_p2;
        ashr_ln119_4_reg_1770 <= ashr_ln119_4_fu_965_p2;
        ashr_ln119_5_reg_1775 <= ashr_ln119_5_fu_970_p2;
        ashr_ln119_6_reg_1780 <= ashr_ln119_6_fu_975_p2;
        ashr_ln119_7_reg_1785 <= ashr_ln119_7_fu_980_p2;
        ashr_ln119_reg_1750 <= ashr_ln119_fu_945_p2;
        icmp_ln118_reg_1741_pp0_iter13_reg <= icmp_ln118_reg_1741;
        icmp_ln62_reg_1490_pp0_iter13_reg <= icmp_ln62_reg_1490_pp0_iter12_reg;
        s_val_reg_1736_pp0_iter13_reg <= s_val_reg_1736;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        icmp_ln62_reg_1490_pp0_iter14_reg <= icmp_ln62_reg_1490_pp0_iter13_reg;
        s_val_reg_1736_pp0_iter14_reg <= s_val_reg_1736_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_phi_reg_pp0_iter1_empty_43_reg_291 <= ap_phi_reg_pp0_iter0_empty_43_reg_291;
        ap_phi_reg_pp0_iter1_empty_44_reg_300 <= ap_phi_reg_pp0_iter0_empty_44_reg_300;
        ap_phi_reg_pp0_iter1_empty_45_reg_309 <= ap_phi_reg_pp0_iter0_empty_45_reg_309;
        ap_phi_reg_pp0_iter1_empty_46_reg_318 <= ap_phi_reg_pp0_iter0_empty_46_reg_318;
        ap_phi_reg_pp0_iter1_empty_47_reg_327 <= ap_phi_reg_pp0_iter0_empty_47_reg_327;
        ap_phi_reg_pp0_iter1_empty_48_reg_336 <= ap_phi_reg_pp0_iter0_empty_48_reg_336;
        ap_phi_reg_pp0_iter1_empty_reg_282 <= ap_phi_reg_pp0_iter0_empty_reg_282;
        ap_phi_reg_pp0_iter1_q_val_reg_273 <= ap_phi_reg_pp0_iter0_q_val_reg_273;
        ap_phi_reg_pp0_iter1_s_val_1_reg_194 <= ap_phi_reg_pp0_iter0_s_val_1_reg_194;
        icmp_ln62_reg_1490 <= icmp_ln62_fu_497_p2;
        tmp_16_reg_1450 <= vt_stream_dout[32'd39];
        tmp_17_reg_1455 <= vt_stream_dout[32'd59];
        tmp_18_reg_1460 <= vt_stream_dout[32'd79];
        tmp_19_reg_1465 <= vt_stream_dout[32'd99];
        tmp_20_reg_1470 <= vt_stream_dout[32'd119];
        tmp_21_reg_1475 <= vt_stream_dout[32'd139];
        tmp_22_reg_1480 <= vt_stream_dout[32'd159];
        tmp_reg_1445 <= vt_stream_dout[32'd19];
        trunc_ln67_1_reg_1413 <= {{vt_stream_dout[99:80]}};
        trunc_ln67_2_reg_1421 <= {{vt_stream_dout[119:100]}};
        trunc_ln67_3_reg_1429 <= {{vt_stream_dout[139:120]}};
        trunc_ln67_4_reg_1437 <= {{vt_stream_dout[159:140]}};
        trunc_ln67_8_reg_1389 <= {{vt_stream_dout[39:20]}};
        trunc_ln67_9_reg_1397 <= {{vt_stream_dout[59:40]}};
        trunc_ln67_reg_1381 <= trunc_ln67_fu_353_p1;
        trunc_ln67_s_reg_1405 <= {{vt_stream_dout[79:60]}};
        tt_reg_1485 <= tt_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_phi_reg_pp0_iter2_empty_43_reg_291 <= ap_phi_reg_pp0_iter1_empty_43_reg_291;
        ap_phi_reg_pp0_iter2_empty_44_reg_300 <= ap_phi_reg_pp0_iter1_empty_44_reg_300;
        ap_phi_reg_pp0_iter2_empty_45_reg_309 <= ap_phi_reg_pp0_iter1_empty_45_reg_309;
        ap_phi_reg_pp0_iter2_empty_46_reg_318 <= ap_phi_reg_pp0_iter1_empty_46_reg_318;
        ap_phi_reg_pp0_iter2_empty_47_reg_327 <= ap_phi_reg_pp0_iter1_empty_47_reg_327;
        ap_phi_reg_pp0_iter2_empty_48_reg_336 <= ap_phi_reg_pp0_iter1_empty_48_reg_336;
        ap_phi_reg_pp0_iter2_empty_reg_282 <= ap_phi_reg_pp0_iter1_empty_reg_282;
        ap_phi_reg_pp0_iter2_q_val_reg_273 <= ap_phi_reg_pp0_iter1_q_val_reg_273;
        ap_phi_reg_pp0_iter2_s_val_1_reg_194 <= ap_phi_reg_pp0_iter1_s_val_1_reg_194;
        icmp_ln62_reg_1490_pp0_iter1_reg <= icmp_ln62_reg_1490;
        sub_ln99_reg_1494 <= sub_ln99_fu_503_p2;
        tmp_16_reg_1450_pp0_iter1_reg <= tmp_16_reg_1450;
        tmp_17_reg_1455_pp0_iter1_reg <= tmp_17_reg_1455;
        tmp_18_reg_1460_pp0_iter1_reg <= tmp_18_reg_1460;
        tmp_19_reg_1465_pp0_iter1_reg <= tmp_19_reg_1465;
        tmp_20_reg_1470_pp0_iter1_reg <= tmp_20_reg_1470;
        tmp_21_reg_1475_pp0_iter1_reg <= tmp_21_reg_1475;
        tmp_22_reg_1480_pp0_iter1_reg <= tmp_22_reg_1480;
        tmp_reg_1445_pp0_iter1_reg <= tmp_reg_1445;
        trunc_ln67_1_reg_1413_pp0_iter1_reg <= trunc_ln67_1_reg_1413;
        trunc_ln67_2_reg_1421_pp0_iter1_reg <= trunc_ln67_2_reg_1421;
        trunc_ln67_3_reg_1429_pp0_iter1_reg <= trunc_ln67_3_reg_1429;
        trunc_ln67_4_reg_1437_pp0_iter1_reg <= trunc_ln67_4_reg_1437;
        trunc_ln67_8_reg_1389_pp0_iter1_reg <= trunc_ln67_8_reg_1389;
        trunc_ln67_9_reg_1397_pp0_iter1_reg <= trunc_ln67_9_reg_1397;
        trunc_ln67_reg_1381_pp0_iter1_reg <= trunc_ln67_reg_1381;
        trunc_ln67_s_reg_1405_pp0_iter1_reg <= trunc_ln67_s_reg_1405;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_phi_reg_pp0_iter3_empty_43_reg_291 <= ap_phi_reg_pp0_iter2_empty_43_reg_291;
        ap_phi_reg_pp0_iter3_empty_44_reg_300 <= ap_phi_reg_pp0_iter2_empty_44_reg_300;
        ap_phi_reg_pp0_iter3_empty_45_reg_309 <= ap_phi_reg_pp0_iter2_empty_45_reg_309;
        ap_phi_reg_pp0_iter3_empty_46_reg_318 <= ap_phi_reg_pp0_iter2_empty_46_reg_318;
        ap_phi_reg_pp0_iter3_empty_47_reg_327 <= ap_phi_reg_pp0_iter2_empty_47_reg_327;
        ap_phi_reg_pp0_iter3_empty_48_reg_336 <= ap_phi_reg_pp0_iter2_empty_48_reg_336;
        ap_phi_reg_pp0_iter3_empty_reg_282 <= ap_phi_reg_pp0_iter2_empty_reg_282;
        ap_phi_reg_pp0_iter3_q_val_reg_273 <= ap_phi_reg_pp0_iter2_q_val_reg_273;
        ap_phi_reg_pp0_iter3_s_val_1_reg_194 <= ap_phi_reg_pp0_iter2_s_val_1_reg_194;
        icmp_ln224_reg_1504 <= icmp_ln224_fu_521_p2;
        icmp_ln62_reg_1490_pp0_iter2_reg <= icmp_ln62_reg_1490_pp0_iter1_reg;
        sub_ln99_1_reg_1509 <= sub_ln99_1_fu_527_p2;
        tmp_16_reg_1450_pp0_iter2_reg <= tmp_16_reg_1450_pp0_iter1_reg;
        tmp_17_reg_1455_pp0_iter2_reg <= tmp_17_reg_1455_pp0_iter1_reg;
        tmp_18_reg_1460_pp0_iter2_reg <= tmp_18_reg_1460_pp0_iter1_reg;
        tmp_19_reg_1465_pp0_iter2_reg <= tmp_19_reg_1465_pp0_iter1_reg;
        tmp_20_reg_1470_pp0_iter2_reg <= tmp_20_reg_1470_pp0_iter1_reg;
        tmp_21_reg_1475_pp0_iter2_reg <= tmp_21_reg_1475_pp0_iter1_reg;
        tmp_22_reg_1480_pp0_iter2_reg <= tmp_22_reg_1480_pp0_iter1_reg;
        trunc_ln224_reg_1499 <= trunc_ln224_fu_517_p1;
        trunc_ln67_1_reg_1413_pp0_iter2_reg <= trunc_ln67_1_reg_1413_pp0_iter1_reg;
        trunc_ln67_2_reg_1421_pp0_iter2_reg <= trunc_ln67_2_reg_1421_pp0_iter1_reg;
        trunc_ln67_3_reg_1429_pp0_iter2_reg <= trunc_ln67_3_reg_1429_pp0_iter1_reg;
        trunc_ln67_4_reg_1437_pp0_iter2_reg <= trunc_ln67_4_reg_1437_pp0_iter1_reg;
        trunc_ln67_8_reg_1389_pp0_iter2_reg <= trunc_ln67_8_reg_1389_pp0_iter1_reg;
        trunc_ln67_9_reg_1397_pp0_iter2_reg <= trunc_ln67_9_reg_1397_pp0_iter1_reg;
        trunc_ln67_reg_1381_pp0_iter2_reg <= trunc_ln67_reg_1381_pp0_iter1_reg;
        trunc_ln67_s_reg_1405_pp0_iter2_reg <= trunc_ln67_s_reg_1405_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_phi_reg_pp0_iter4_empty_43_reg_291 <= ap_phi_reg_pp0_iter3_empty_43_reg_291;
        ap_phi_reg_pp0_iter4_empty_44_reg_300 <= ap_phi_reg_pp0_iter3_empty_44_reg_300;
        ap_phi_reg_pp0_iter4_empty_45_reg_309 <= ap_phi_reg_pp0_iter3_empty_45_reg_309;
        ap_phi_reg_pp0_iter4_empty_46_reg_318 <= ap_phi_reg_pp0_iter3_empty_46_reg_318;
        ap_phi_reg_pp0_iter4_empty_47_reg_327 <= ap_phi_reg_pp0_iter3_empty_47_reg_327;
        ap_phi_reg_pp0_iter4_empty_48_reg_336 <= ap_phi_reg_pp0_iter3_empty_48_reg_336;
        ap_phi_reg_pp0_iter4_empty_reg_282 <= ap_phi_reg_pp0_iter3_empty_reg_282;
        ap_phi_reg_pp0_iter4_q_val_reg_273 <= ap_phi_reg_pp0_iter3_q_val_reg_273;
        ap_phi_reg_pp0_iter4_s_val_1_reg_194 <= ap_phi_reg_pp0_iter3_s_val_1_reg_194;
        icmp_ln224_1_reg_1524 <= icmp_ln224_1_fu_551_p2;
        icmp_ln62_reg_1490_pp0_iter3_reg <= icmp_ln62_reg_1490_pp0_iter2_reg;
        select_ln99_1_reg_1514 <= select_ln99_1_fu_532_p3;
        sub_ln99_2_reg_1529 <= sub_ln99_2_fu_557_p2;
        tmp_17_reg_1455_pp0_iter3_reg <= tmp_17_reg_1455_pp0_iter2_reg;
        tmp_18_reg_1460_pp0_iter3_reg <= tmp_18_reg_1460_pp0_iter2_reg;
        tmp_19_reg_1465_pp0_iter3_reg <= tmp_19_reg_1465_pp0_iter2_reg;
        tmp_20_reg_1470_pp0_iter3_reg <= tmp_20_reg_1470_pp0_iter2_reg;
        tmp_21_reg_1475_pp0_iter3_reg <= tmp_21_reg_1475_pp0_iter2_reg;
        tmp_22_reg_1480_pp0_iter3_reg <= tmp_22_reg_1480_pp0_iter2_reg;
        trunc_ln224_1_reg_1519 <= trunc_ln224_1_fu_547_p1;
        trunc_ln67_1_reg_1413_pp0_iter3_reg <= trunc_ln67_1_reg_1413_pp0_iter2_reg;
        trunc_ln67_2_reg_1421_pp0_iter3_reg <= trunc_ln67_2_reg_1421_pp0_iter2_reg;
        trunc_ln67_3_reg_1429_pp0_iter3_reg <= trunc_ln67_3_reg_1429_pp0_iter2_reg;
        trunc_ln67_4_reg_1437_pp0_iter3_reg <= trunc_ln67_4_reg_1437_pp0_iter2_reg;
        trunc_ln67_8_reg_1389_pp0_iter3_reg <= trunc_ln67_8_reg_1389_pp0_iter2_reg;
        trunc_ln67_9_reg_1397_pp0_iter3_reg <= trunc_ln67_9_reg_1397_pp0_iter2_reg;
        trunc_ln67_reg_1381_pp0_iter3_reg <= trunc_ln67_reg_1381_pp0_iter2_reg;
        trunc_ln67_s_reg_1405_pp0_iter3_reg <= trunc_ln67_s_reg_1405_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_phi_reg_pp0_iter5_empty_43_reg_291 <= ap_phi_reg_pp0_iter4_empty_43_reg_291;
        ap_phi_reg_pp0_iter5_empty_44_reg_300 <= ap_phi_reg_pp0_iter4_empty_44_reg_300;
        ap_phi_reg_pp0_iter5_empty_45_reg_309 <= ap_phi_reg_pp0_iter4_empty_45_reg_309;
        ap_phi_reg_pp0_iter5_empty_46_reg_318 <= ap_phi_reg_pp0_iter4_empty_46_reg_318;
        ap_phi_reg_pp0_iter5_empty_47_reg_327 <= ap_phi_reg_pp0_iter4_empty_47_reg_327;
        ap_phi_reg_pp0_iter5_empty_48_reg_336 <= ap_phi_reg_pp0_iter4_empty_48_reg_336;
        ap_phi_reg_pp0_iter5_empty_reg_282 <= ap_phi_reg_pp0_iter4_empty_reg_282;
        ap_phi_reg_pp0_iter5_q_val_reg_273 <= ap_phi_reg_pp0_iter4_q_val_reg_273;
        ap_phi_reg_pp0_iter5_s_val_1_reg_194 <= ap_phi_reg_pp0_iter4_s_val_1_reg_194;
        icmp_ln224_2_reg_1544 <= icmp_ln224_2_fu_580_p2;
        icmp_ln62_reg_1490_pp0_iter4_reg <= icmp_ln62_reg_1490_pp0_iter3_reg;
        select_ln99_3_reg_1534 <= select_ln99_3_fu_562_p3;
        sub_ln99_3_reg_1549 <= sub_ln99_3_fu_586_p2;
        tmp_18_reg_1460_pp0_iter4_reg <= tmp_18_reg_1460_pp0_iter3_reg;
        tmp_19_reg_1465_pp0_iter4_reg <= tmp_19_reg_1465_pp0_iter3_reg;
        tmp_20_reg_1470_pp0_iter4_reg <= tmp_20_reg_1470_pp0_iter3_reg;
        tmp_21_reg_1475_pp0_iter4_reg <= tmp_21_reg_1475_pp0_iter3_reg;
        tmp_22_reg_1480_pp0_iter4_reg <= tmp_22_reg_1480_pp0_iter3_reg;
        trunc_ln224_2_reg_1539 <= trunc_ln224_2_fu_576_p1;
        trunc_ln67_1_reg_1413_pp0_iter4_reg <= trunc_ln67_1_reg_1413_pp0_iter3_reg;
        trunc_ln67_2_reg_1421_pp0_iter4_reg <= trunc_ln67_2_reg_1421_pp0_iter3_reg;
        trunc_ln67_3_reg_1429_pp0_iter4_reg <= trunc_ln67_3_reg_1429_pp0_iter3_reg;
        trunc_ln67_4_reg_1437_pp0_iter4_reg <= trunc_ln67_4_reg_1437_pp0_iter3_reg;
        trunc_ln67_8_reg_1389_pp0_iter4_reg <= trunc_ln67_8_reg_1389_pp0_iter3_reg;
        trunc_ln67_9_reg_1397_pp0_iter4_reg <= trunc_ln67_9_reg_1397_pp0_iter3_reg;
        trunc_ln67_reg_1381_pp0_iter4_reg <= trunc_ln67_reg_1381_pp0_iter3_reg;
        trunc_ln67_s_reg_1405_pp0_iter4_reg <= trunc_ln67_s_reg_1405_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_phi_reg_pp0_iter6_empty_43_reg_291 <= ap_phi_reg_pp0_iter5_empty_43_reg_291;
        ap_phi_reg_pp0_iter6_empty_44_reg_300 <= ap_phi_reg_pp0_iter5_empty_44_reg_300;
        ap_phi_reg_pp0_iter6_empty_45_reg_309 <= ap_phi_reg_pp0_iter5_empty_45_reg_309;
        ap_phi_reg_pp0_iter6_empty_46_reg_318 <= ap_phi_reg_pp0_iter5_empty_46_reg_318;
        ap_phi_reg_pp0_iter6_empty_47_reg_327 <= ap_phi_reg_pp0_iter5_empty_47_reg_327;
        ap_phi_reg_pp0_iter6_empty_48_reg_336 <= ap_phi_reg_pp0_iter5_empty_48_reg_336;
        ap_phi_reg_pp0_iter6_empty_reg_282 <= ap_phi_reg_pp0_iter5_empty_reg_282;
        ap_phi_reg_pp0_iter6_q_val_reg_273 <= ap_phi_reg_pp0_iter5_q_val_reg_273;
        ap_phi_reg_pp0_iter6_s_val_1_reg_194 <= ap_phi_reg_pp0_iter5_s_val_1_reg_194;
        icmp_ln224_3_reg_1564 <= icmp_ln224_3_fu_609_p2;
        icmp_ln62_reg_1490_pp0_iter5_reg <= icmp_ln62_reg_1490_pp0_iter4_reg;
        select_ln99_5_reg_1554 <= select_ln99_5_fu_591_p3;
        sub_ln99_4_reg_1569 <= sub_ln99_4_fu_615_p2;
        tmp_19_reg_1465_pp0_iter5_reg <= tmp_19_reg_1465_pp0_iter4_reg;
        tmp_20_reg_1470_pp0_iter5_reg <= tmp_20_reg_1470_pp0_iter4_reg;
        tmp_21_reg_1475_pp0_iter5_reg <= tmp_21_reg_1475_pp0_iter4_reg;
        tmp_22_reg_1480_pp0_iter5_reg <= tmp_22_reg_1480_pp0_iter4_reg;
        trunc_ln224_3_reg_1559 <= trunc_ln224_3_fu_605_p1;
        trunc_ln67_1_reg_1413_pp0_iter5_reg <= trunc_ln67_1_reg_1413_pp0_iter4_reg;
        trunc_ln67_2_reg_1421_pp0_iter5_reg <= trunc_ln67_2_reg_1421_pp0_iter4_reg;
        trunc_ln67_3_reg_1429_pp0_iter5_reg <= trunc_ln67_3_reg_1429_pp0_iter4_reg;
        trunc_ln67_4_reg_1437_pp0_iter5_reg <= trunc_ln67_4_reg_1437_pp0_iter4_reg;
        trunc_ln67_8_reg_1389_pp0_iter5_reg <= trunc_ln67_8_reg_1389_pp0_iter4_reg;
        trunc_ln67_9_reg_1397_pp0_iter5_reg <= trunc_ln67_9_reg_1397_pp0_iter4_reg;
        trunc_ln67_reg_1381_pp0_iter5_reg <= trunc_ln67_reg_1381_pp0_iter4_reg;
        trunc_ln67_s_reg_1405_pp0_iter5_reg <= trunc_ln67_s_reg_1405_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_phi_reg_pp0_iter7_empty_43_reg_291 <= ap_phi_reg_pp0_iter6_empty_43_reg_291;
        ap_phi_reg_pp0_iter7_empty_44_reg_300 <= ap_phi_reg_pp0_iter6_empty_44_reg_300;
        ap_phi_reg_pp0_iter7_empty_45_reg_309 <= ap_phi_reg_pp0_iter6_empty_45_reg_309;
        ap_phi_reg_pp0_iter7_empty_46_reg_318 <= ap_phi_reg_pp0_iter6_empty_46_reg_318;
        ap_phi_reg_pp0_iter7_empty_47_reg_327 <= ap_phi_reg_pp0_iter6_empty_47_reg_327;
        ap_phi_reg_pp0_iter7_empty_48_reg_336 <= ap_phi_reg_pp0_iter6_empty_48_reg_336;
        ap_phi_reg_pp0_iter7_empty_reg_282 <= ap_phi_reg_pp0_iter6_empty_reg_282;
        ap_phi_reg_pp0_iter7_q_val_reg_273 <= ap_phi_reg_pp0_iter6_q_val_reg_273;
        ap_phi_reg_pp0_iter7_s_val_1_reg_194 <= ap_phi_reg_pp0_iter6_s_val_1_reg_194;
        icmp_ln224_4_reg_1584 <= icmp_ln224_4_fu_638_p2;
        icmp_ln62_reg_1490_pp0_iter6_reg <= icmp_ln62_reg_1490_pp0_iter5_reg;
        select_ln99_7_reg_1574 <= select_ln99_7_fu_620_p3;
        sub_ln99_5_reg_1589 <= sub_ln99_5_fu_644_p2;
        tmp_20_reg_1470_pp0_iter6_reg <= tmp_20_reg_1470_pp0_iter5_reg;
        tmp_21_reg_1475_pp0_iter6_reg <= tmp_21_reg_1475_pp0_iter5_reg;
        tmp_22_reg_1480_pp0_iter6_reg <= tmp_22_reg_1480_pp0_iter5_reg;
        trunc_ln224_4_reg_1579 <= trunc_ln224_4_fu_634_p1;
        trunc_ln67_1_reg_1413_pp0_iter6_reg <= trunc_ln67_1_reg_1413_pp0_iter5_reg;
        trunc_ln67_2_reg_1421_pp0_iter6_reg <= trunc_ln67_2_reg_1421_pp0_iter5_reg;
        trunc_ln67_3_reg_1429_pp0_iter6_reg <= trunc_ln67_3_reg_1429_pp0_iter5_reg;
        trunc_ln67_4_reg_1437_pp0_iter6_reg <= trunc_ln67_4_reg_1437_pp0_iter5_reg;
        trunc_ln67_8_reg_1389_pp0_iter6_reg <= trunc_ln67_8_reg_1389_pp0_iter5_reg;
        trunc_ln67_9_reg_1397_pp0_iter6_reg <= trunc_ln67_9_reg_1397_pp0_iter5_reg;
        trunc_ln67_reg_1381_pp0_iter6_reg <= trunc_ln67_reg_1381_pp0_iter5_reg;
        trunc_ln67_s_reg_1405_pp0_iter6_reg <= trunc_ln67_s_reg_1405_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_phi_reg_pp0_iter8_empty_43_reg_291 <= ap_phi_reg_pp0_iter7_empty_43_reg_291;
        ap_phi_reg_pp0_iter8_empty_44_reg_300 <= ap_phi_reg_pp0_iter7_empty_44_reg_300;
        ap_phi_reg_pp0_iter8_empty_45_reg_309 <= ap_phi_reg_pp0_iter7_empty_45_reg_309;
        ap_phi_reg_pp0_iter8_empty_46_reg_318 <= ap_phi_reg_pp0_iter7_empty_46_reg_318;
        ap_phi_reg_pp0_iter8_empty_47_reg_327 <= ap_phi_reg_pp0_iter7_empty_47_reg_327;
        ap_phi_reg_pp0_iter8_empty_48_reg_336 <= ap_phi_reg_pp0_iter7_empty_48_reg_336;
        ap_phi_reg_pp0_iter8_empty_reg_282 <= ap_phi_reg_pp0_iter7_empty_reg_282;
        ap_phi_reg_pp0_iter8_q_val_reg_273 <= ap_phi_reg_pp0_iter7_q_val_reg_273;
        ap_phi_reg_pp0_iter8_s_val_1_reg_194 <= ap_phi_reg_pp0_iter7_s_val_1_reg_194;
        icmp_ln224_5_reg_1604 <= icmp_ln224_5_fu_667_p2;
        icmp_ln62_reg_1490_pp0_iter7_reg <= icmp_ln62_reg_1490_pp0_iter6_reg;
        select_ln99_9_reg_1594 <= select_ln99_9_fu_649_p3;
        sub_ln99_6_reg_1609 <= sub_ln99_6_fu_673_p2;
        tmp_21_reg_1475_pp0_iter7_reg <= tmp_21_reg_1475_pp0_iter6_reg;
        tmp_22_reg_1480_pp0_iter7_reg <= tmp_22_reg_1480_pp0_iter6_reg;
        trunc_ln224_5_reg_1599 <= trunc_ln224_5_fu_663_p1;
        trunc_ln67_1_reg_1413_pp0_iter7_reg <= trunc_ln67_1_reg_1413_pp0_iter6_reg;
        trunc_ln67_2_reg_1421_pp0_iter7_reg <= trunc_ln67_2_reg_1421_pp0_iter6_reg;
        trunc_ln67_3_reg_1429_pp0_iter7_reg <= trunc_ln67_3_reg_1429_pp0_iter6_reg;
        trunc_ln67_4_reg_1437_pp0_iter7_reg <= trunc_ln67_4_reg_1437_pp0_iter6_reg;
        trunc_ln67_8_reg_1389_pp0_iter7_reg <= trunc_ln67_8_reg_1389_pp0_iter6_reg;
        trunc_ln67_9_reg_1397_pp0_iter7_reg <= trunc_ln67_9_reg_1397_pp0_iter6_reg;
        trunc_ln67_reg_1381_pp0_iter7_reg <= trunc_ln67_reg_1381_pp0_iter6_reg;
        trunc_ln67_s_reg_1405_pp0_iter7_reg <= trunc_ln67_s_reg_1405_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_phi_reg_pp0_iter9_empty_43_reg_291 <= ap_phi_reg_pp0_iter8_empty_43_reg_291;
        ap_phi_reg_pp0_iter9_empty_44_reg_300 <= ap_phi_reg_pp0_iter8_empty_44_reg_300;
        ap_phi_reg_pp0_iter9_empty_45_reg_309 <= ap_phi_reg_pp0_iter8_empty_45_reg_309;
        ap_phi_reg_pp0_iter9_empty_46_reg_318 <= ap_phi_reg_pp0_iter8_empty_46_reg_318;
        ap_phi_reg_pp0_iter9_empty_47_reg_327 <= ap_phi_reg_pp0_iter8_empty_47_reg_327;
        ap_phi_reg_pp0_iter9_empty_48_reg_336 <= ap_phi_reg_pp0_iter8_empty_48_reg_336;
        ap_phi_reg_pp0_iter9_empty_reg_282 <= ap_phi_reg_pp0_iter8_empty_reg_282;
        ap_phi_reg_pp0_iter9_q_val_reg_273 <= ap_phi_reg_pp0_iter8_q_val_reg_273;
        ap_phi_reg_pp0_iter9_s_val_1_reg_194 <= ap_phi_reg_pp0_iter8_s_val_1_reg_194;
        icmp_ln224_6_reg_1624 <= icmp_ln224_6_fu_696_p2;
        icmp_ln62_reg_1490_pp0_iter8_reg <= icmp_ln62_reg_1490_pp0_iter7_reg;
        select_ln99_11_reg_1614 <= select_ln99_11_fu_678_p3;
        sub_ln99_7_reg_1629 <= sub_ln99_7_fu_702_p2;
        tmp_22_reg_1480_pp0_iter8_reg <= tmp_22_reg_1480_pp0_iter7_reg;
        trunc_ln224_6_reg_1619 <= trunc_ln224_6_fu_692_p1;
        trunc_ln67_1_reg_1413_pp0_iter8_reg <= trunc_ln67_1_reg_1413_pp0_iter7_reg;
        trunc_ln67_2_reg_1421_pp0_iter8_reg <= trunc_ln67_2_reg_1421_pp0_iter7_reg;
        trunc_ln67_3_reg_1429_pp0_iter8_reg <= trunc_ln67_3_reg_1429_pp0_iter7_reg;
        trunc_ln67_4_reg_1437_pp0_iter8_reg <= trunc_ln67_4_reg_1437_pp0_iter7_reg;
        trunc_ln67_8_reg_1389_pp0_iter8_reg <= trunc_ln67_8_reg_1389_pp0_iter7_reg;
        trunc_ln67_9_reg_1397_pp0_iter8_reg <= trunc_ln67_9_reg_1397_pp0_iter7_reg;
        trunc_ln67_reg_1381_pp0_iter8_reg <= trunc_ln67_reg_1381_pp0_iter7_reg;
        trunc_ln67_s_reg_1405_pp0_iter8_reg <= trunc_ln67_s_reg_1405_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
        icmp_ln62_reg_1490_pp0_iter15_reg <= icmp_ln62_reg_1490_pp0_iter14_reg;
        s_val_reg_1736_pp0_iter15_reg <= s_val_reg_1736_pp0_iter14_reg;
        select_ln123_1_reg_1835 <= select_ln123_1_fu_1185_p3;
        select_ln123_2_reg_1840 <= select_ln123_2_fu_1233_p3;
        select_ln123_3_reg_1845 <= select_ln123_3_fu_1281_p3;
        select_ln123_4_reg_1850 <= select_ln123_4_fu_1329_p3;
        select_ln123_5_reg_1855 <= select_ln123_5_fu_1337_p3;
        select_ln123_6_reg_1860 <= select_ln123_6_fu_1345_p3;
        select_ln123_7_reg_1865 <= select_ln123_7_fu_1353_p3;
        select_ln123_reg_1830 <= select_ln123_fu_1157_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter10_fsm_state11_blk = 1'b0;

assign ap_ST_iter11_fsm_state12_blk = 1'b0;

assign ap_ST_iter12_fsm_state13_blk = 1'b0;

assign ap_ST_iter13_fsm_state14_blk = 1'b0;

assign ap_ST_iter14_fsm_state15_blk = 1'b0;

assign ap_ST_iter15_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state17_pp0_stage0_iter16)) begin
        ap_ST_iter16_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_iter16_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

assign ap_ST_iter4_fsm_state5_blk = 1'b0;

assign ap_ST_iter5_fsm_state6_blk = 1'b0;

assign ap_ST_iter6_fsm_state7_blk = 1'b0;

assign ap_ST_iter7_fsm_state8_blk = 1'b0;

assign ap_ST_iter8_fsm_state9_blk = 1'b0;

assign ap_ST_iter9_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (icmp_ln62_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter5_fsm_state0) & (1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_CS_iter16_fsm_state0) & (1'b1 == ap_CS_iter15_fsm_state0) & (1'b1 == ap_CS_iter14_fsm_state0) & (1'b1 == ap_CS_iter13_fsm_state0) & (1'b1 == ap_CS_iter12_fsm_state0) & (1'b1 == ap_CS_iter11_fsm_state0) & (1'b1 == ap_CS_iter10_fsm_state0) & (1'b1 == ap_CS_iter9_fsm_state0) & (1'b1 == ap_CS_iter8_fsm_state0) & (1'b1 == ap_CS_iter7_fsm_state0) & (1'b1 == ap_CS_iter6_fsm_state0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tt1_load = 6'd0;
    end else if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        ap_sig_allocacmp_tt1_load = tt_reg_1485;
    end else begin
        ap_sig_allocacmp_tt1_load = tt1_fu_170;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter16_fsm_state17)) begin
        vq_stream_blk_n = vq_stream_full_n;
    end else begin
        vq_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        vq_stream_write = 1'b1;
    end else begin
        vq_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter16_fsm_state17)) begin
        vs_stream_blk_n = vs_stream_full_n;
    end else begin
        vs_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter16_fsm_state17))) begin
        vs_stream_write = 1'b1;
    end else begin
        vs_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        vt_stream_blk_n = vt_stream_empty_n;
    end else begin
        vt_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        vt_stream_read = 1'b1;
    end else begin
        vt_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter5_fsm)
        ap_ST_iter5_fsm_state6 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end
        end
        ap_ST_iter5_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state6;
            end else begin
                ap_NS_iter5_fsm = ap_ST_iter5_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter5_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter6_fsm)
        ap_ST_iter6_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end
        end
        ap_ST_iter6_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter5_fsm_state6))) begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state7;
            end else begin
                ap_NS_iter6_fsm = ap_ST_iter6_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter6_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter7_fsm)
        ap_ST_iter7_fsm_state8 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end
        end
        ap_ST_iter7_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter6_fsm_state7))) begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state8;
            end else begin
                ap_NS_iter7_fsm = ap_ST_iter7_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter7_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter8_fsm)
        ap_ST_iter8_fsm_state9 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end
        end
        ap_ST_iter8_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter7_fsm_state8))) begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state9;
            end else begin
                ap_NS_iter8_fsm = ap_ST_iter8_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter8_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter9_fsm)
        ap_ST_iter9_fsm_state10 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end
        end
        ap_ST_iter9_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter8_fsm_state9))) begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state10;
            end else begin
                ap_NS_iter9_fsm = ap_ST_iter9_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter9_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter10_fsm)
        ap_ST_iter10_fsm_state11 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end
        end
        ap_ST_iter10_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter9_fsm_state10))) begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state11;
            end else begin
                ap_NS_iter10_fsm = ap_ST_iter10_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter10_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter11_fsm)
        ap_ST_iter11_fsm_state12 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end
        end
        ap_ST_iter11_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter10_fsm_state11))) begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state12;
            end else begin
                ap_NS_iter11_fsm = ap_ST_iter11_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter11_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter12_fsm)
        ap_ST_iter12_fsm_state13 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end
        end
        ap_ST_iter12_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12))) begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state13;
            end else begin
                ap_NS_iter12_fsm = ap_ST_iter12_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter12_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter13_fsm)
        ap_ST_iter13_fsm_state14 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end
        end
        ap_ST_iter13_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13))) begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state14;
            end else begin
                ap_NS_iter13_fsm = ap_ST_iter13_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter13_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter14_fsm)
        ap_ST_iter14_fsm_state15 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end
        end
        ap_ST_iter14_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter13_fsm_state14))) begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state15;
            end else begin
                ap_NS_iter14_fsm = ap_ST_iter14_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter14_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter15_fsm)
        ap_ST_iter15_fsm_state16 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b0 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end
        end
        ap_ST_iter15_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15))) begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state16;
            end else begin
                ap_NS_iter15_fsm = ap_ST_iter15_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter15_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter16_fsm)
        ap_ST_iter16_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b0 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end else if (((~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter15_fsm_state16)) | (~((1'b1 == ap_block_state17_pp0_stage0_iter16) | (ap_done_reg == 1'b1)) & (icmp_ln62_reg_1490_pp0_iter15_reg == 1'd1) & (1'b1 == ap_CS_iter16_fsm_state17)))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end
        end
        ap_ST_iter16_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter15_fsm_state16))) begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state17;
            end else begin
                ap_NS_iter16_fsm = ap_ST_iter16_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter16_fsm = 'bx;
        end
    endcase
end

assign abs_max_fu_731_p3 = ((icmp_ln224_7_reg_1644[0:0] == 1'b1) ? trunc_ln224_7_reg_1639 : select_ln99_13_reg_1634);

assign add_ln119_fu_936_p2 = ($signed(s_val_fu_922_p3) + $signed(4'd15));

assign add_ln120_1_fu_1004_p2 = (ashr_ln119_1_reg_1755 + 20'd1);

assign add_ln120_2_fu_1023_p2 = (ashr_ln119_2_reg_1760 + 20'd1);

assign add_ln120_3_fu_1042_p2 = (ashr_ln119_3_reg_1765 + 20'd1);

assign add_ln120_4_fu_1061_p2 = (ashr_ln119_4_reg_1770 + 20'd1);

assign add_ln120_5_fu_1080_p2 = (ashr_ln119_5_reg_1775 + 20'd1);

assign add_ln120_6_fu_1099_p2 = (ashr_ln119_6_reg_1780 + 20'd1);

assign add_ln120_7_fu_1118_p2 = (ashr_ln119_7_reg_1785 + 20'd1);

assign add_ln120_fu_985_p2 = (ashr_ln119_reg_1750 + 20'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter10_fsm_state0 = ap_CS_iter10_fsm[32'd0];

assign ap_CS_iter10_fsm_state11 = ap_CS_iter10_fsm[32'd1];

assign ap_CS_iter11_fsm_state0 = ap_CS_iter11_fsm[32'd0];

assign ap_CS_iter11_fsm_state12 = ap_CS_iter11_fsm[32'd1];

assign ap_CS_iter12_fsm_state0 = ap_CS_iter12_fsm[32'd0];

assign ap_CS_iter12_fsm_state13 = ap_CS_iter12_fsm[32'd1];

assign ap_CS_iter13_fsm_state0 = ap_CS_iter13_fsm[32'd0];

assign ap_CS_iter13_fsm_state14 = ap_CS_iter13_fsm[32'd1];

assign ap_CS_iter14_fsm_state0 = ap_CS_iter14_fsm[32'd0];

assign ap_CS_iter14_fsm_state15 = ap_CS_iter14_fsm[32'd1];

assign ap_CS_iter15_fsm_state0 = ap_CS_iter15_fsm[32'd0];

assign ap_CS_iter15_fsm_state16 = ap_CS_iter15_fsm[32'd1];

assign ap_CS_iter16_fsm_state0 = ap_CS_iter16_fsm[32'd0];

assign ap_CS_iter16_fsm_state17 = ap_CS_iter16_fsm[32'd1];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

assign ap_CS_iter5_fsm_state0 = ap_CS_iter5_fsm[32'd0];

assign ap_CS_iter5_fsm_state6 = ap_CS_iter5_fsm[32'd1];

assign ap_CS_iter6_fsm_state0 = ap_CS_iter6_fsm[32'd0];

assign ap_CS_iter6_fsm_state7 = ap_CS_iter6_fsm[32'd1];

assign ap_CS_iter7_fsm_state0 = ap_CS_iter7_fsm[32'd0];

assign ap_CS_iter7_fsm_state8 = ap_CS_iter7_fsm[32'd1];

assign ap_CS_iter8_fsm_state0 = ap_CS_iter8_fsm[32'd0];

assign ap_CS_iter8_fsm_state9 = ap_CS_iter8_fsm[32'd1];

assign ap_CS_iter9_fsm_state0 = ap_CS_iter9_fsm[32'd0];

assign ap_CS_iter9_fsm_state10 = ap_CS_iter9_fsm[32'd1];

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = ((vs_stream_full_n == 1'b0) | (vq_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | (vt_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_1000 = ((tmp_34_fu_842_p3 == 1'd1) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1006 = ((tmp_35_fu_850_p3 == 1'd1) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1012 = ((tmp_36_fu_858_p3 == 1'd1) & (tmp_35_fu_850_p3 == 1'd0) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1018 = ((tmp_37_fu_866_p3 == 1'd1) & (tmp_36_fu_858_p3 == 1'd0) & (tmp_35_fu_850_p3 == 1'd0) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1024 = ((tmp_38_fu_874_p3 == 1'd1) & (tmp_37_fu_866_p3 == 1'd0) & (tmp_36_fu_858_p3 == 1'd0) & (tmp_35_fu_850_p3 == 1'd0) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1030 = ((tmp_39_fu_882_p3 == 1'd1) & (tmp_38_fu_874_p3 == 1'd0) & (tmp_37_fu_866_p3 == 1'd0) & (tmp_36_fu_858_p3 == 1'd0) & (tmp_35_fu_850_p3 == 1'd0) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1036 = ((tmp_40_fu_890_p3 == 1'd1) & (tmp_39_fu_882_p3 == 1'd0) & (tmp_38_fu_874_p3 == 1'd0) & (tmp_37_fu_866_p3 == 1'd0) & (tmp_36_fu_858_p3 == 1'd0) & (tmp_35_fu_850_p3 == 1'd0) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_1039 = ((tmp_40_fu_890_p3 == 1'd0) & (tmp_39_fu_882_p3 == 1'd0) & (tmp_38_fu_874_p3 == 1'd0) & (tmp_37_fu_866_p3 == 1'd0) & (tmp_36_fu_858_p3 == 1'd0) & (tmp_35_fu_850_p3 == 1'd0) & (tmp_34_fu_842_p3 == 1'd0) & (tmp_33_fu_834_p3 == 1'd0) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_335 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter11_fsm_state12));
end

always @ (*) begin
    ap_condition_337 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter12_fsm_state13));
end

always @ (*) begin
    ap_condition_540 = (~((ap_done_reg == 1'b1) | ((1'b1 == ap_block_state17_pp0_stage0_iter16) & (1'b1 == ap_CS_iter16_fsm_state17))) & (1'b1 == ap_CS_iter14_fsm_state15));
end

always @ (*) begin
    ap_condition_946 = ((tmp_25_fu_770_p3 == 1'd1) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_952 = ((tmp_26_fu_778_p3 == 1'd1) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_958 = ((tmp_27_fu_786_p3 == 1'd1) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_964 = ((tmp_28_fu_794_p3 == 1'd1) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_970 = ((tmp_29_fu_802_p3 == 1'd1) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_976 = ((tmp_30_fu_810_p3 == 1'd1) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_982 = ((tmp_31_fu_818_p3 == 1'd1) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_988 = ((tmp_32_fu_826_p3 == 1'd1) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_994 = ((tmp_33_fu_834_p3 == 1'd1) & (tmp_32_fu_826_p3 == 1'd0) & (tmp_31_fu_818_p3 == 1'd0) & (tmp_30_fu_810_p3 == 1'd0) & (tmp_29_fu_802_p3 == 1'd0) & (tmp_28_fu_794_p3 == 1'd0) & (tmp_27_fu_786_p3 == 1'd0) & (tmp_26_fu_778_p3 == 1'd0) & (tmp_25_fu_770_p3 == 1'd0) & (tmp_24_fu_762_p3 == 1'd0) & (tmp_23_fu_754_p3 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_43_reg_291 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_44_reg_300 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_45_reg_309 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_46_reg_318 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_47_reg_327 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_48_reg_336 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_282 = 'bx;

assign ap_phi_reg_pp0_iter0_q_val_reg_273 = 'bx;

assign ap_phi_reg_pp0_iter0_s_val_1_reg_194 = 'bx;

assign ap_ready = ap_ready_sig;

assign ashr_ln119_1_fu_950_p2 = $signed(trunc_ln67_8_reg_1389_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_2_fu_955_p2 = $signed(trunc_ln67_9_reg_1397_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_3_fu_960_p2 = $signed(trunc_ln67_s_reg_1405_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_4_fu_965_p2 = $signed(trunc_ln67_1_reg_1413_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_5_fu_970_p2 = $signed(trunc_ln67_2_reg_1421_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_6_fu_975_p2 = $signed(trunc_ln67_3_reg_1429_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_7_fu_980_p2 = $signed(trunc_ln67_4_reg_1437_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign ashr_ln119_fu_945_p2 = $signed(trunc_ln67_reg_1381_pp0_iter12_reg) >>> zext_ln119_fu_942_p1;

assign icmp_ln118_fu_930_p2 = ((s_val_fu_922_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_736_p2 = ((abs_max_fu_731_p3 != 19'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_1_fu_1175_p2 = (($signed(tmp_43_fu_1165_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_2_fu_1203_p2 = (($signed(tmp_44_fu_1193_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_3_fu_1223_p2 = (($signed(tmp_45_fu_1213_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_4_fu_1251_p2 = (($signed(tmp_46_fu_1241_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_5_fu_1271_p2 = (($signed(tmp_47_fu_1261_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_6_fu_1299_p2 = (($signed(tmp_48_fu_1289_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_7_fu_1319_p2 = (($signed(tmp_49_fu_1309_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_1147_p2 = (($signed(tmp_42_fu_1137_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_551_p2 = (($signed(zext_ln99_fu_538_p1) < $signed(select_ln99_2_fu_542_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_580_p2 = (($signed(zext_ln99_1_fu_567_p1) < $signed(select_ln99_4_fu_571_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_609_p2 = (($signed(zext_ln99_2_fu_596_p1) < $signed(select_ln99_6_fu_600_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_4_fu_638_p2 = (($signed(zext_ln99_3_fu_625_p1) < $signed(select_ln99_8_fu_629_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_5_fu_667_p2 = (($signed(zext_ln99_4_fu_654_p1) < $signed(select_ln99_10_fu_658_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_6_fu_696_p2 = (($signed(zext_ln99_5_fu_683_p1) < $signed(select_ln99_12_fu_687_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_7_fu_725_p2 = (($signed(zext_ln99_6_fu_712_p1) < $signed(select_ln99_14_fu_716_p3)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_521_p2 = (($signed(select_ln99_fu_512_p3) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_497_p2 = ((ap_sig_allocacmp_tt1_load == 6'd63) ? 1'b1 : 1'b0);

assign s_val_fu_922_p3 = ((tmp_41_fu_910_p3[0:0] == 1'b1) ? 4'd0 : trunc_ln108_fu_918_p1);

assign select_ln123_1_fu_1185_p3 = ((icmp_ln200_1_fu_1175_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_1_fu_1181_p1);

assign select_ln123_2_fu_1233_p3 = ((icmp_ln200_3_fu_1223_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_3_fu_1229_p1);

assign select_ln123_3_fu_1281_p3 = ((icmp_ln200_5_fu_1271_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_5_fu_1277_p1);

assign select_ln123_4_fu_1329_p3 = ((icmp_ln200_7_fu_1319_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_7_fu_1325_p1);

assign select_ln123_5_fu_1337_p3 = ((icmp_ln200_2_fu_1203_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_2_fu_1209_p1);

assign select_ln123_6_fu_1345_p3 = ((icmp_ln200_4_fu_1251_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_4_fu_1257_p1);

assign select_ln123_7_fu_1353_p3 = ((icmp_ln200_6_fu_1299_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_6_fu_1305_p1);

assign select_ln123_fu_1157_p3 = ((icmp_ln200_fu_1147_p2[0:0] == 1'b1) ? 8'd127 : trunc_ln123_fu_1153_p1);

assign select_ln16_fu_902_p3 = ((trunc_ln16_fu_898_p1[0:0] == 1'b1) ? 5'd26 : 5'd25);

assign select_ln99_10_fu_658_p3 = ((tmp_20_reg_1470_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln99_5_reg_1589 : trunc_ln67_2_reg_1421_pp0_iter6_reg);

assign select_ln99_11_fu_678_p3 = ((icmp_ln224_5_reg_1604[0:0] == 1'b1) ? trunc_ln224_5_reg_1599 : select_ln99_9_reg_1594);

assign select_ln99_12_fu_687_p3 = ((tmp_21_reg_1475_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln99_6_reg_1609 : trunc_ln67_3_reg_1429_pp0_iter7_reg);

assign select_ln99_13_fu_707_p3 = ((icmp_ln224_6_reg_1624[0:0] == 1'b1) ? trunc_ln224_6_reg_1619 : select_ln99_11_reg_1614);

assign select_ln99_14_fu_716_p3 = ((tmp_22_reg_1480_pp0_iter8_reg[0:0] == 1'b1) ? sub_ln99_7_reg_1629 : trunc_ln67_4_reg_1437_pp0_iter8_reg);

assign select_ln99_1_fu_532_p3 = ((icmp_ln224_reg_1504[0:0] == 1'b1) ? trunc_ln224_reg_1499 : 19'd0);

assign select_ln99_2_fu_542_p3 = ((tmp_16_reg_1450_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln99_1_reg_1509 : trunc_ln67_8_reg_1389_pp0_iter2_reg);

assign select_ln99_3_fu_562_p3 = ((icmp_ln224_1_reg_1524[0:0] == 1'b1) ? trunc_ln224_1_reg_1519 : select_ln99_1_reg_1514);

assign select_ln99_4_fu_571_p3 = ((tmp_17_reg_1455_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln99_2_reg_1529 : trunc_ln67_9_reg_1397_pp0_iter3_reg);

assign select_ln99_5_fu_591_p3 = ((icmp_ln224_2_reg_1544[0:0] == 1'b1) ? trunc_ln224_2_reg_1539 : select_ln99_3_reg_1534);

assign select_ln99_6_fu_600_p3 = ((tmp_18_reg_1460_pp0_iter4_reg[0:0] == 1'b1) ? sub_ln99_3_reg_1549 : trunc_ln67_s_reg_1405_pp0_iter4_reg);

assign select_ln99_7_fu_620_p3 = ((icmp_ln224_3_reg_1564[0:0] == 1'b1) ? trunc_ln224_3_reg_1559 : select_ln99_5_reg_1554);

assign select_ln99_8_fu_629_p3 = ((tmp_19_reg_1465_pp0_iter5_reg[0:0] == 1'b1) ? sub_ln99_4_reg_1569 : trunc_ln67_1_reg_1413_pp0_iter5_reg);

assign select_ln99_9_fu_649_p3 = ((icmp_ln224_4_reg_1584[0:0] == 1'b1) ? trunc_ln224_4_reg_1579 : select_ln99_7_reg_1574);

assign select_ln99_fu_512_p3 = ((tmp_reg_1445_pp0_iter1_reg[0:0] == 1'b1) ? sub_ln99_reg_1494 : trunc_ln67_reg_1381_pp0_iter1_reg);

assign sext_ln121_1_fu_1019_p1 = $signed(trunc_ln8_fu_1009_p4);

assign sext_ln121_2_fu_1038_p1 = $signed(trunc_ln121_9_fu_1028_p4);

assign sext_ln121_3_fu_1057_p1 = $signed(trunc_ln121_s_fu_1047_p4);

assign sext_ln121_4_fu_1076_p1 = $signed(trunc_ln121_1_fu_1066_p4);

assign sext_ln121_5_fu_1095_p1 = $signed(trunc_ln121_2_fu_1085_p4);

assign sext_ln121_6_fu_1114_p1 = $signed(trunc_ln121_3_fu_1104_p4);

assign sext_ln121_7_fu_1133_p1 = $signed(trunc_ln121_4_fu_1123_p4);

assign sext_ln121_fu_1000_p1 = $signed(trunc_ln121_8_fu_990_p4);

assign sub_ln99_1_fu_527_p2 = (20'd0 - trunc_ln67_8_reg_1389_pp0_iter1_reg);

assign sub_ln99_2_fu_557_p2 = (20'd0 - trunc_ln67_9_reg_1397_pp0_iter2_reg);

assign sub_ln99_3_fu_586_p2 = (20'd0 - trunc_ln67_s_reg_1405_pp0_iter3_reg);

assign sub_ln99_4_fu_615_p2 = (20'd0 - trunc_ln67_1_reg_1413_pp0_iter4_reg);

assign sub_ln99_5_fu_644_p2 = (20'd0 - trunc_ln67_2_reg_1421_pp0_iter5_reg);

assign sub_ln99_6_fu_673_p2 = (20'd0 - trunc_ln67_3_reg_1429_pp0_iter6_reg);

assign sub_ln99_7_fu_702_p2 = (20'd0 - trunc_ln67_4_reg_1437_pp0_iter7_reg);

assign sub_ln99_fu_503_p2 = (20'd0 - trunc_ln67_reg_1381);

assign tmp_23_fu_754_p3 = x_2_fu_748_p3[32'd18];

assign tmp_24_fu_762_p3 = x_2_fu_748_p3[32'd17];

assign tmp_25_fu_770_p3 = x_2_fu_748_p3[32'd16];

assign tmp_26_fu_778_p3 = x_2_fu_748_p3[32'd15];

assign tmp_27_fu_786_p3 = x_2_fu_748_p3[32'd14];

assign tmp_28_fu_794_p3 = x_2_fu_748_p3[32'd13];

assign tmp_29_fu_802_p3 = x_2_fu_748_p3[32'd12];

assign tmp_30_fu_810_p3 = x_2_fu_748_p3[32'd11];

assign tmp_31_fu_818_p3 = x_2_fu_748_p3[32'd10];

assign tmp_32_fu_826_p3 = x_2_fu_748_p3[32'd9];

assign tmp_33_fu_834_p3 = x_2_fu_748_p3[32'd8];

assign tmp_34_fu_842_p3 = x_2_fu_748_p3[32'd7];

assign tmp_35_fu_850_p3 = x_2_fu_748_p3[32'd6];

assign tmp_36_fu_858_p3 = x_2_fu_748_p3[32'd5];

assign tmp_37_fu_866_p3 = x_2_fu_748_p3[32'd4];

assign tmp_38_fu_874_p3 = x_2_fu_748_p3[32'd3];

assign tmp_39_fu_882_p3 = x_2_fu_748_p3[32'd2];

assign tmp_40_fu_890_p3 = x_2_fu_748_p3[32'd1];

assign tmp_41_fu_910_p3 = ap_phi_reg_pp0_iter12_s_val_1_reg_194[32'd4];

assign tmp_42_fu_1137_p4 = {{ap_phi_reg_pp0_iter15_empty_45_reg_309[19:7]}};

assign tmp_43_fu_1165_p4 = {{ap_phi_reg_pp0_iter15_empty_46_reg_318[19:7]}};

assign tmp_44_fu_1193_p4 = {{ap_phi_reg_pp0_iter15_empty_44_reg_300[19:7]}};

assign tmp_45_fu_1213_p4 = {{ap_phi_reg_pp0_iter15_empty_47_reg_327[19:7]}};

assign tmp_46_fu_1241_p4 = {{ap_phi_reg_pp0_iter15_empty_43_reg_291[19:7]}};

assign tmp_47_fu_1261_p4 = {{ap_phi_reg_pp0_iter15_empty_48_reg_336[19:7]}};

assign tmp_48_fu_1289_p4 = {{ap_phi_reg_pp0_iter15_empty_reg_282[19:7]}};

assign tmp_49_fu_1309_p4 = {{ap_phi_reg_pp0_iter15_q_val_reg_273[19:7]}};

assign trunc_ln108_fu_918_p1 = ap_phi_reg_pp0_iter12_s_val_1_reg_194[3:0];

assign trunc_ln121_1_fu_1066_p4 = {{add_ln120_4_fu_1061_p2[19:1]}};

assign trunc_ln121_2_fu_1085_p4 = {{add_ln120_5_fu_1080_p2[19:1]}};

assign trunc_ln121_3_fu_1104_p4 = {{add_ln120_6_fu_1099_p2[19:1]}};

assign trunc_ln121_4_fu_1123_p4 = {{add_ln120_7_fu_1118_p2[19:1]}};

assign trunc_ln121_8_fu_990_p4 = {{add_ln120_fu_985_p2[19:1]}};

assign trunc_ln121_9_fu_1028_p4 = {{add_ln120_2_fu_1023_p2[19:1]}};

assign trunc_ln121_s_fu_1047_p4 = {{add_ln120_3_fu_1042_p2[19:1]}};

assign trunc_ln123_1_fu_1181_p1 = ap_phi_reg_pp0_iter15_empty_46_reg_318[7:0];

assign trunc_ln123_2_fu_1209_p1 = ap_phi_reg_pp0_iter15_empty_44_reg_300[7:0];

assign trunc_ln123_3_fu_1229_p1 = ap_phi_reg_pp0_iter15_empty_47_reg_327[7:0];

assign trunc_ln123_4_fu_1257_p1 = ap_phi_reg_pp0_iter15_empty_43_reg_291[7:0];

assign trunc_ln123_5_fu_1277_p1 = ap_phi_reg_pp0_iter15_empty_48_reg_336[7:0];

assign trunc_ln123_6_fu_1305_p1 = ap_phi_reg_pp0_iter15_empty_reg_282[7:0];

assign trunc_ln123_7_fu_1325_p1 = ap_phi_reg_pp0_iter15_q_val_reg_273[7:0];

assign trunc_ln123_fu_1153_p1 = ap_phi_reg_pp0_iter15_empty_45_reg_309[7:0];

assign trunc_ln16_fu_898_p1 = x_2_fu_748_p3[0:0];

assign trunc_ln224_1_fu_547_p1 = select_ln99_2_fu_542_p3[18:0];

assign trunc_ln224_2_fu_576_p1 = select_ln99_4_fu_571_p3[18:0];

assign trunc_ln224_3_fu_605_p1 = select_ln99_6_fu_600_p3[18:0];

assign trunc_ln224_4_fu_634_p1 = select_ln99_8_fu_629_p3[18:0];

assign trunc_ln224_5_fu_663_p1 = select_ln99_10_fu_658_p3[18:0];

assign trunc_ln224_6_fu_692_p1 = select_ln99_12_fu_687_p3[18:0];

assign trunc_ln224_7_fu_721_p1 = select_ln99_14_fu_716_p3[18:0];

assign trunc_ln224_fu_517_p1 = select_ln99_fu_512_p3[18:0];

assign trunc_ln67_fu_353_p1 = vt_stream_dout[19:0];

assign trunc_ln8_fu_1009_p4 = {{add_ln120_1_fu_1004_p2[19:1]}};

assign tt_fu_491_p2 = (ap_sig_allocacmp_tt1_load + 6'd1);

assign vq_stream_din = {{{{{{{{select_ln123_4_reg_1850}, {select_ln123_7_reg_1865}}, {select_ln123_3_reg_1845}}, {select_ln123_6_reg_1860}}, {select_ln123_2_reg_1840}}, {select_ln123_5_reg_1855}}, {select_ln123_1_reg_1835}}, {select_ln123_reg_1830}};

assign vs_stream_din = s_val_reg_1736_pp0_iter15_reg;

assign x_1_fu_742_p2 = ($signed(abs_max_fu_731_p3) + $signed(19'd524287));

assign x_2_fu_748_p3 = ((icmp_ln12_reg_1649[0:0] == 1'b1) ? x_1_reg_1654 : 19'd0);

assign zext_ln119_fu_942_p1 = add_ln119_reg_1745;

assign zext_ln99_1_fu_567_p1 = select_ln99_3_fu_562_p3;

assign zext_ln99_2_fu_596_p1 = select_ln99_5_fu_591_p3;

assign zext_ln99_3_fu_625_p1 = select_ln99_7_fu_620_p3;

assign zext_ln99_4_fu_654_p1 = select_ln99_9_fu_649_p3;

assign zext_ln99_5_fu_683_p1 = select_ln99_11_fu_678_p3;

assign zext_ln99_6_fu_712_p1 = select_ln99_13_fu_707_p3;

assign zext_ln99_fu_538_p1 = select_ln99_1_fu_532_p3;

endmodule //RV_GEMM_do_quant4
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_do_rv_gemm (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        pos_r,
        rq_stream_TDATA,
        rs_stream_TDATA,
        v_stream_TDATA,
        vq_cache_i_stream_TDATA,
        vs_cache_i_stream_TDATA,
        vq_cache_o_stream_TDATA,
        vs_cache_o_stream_TDATA,
        a_stream_din,
        a_stream_full_n,
        a_stream_write,
        ap_clk,
        ap_rst,
        v_stream_TVALID,
        v_stream_TREADY,
        pos_r_ap_vld,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        ap_done,
        rq_stream_TVALID,
        rq_stream_TREADY,
        rs_stream_TVALID,
        rs_stream_TREADY,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [31:0] pos_r;
input  [63:0] rq_stream_TDATA;
input  [7:0] rs_stream_TDATA;
input  [159:0] v_stream_TDATA;
input  [63:0] vq_cache_i_stream_TDATA;
input  [7:0] vs_cache_i_stream_TDATA;
output  [63:0] vq_cache_o_stream_TDATA;
output  [7:0] vs_cache_o_stream_TDATA;
output  [159:0] a_stream_din;
input   a_stream_full_n;
output   a_stream_write;
input   ap_clk;
input   ap_rst;
input   v_stream_TVALID;
output   v_stream_TREADY;
input   pos_r_ap_vld;
input   vq_cache_i_stream_TVALID;
output   vq_cache_i_stream_TREADY;
output   vq_cache_o_stream_TVALID;
input   vq_cache_o_stream_TREADY;
input   vs_cache_i_stream_TVALID;
output   vs_cache_i_stream_TREADY;
output   vs_cache_o_stream_TVALID;
input   vs_cache_o_stream_TREADY;
output   ap_done;
input   rq_stream_TVALID;
output   rq_stream_TREADY;
input   rs_stream_TVALID;
output   rs_stream_TREADY;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    Loop_0_proc_U0_ap_start;
wire    Loop_0_proc_U0_start_out;
wire    Loop_0_proc_U0_start_write;
wire   [63:0] Loop_0_proc_U0_vq_cache_o_stream_TDATA;
wire   [7:0] Loop_0_proc_U0_vs_cache_o_stream_TDATA;
wire   [511:0] Loop_0_proc_U0_vq_stream_r_din;
wire    Loop_0_proc_U0_vq_stream_r_write;
wire   [31:0] Loop_0_proc_U0_vs_stream_r_din;
wire    Loop_0_proc_U0_vs_stream_r_write;
wire    Loop_0_proc_U0_v_stream_TREADY;
wire    Loop_0_proc_U0_vq_cache_i_stream_TREADY;
wire    Loop_0_proc_U0_vq_cache_o_stream_TVALID;
wire    Loop_0_proc_U0_vs_cache_i_stream_TREADY;
wire    Loop_0_proc_U0_vs_cache_o_stream_TVALID;
wire    Loop_0_proc_U0_ap_done;
wire    Loop_0_proc_U0_ap_ready;
wire    Loop_0_proc_U0_ap_idle;
wire    Loop_0_proc_U0_ap_continue;
wire    ap_sync_continue;
wire   [63:0] Loop_1_proc_U0_rq_stream_r_din;
wire    Loop_1_proc_U0_rq_stream_r_write;
wire   [3:0] Loop_1_proc_U0_rs_stream_r_din;
wire    Loop_1_proc_U0_rs_stream_r_write;
wire    Loop_1_proc_U0_rq_stream_TREADY;
wire    Loop_1_proc_U0_rs_stream_TREADY;
wire    Loop_1_proc_U0_ap_start;
wire    Loop_1_proc_U0_ap_done;
wire    Loop_1_proc_U0_ap_ready;
wire    Loop_1_proc_U0_ap_idle;
wire    Loop_1_proc_U0_ap_continue;
wire    do_bmm_U0_ap_start;
wire    do_bmm_U0_ap_done;
wire    do_bmm_U0_ap_continue;
wire    do_bmm_U0_ap_idle;
wire    do_bmm_U0_ap_ready;
wire    do_bmm_U0_rq_stream_r_read;
wire    do_bmm_U0_rs_stream_r_read;
wire    do_bmm_U0_vq_stream_r_read;
wire    do_bmm_U0_vs_stream_r_read;
wire   [159:0] do_bmm_U0_a_stream_din;
wire    do_bmm_U0_a_stream_write;
wire    vq_stream_r_full_n;
wire   [511:0] vq_stream_r_dout;
wire    vq_stream_r_empty_n;
wire   [2:0] vq_stream_r_num_data_valid;
wire   [2:0] vq_stream_r_fifo_cap;
wire    vs_stream_r_full_n;
wire   [31:0] vs_stream_r_dout;
wire    vs_stream_r_empty_n;
wire   [2:0] vs_stream_r_num_data_valid;
wire   [2:0] vs_stream_r_fifo_cap;
wire    rq_stream_r_full_n;
wire   [63:0] rq_stream_r_dout;
wire    rq_stream_r_empty_n;
wire   [2:0] rq_stream_r_num_data_valid;
wire   [2:0] rq_stream_r_fifo_cap;
wire    rs_stream_r_full_n;
wire   [3:0] rs_stream_r_dout;
wire    rs_stream_r_empty_n;
wire   [2:0] rs_stream_r_num_data_valid;
wire   [2:0] rs_stream_r_fifo_cap;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_Loop_0_proc_U0_ap_ready;
wire    ap_sync_Loop_0_proc_U0_ap_ready;
reg    ap_sync_reg_Loop_1_proc_U0_ap_ready;
wire    ap_sync_Loop_1_proc_U0_ap_ready;
wire   [0:0] start_for_do_bmm_U0_din;
wire    start_for_do_bmm_U0_full_n;
wire   [0:0] start_for_do_bmm_U0_dout;
wire    start_for_do_bmm_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_Loop_0_proc_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_Loop_1_proc_U0_ap_ready = 1'b0;
end

RV_GEMM_Loop_0_proc Loop_0_proc_U0(
    .ap_start(Loop_0_proc_U0_ap_start),
    .start_full_n(start_for_do_bmm_U0_full_n),
    .start_out(Loop_0_proc_U0_start_out),
    .start_write(Loop_0_proc_U0_start_write),
    .v_stream_TDATA(v_stream_TDATA),
    .pos_r(pos_r),
    .vq_cache_i_stream_TDATA(vq_cache_i_stream_TDATA),
    .vq_cache_o_stream_TDATA(Loop_0_proc_U0_vq_cache_o_stream_TDATA),
    .vs_cache_i_stream_TDATA(vs_cache_i_stream_TDATA),
    .vs_cache_o_stream_TDATA(Loop_0_proc_U0_vs_cache_o_stream_TDATA),
    .vq_stream_r_din(Loop_0_proc_U0_vq_stream_r_din),
    .vq_stream_r_full_n(vq_stream_r_full_n),
    .vq_stream_r_write(Loop_0_proc_U0_vq_stream_r_write),
    .vs_stream_r_din(Loop_0_proc_U0_vs_stream_r_din),
    .vs_stream_r_full_n(vs_stream_r_full_n),
    .vs_stream_r_write(Loop_0_proc_U0_vs_stream_r_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .v_stream_TVALID(v_stream_TVALID),
    .v_stream_TREADY(Loop_0_proc_U0_v_stream_TREADY),
    .pos_r_ap_vld(pos_r_ap_vld),
    .vq_cache_i_stream_TVALID(vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(Loop_0_proc_U0_vq_cache_i_stream_TREADY),
    .vq_cache_o_stream_TVALID(Loop_0_proc_U0_vq_cache_o_stream_TVALID),
    .vq_cache_o_stream_TREADY(vq_cache_o_stream_TREADY),
    .vs_cache_i_stream_TVALID(vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(Loop_0_proc_U0_vs_cache_i_stream_TREADY),
    .vs_cache_o_stream_TVALID(Loop_0_proc_U0_vs_cache_o_stream_TVALID),
    .vs_cache_o_stream_TREADY(vs_cache_o_stream_TREADY),
    .ap_done(Loop_0_proc_U0_ap_done),
    .ap_ready(Loop_0_proc_U0_ap_ready),
    .ap_idle(Loop_0_proc_U0_ap_idle),
    .ap_continue(Loop_0_proc_U0_ap_continue)
);

RV_GEMM_Loop_1_proc Loop_1_proc_U0(
    .rq_stream_TDATA(rq_stream_TDATA),
    .rs_stream_TDATA(rs_stream_TDATA),
    .rq_stream_r_din(Loop_1_proc_U0_rq_stream_r_din),
    .rq_stream_r_full_n(rq_stream_r_full_n),
    .rq_stream_r_write(Loop_1_proc_U0_rq_stream_r_write),
    .rs_stream_r_din(Loop_1_proc_U0_rs_stream_r_din),
    .rs_stream_r_full_n(rs_stream_r_full_n),
    .rs_stream_r_write(Loop_1_proc_U0_rs_stream_r_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .rq_stream_TVALID(rq_stream_TVALID),
    .rq_stream_TREADY(Loop_1_proc_U0_rq_stream_TREADY),
    .rs_stream_TVALID(rs_stream_TVALID),
    .rs_stream_TREADY(Loop_1_proc_U0_rs_stream_TREADY),
    .ap_start(Loop_1_proc_U0_ap_start),
    .ap_done(Loop_1_proc_U0_ap_done),
    .ap_ready(Loop_1_proc_U0_ap_ready),
    .ap_idle(Loop_1_proc_U0_ap_idle),
    .ap_continue(Loop_1_proc_U0_ap_continue)
);

RV_GEMM_do_bmm do_bmm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_bmm_U0_ap_start),
    .ap_done(do_bmm_U0_ap_done),
    .ap_continue(do_bmm_U0_ap_continue),
    .ap_idle(do_bmm_U0_ap_idle),
    .ap_ready(do_bmm_U0_ap_ready),
    .rq_stream_r_dout(rq_stream_r_dout),
    .rq_stream_r_empty_n(rq_stream_r_empty_n),
    .rq_stream_r_read(do_bmm_U0_rq_stream_r_read),
    .rq_stream_r_num_data_valid(rq_stream_r_num_data_valid),
    .rq_stream_r_fifo_cap(rq_stream_r_fifo_cap),
    .rs_stream_r_dout(rs_stream_r_dout),
    .rs_stream_r_empty_n(rs_stream_r_empty_n),
    .rs_stream_r_read(do_bmm_U0_rs_stream_r_read),
    .rs_stream_r_num_data_valid(rs_stream_r_num_data_valid),
    .rs_stream_r_fifo_cap(rs_stream_r_fifo_cap),
    .vq_stream_r_dout(vq_stream_r_dout),
    .vq_stream_r_empty_n(vq_stream_r_empty_n),
    .vq_stream_r_read(do_bmm_U0_vq_stream_r_read),
    .vq_stream_r_num_data_valid(vq_stream_r_num_data_valid),
    .vq_stream_r_fifo_cap(vq_stream_r_fifo_cap),
    .vs_stream_r_dout(vs_stream_r_dout),
    .vs_stream_r_empty_n(vs_stream_r_empty_n),
    .vs_stream_r_read(do_bmm_U0_vs_stream_r_read),
    .vs_stream_r_num_data_valid(vs_stream_r_num_data_valid),
    .vs_stream_r_fifo_cap(vs_stream_r_fifo_cap),
    .a_stream_din(do_bmm_U0_a_stream_din),
    .a_stream_full_n(a_stream_full_n),
    .a_stream_write(do_bmm_U0_a_stream_write),
    .a_stream_num_data_valid(3'd0),
    .a_stream_fifo_cap(3'd0)
);

RV_GEMM_fifo_w512_d2_S vq_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_0_proc_U0_vq_stream_r_din),
    .if_full_n(vq_stream_r_full_n),
    .if_write(Loop_0_proc_U0_vq_stream_r_write),
    .if_dout(vq_stream_r_dout),
    .if_empty_n(vq_stream_r_empty_n),
    .if_read(do_bmm_U0_vq_stream_r_read),
    .if_num_data_valid(vq_stream_r_num_data_valid),
    .if_fifo_cap(vq_stream_r_fifo_cap)
);

RV_GEMM_fifo_w32_d2_S vs_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_0_proc_U0_vs_stream_r_din),
    .if_full_n(vs_stream_r_full_n),
    .if_write(Loop_0_proc_U0_vs_stream_r_write),
    .if_dout(vs_stream_r_dout),
    .if_empty_n(vs_stream_r_empty_n),
    .if_read(do_bmm_U0_vs_stream_r_read),
    .if_num_data_valid(vs_stream_r_num_data_valid),
    .if_fifo_cap(vs_stream_r_fifo_cap)
);

RV_GEMM_fifo_w64_d2_S_x rq_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_rq_stream_r_din),
    .if_full_n(rq_stream_r_full_n),
    .if_write(Loop_1_proc_U0_rq_stream_r_write),
    .if_dout(rq_stream_r_dout),
    .if_empty_n(rq_stream_r_empty_n),
    .if_read(do_bmm_U0_rq_stream_r_read),
    .if_num_data_valid(rq_stream_r_num_data_valid),
    .if_fifo_cap(rq_stream_r_fifo_cap)
);

RV_GEMM_fifo_w4_d2_S_x rs_stream_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_rs_stream_r_din),
    .if_full_n(rs_stream_r_full_n),
    .if_write(Loop_1_proc_U0_rs_stream_r_write),
    .if_dout(rs_stream_r_dout),
    .if_empty_n(rs_stream_r_empty_n),
    .if_read(do_bmm_U0_rs_stream_r_read),
    .if_num_data_valid(rs_stream_r_num_data_valid),
    .if_fifo_cap(rs_stream_r_fifo_cap)
);

RV_GEMM_start_for_do_bmm_U0 start_for_do_bmm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_bmm_U0_din),
    .if_full_n(start_for_do_bmm_U0_full_n),
    .if_write(Loop_0_proc_U0_start_write),
    .if_dout(start_for_do_bmm_U0_dout),
    .if_empty_n(start_for_do_bmm_U0_empty_n),
    .if_read(do_bmm_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Loop_0_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_Loop_0_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_0_proc_U0_ap_ready <= ap_sync_Loop_0_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Loop_1_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_Loop_1_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign Loop_0_proc_U0_ap_continue = ap_sync_continue;

assign Loop_0_proc_U0_ap_start = (real_start & (ap_sync_reg_Loop_0_proc_U0_ap_ready ^ 1'b1));

assign Loop_1_proc_U0_ap_continue = 1'b1;

assign Loop_1_proc_U0_ap_start = (real_start & (ap_sync_reg_Loop_1_proc_U0_ap_ready ^ 1'b1));

assign a_stream_din = do_bmm_U0_a_stream_din;

assign a_stream_write = do_bmm_U0_a_stream_write;

assign ap_done = ap_sync_done;

assign ap_idle = (do_bmm_U0_ap_idle & Loop_1_proc_U0_ap_idle & Loop_0_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_Loop_0_proc_U0_ap_ready = (ap_sync_reg_Loop_0_proc_U0_ap_ready | Loop_0_proc_U0_ap_ready);

assign ap_sync_Loop_1_proc_U0_ap_ready = (ap_sync_reg_Loop_1_proc_U0_ap_ready | Loop_1_proc_U0_ap_ready);

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (do_bmm_U0_ap_done & Loop_0_proc_U0_ap_done);

assign ap_sync_ready = (ap_sync_Loop_1_proc_U0_ap_ready & ap_sync_Loop_0_proc_U0_ap_ready);

assign do_bmm_U0_ap_continue = ap_sync_continue;

assign do_bmm_U0_ap_start = start_for_do_bmm_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign rq_stream_TREADY = Loop_1_proc_U0_rq_stream_TREADY;

assign rs_stream_TREADY = Loop_1_proc_U0_rs_stream_TREADY;

assign start_for_do_bmm_U0_din = 1'b1;

assign start_out = real_start;

assign v_stream_TREADY = Loop_0_proc_U0_v_stream_TREADY;

assign vq_cache_i_stream_TREADY = Loop_0_proc_U0_vq_cache_i_stream_TREADY;

assign vq_cache_o_stream_TDATA = Loop_0_proc_U0_vq_cache_o_stream_TDATA;

assign vq_cache_o_stream_TVALID = Loop_0_proc_U0_vq_cache_o_stream_TVALID;

assign vs_cache_i_stream_TREADY = Loop_0_proc_U0_vs_cache_i_stream_TREADY;

assign vs_cache_o_stream_TDATA = Loop_0_proc_U0_vs_cache_o_stream_TDATA;

assign vs_cache_o_stream_TVALID = Loop_0_proc_U0_vs_cache_o_stream_TVALID;

endmodule //RV_GEMM_do_rv_gemm
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        pos_r,
        pos_c_din,
        pos_c_full_n,
        pos_c_write,
        pos_c_num_data_valid,
        pos_c_fifo_cap,
        pos_c1_din,
        pos_c1_full_n,
        pos_c1_write,
        pos_c1_num_data_valid,
        pos_c1_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] pos_r;
output  [31:0] pos_c_din;
input   pos_c_full_n;
output   pos_c_write;
input  [3:0] pos_c_num_data_valid;
input  [3:0] pos_c_fifo_cap;
output  [31:0] pos_c1_din;
input   pos_c1_full_n;
output   pos_c1_write;
input  [3:0] pos_c1_num_data_valid;
input  [3:0] pos_c1_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg pos_c_write;
reg pos_c1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    pos_c_blk_n;
reg    pos_c1_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c1_blk_n = pos_c1_full_n;
    end else begin
        pos_c1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c1_write = 1'b1;
    end else begin
        pos_c1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c_blk_n = pos_c_full_n;
    end else begin
        pos_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_c_write = 1'b1;
    end else begin
        pos_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (pos_c1_full_n == 1'b0) | (pos_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign pos_c1_din = pos_r;

assign pos_c_din = pos_r;

assign start_out = real_start;

endmodule //RV_GEMM_entry_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w160_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 160,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w160_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w160_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w160_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 160,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w160_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 160,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w160_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w160_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w160_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 160,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w32_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w32_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w32_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w32_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w32_d5_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 32,
    ADDR_WIDTH   = 3,
    DEPTH        = 5)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w32_d5_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w32_d5_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w32_d5_S_ShiftReg
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 3,
    DEPTH       = 5)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w4_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 4,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w4_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w4_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w4_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 4,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w4_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 4,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w4_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w4_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w4_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 4,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w4_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 4,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w4_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w4_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w4_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 4,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w512_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 512,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w512_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w512_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w512_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 512,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w64_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 64,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w64_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w64_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w64_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w64_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 64,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w64_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w64_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w64_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_fifo_w64_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 64,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_fifo_w64_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_fifo_w64_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = mOutPtr;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_fifo_w64_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module RV_GEMM_flow_control_loop_delay_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_ready_delayed,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
reg ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_ready_delayed;
input   ap_loop_exit_done;


//Record the delay between ap_loop_exit_ready
//and ap_loop_exit_ready_delayed
reg    rewind_ap_ready_reg;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
//#0 rewind_ap_ready_reg = 1'b0;
end

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready_delayed;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else if ((ap_ready == 1'b0) & (ap_start == 1'b1) & ap_loop_exit_ready == 1'b1) begin
        rewind_ap_ready_reg <= 1'b1;
    end else if ((ap_ready == 1'b1) & (ap_start == 1'b1)) begin
        rewind_ap_ready_reg <= 1'b0;
    end
end

always @ (*) begin
    if ((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1)) begin
        ap_start_int = 1'b1;
    end else begin
        ap_start_int = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module RV_GEMM_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2024.2 (64-bit)
// Tool Version Limit: 2024.11
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module RV_GEMM_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not RV_GEMM module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not RV_GEMM module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_Loop_0_proc (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        v_stream_TDATA,
        pos_r,
        vq_cache_i_stream_TDATA,
        vq_cache_o_stream_TDATA,
        vs_cache_i_stream_TDATA,
        vs_cache_o_stream_TDATA,
        vq_stream_r_din,
        vq_stream_r_full_n,
        vq_stream_r_write,
        vs_stream_r_din,
        vs_stream_r_full_n,
        vs_stream_r_write,
        ap_clk,
        ap_rst,
        v_stream_TVALID,
        v_stream_TREADY,
        pos_r_ap_vld,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [159:0] v_stream_TDATA;
input  [31:0] pos_r;
input  [63:0] vq_cache_i_stream_TDATA;
output  [63:0] vq_cache_o_stream_TDATA;
input  [7:0] vs_cache_i_stream_TDATA;
output  [7:0] vs_cache_o_stream_TDATA;
output  [511:0] vq_stream_r_din;
input   vq_stream_r_full_n;
output   vq_stream_r_write;
output  [31:0] vs_stream_r_din;
input   vs_stream_r_full_n;
output   vs_stream_r_write;
input   ap_clk;
input   ap_rst;
input   v_stream_TVALID;
output   v_stream_TREADY;
input   pos_r_ap_vld;
input   vq_cache_i_stream_TVALID;
output   vq_cache_i_stream_TREADY;
output   vq_cache_o_stream_TVALID;
input   vq_cache_o_stream_TREADY;
input   vs_cache_i_stream_TVALID;
output   vs_cache_i_stream_TREADY;
output   vs_cache_o_stream_TVALID;
input   vs_cache_o_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;
reg ap_done;
reg ap_idle;

reg    real_start;
reg    start_once_reg;
reg    internal_ap_ready;
wire   [63:0] dataflow_in_loop_x_165_1_U0_vq_cache_o_stream_TDATA;
wire   [7:0] dataflow_in_loop_x_165_1_U0_vs_cache_o_stream_TDATA;
wire   [511:0] dataflow_in_loop_x_165_1_U0_vq_stream_r_din;
wire    dataflow_in_loop_x_165_1_U0_vq_stream_r_write;
wire   [31:0] dataflow_in_loop_x_165_1_U0_vs_stream_r_din;
wire    dataflow_in_loop_x_165_1_U0_vs_stream_r_write;
wire    dataflow_in_loop_x_165_1_U0_ap_start;
wire    dataflow_in_loop_x_165_1_U0_v_stream_TREADY;
wire    dataflow_in_loop_x_165_1_U0_vq_cache_i_stream_TREADY;
wire    dataflow_in_loop_x_165_1_U0_vq_cache_o_stream_TVALID;
wire    dataflow_in_loop_x_165_1_U0_vs_cache_i_stream_TREADY;
wire    dataflow_in_loop_x_165_1_U0_vs_cache_o_stream_TVALID;
wire    dataflow_in_loop_x_165_1_U0_ap_done;
wire    dataflow_in_loop_x_165_1_U0_ap_ready;
wire    dataflow_in_loop_x_165_1_U0_ap_idle;
reg    dataflow_in_loop_x_165_1_U0_ap_continue;
reg   [3:0] loop_dataflow_input_count;
reg   [3:0] loop_dataflow_output_count;
wire   [3:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 loop_dataflow_input_count = 4'd0;
//#0 loop_dataflow_output_count = 4'd0;
end

RV_GEMM_dataflow_in_loop_x_165_1 dataflow_in_loop_x_165_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .v_stream_TDATA(v_stream_TDATA),
    .pos_r(pos_r),
    .vq_cache_i_stream_TDATA(vq_cache_i_stream_TDATA),
    .vq_cache_o_stream_TDATA(dataflow_in_loop_x_165_1_U0_vq_cache_o_stream_TDATA),
    .vs_cache_i_stream_TDATA(vs_cache_i_stream_TDATA),
    .vs_cache_o_stream_TDATA(dataflow_in_loop_x_165_1_U0_vs_cache_o_stream_TDATA),
    .vq_stream_r_din(dataflow_in_loop_x_165_1_U0_vq_stream_r_din),
    .vq_stream_r_full_n(vq_stream_r_full_n),
    .vq_stream_r_write(dataflow_in_loop_x_165_1_U0_vq_stream_r_write),
    .vs_stream_r_din(dataflow_in_loop_x_165_1_U0_vs_stream_r_din),
    .vs_stream_r_full_n(vs_stream_r_full_n),
    .vs_stream_r_write(dataflow_in_loop_x_165_1_U0_vs_stream_r_write),
    .pos_r_ap_vld(pos_r_ap_vld),
    .ap_start(dataflow_in_loop_x_165_1_U0_ap_start),
    .v_stream_TVALID(v_stream_TVALID),
    .v_stream_TREADY(dataflow_in_loop_x_165_1_U0_v_stream_TREADY),
    .vq_cache_i_stream_TVALID(vq_cache_i_stream_TVALID),
    .vq_cache_i_stream_TREADY(dataflow_in_loop_x_165_1_U0_vq_cache_i_stream_TREADY),
    .vq_cache_o_stream_TVALID(dataflow_in_loop_x_165_1_U0_vq_cache_o_stream_TVALID),
    .vq_cache_o_stream_TREADY(vq_cache_o_stream_TREADY),
    .vs_cache_i_stream_TVALID(vs_cache_i_stream_TVALID),
    .vs_cache_i_stream_TREADY(dataflow_in_loop_x_165_1_U0_vs_cache_i_stream_TREADY),
    .vs_cache_o_stream_TVALID(dataflow_in_loop_x_165_1_U0_vs_cache_o_stream_TVALID),
    .vs_cache_o_stream_TREADY(vs_cache_o_stream_TREADY),
    .ap_done(dataflow_in_loop_x_165_1_U0_ap_done),
    .ap_ready(dataflow_in_loop_x_165_1_U0_ap_ready),
    .ap_idle(dataflow_in_loop_x_165_1_U0_ap_idle),
    .ap_continue(dataflow_in_loop_x_165_1_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (dataflow_in_loop_x_165_1_U0_ap_ready == 1'b1) & (real_start == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 4'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (dataflow_in_loop_x_165_1_U0_ap_ready == 1'b1) & (real_start == 1'b1))) begin
            loop_dataflow_input_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_165_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_165_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 4'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_165_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_165_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_165_1_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 4'd0) & (dataflow_in_loop_x_165_1_U0_ap_idle == 1'b1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_x_165_1_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_x_165_1_U0_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (dataflow_in_loop_x_165_1_U0_ap_ready == 1'b1) & (real_start == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_ready = internal_ap_ready;

assign bound_minus_1 = (4'd14 - 4'd1);

assign dataflow_in_loop_x_165_1_U0_ap_start = real_start;

assign start_out = real_start;

assign v_stream_TREADY = dataflow_in_loop_x_165_1_U0_v_stream_TREADY;

assign vq_cache_i_stream_TREADY = dataflow_in_loop_x_165_1_U0_vq_cache_i_stream_TREADY;

assign vq_cache_o_stream_TDATA = dataflow_in_loop_x_165_1_U0_vq_cache_o_stream_TDATA;

assign vq_cache_o_stream_TVALID = dataflow_in_loop_x_165_1_U0_vq_cache_o_stream_TVALID;

assign vq_stream_r_din = dataflow_in_loop_x_165_1_U0_vq_stream_r_din;

assign vq_stream_r_write = dataflow_in_loop_x_165_1_U0_vq_stream_r_write;

assign vs_cache_i_stream_TREADY = dataflow_in_loop_x_165_1_U0_vs_cache_i_stream_TREADY;

assign vs_cache_o_stream_TDATA = dataflow_in_loop_x_165_1_U0_vs_cache_o_stream_TDATA;

assign vs_cache_o_stream_TVALID = dataflow_in_loop_x_165_1_U0_vs_cache_o_stream_TVALID;

assign vs_stream_r_din = dataflow_in_loop_x_165_1_U0_vs_stream_r_din;

assign vs_stream_r_write = dataflow_in_loop_x_165_1_U0_vs_stream_r_write;

endmodule //RV_GEMM_Loop_0_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_Loop_1_proc (
        rq_stream_TDATA,
        rs_stream_TDATA,
        rq_stream_r_din,
        rq_stream_r_full_n,
        rq_stream_r_write,
        rs_stream_r_din,
        rs_stream_r_full_n,
        rs_stream_r_write,
        ap_clk,
        ap_rst,
        rq_stream_TVALID,
        rq_stream_TREADY,
        rs_stream_TVALID,
        rs_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [63:0] rq_stream_TDATA;
input  [7:0] rs_stream_TDATA;
output  [63:0] rq_stream_r_din;
input   rq_stream_r_full_n;
output   rq_stream_r_write;
output  [3:0] rs_stream_r_din;
input   rs_stream_r_full_n;
output   rs_stream_r_write;
input   ap_clk;
input   ap_rst;
input   rq_stream_TVALID;
output   rq_stream_TREADY;
input   rs_stream_TVALID;
output   rs_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [63:0] dataflow_in_loop_x_1_U0_rq_stream_r_din;
wire    dataflow_in_loop_x_1_U0_rq_stream_r_write;
wire   [3:0] dataflow_in_loop_x_1_U0_rs_stream_r_din;
wire    dataflow_in_loop_x_1_U0_rs_stream_r_write;
wire    dataflow_in_loop_x_1_U0_rq_stream_TREADY;
wire    dataflow_in_loop_x_1_U0_ap_start;
wire    dataflow_in_loop_x_1_U0_rs_stream_TREADY;
wire    dataflow_in_loop_x_1_U0_ap_done;
wire    dataflow_in_loop_x_1_U0_ap_ready;
wire    dataflow_in_loop_x_1_U0_ap_idle;
reg    dataflow_in_loop_x_1_U0_ap_continue;
reg   [3:0] loop_dataflow_input_count;
reg   [3:0] loop_dataflow_output_count;
wire   [3:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 loop_dataflow_input_count = 4'd0;
//#0 loop_dataflow_output_count = 4'd0;
end

RV_GEMM_dataflow_in_loop_x_1 dataflow_in_loop_x_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .rq_stream_TDATA(rq_stream_TDATA),
    .rs_stream_TDATA(rs_stream_TDATA),
    .rq_stream_r_din(dataflow_in_loop_x_1_U0_rq_stream_r_din),
    .rq_stream_r_full_n(rq_stream_r_full_n),
    .rq_stream_r_write(dataflow_in_loop_x_1_U0_rq_stream_r_write),
    .rs_stream_r_din(dataflow_in_loop_x_1_U0_rs_stream_r_din),
    .rs_stream_r_full_n(rs_stream_r_full_n),
    .rs_stream_r_write(dataflow_in_loop_x_1_U0_rs_stream_r_write),
    .rq_stream_TVALID(rq_stream_TVALID),
    .rq_stream_TREADY(dataflow_in_loop_x_1_U0_rq_stream_TREADY),
    .ap_start(dataflow_in_loop_x_1_U0_ap_start),
    .rs_stream_TVALID(rs_stream_TVALID),
    .rs_stream_TREADY(dataflow_in_loop_x_1_U0_rs_stream_TREADY),
    .ap_done(dataflow_in_loop_x_1_U0_ap_done),
    .ap_ready(dataflow_in_loop_x_1_U0_ap_ready),
    .ap_idle(dataflow_in_loop_x_1_U0_ap_idle),
    .ap_continue(dataflow_in_loop_x_1_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_x_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 4'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_x_1_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 4'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 4'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_1_U0_ap_continue == 1'b1) & (dataflow_in_loop_x_1_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_x_1_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 4'd0) & (ap_start == 1'b0) & (dataflow_in_loop_x_1_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_x_1_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_x_1_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_x_1_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (4'd14 - 4'd1);

assign dataflow_in_loop_x_1_U0_ap_start = ap_start;

assign rq_stream_TREADY = dataflow_in_loop_x_1_U0_rq_stream_TREADY;

assign rq_stream_r_din = dataflow_in_loop_x_1_U0_rq_stream_r_din;

assign rq_stream_r_write = dataflow_in_loop_x_1_U0_rq_stream_r_write;

assign rs_stream_TREADY = dataflow_in_loop_x_1_U0_rs_stream_TREADY;

assign rs_stream_r_din = dataflow_in_loop_x_1_U0_rs_stream_r_din;

assign rs_stream_r_write = dataflow_in_loop_x_1_U0_rs_stream_r_write;

endmodule //RV_GEMM_Loop_1_proc
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module RV_GEMM_mac_muladd_8s_8s_16s_17_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [16 - 1:0] in2,
    output [17 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module RV_GEMM_mac_muladd_8s_8s_16s_17_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


RV_GEMM_mac_muladd_8s_8s_16s_17_4_1_DSP48_0 RV_GEMM_mac_muladd_8s_8s_16s_17_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module RV_GEMM_mac_muladd_8s_8s_17s_17_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [17 - 1:0] in2,
    output [17 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module RV_GEMM_mac_muladd_8s_8s_17s_17_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


RV_GEMM_mac_muladd_8s_8s_17s_17_4_1_DSP48_0 RV_GEMM_mac_muladd_8s_8s_17s_17_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module RV_GEMM_mac_muladd_8s_8s_17s_18_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [17 - 1:0] in2,
    output [18 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module RV_GEMM_mac_muladd_8s_8s_17s_18_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


RV_GEMM_mac_muladd_8s_8s_17s_18_4_1_DSP48_0 RV_GEMM_mac_muladd_8s_8s_17s_18_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
//   
//   
//   
`timescale 1 ns / 1 ps
// 
module RV_GEMM_mac_muladd_8s_8s_18s_19_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [18 - 1:0] in2,
    output [19 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
// 
assign p  = m_reg + c;
// 
// 
always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end
// 

assign dout = p_reg;

endmodule
// 

module RV_GEMM_mac_muladd_8s_8s_18s_19_4_1(
// 
    clk,
    reset,
    ce,
// 
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
// 
input clk;
input reset;
input ce;
// 
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;


RV_GEMM_mac_muladd_8s_8s_18s_19_4_1_DSP48_0 RV_GEMM_mac_muladd_8s_8s_18s_19_4_1_DSP48_0_U(
// 
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
// 
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule


// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

 module RV_GEMM_mul_8s_8s_16_5_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;


reg [din0_WIDTH - 1 :0] din0_reg;
reg [din1_WIDTH - 1 :0] din1_reg;


reg signed [dout_WIDTH - 1 : 0] buff1;


reg signed [dout_WIDTH - 1 : 0] buff2;

























assign tmp_product = $signed(din0_reg) * $signed(din1_reg);




always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;

        din0_reg <= din0;
        din1_reg <= din1;


        buff1 <= buff0;


        buff2 <= buff1;

















    end
end







assign dout = buff2;

















endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_pack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        aq_stream_adpt_dout,
        aq_stream_adpt_empty_n,
        aq_stream_adpt_read,
        aq_stream_adpt_num_data_valid,
        aq_stream_adpt_fifo_cap,
        aq_stream_TREADY,
        aq_stream_TDATA,
        aq_stream_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] aq_stream_adpt_dout;
input   aq_stream_adpt_empty_n;
output   aq_stream_adpt_read;
input  [2:0] aq_stream_adpt_num_data_valid;
input  [2:0] aq_stream_adpt_fifo_cap;
input   aq_stream_TREADY;
output  [63:0] aq_stream_TDATA;
output   aq_stream_TVALID;

reg ap_idle;
reg aq_stream_adpt_read;
reg aq_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_89;
wire   [0:0] icmp_ln83_reg_89_pp0_iter0_reg;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln83_fu_66_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    aq_stream_adpt_blk_n;
reg    aq_stream_TDATA_blk_n;
wire   [9:0] tt_4_fu_72_p2;
reg   [9:0] tt_4_reg_93;
reg   [9:0] tt_fu_40;
reg   [9:0] ap_sig_allocacmp_tt_3;
wire    ap_loop_init;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 tt_fu_40 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

RV_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tt_fu_40 <= 10'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_89 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tt_fu_40 <= tt_4_reg_93;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln83_reg_89 <= icmp_ln83_fu_66_p2;
        tt_4_reg_93 <= tt_4_fu_72_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln83_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_tt_3 = 10'd0;
    end else if (((icmp_ln83_reg_89 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_tt_3 = tt_4_reg_93;
    end else begin
        ap_sig_allocacmp_tt_3 = tt_fu_40;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_89 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        aq_stream_TDATA_blk_n = aq_stream_TREADY;
    end else begin
        aq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_89 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        aq_stream_TVALID = 1'b1;
    end else begin
        aq_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_89 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        aq_stream_adpt_blk_n = aq_stream_adpt_empty_n;
    end else begin
        aq_stream_adpt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_89 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        aq_stream_adpt_read = 1'b1;
    end else begin
        aq_stream_adpt_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1)) | ((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_89_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((aq_stream_TREADY == 1'b0) & (icmp_ln83_reg_89 == 1'd0)) | ((icmp_ln83_reg_89 == 1'd0) & (aq_stream_adpt_empty_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign aq_stream_TDATA = aq_stream_adpt_dout;

assign icmp_ln83_fu_66_p2 = ((ap_sig_allocacmp_tt_3 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln83_reg_89_pp0_iter0_reg = icmp_ln83_reg_89;

assign tt_4_fu_72_p2 = (ap_sig_allocacmp_tt_3 + 10'd1);

endmodule //RV_GEMM_pack
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_pack_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_stream_dout,
        a_stream_empty_n,
        a_stream_read,
        a_stream_num_data_valid,
        a_stream_fifo_cap,
        a_stream_adpt_din,
        a_stream_adpt_full_n,
        a_stream_adpt_write,
        a_stream_adpt_num_data_valid,
        a_stream_adpt_fifo_cap
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [159:0] a_stream_dout;
input   a_stream_empty_n;
output   a_stream_read;
input  [2:0] a_stream_num_data_valid;
input  [2:0] a_stream_fifo_cap;
output  [159:0] a_stream_adpt_din;
input   a_stream_adpt_full_n;
output   a_stream_adpt_write;
input  [2:0] a_stream_adpt_num_data_valid;
input  [2:0] a_stream_adpt_fifo_cap;

reg ap_idle;
reg a_stream_read;
reg a_stream_adpt_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_85;
wire   [0:0] icmp_ln83_reg_85_pp0_iter0_reg;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln83_fu_62_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    a_stream_blk_n;
reg    a_stream_adpt_blk_n;
wire   [9:0] tt_2_fu_68_p2;
reg   [9:0] tt_2_reg_89;
reg   [9:0] tt_fu_36;
reg   [9:0] ap_sig_allocacmp_tt_1;
wire    ap_loop_init;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 tt_fu_36 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

RV_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tt_fu_36 <= 10'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_85 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tt_fu_36 <= tt_2_reg_89;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln83_reg_85 <= icmp_ln83_fu_62_p2;
        tt_2_reg_89 <= tt_2_fu_68_p2;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_85 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_stream_adpt_blk_n = a_stream_adpt_full_n;
    end else begin
        a_stream_adpt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_85 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_stream_adpt_write = 1'b1;
    end else begin
        a_stream_adpt_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_85 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_stream_blk_n = a_stream_empty_n;
    end else begin
        a_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_85 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_stream_read = 1'b1;
    end else begin
        a_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln83_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_tt_1 = 10'd0;
    end else if (((icmp_ln83_reg_85 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_tt_1 = tt_2_reg_89;
    end else begin
        ap_sig_allocacmp_tt_1 = tt_fu_36;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1)) | ((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln83_reg_85_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign a_stream_adpt_din = a_stream_dout;

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((icmp_ln83_reg_85 == 1'd0) & (1'b0 == a_stream_adpt_full_n)) | ((icmp_ln83_reg_85 == 1'd0) & (1'b0 == a_stream_empty_n)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln83_fu_62_p2 = ((ap_sig_allocacmp_tt_1 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln83_reg_85_pp0_iter0_reg = icmp_ln83_reg_85;

assign tt_2_fu_68_p2 = (ap_sig_allocacmp_tt_1 + 10'd1);

endmodule //RV_GEMM_pack_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_pack_tokens_ap_int_20_8_64_8_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        v_stream_TVALID,
        v_stream_TDATA,
        v_stream_TREADY,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   v_stream_TVALID;
input  [159:0] v_stream_TDATA;
output   v_stream_TREADY;
output  [5:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [159:0] buffer_r_d1;

reg ap_idle;
reg v_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln75_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
reg    v_stream_TDATA_blk_n;
reg   [0:0] icmp_ln75_reg_232;
reg   [0:0] icmp_ln75_reg_232_pp0_iter1_reg;
wire   [2:0] trunc_ln75_fu_156_p1;
reg   [2:0] trunc_ln75_reg_236;
wire   [3:0] ct_fu_160_p3;
reg   [3:0] ct_reg_241;
wire   [0:0] icmp_ln76_fu_174_p2;
reg   [0:0] icmp_ln76_reg_246;
reg   [0:0] ap_phi_mux_icmp_ln766_phi_fu_94_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
wire   [63:0] zext_ln83_1_fu_206_p1;
reg   [5:0] indvar_flatten3_fu_54;
wire   [5:0] add_ln75_1_fu_119_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten3_load;
reg   [3:0] ct4_fu_58;
reg   [3:0] t5_fu_62;
wire   [3:0] t_fu_168_p2;
reg    buffer_r_we1_local;
reg    buffer_r_ce1_local;
wire   [3:0] select_ln75_fu_148_p3;
wire   [3:0] add_ln75_fu_142_p2;
wire   [5:0] tmp_fu_193_p3;
wire   [5:0] zext_ln83_fu_190_p1;
wire   [5:0] add_ln83_fu_200_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_64;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 indvar_flatten3_fu_54 = 6'd0;
//#0 ct4_fu_58 = 4'd0;
//#0 t5_fu_62 = 4'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct4_fu_58 <= 4'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct4_fu_58 <= ct_fu_160_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_64)) begin
        indvar_flatten3_fu_54 <= add_ln75_1_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    t5_fu_62 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    t5_fu_62 <= t_fu_168_p2;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln75_reg_232 <= icmp_ln75_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct_reg_241 <= ct_fu_160_p3;
        icmp_ln75_reg_232_pp0_iter1_reg <= icmp_ln75_reg_232;
        icmp_ln76_reg_246 <= icmp_ln76_fu_174_p2;
        trunc_ln75_reg_236 <= trunc_ln75_fu_156_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln75_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_232_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln766_phi_fu_94_p4 = icmp_ln76_reg_246;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln766_phi_fu_94_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln766_phi_fu_94_p4 = icmp_ln76_reg_246;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten3_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten3_load = indvar_flatten3_fu_54;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        buffer_r_we1_local = 1'b1;
    end else begin
        buffer_r_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        v_stream_TDATA_blk_n = v_stream_TVALID;
    end else begin
        v_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        v_stream_TREADY = 1'b1;
    end else begin
        v_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln75_reg_232_pp0_iter1_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln75_1_fu_119_p2 = (ap_sig_allocacmp_indvar_flatten3_load + 6'd1);

assign add_ln75_fu_142_p2 = (ct4_fu_58 + 4'd1);

assign add_ln83_fu_200_p2 = (tmp_fu_193_p3 + zext_ln83_fu_190_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (v_stream_TVALID == 1'b0);
end

always @ (*) begin
    ap_condition_64 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_r_address1 = zext_ln83_1_fu_206_p1;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign buffer_r_d1 = v_stream_TDATA;

assign buffer_r_we1 = buffer_r_we1_local;

assign ct_fu_160_p3 = ((ap_phi_mux_icmp_ln766_phi_fu_94_p4[0:0] == 1'b1) ? add_ln75_fu_142_p2 : ct4_fu_58);

assign icmp_ln75_fu_125_p2 = ((ap_sig_allocacmp_indvar_flatten3_load == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_174_p2 = ((t_fu_168_p2 == 4'd8) ? 1'b1 : 1'b0);

assign select_ln75_fu_148_p3 = ((ap_phi_mux_icmp_ln766_phi_fu_94_p4[0:0] == 1'b1) ? 4'd0 : t5_fu_62);

assign t_fu_168_p2 = (select_ln75_fu_148_p3 + 4'd1);

assign tmp_fu_193_p3 = {{trunc_ln75_reg_236}, {3'd0}};

assign trunc_ln75_fu_156_p1 = select_ln75_fu_148_p3[2:0];

assign zext_ln83_1_fu_206_p1 = add_ln83_fu_200_p2;

assign zext_ln83_fu_190_p1 = ct_reg_241;

endmodule //RV_GEMM_pack_tokens_ap_int_20_8_64_8_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns / 1ps

module RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 (sel,din,dout);

parameter ADDRWIDTH = 64;
parameter DATAWIDTH = 160;
parameter DATA1WIDTH = 20;


input [ADDRWIDTH-1:0] sel;
input [DATAWIDTH-1:0] din;
output [DATA1WIDTH-1:0] dout;

wire [DATAWIDTH+DATA1WIDTH-1:0] din_tmp;
wire [DATA1WIDTH-1:0] dout_tmp;




assign din_tmp = { 20'b00000000000000000000,din };

assign dout_tmp = din_tmp[sel+20-1 -: 20];




assign dout = dout_tmp;




endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1ns/1ps

module RV_GEMM_regslice_both
#(parameter
    DataWidth = 8
) (
    // system signals
    input  wire                  ap_clk,
    input  wire                  ap_rst,
    // slave side
    input  wire [DataWidth-1:0]  data_in,
    input  wire                  vld_in,
    output wire                  ack_in,
    // master side
    output wire [DataWidth-1:0]  data_out,
    output wire                  vld_out,
    input  wire                  ack_out,
    output wire                  apdone_blk);
    //------------------------Parameter----------------------
    // state
    localparam [1:0]
        ZERO = 2'b10,
        ONE  = 2'b11,
        TWO  = 2'b01;
    //------------------------Local signal-------------------
    reg  [DataWidth-1:0] data_p1 = {DataWidth{1'b0}};
    reg  [DataWidth-1:0] data_p2 = {DataWidth{1'b0}};
    wire         load_p1;
    wire         load_p2;
    wire         load_p1_from_p2;
    reg          ack_in_t = 1'b0;
    reg  [1:0]   state = 2'b00;
    reg  [1:0]   next;
    //------------------------Body---------------------------
    assign ack_in = ack_in_t;
    assign data_out = data_p1;
    assign vld_out = state[0];
    assign apdone_blk = (state == ONE && ~ack_out) || (state == TWO);

    assign load_p1 = (state == ZERO && vld_in) ||
                    (state == ONE && vld_in && ack_out) ||
                    (state == TWO && ack_out);
    assign load_p2 = vld_in & ack_in;
    assign load_p1_from_p2 = (state == TWO);

    // data_p1
    always @(posedge ap_clk) begin
        if (load_p1) begin
            if (load_p1_from_p2)
                data_p1 <= data_p2;
            else
                data_p1 <= data_in;
        end
    end

    // data_p2
    always @(posedge ap_clk) begin
        if (load_p2) data_p2 <= data_in;
    end

    // ack_in_t
    always @(posedge ap_clk) begin
        if (ap_rst)
            ack_in_t <= 1'b0;
        else if (state == ZERO)
            ack_in_t <= 1'b1;
        else if (state == ONE && next == TWO)
            ack_in_t <= 1'b0;
        else if (state == TWO && next == ONE)
            ack_in_t <= 1'b1;
    end

    // state
    always @(posedge ap_clk) begin
        if (ap_rst)
            state <= ZERO;
        else
            state <= next;
    end

    // next
    always @(*) begin
        case (state)
            ZERO:
                if (vld_in & ack_in)
                    next = ONE;
                else
                    next = ZERO;
            ONE:
                if (~vld_in & ack_out)
                    next = ZERO;
                else if (vld_in & ~ack_out)
                    next = TWO;
                else
                    next = ONE;
            TWO:
                if (ack_out)
                    next = ONE;
                else
                    next = TWO;
            default:
                next = ZERO;
        endcase
    end
endmodule
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_repeat_w_tokens_ap_int_8_8_64_8_192_8_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        vq_stream_r_din,
        vq_stream_r_full_n,
        vq_stream_r_write,
        vq_stream_r_num_data_valid,
        vq_stream_r_fifo_cap,
        src_0_address0,
        src_0_ce0,
        src_0_q0,
        src_0_address1,
        src_0_ce1,
        src_0_q1,
        src_1_address0,
        src_1_ce0,
        src_1_q0,
        src_1_address1,
        src_1_ce1,
        src_1_q1,
        src_2_address0,
        src_2_ce0,
        src_2_q0,
        src_2_address1,
        src_2_ce1,
        src_2_q1,
        src_3_address0,
        src_3_ce0,
        src_3_q0,
        src_3_address1,
        src_3_ce1,
        src_3_q1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [511:0] vq_stream_r_din;
input   vq_stream_r_full_n;
output   vq_stream_r_write;
input  [2:0] vq_stream_r_num_data_valid;
input  [2:0] vq_stream_r_fifo_cap;
output  [8:0] src_0_address0;
output   src_0_ce0;
input  [63:0] src_0_q0;
output  [8:0] src_0_address1;
output   src_0_ce1;
input  [63:0] src_0_q1;
output  [8:0] src_1_address0;
output   src_1_ce0;
input  [63:0] src_1_q0;
output  [8:0] src_1_address1;
output   src_1_ce1;
input  [63:0] src_1_q1;
output  [8:0] src_2_address0;
output   src_2_ce0;
input  [63:0] src_2_q0;
output  [8:0] src_2_address1;
output   src_2_ce1;
input  [63:0] src_2_q1;
output  [8:0] src_3_address0;
output   src_3_ce0;
input  [63:0] src_3_q0;
output  [8:0] src_3_address1;
output   src_3_ce1;
input  [63:0] src_3_q1;

reg ap_idle;
reg vq_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln306_fu_252_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    vq_stream_r_blk_n;
reg   [0:0] icmp_ln306_reg_499;
reg   [0:0] icmp_ln306_reg_499_pp0_iter1_reg;
reg   [0:0] icmp_ln306_reg_499_pp0_iter2_reg;
wire   [4:0] select_ln307_fu_304_p3;
reg   [4:0] select_ln307_reg_503;
wire   [2:0] empty_fu_320_p1;
reg   [2:0] empty_reg_508;
wire   [0:0] icmp_ln308_fu_344_p2;
reg   [0:0] icmp_ln308_reg_516;
wire   [0:0] icmp_ln307_fu_350_p2;
reg   [0:0] icmp_ln307_reg_521;
reg   [0:0] ap_phi_mux_icmp_ln30750_phi_fu_205_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln30849_phi_fu_216_p4;
wire   [63:0] zext_ln316_7_fu_428_p1;
wire   [63:0] zext_ln316_8_fu_442_p1;
reg   [10:0] indvar_flatten1045_fu_78;
wire   [10:0] add_ln306_fu_246_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten1045_load;
reg   [8:0] indvar_flatten46_fu_82;
wire   [8:0] select_ln307_4_fu_336_p3;
reg   [3:0] tt47_fu_86;
wire   [3:0] tt_fu_312_p3;
reg   [4:0] ct48_fu_90;
wire   [4:0] ct_fu_324_p2;
reg    src_0_ce1_local;
reg    src_0_ce0_local;
reg    src_1_ce1_local;
reg    src_1_ce0_local;
reg    src_2_ce1_local;
reg    src_2_ce0_local;
reg    src_3_ce1_local;
reg    src_3_ce0_local;
wire   [0:0] xor_ln306_fu_280_p2;
wire   [3:0] select_ln306_fu_272_p3;
wire   [0:0] and_ln306_fu_286_p2;
wire   [0:0] or_ln307_fu_298_p2;
wire   [3:0] add_ln307_fu_292_p2;
wire   [8:0] add_ln307_2_fu_330_p2;
wire   [6:0] tmp_fu_378_p3;
wire   [8:0] p_shl2_fu_371_p3;
wire   [8:0] zext_ln316_fu_385_p1;
wire   [6:0] tmp_15_fu_402_p3;
wire   [8:0] p_shl_fu_395_p3;
wire   [8:0] zext_ln316_5_fu_409_p1;
wire   [8:0] sub_ln316_fu_389_p2;
wire   [8:0] zext_ln316_6_fu_419_p1;
wire   [8:0] add_ln316_fu_422_p2;
wire   [8:0] sub_ln316_2_fu_413_p2;
wire   [8:0] add_ln316_2_fu_436_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_82;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 indvar_flatten1045_fu_78 = 11'd0;
//#0 indvar_flatten46_fu_82 = 9'd0;
//#0 tt47_fu_86 = 4'd0;
//#0 ct48_fu_90 = 5'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct48_fu_90 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct48_fu_90 <= ct_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_82)) begin
        indvar_flatten1045_fu_78 <= add_ln306_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten46_fu_82 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten46_fu_82 <= select_ln307_4_fu_336_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt47_fu_86 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    tt47_fu_86 <= tt_fu_312_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln306_reg_499 <= icmp_ln306_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_508 <= empty_fu_320_p1;
        icmp_ln306_reg_499_pp0_iter1_reg <= icmp_ln306_reg_499;
        icmp_ln307_reg_521 <= icmp_ln307_fu_350_p2;
        icmp_ln308_reg_516 <= icmp_ln308_fu_344_p2;
        select_ln307_reg_503 <= select_ln307_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln306_reg_499_pp0_iter2_reg <= icmp_ln306_reg_499_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln306_fu_252_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_499_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_205_p4 = icmp_ln307_reg_521;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_205_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30750_phi_fu_205_p4 = icmp_ln307_reg_521;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_499_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_216_p4 = icmp_ln308_reg_516;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_216_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30849_phi_fu_216_p4 = icmp_ln308_reg_516;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten1045_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1045_load = indvar_flatten1045_fu_78;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce0_local = 1'b1;
    end else begin
        src_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce1_local = 1'b1;
    end else begin
        src_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce0_local = 1'b1;
    end else begin
        src_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce1_local = 1'b1;
    end else begin
        src_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce0_local = 1'b1;
    end else begin
        src_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce1_local = 1'b1;
    end else begin
        src_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce0_local = 1'b1;
    end else begin
        src_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce1_local = 1'b1;
    end else begin
        src_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        vq_stream_r_blk_n = vq_stream_r_full_n;
    end else begin
        vq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        vq_stream_r_write = 1'b1;
    end else begin
        vq_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln306_reg_499_pp0_iter2_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln306_fu_246_p2 = (ap_sig_allocacmp_indvar_flatten1045_load + 11'd1);

assign add_ln307_2_fu_330_p2 = (indvar_flatten46_fu_82 + 9'd1);

assign add_ln307_fu_292_p2 = (select_ln306_fu_272_p3 + 4'd1);

assign add_ln316_2_fu_436_p2 = (sub_ln316_2_fu_413_p2 + zext_ln316_6_fu_419_p1);

assign add_ln316_fu_422_p2 = (sub_ln316_fu_389_p2 + zext_ln316_6_fu_419_p1);

assign and_ln306_fu_286_p2 = (xor_ln306_fu_280_p2 & ap_phi_mux_icmp_ln30849_phi_fu_216_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (vq_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_82 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_324_p2 = (select_ln307_fu_304_p3 + 5'd1);

assign empty_fu_320_p1 = tt_fu_312_p3[2:0];

assign icmp_ln306_fu_252_p2 = ((ap_sig_allocacmp_indvar_flatten1045_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_350_p2 = ((select_ln307_4_fu_336_p3 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln308_fu_344_p2 = ((ct_fu_324_p2 == 5'd24) ? 1'b1 : 1'b0);

assign or_ln307_fu_298_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_205_p4 | and_ln306_fu_286_p2);

assign p_shl2_fu_371_p3 = {{empty_reg_508}, {6'd0}};

assign p_shl_fu_395_p3 = {{empty_reg_508}, {6'd32}};

assign select_ln306_fu_272_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_205_p4[0:0] == 1'b1) ? 4'd0 : tt47_fu_86);

assign select_ln307_4_fu_336_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_205_p4[0:0] == 1'b1) ? 9'd1 : add_ln307_2_fu_330_p2);

assign select_ln307_fu_304_p3 = ((or_ln307_fu_298_p2[0:0] == 1'b1) ? 5'd0 : ct48_fu_90);

assign src_0_address0 = zext_ln316_8_fu_442_p1;

assign src_0_address1 = zext_ln316_7_fu_428_p1;

assign src_0_ce0 = src_0_ce0_local;

assign src_0_ce1 = src_0_ce1_local;

assign src_1_address0 = zext_ln316_8_fu_442_p1;

assign src_1_address1 = zext_ln316_7_fu_428_p1;

assign src_1_ce0 = src_1_ce0_local;

assign src_1_ce1 = src_1_ce1_local;

assign src_2_address0 = zext_ln316_8_fu_442_p1;

assign src_2_address1 = zext_ln316_7_fu_428_p1;

assign src_2_ce0 = src_2_ce0_local;

assign src_2_ce1 = src_2_ce1_local;

assign src_3_address0 = zext_ln316_8_fu_442_p1;

assign src_3_address1 = zext_ln316_7_fu_428_p1;

assign src_3_ce0 = src_3_ce0_local;

assign src_3_ce1 = src_3_ce1_local;

assign sub_ln316_2_fu_413_p2 = (p_shl_fu_395_p3 - zext_ln316_5_fu_409_p1);

assign sub_ln316_fu_389_p2 = (p_shl2_fu_371_p3 - zext_ln316_fu_385_p1);

assign tmp_15_fu_402_p3 = {{empty_reg_508}, {4'd8}};

assign tmp_fu_378_p3 = {{empty_reg_508}, {4'd0}};

assign tt_fu_312_p3 = ((and_ln306_fu_286_p2[0:0] == 1'b1) ? add_ln307_fu_292_p2 : select_ln306_fu_272_p3);

assign vq_stream_r_din = {{{{{{{{src_3_q0}, {src_2_q0}}, {src_1_q0}}, {src_0_q0}}, {src_3_q1}}, {src_2_q1}}, {src_1_q1}}, {src_0_q1}};

assign xor_ln306_fu_280_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_205_p4 ^ 1'd1);

assign zext_ln316_5_fu_409_p1 = tmp_15_fu_402_p3;

assign zext_ln316_6_fu_419_p1 = select_ln307_reg_503;

assign zext_ln316_7_fu_428_p1 = add_ln316_fu_422_p2;

assign zext_ln316_8_fu_442_p1 = add_ln316_2_fu_436_p2;

assign zext_ln316_fu_385_p1 = tmp_fu_378_p3;

endmodule //RV_GEMM_repeat_w_tokens_ap_int_8_8_64_8_192_8_7
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_repeat_w_tokens_ap_uint_4_8_64_8_24_1_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        vs_stream_r_din,
        vs_stream_r_full_n,
        vs_stream_r_write,
        vs_stream_r_num_data_valid,
        vs_stream_r_fifo_cap,
        src_0_address0,
        src_0_ce0,
        src_0_q0,
        src_0_address1,
        src_0_ce1,
        src_0_q1,
        src_1_address0,
        src_1_ce0,
        src_1_q0,
        src_1_address1,
        src_1_ce1,
        src_1_q1,
        src_2_address0,
        src_2_ce0,
        src_2_q0,
        src_2_address1,
        src_2_ce1,
        src_2_q1,
        src_3_address0,
        src_3_ce0,
        src_3_q0,
        src_3_address1,
        src_3_ce1,
        src_3_q1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] vs_stream_r_din;
input   vs_stream_r_full_n;
output   vs_stream_r_write;
input  [2:0] vs_stream_r_num_data_valid;
input  [2:0] vs_stream_r_fifo_cap;
output  [8:0] src_0_address0;
output   src_0_ce0;
input  [3:0] src_0_q0;
output  [8:0] src_0_address1;
output   src_0_ce1;
input  [3:0] src_0_q1;
output  [8:0] src_1_address0;
output   src_1_ce0;
input  [3:0] src_1_q0;
output  [8:0] src_1_address1;
output   src_1_ce1;
input  [3:0] src_1_q1;
output  [8:0] src_2_address0;
output   src_2_ce0;
input  [3:0] src_2_q0;
output  [8:0] src_2_address1;
output   src_2_ce1;
input  [3:0] src_2_q1;
output  [8:0] src_3_address0;
output   src_3_ce0;
input  [3:0] src_3_q0;
output  [8:0] src_3_address1;
output   src_3_ce1;
input  [3:0] src_3_q1;

reg ap_idle;
reg vs_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln306_fu_252_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_loop_exit_ready_delayed;
reg    vs_stream_r_blk_n;
reg   [0:0] icmp_ln306_reg_499;
reg   [0:0] icmp_ln306_reg_499_pp0_iter1_reg;
reg   [0:0] icmp_ln306_reg_499_pp0_iter2_reg;
wire   [4:0] select_ln307_fu_304_p3;
reg   [4:0] select_ln307_reg_503;
wire   [2:0] empty_fu_320_p1;
reg   [2:0] empty_reg_508;
wire   [0:0] icmp_ln308_fu_344_p2;
reg   [0:0] icmp_ln308_reg_516;
wire   [0:0] icmp_ln307_fu_350_p2;
reg   [0:0] icmp_ln307_reg_521;
reg   [0:0] ap_phi_mux_icmp_ln30750_phi_fu_205_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln30849_phi_fu_216_p4;
wire   [63:0] zext_ln316_3_fu_428_p1;
wire   [63:0] zext_ln316_4_fu_442_p1;
reg   [10:0] indvar_flatten1045_fu_78;
wire   [10:0] add_ln306_fu_246_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten1045_load;
reg   [8:0] indvar_flatten46_fu_82;
wire   [8:0] select_ln307_2_fu_336_p3;
reg   [3:0] tt47_fu_86;
wire   [3:0] tt_fu_312_p3;
reg   [4:0] ct48_fu_90;
wire   [4:0] ct_fu_324_p2;
reg    src_0_ce1_local;
reg    src_0_ce0_local;
reg    src_1_ce1_local;
reg    src_1_ce0_local;
reg    src_2_ce1_local;
reg    src_2_ce0_local;
reg    src_3_ce1_local;
reg    src_3_ce0_local;
wire   [0:0] xor_ln306_fu_280_p2;
wire   [3:0] select_ln306_fu_272_p3;
wire   [0:0] and_ln306_fu_286_p2;
wire   [0:0] or_ln307_fu_298_p2;
wire   [3:0] add_ln307_fu_292_p2;
wire   [8:0] add_ln307_1_fu_330_p2;
wire   [6:0] tmp_fu_378_p3;
wire   [8:0] p_shl1_fu_371_p3;
wire   [8:0] zext_ln316_fu_385_p1;
wire   [6:0] tmp_14_fu_402_p3;
wire   [8:0] p_shl_fu_395_p3;
wire   [8:0] zext_ln316_1_fu_409_p1;
wire   [8:0] sub_ln316_fu_389_p2;
wire   [8:0] zext_ln316_2_fu_419_p1;
wire   [8:0] add_ln316_fu_422_p2;
wire   [8:0] sub_ln316_1_fu_413_p2;
wire   [8:0] add_ln316_1_fu_436_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_82;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 indvar_flatten1045_fu_78 = 11'd0;
//#0 indvar_flatten46_fu_82 = 9'd0;
//#0 tt47_fu_86 = 4'd0;
//#0 ct48_fu_90 = 5'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct48_fu_90 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ct48_fu_90 <= ct_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_82)) begin
        indvar_flatten1045_fu_78 <= add_ln306_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten46_fu_82 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten46_fu_82 <= select_ln307_2_fu_336_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt47_fu_86 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    tt47_fu_86 <= tt_fu_312_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln306_reg_499 <= icmp_ln306_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_508 <= empty_fu_320_p1;
        icmp_ln306_reg_499_pp0_iter1_reg <= icmp_ln306_reg_499;
        icmp_ln307_reg_521 <= icmp_ln307_fu_350_p2;
        icmp_ln308_reg_516 <= icmp_ln308_fu_344_p2;
        select_ln307_reg_503 <= select_ln307_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln306_reg_499_pp0_iter2_reg <= icmp_ln306_reg_499_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_pp0_stage0_iter3)) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (icmp_ln306_fu_252_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_499_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_205_p4 = icmp_ln307_reg_521;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30750_phi_fu_205_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30750_phi_fu_205_p4 = icmp_ln307_reg_521;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln306_reg_499_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_216_p4 = icmp_ln308_reg_516;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln30849_phi_fu_216_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln30849_phi_fu_216_p4 = icmp_ln308_reg_516;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten1045_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1045_load = indvar_flatten1045_fu_78;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce0_local = 1'b1;
    end else begin
        src_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_0_ce1_local = 1'b1;
    end else begin
        src_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce0_local = 1'b1;
    end else begin
        src_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_1_ce1_local = 1'b1;
    end else begin
        src_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce0_local = 1'b1;
    end else begin
        src_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_2_ce1_local = 1'b1;
    end else begin
        src_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce0_local = 1'b1;
    end else begin
        src_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        src_3_ce1_local = 1'b1;
    end else begin
        src_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        vs_stream_r_blk_n = vs_stream_r_full_n;
    end else begin
        vs_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        vs_stream_r_write = 1'b1;
    end else begin
        vs_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln306_reg_499_pp0_iter2_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln306_fu_246_p2 = (ap_sig_allocacmp_indvar_flatten1045_load + 11'd1);

assign add_ln307_1_fu_330_p2 = (indvar_flatten46_fu_82 + 9'd1);

assign add_ln307_fu_292_p2 = (select_ln306_fu_272_p3 + 4'd1);

assign add_ln316_1_fu_436_p2 = (sub_ln316_1_fu_413_p2 + zext_ln316_2_fu_419_p1);

assign add_ln316_fu_422_p2 = (sub_ln316_fu_389_p2 + zext_ln316_2_fu_419_p1);

assign and_ln306_fu_286_p2 = (xor_ln306_fu_280_p2 & ap_phi_mux_icmp_ln30849_phi_fu_216_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (vs_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_82 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_block_state4_pp0_stage0_iter3))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_324_p2 = (select_ln307_fu_304_p3 + 5'd1);

assign empty_fu_320_p1 = tt_fu_312_p3[2:0];

assign icmp_ln306_fu_252_p2 = ((ap_sig_allocacmp_indvar_flatten1045_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_350_p2 = ((select_ln307_2_fu_336_p3 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln308_fu_344_p2 = ((ct_fu_324_p2 == 5'd24) ? 1'b1 : 1'b0);

assign or_ln307_fu_298_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_205_p4 | and_ln306_fu_286_p2);

assign p_shl1_fu_371_p3 = {{empty_reg_508}, {6'd0}};

assign p_shl_fu_395_p3 = {{empty_reg_508}, {6'd32}};

assign select_ln306_fu_272_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_205_p4[0:0] == 1'b1) ? 4'd0 : tt47_fu_86);

assign select_ln307_2_fu_336_p3 = ((ap_phi_mux_icmp_ln30750_phi_fu_205_p4[0:0] == 1'b1) ? 9'd1 : add_ln307_1_fu_330_p2);

assign select_ln307_fu_304_p3 = ((or_ln307_fu_298_p2[0:0] == 1'b1) ? 5'd0 : ct48_fu_90);

assign src_0_address0 = zext_ln316_4_fu_442_p1;

assign src_0_address1 = zext_ln316_3_fu_428_p1;

assign src_0_ce0 = src_0_ce0_local;

assign src_0_ce1 = src_0_ce1_local;

assign src_1_address0 = zext_ln316_4_fu_442_p1;

assign src_1_address1 = zext_ln316_3_fu_428_p1;

assign src_1_ce0 = src_1_ce0_local;

assign src_1_ce1 = src_1_ce1_local;

assign src_2_address0 = zext_ln316_4_fu_442_p1;

assign src_2_address1 = zext_ln316_3_fu_428_p1;

assign src_2_ce0 = src_2_ce0_local;

assign src_2_ce1 = src_2_ce1_local;

assign src_3_address0 = zext_ln316_4_fu_442_p1;

assign src_3_address1 = zext_ln316_3_fu_428_p1;

assign src_3_ce0 = src_3_ce0_local;

assign src_3_ce1 = src_3_ce1_local;

assign sub_ln316_1_fu_413_p2 = (p_shl_fu_395_p3 - zext_ln316_1_fu_409_p1);

assign sub_ln316_fu_389_p2 = (p_shl1_fu_371_p3 - zext_ln316_fu_385_p1);

assign tmp_14_fu_402_p3 = {{empty_reg_508}, {4'd8}};

assign tmp_fu_378_p3 = {{empty_reg_508}, {4'd0}};

assign tt_fu_312_p3 = ((and_ln306_fu_286_p2[0:0] == 1'b1) ? add_ln307_fu_292_p2 : select_ln306_fu_272_p3);

assign vs_stream_r_din = {{{{{{{{src_3_q0}, {src_2_q0}}, {src_1_q0}}, {src_0_q0}}, {src_3_q1}}, {src_2_q1}}, {src_1_q1}}, {src_0_q1}};

assign xor_ln306_fu_280_p2 = (ap_phi_mux_icmp_ln30750_phi_fu_205_p4 ^ 1'd1);

assign zext_ln316_1_fu_409_p1 = tmp_14_fu_402_p3;

assign zext_ln316_2_fu_419_p1 = select_ln307_reg_503;

assign zext_ln316_3_fu_428_p1 = add_ln316_fu_422_p2;

assign zext_ln316_4_fu_442_p1 = add_ln316_1_fu_436_p2;

assign zext_ln316_fu_385_p1 = tmp_fu_378_p3;

endmodule //RV_GEMM_repeat_w_tokens_ap_uint_4_8_64_8_24_1_8
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_repeat_x_tokens_ap_int_8_8_8_1_192_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rq_stream_r_din,
        rq_stream_r_full_n,
        rq_stream_r_write,
        rq_stream_r_num_data_valid,
        rq_stream_r_fifo_cap,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [63:0] rq_stream_r_din;
input   rq_stream_r_full_n;
output   rq_stream_r_write;
input  [2:0] rq_stream_r_num_data_valid;
input  [2:0] rq_stream_r_fifo_cap;
output  [7:0] src_address0;
output   src_ce0;
input  [63:0] src_q0;

reg ap_idle;
reg rq_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln220_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_loop_exit_ready_delayed;
reg    rq_stream_r_blk_n;
reg   [0:0] icmp_ln2219_reg_103;
reg   [0:0] icmp_ln220_reg_331;
reg   [0:0] icmp_ln220_reg_331_pp0_iter1_reg;
reg   [0:0] icmp_ln220_reg_331_pp0_iter2_reg;
reg   [0:0] icmp_ln220_reg_331_pp0_iter3_reg;
wire   [8:0] select_ln221_2_fu_175_p3;
reg   [8:0] select_ln221_2_reg_335;
wire   [3:0] tt_fu_212_p3;
reg   [3:0] tt_reg_340;
wire   [4:0] select_ln221_fu_226_p3;
reg   [4:0] select_ln221_reg_345;
wire   [2:0] trunc_ln230_fu_234_p1;
reg   [2:0] trunc_ln230_reg_350;
wire   [0:0] icmp_ln222_fu_244_p2;
reg   [0:0] icmp_ln222_reg_355;
wire   [0:0] icmp_ln221_fu_250_p2;
reg   [0:0] ap_phi_mux_icmp_ln2219_phi_fu_107_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln2228_phi_fu_119_p4;
reg    ap_loop_init_pp0_iter2_reg;
wire   [63:0] zext_ln230_4_fu_298_p1;
reg   [10:0] indvar_flatten114_fu_66;
wire   [10:0] add_ln220_2_fu_149_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten114_load;
reg   [3:0] tt5_fu_70;
reg   [8:0] indvar_flatten6_fu_74;
reg   [4:0] ct7_fu_78;
wire   [4:0] ct_fu_238_p2;
reg    src_ce0_local;
wire   [8:0] add_ln221_fu_169_p2;
wire   [0:0] xor_ln220_fu_200_p2;
wire   [3:0] add_ln220_fu_194_p2;
wire   [0:0] and_ln220_fu_206_p2;
wire   [0:0] or_ln221_fu_220_p2;
wire   [6:0] tmp_fu_265_p3;
wire   [7:0] tmp_13_fu_272_p3;
wire   [7:0] zext_ln230_fu_279_p1;
wire   [7:0] sub_ln222_fu_283_p2;
wire   [7:0] zext_ln230_3_fu_289_p1;
wire   [7:0] add_ln230_fu_292_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_106;
reg    ap_condition_95;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
//#0 indvar_flatten114_fu_66 = 11'd0;
//#0 tt5_fu_70 = 4'd0;
//#0 indvar_flatten6_fu_74 = 9'd0;
//#0 ct7_fu_78 = 5'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter2_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct7_fu_78 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ct7_fu_78 <= ct_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_331_pp0_iter1_reg == 1'd0))) begin
            icmp_ln2219_reg_103 <= icmp_ln221_fu_250_p2;
        end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
            icmp_ln2219_reg_103 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_95)) begin
        indvar_flatten114_fu_66 <= add_ln220_2_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten6_fu_74 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten6_fu_74 <= select_ln221_2_fu_175_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt5_fu_70 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
    tt5_fu_70 <= tt_fu_212_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln220_reg_331 <= icmp_ln220_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln220_reg_331_pp0_iter1_reg <= icmp_ln220_reg_331;
        select_ln221_2_reg_335 <= select_ln221_2_fu_175_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln220_reg_331_pp0_iter2_reg <= icmp_ln220_reg_331_pp0_iter1_reg;
        icmp_ln222_reg_355 <= icmp_ln222_fu_244_p2;
        select_ln221_reg_345 <= select_ln221_fu_226_p3;
        trunc_ln230_reg_350 <= trunc_ln230_fu_234_p1;
        tt_reg_340 <= tt_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln220_reg_331_pp0_iter3_reg <= icmp_ln220_reg_331_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln220_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_331_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_107_p4 = icmp_ln221_fu_250_p2;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_107_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2219_phi_fu_107_p4 = icmp_ln221_fu_250_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln220_reg_331_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_119_p4 = icmp_ln222_reg_355;
    end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_119_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2228_phi_fu_119_p4 = icmp_ln222_reg_355;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten114_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten114_load = indvar_flatten114_fu_66;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        rq_stream_r_blk_n = rq_stream_r_full_n;
    end else begin
        rq_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        rq_stream_r_write = 1'b1;
    end else begin
        rq_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        src_ce0_local = 1'b1;
    end else begin
        src_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (icmp_ln220_reg_331_pp0_iter3_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln220_2_fu_149_p2 = (ap_sig_allocacmp_indvar_flatten114_load + 11'd1);

assign add_ln220_fu_194_p2 = (tt5_fu_70 + 4'd1);

assign add_ln221_fu_169_p2 = (indvar_flatten6_fu_74 + 9'd1);

assign add_ln230_fu_292_p2 = (sub_ln222_fu_283_p2 + zext_ln230_3_fu_289_p1);

assign and_ln220_fu_206_p2 = (xor_ln220_fu_200_p2 & ap_phi_mux_icmp_ln2228_phi_fu_119_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (rq_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_106 = ~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_condition_95 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_238_p2 = (select_ln221_fu_226_p3 + 5'd1);

assign icmp_ln220_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten114_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_250_p2 = ((select_ln221_2_reg_335 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_244_p2 = ((ct_fu_238_p2 == 5'd24) ? 1'b1 : 1'b0);

assign or_ln221_fu_220_p2 = (icmp_ln2219_reg_103 | and_ln220_fu_206_p2);

assign rq_stream_r_din = src_q0;

assign select_ln221_2_fu_175_p3 = ((ap_phi_mux_icmp_ln2219_phi_fu_107_p4[0:0] == 1'b1) ? 9'd1 : add_ln221_fu_169_p2);

assign select_ln221_fu_226_p3 = ((or_ln221_fu_220_p2[0:0] == 1'b1) ? 5'd0 : ct7_fu_78);

assign src_address0 = zext_ln230_4_fu_298_p1;

assign src_ce0 = src_ce0_local;

assign sub_ln222_fu_283_p2 = (tmp_13_fu_272_p3 - zext_ln230_fu_279_p1);

assign tmp_13_fu_272_p3 = {{trunc_ln230_reg_350}, {5'd0}};

assign tmp_fu_265_p3 = {{tt_reg_340}, {3'd0}};

assign trunc_ln230_fu_234_p1 = tt_fu_212_p3[2:0];

assign tt_fu_212_p3 = ((icmp_ln2219_reg_103[0:0] == 1'b1) ? add_ln220_fu_194_p2 : tt5_fu_70);

assign xor_ln220_fu_200_p2 = (icmp_ln2219_reg_103 ^ 1'd1);

assign zext_ln230_3_fu_289_p1 = select_ln221_reg_345;

assign zext_ln230_4_fu_298_p1 = add_ln230_fu_292_p2;

assign zext_ln230_fu_279_p1 = tmp_fu_265_p3;

endmodule //RV_GEMM_repeat_x_tokens_ap_int_8_8_8_1_192_8_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_repeat_x_tokens_ap_uint_4_8_8_1_24_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rs_stream_r_din,
        rs_stream_r_full_n,
        rs_stream_r_write,
        rs_stream_r_num_data_valid,
        rs_stream_r_fifo_cap,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter4_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;
parameter    ap_ST_iter4_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] rs_stream_r_din;
input   rs_stream_r_full_n;
output   rs_stream_r_write;
input  [2:0] rs_stream_r_num_data_valid;
input  [2:0] rs_stream_r_fifo_cap;
output  [7:0] src_address0;
output   src_ce0;
input  [3:0] src_q0;

reg ap_idle;
reg rs_stream_r_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
reg   [1:0] ap_CS_iter4_fsm;
wire    ap_CS_iter4_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_CS_iter4_fsm_state5;
wire   [0:0] icmp_ln220_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_loop_exit_ready_delayed;
reg    rs_stream_r_blk_n;
reg   [0:0] icmp_ln2219_reg_103;
reg   [0:0] icmp_ln220_reg_331;
reg   [0:0] icmp_ln220_reg_331_pp0_iter1_reg;
reg   [0:0] icmp_ln220_reg_331_pp0_iter2_reg;
reg   [0:0] icmp_ln220_reg_331_pp0_iter3_reg;
wire   [8:0] select_ln221_1_fu_175_p3;
reg   [8:0] select_ln221_1_reg_335;
wire   [3:0] tt_fu_212_p3;
reg   [3:0] tt_reg_340;
wire   [4:0] select_ln221_fu_226_p3;
reg   [4:0] select_ln221_reg_345;
wire   [2:0] trunc_ln230_fu_234_p1;
reg   [2:0] trunc_ln230_reg_350;
wire   [0:0] icmp_ln222_fu_244_p2;
reg   [0:0] icmp_ln222_reg_355;
wire   [0:0] icmp_ln221_fu_250_p2;
reg   [0:0] ap_phi_mux_icmp_ln2219_phi_fu_107_p4;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [0:0] ap_phi_mux_icmp_ln2228_phi_fu_119_p4;
reg    ap_loop_init_pp0_iter2_reg;
wire   [63:0] zext_ln230_2_fu_298_p1;
reg   [10:0] indvar_flatten114_fu_66;
wire   [10:0] add_ln220_1_fu_149_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten114_load;
reg   [3:0] tt5_fu_70;
reg   [8:0] indvar_flatten6_fu_74;
reg   [4:0] ct7_fu_78;
wire   [4:0] ct_fu_238_p2;
reg    src_ce0_local;
wire   [8:0] add_ln221_fu_169_p2;
wire   [0:0] xor_ln220_fu_200_p2;
wire   [3:0] add_ln220_fu_194_p2;
wire   [0:0] and_ln220_fu_206_p2;
wire   [0:0] or_ln221_fu_220_p2;
wire   [6:0] tmp_fu_265_p3;
wire   [7:0] tmp_12_fu_272_p3;
wire   [7:0] zext_ln230_fu_279_p1;
wire   [7:0] sub_ln222_fu_283_p2;
wire   [7:0] zext_ln230_1_fu_289_p1;
wire   [7:0] add_ln230_fu_292_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg   [1:0] ap_NS_iter4_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
reg    ap_ST_iter4_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_106;
reg    ap_condition_95;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ap_CS_iter3_fsm = 2'd1;
//#0 ap_CS_iter4_fsm = 2'd1;
//#0 ap_done_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg = 1'b0;
//#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg = 1'b0;
//#0 indvar_flatten114_fu_66 = 11'd0;
//#0 tt5_fu_70 = 4'd0;
//#0 indvar_flatten6_fu_74 = 9'd0;
//#0 ct7_fu_78 = 5'd0;
end

RV_GEMM_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter4_fsm <= ap_ST_iter4_fsm_state0;
    end else begin
        ap_CS_iter4_fsm <= ap_NS_iter4_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter1_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_iter2_fsm_state0) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct7_fu_78 <= 5'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ct7_fu_78 <= ct_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_106)) begin
        if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_331_pp0_iter1_reg == 1'd0))) begin
            icmp_ln2219_reg_103 <= icmp_ln221_fu_250_p2;
        end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
            icmp_ln2219_reg_103 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_95)) begin
        indvar_flatten114_fu_66 <= add_ln220_1_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    indvar_flatten6_fu_74 <= 9'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    indvar_flatten6_fu_74 <= select_ln221_1_fu_175_p3;
end
end

always @ (posedge ap_clk) begin
if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    tt5_fu_70 <= 4'd0;
end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
    tt5_fu_70 <= tt_fu_212_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln220_reg_331 <= icmp_ln220_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln220_reg_331_pp0_iter1_reg <= icmp_ln220_reg_331;
        select_ln221_1_reg_335 <= select_ln221_1_fu_175_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln220_reg_331_pp0_iter2_reg <= icmp_ln220_reg_331_pp0_iter1_reg;
        icmp_ln222_reg_355 <= icmp_ln222_fu_244_p2;
        select_ln221_reg_345 <= select_ln221_fu_226_p3;
        trunc_ln230_reg_350 <= trunc_ln230_fu_234_p1;
        tt_reg_340 <= tt_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        icmp_ln220_reg_331_pp0_iter3_reg <= icmp_ln220_reg_331_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_pp0_stage0_iter4)) begin
        ap_ST_iter4_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_iter4_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (icmp_ln220_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter4_fsm_state0) & (1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln220_reg_331_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_107_p4 = icmp_ln221_fu_250_p2;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2219_phi_fu_107_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2219_phi_fu_107_p4 = icmp_ln221_fu_250_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln220_reg_331_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_119_p4 = icmp_ln222_reg_355;
    end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_phi_mux_icmp_ln2228_phi_fu_119_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln2228_phi_fu_119_p4 = icmp_ln222_reg_355;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten114_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten114_load = indvar_flatten114_fu_66;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter4_fsm_state5)) begin
        rs_stream_r_blk_n = rs_stream_r_full_n;
    end else begin
        rs_stream_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5))) begin
        rs_stream_r_write = 1'b1;
    end else begin
        rs_stream_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
        src_ce0_local = 1'b1;
    end else begin
        src_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b0 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter4_fsm)
        ap_ST_iter4_fsm_state5 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b0 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter4_fsm_state5) & (icmp_ln220_reg_331_pp0_iter3_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state5_pp0_stage0_iter4)) & (1'b1 == ap_CS_iter3_fsm_state4)))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end
        end
        ap_ST_iter4_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state5;
            end else begin
                ap_NS_iter4_fsm = ap_ST_iter4_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter4_fsm = 'bx;
        end
    endcase
end

assign add_ln220_1_fu_149_p2 = (ap_sig_allocacmp_indvar_flatten114_load + 11'd1);

assign add_ln220_fu_194_p2 = (tt5_fu_70 + 4'd1);

assign add_ln221_fu_169_p2 = (indvar_flatten6_fu_74 + 9'd1);

assign add_ln230_fu_292_p2 = (sub_ln222_fu_283_p2 + zext_ln230_1_fu_289_p1);

assign and_ln220_fu_206_p2 = (xor_ln220_fu_200_p2 & ap_phi_mux_icmp_ln2228_phi_fu_119_p4);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

assign ap_CS_iter4_fsm_state0 = ap_CS_iter4_fsm[32'd0];

assign ap_CS_iter4_fsm_state5 = ap_CS_iter4_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (rs_stream_r_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_106 = ~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_condition_95 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter4_fsm_state5) & (1'b1 == ap_block_state5_pp0_stage0_iter4))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ct_fu_238_p2 = (select_ln221_fu_226_p3 + 5'd1);

assign icmp_ln220_fu_155_p2 = ((ap_sig_allocacmp_indvar_flatten114_load == 11'd1535) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_250_p2 = ((select_ln221_1_reg_335 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_244_p2 = ((ct_fu_238_p2 == 5'd24) ? 1'b1 : 1'b0);

assign or_ln221_fu_220_p2 = (icmp_ln2219_reg_103 | and_ln220_fu_206_p2);

assign rs_stream_r_din = src_q0;

assign select_ln221_1_fu_175_p3 = ((ap_phi_mux_icmp_ln2219_phi_fu_107_p4[0:0] == 1'b1) ? 9'd1 : add_ln221_fu_169_p2);

assign select_ln221_fu_226_p3 = ((or_ln221_fu_220_p2[0:0] == 1'b1) ? 5'd0 : ct7_fu_78);

assign src_address0 = zext_ln230_2_fu_298_p1;

assign src_ce0 = src_ce0_local;

assign sub_ln222_fu_283_p2 = (tmp_12_fu_272_p3 - zext_ln230_fu_279_p1);

assign tmp_12_fu_272_p3 = {{trunc_ln230_reg_350}, {5'd0}};

assign tmp_fu_265_p3 = {{tt_reg_340}, {3'd0}};

assign trunc_ln230_fu_234_p1 = tt_fu_212_p3[2:0];

assign tt_fu_212_p3 = ((icmp_ln2219_reg_103[0:0] == 1'b1) ? add_ln220_fu_194_p2 : tt5_fu_70);

assign xor_ln220_fu_200_p2 = (icmp_ln2219_reg_103 ^ 1'd1);

assign zext_ln230_1_fu_289_p1 = select_ln221_reg_345;

assign zext_ln230_2_fu_298_p1 = add_ln230_fu_292_p2;

assign zext_ln230_fu_279_p1 = tmp_fu_265_p3;

endmodule //RV_GEMM_repeat_x_tokens_ap_uint_4_8_8_1_24_1_s
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_do_adapt_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_do_adapt_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_do_adapt_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_do_adapt_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_do_adapt_2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_do_adapt_2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_do_adapt_2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_do_adapt_2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_do_adapt_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_do_adapt_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_do_adapt_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_do_adapt_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_do_bmm_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_do_bmm_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_do_bmm_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_do_bmm_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_do_quant4_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_do_quant4_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_do_quant4_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_do_quant4_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_do_quant_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_do_quant_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_do_quant_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_do_quant_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 4)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_update_v_cache_ap_int_8_64_8_192_8_5_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 4)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module RV_GEMM_start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 4)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------
localparam 
    SRL_DEPTH    = DEPTH,
    SRL_AWIDTH   = ADDR_WIDTH;
//------------------------Local signal-------------------
    reg  [SRL_AWIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg  [SRL_AWIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 

//------------------------Instantiation------------------
    RV_GEMM_start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (SRL_AWIDTH),
        .DEPTH      (SRL_DEPTH))
    U_RV_GEMM_start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    // addr
    always @(posedge clk) begin
        if (reset)
            addr <= {SRL_AWIDTH{1'b0}};
        else if (push & ~pop && empty_n)
            addr <= addr + 1'b1;
        else if (~push & pop && (mOutPtr != 1))
            addr <= addr - 1'b1;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {SRL_AWIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 1))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

endmodule  


module RV_GEMM_start_for_update_v_cache_ap_uint_4_64_1_24_1_6_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 4)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @(posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_transpose_tokens_ap_int_20_8_8_64_1_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        vt_stream_din,
        vt_stream_full_n,
        vt_stream_write,
        vt_stream_num_data_valid,
        vt_stream_fifo_cap,
        start_out,
        start_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_q1
);

parameter    ap_ST_iter0_fsm_state1 = 4'd1;
parameter    ap_ST_iter0_fsm_state2 = 4'd2;
parameter    ap_ST_iter0_fsm_state3 = 4'd4;
parameter    ap_ST_iter0_fsm_state4 = 4'd8;
parameter    ap_ST_iter1_fsm_state5 = 4'd2;
parameter    ap_ST_iter1_fsm_state6 = 4'd4;
parameter    ap_ST_iter1_fsm_state7 = 4'd8;
parameter    ap_ST_iter1_fsm_state0 = 4'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [159:0] vt_stream_din;
input   vt_stream_full_n;
output   vt_stream_write;
input  [2:0] vt_stream_num_data_valid;
input  [2:0] vt_stream_fifo_cap;
output   start_out;
output   start_write;
output  [5:0] buffer_r_address0;
output   buffer_r_ce0;
input  [159:0] buffer_r_q0;
output  [5:0] buffer_r_address1;
output   buffer_r_ce1;
input  [159:0] buffer_r_q1;

reg ap_idle;
reg vt_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg   [3:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [3:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire    internal_ap_ready;
wire    ap_CS_iter0_fsm_state4;
wire    ap_CS_iter1_fsm_state5;
wire    ap_CS_iter1_fsm_state6;
reg    ap_block_state7_pp0_stage2_iter1;
wire    ap_CS_iter1_fsm_state7;
reg    ap_done_reg;
reg   [0:0] icmp_ln349_reg_415;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vt_stream_blk_n;
reg   [159:0] reg_154;
wire    ap_CS_iter0_fsm_state2;
wire   [159:0] reg_154_pp0_iter0_reg;
wire    ap_CS_iter0_fsm_state3;
reg   [159:0] reg_158;
wire   [159:0] reg_158_pp0_iter0_reg;
reg   [5:0] ct45_load_reg_381;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [2:0] lshr_ln_fu_184_p4;
reg   [2:0] lshr_ln_reg_386;
wire  signed [3:0] zext_ln357_1_fu_199_p3;
reg  signed [3:0] zext_ln357_1_reg_398;
wire   [2:0] trunc_ln357_fu_212_p1;
reg   [2:0] trunc_ln357_reg_409;
wire   [0:0] icmp_ln349_fu_216_p2;
reg   [0:0] icmp_ln349_reg_415_pp0_iter0_reg;
wire  signed [4:0] zext_ln357_3_fu_225_p3;
reg  signed [4:0] zext_ln357_3_reg_419;
wire   [7:0] add_ln357_fu_268_p2;
reg   [7:0] add_ln357_reg_434;
wire   [63:0] zext_ln357_fu_312_p1;
reg   [63:0] zext_ln357_reg_449;
reg   [63:0] zext_ln357_reg_449_pp0_iter0_reg;
wire   [19:0] tmp_fu_315_p3;
reg   [19:0] tmp_reg_457;
reg   [19:0] tmp_reg_457_pp0_iter0_reg;
wire   [19:0] tmp_s_fu_323_p3;
reg   [19:0] tmp_s_reg_462;
reg   [19:0] tmp_s_reg_462_pp0_iter0_reg;
wire   [19:0] tmp_4_fu_347_p3;
reg   [19:0] tmp_4_reg_477;
wire   [19:0] tmp_5_fu_354_p3;
reg   [19:0] tmp_5_reg_482;
wire   [19:0] grp_fu_162_p3;
reg   [19:0] tmp_6_reg_487;
wire   [19:0] grp_fu_169_p3;
reg   [19:0] tmp_7_reg_492;
reg   [19:0] tmp_8_reg_497;
reg   [19:0] tmp_9_reg_502;
wire   [63:0] zext_ln349_fu_194_p1;
wire   [63:0] zext_ln357_6_fu_207_p1;
wire   [63:0] zext_ln357_7_fu_233_p1;
wire   [63:0] zext_ln357_8_fu_241_p1;
wire   [63:0] zext_ln357_9_fu_295_p1;
wire   [63:0] zext_ln357_10_fu_307_p1;
wire   [63:0] zext_ln357_11_fu_334_p1;
wire   [63:0] zext_ln357_12_fu_342_p1;
reg   [5:0] ct45_fu_70;
wire   [5:0] ct_fu_274_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_ct45_load;
reg    buffer_r_ce1_local;
reg   [5:0] buffer_r_address1_local;
reg    buffer_r_ce0_local;
reg   [5:0] buffer_r_address0_local;
reg   [159:0] grp_fu_162_p1;
reg   [159:0] grp_fu_169_p1;
wire   [3:0] zext_ln357_2_fu_222_p1;
wire  signed [4:0] sext_ln357_fu_238_p1;
wire   [6:0] tmp_10_fu_246_p3;
wire   [4:0] tmp_11_fu_257_p3;
wire   [7:0] zext_ln357_13_fu_253_p1;
wire   [7:0] zext_ln357_14_fu_264_p1;
wire   [4:0] zext_ln357_5_fu_284_p1;
wire   [5:0] tmp_15_cast_fu_287_p3;
wire   [5:0] tmp_17_cast_fu_300_p3;
wire  signed [5:0] sext_ln357_1_fu_331_p1;
wire  signed [5:0] sext_ln357_2_fu_339_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [3:0] ap_NS_iter0_fsm;
reg   [3:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter0_fsm_state2_blk;
wire    ap_ST_iter0_fsm_state3_blk;
wire    ap_ST_iter0_fsm_state4_blk;
wire    ap_ST_iter1_fsm_state5_blk;
wire    ap_ST_iter1_fsm_state6_blk;
reg    ap_ST_iter1_fsm_state7_blk;
wire    ap_start_int;
wire    ap_done_sig;
wire   [19:0] grp_fu_162_p0;
wire   [19:0] grp_fu_169_p0;
wire   [19:0] tmp_fu_315_p0;
wire   [19:0] tmp_s_fu_323_p0;
wire   [19:0] tmp_4_fu_347_p0;
wire   [19:0] tmp_5_fu_354_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_iter0_fsm = 4'd1;
//#0 ap_CS_iter1_fsm = 4'd1;
//#0 ap_done_reg = 1'b0;
//#0 ct45_fu_70 = 6'd0;
end

RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 #(
    .DATAWIDTH( 160 ),
    .ADDRWIDTH( 64 ),
    .DATA1WIDTH( 20 ))
partselect_20ns_160ns_64ns_20_1_1_U6(
    .din(grp_fu_162_p1),
    .sel(zext_ln357_reg_449_pp0_iter0_reg),
    .dout(grp_fu_162_p3)
);

RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 #(
    .DATAWIDTH( 160 ),
    .ADDRWIDTH( 64 ),
    .DATA1WIDTH( 20 ))
partselect_20ns_160ns_64ns_20_1_1_U7(
    .din(grp_fu_169_p1),
    .sel(zext_ln357_reg_449_pp0_iter0_reg),
    .dout(grp_fu_169_p3)
);

RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 #(
    .DATAWIDTH( 160 ),
    .ADDRWIDTH( 64 ),
    .DATA1WIDTH( 20 ))
partselect_20ns_160ns_64ns_20_1_1_U8(
    .din(reg_154),
    .sel(zext_ln357_fu_312_p1),
    .dout(tmp_fu_315_p3)
);

RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 #(
    .DATAWIDTH( 160 ),
    .ADDRWIDTH( 64 ),
    .DATA1WIDTH( 20 ))
partselect_20ns_160ns_64ns_20_1_1_U9(
    .din(reg_158),
    .sel(zext_ln357_fu_312_p1),
    .dout(tmp_s_fu_323_p3)
);

RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 #(
    .DATAWIDTH( 160 ),
    .ADDRWIDTH( 64 ),
    .DATA1WIDTH( 20 ))
partselect_20ns_160ns_64ns_20_1_1_U10(
    .din(reg_154),
    .sel(zext_ln357_reg_449),
    .dout(tmp_4_fu_347_p3)
);

RV_GEMM_partselect_20ns_160ns_64ns_20_1_1 #(
    .DATAWIDTH( 160 ),
    .ADDRWIDTH( 64 ),
    .DATA1WIDTH( 20 ))
partselect_20ns_160ns_64ns_20_1_1_U11(
    .din(reg_158),
    .sel(zext_ln357_reg_449),
    .dout(tmp_5_fu_354_p3)
);

RV_GEMM_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state7))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct45_fu_70 <= 6'd0;
    end else if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        ct45_fu_70 <= ct_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        add_ln357_reg_434[7 : 2] <= add_ln357_fu_268_p2[7 : 2];
        zext_ln357_3_reg_419[2 : 0] <= zext_ln357_3_fu_225_p3[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ct45_load_reg_381 <= ap_sig_allocacmp_ct45_load;
        icmp_ln349_reg_415 <= icmp_ln349_fu_216_p2;
        lshr_ln_reg_386 <= {{ap_sig_allocacmp_ct45_load[5:3]}};
        trunc_ln357_reg_409 <= trunc_ln357_fu_212_p1;
        zext_ln357_1_reg_398[2 : 0] <= zext_ln357_1_fu_199_p3[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        icmp_ln349_reg_415_pp0_iter0_reg <= icmp_ln349_reg_415;
        tmp_4_reg_477 <= tmp_4_fu_347_p3;
        tmp_5_reg_482 <= tmp_5_fu_354_p3;
        tmp_reg_457_pp0_iter0_reg <= tmp_reg_457;
        tmp_s_reg_462_pp0_iter0_reg <= tmp_s_reg_462;
        zext_ln357_reg_449_pp0_iter0_reg[7 : 2] <= zext_ln357_reg_449[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state2)) | ((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state5)))) begin
        reg_154 <= buffer_r_q1;
        reg_158 <= buffer_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state5))) begin
        tmp_6_reg_487 <= grp_fu_162_p3;
        tmp_7_reg_492 <= grp_fu_169_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state6))) begin
        tmp_8_reg_497 <= grp_fu_162_p3;
        tmp_9_reg_502 <= grp_fu_169_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state3))) begin
        tmp_reg_457 <= tmp_fu_315_p3;
        tmp_s_reg_462 <= tmp_s_fu_323_p3;
        zext_ln357_reg_449[7 : 2] <= zext_ln357_fu_312_p1[7 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter0_fsm_state2_blk = 1'b0;

assign ap_ST_iter0_fsm_state3_blk = 1'b0;

assign ap_ST_iter0_fsm_state4_blk = 1'b0;

assign ap_ST_iter1_fsm_state5_blk = 1'b0;

assign ap_ST_iter1_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state7_pp0_stage2_iter1)) begin
        ap_ST_iter1_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (icmp_ln349_reg_415 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state7))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_ct45_load = 6'd0;
    end else begin
        ap_sig_allocacmp_ct45_load = ct45_fu_70;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state4)) begin
        buffer_r_address0_local = zext_ln357_12_fu_342_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state3)) begin
        buffer_r_address0_local = zext_ln357_10_fu_307_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state2)) begin
        buffer_r_address0_local = zext_ln357_8_fu_241_p1;
    end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        buffer_r_address0_local = zext_ln357_6_fu_207_p1;
    end else begin
        buffer_r_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state4)) begin
        buffer_r_address1_local = zext_ln357_11_fu_334_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state3)) begin
        buffer_r_address1_local = zext_ln357_9_fu_295_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state2)) begin
        buffer_r_address1_local = zext_ln357_7_fu_233_p1;
    end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        buffer_r_address1_local = zext_ln349_fu_194_p1;
    end else begin
        buffer_r_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state2)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state3)) | (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state2)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state6)) begin
        grp_fu_162_p1 = reg_154;
    end else if ((1'b1 == ap_CS_iter1_fsm_state5)) begin
        grp_fu_162_p1 = reg_154_pp0_iter0_reg;
    end else begin
        grp_fu_162_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state6)) begin
        grp_fu_169_p1 = reg_158;
    end else if ((1'b1 == ap_CS_iter1_fsm_state5)) begin
        grp_fu_169_p1 = reg_158_pp0_iter0_reg;
    end else begin
        grp_fu_169_p1 = 'bx;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state7)) begin
        vt_stream_blk_n = vt_stream_full_n;
    end else begin
        vt_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (1'b1 == ap_CS_iter1_fsm_state7))) begin
        vt_stream_write = 1'b1;
    end else begin
        vt_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end
        end
        ap_ST_iter0_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state3;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end
        end
        ap_ST_iter0_fsm_state3 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state3))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state4;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state3;
            end
        end
        ap_ST_iter0_fsm_state4 : begin
            if (~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1)))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state4;
            end
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state5 : begin
            if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state5))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state6;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state5;
            end
        end
        ap_ST_iter1_fsm_state6 : begin
            if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state6))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state7;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state6;
            end
        end
        ap_ST_iter1_fsm_state7 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (1'b0 == ap_CS_iter0_fsm_state4))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (1'b1 == ap_CS_iter1_fsm_state7) & (icmp_ln349_reg_415_pp0_iter0_reg == 1'd1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state7_pp0_stage2_iter1)) & (1'b1 == ap_CS_iter0_fsm_state4)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state5;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state7;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter1_fsm_state7) & (1'b1 == ap_block_state7_pp0_stage2_iter1))) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state5;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign add_ln357_fu_268_p2 = (zext_ln357_13_fu_253_p1 + zext_ln357_14_fu_264_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter0_fsm_state2 = ap_CS_iter0_fsm[32'd1];

assign ap_CS_iter0_fsm_state3 = ap_CS_iter0_fsm[32'd2];

assign ap_CS_iter0_fsm_state4 = ap_CS_iter0_fsm[32'd3];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state5 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter1_fsm_state6 = ap_CS_iter1_fsm[32'd2];

assign ap_CS_iter1_fsm_state7 = ap_CS_iter1_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage2_iter1 = (vt_stream_full_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign ap_ready = internal_ap_ready;

assign buffer_r_address0 = buffer_r_address0_local;

assign buffer_r_address1 = buffer_r_address1_local;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign ct_fu_274_p2 = (ct45_load_reg_381 + 6'd1);

assign icmp_ln349_fu_216_p2 = ((ap_sig_allocacmp_ct45_load == 6'd63) ? 1'b1 : 1'b0);

assign lshr_ln_fu_184_p4 = {{ap_sig_allocacmp_ct45_load[5:3]}};

assign reg_154_pp0_iter0_reg = reg_154;

assign reg_158_pp0_iter0_reg = reg_158;

assign sext_ln357_1_fu_331_p1 = zext_ln357_3_reg_419;

assign sext_ln357_2_fu_339_p1 = zext_ln357_1_reg_398;

assign sext_ln357_fu_238_p1 = zext_ln357_1_reg_398;

assign start_out = real_start;

assign tmp_10_fu_246_p3 = {{trunc_ln357_reg_409}, {4'd0}};

assign tmp_11_fu_257_p3 = {{trunc_ln357_reg_409}, {2'd0}};

assign tmp_15_cast_fu_287_p3 = {{1'd1}, {zext_ln357_5_fu_284_p1}};

assign tmp_17_cast_fu_300_p3 = {{3'd5}, {lshr_ln_reg_386}};

assign trunc_ln357_fu_212_p1 = ap_sig_allocacmp_ct45_load[2:0];

assign vt_stream_din = {{{{{{{{tmp_9_reg_502}, {tmp_8_reg_497}}, {tmp_7_reg_492}}, {tmp_6_reg_487}}, {tmp_5_reg_482}}, {tmp_4_reg_477}}, {tmp_s_reg_462_pp0_iter0_reg}}, {tmp_reg_457_pp0_iter0_reg}};

assign zext_ln349_fu_194_p1 = lshr_ln_fu_184_p4;

assign zext_ln357_10_fu_307_p1 = tmp_17_cast_fu_300_p3;

assign zext_ln357_11_fu_334_p1 = $unsigned(sext_ln357_1_fu_331_p1);

assign zext_ln357_12_fu_342_p1 = $unsigned(sext_ln357_2_fu_339_p1);

assign zext_ln357_13_fu_253_p1 = tmp_10_fu_246_p3;

assign zext_ln357_14_fu_264_p1 = tmp_11_fu_257_p3;

assign zext_ln357_1_fu_199_p3 = {{1'd1}, {lshr_ln_fu_184_p4}};

assign zext_ln357_2_fu_222_p1 = lshr_ln_reg_386;

assign zext_ln357_3_fu_225_p3 = {{1'd1}, {zext_ln357_2_fu_222_p1}};

assign zext_ln357_5_fu_284_p1 = lshr_ln_reg_386;

assign zext_ln357_6_fu_207_p1 = $unsigned(zext_ln357_1_fu_199_p3);

assign zext_ln357_7_fu_233_p1 = $unsigned(zext_ln357_3_fu_225_p3);

assign zext_ln357_8_fu_241_p1 = $unsigned(sext_ln357_fu_238_p1);

assign zext_ln357_9_fu_295_p1 = tmp_15_cast_fu_287_p3;

assign zext_ln357_fu_312_p1 = add_ln357_reg_434;

always @ (posedge ap_clk) begin
    zext_ln357_1_reg_398[3] <= 1'b1;
    zext_ln357_3_reg_419[4:3] <= 2'b10;
    add_ln357_reg_434[1:0] <= 2'b00;
    zext_ln357_reg_449[1:0] <= 2'b00;
    zext_ln357_reg_449[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln357_reg_449_pp0_iter0_reg[1:0] <= 2'b00;
    zext_ln357_reg_449_pp0_iter0_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //RV_GEMM_transpose_tokens_ap_int_20_8_8_64_1_3
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pos_r_dout,
        pos_r_empty_n,
        pos_r_read,
        pos_r_num_data_valid,
        pos_r_fifo_cap,
        vq_stream_dout,
        vq_stream_empty_n,
        vq_stream_read,
        vq_stream_num_data_valid,
        vq_stream_fifo_cap,
        vq_cache_i_stream_TDATA,
        vq_cache_i_stream_TVALID,
        vq_cache_i_stream_TREADY,
        vq_cache_o_stream_TDATA,
        vq_cache_o_stream_TVALID,
        vq_cache_o_stream_TREADY,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] pos_r_dout;
input   pos_r_empty_n;
output   pos_r_read;
input  [3:0] pos_r_num_data_valid;
input  [3:0] pos_r_fifo_cap;
input  [63:0] vq_stream_dout;
input   vq_stream_empty_n;
output   vq_stream_read;
input  [2:0] vq_stream_num_data_valid;
input  [2:0] vq_stream_fifo_cap;
input  [63:0] vq_cache_i_stream_TDATA;
input   vq_cache_i_stream_TVALID;
output   vq_cache_i_stream_TREADY;
output  [63:0] vq_cache_o_stream_TDATA;
output   vq_cache_o_stream_TVALID;
input   vq_cache_o_stream_TREADY;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [63:0] cache_0_d1;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [63:0] cache_1_d1;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [63:0] cache_2_d1;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [63:0] cache_3_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pos_r_read;
reg vq_cache_i_stream_TREADY;
reg[63:0] vq_cache_o_stream_TDATA;
reg[8:0] cache_0_address1;
reg cache_0_ce1;
reg cache_0_we1;
reg[63:0] cache_0_d1;
reg[8:0] cache_1_address1;
reg cache_1_ce1;
reg cache_1_we1;
reg[63:0] cache_1_d1;
reg[8:0] cache_2_address1;
reg cache_2_ce1;
reg cache_2_we1;
reg[63:0] cache_2_d1;
reg[8:0] cache_3_address1;
reg cache_3_ce1;
reg cache_3_we1;
reg[63:0] cache_3_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pos_r_blk_n;
wire   [11:0] empty_fu_109_p1;
reg   [11:0] empty_reg_193;
reg    ap_block_state1;
reg   [0:0] tmp_reg_198;
reg   [8:0] trunc_ln461_2_reg_203;
reg   [8:0] trunc_ln461_1_reg_208;
wire    ap_CS_fsm_state2;
wire   [8:0] select_ln461_fu_161_p3;
reg   [8:0] select_ln461_reg_213;
wire    ap_CS_fsm_state3;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_done;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_idle;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_ready;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_d1;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_d1;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_d1;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_d1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_vq_cache_i_stream_TREADY;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_idle;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_ready;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_stream_read;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TREADY;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TDATA;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TVALID;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_d1;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_d1;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_d1;
wire   [8:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_address1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_ce1;
wire    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_we1;
wire   [63:0] grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_d1;
reg    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start_reg;
reg    grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [63:0] vq_cache_o_stream_TDATA_reg;
wire    ap_CS_fsm_state5;
wire   [11:0] sub_ln461_fu_141_p2;
wire   [8:0] sub_ln461_1_fu_156_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start_reg = 1'b0;
//#0 grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start_reg = 1'b0;
end

RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1 grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start),
    .ap_done(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_done),
    .ap_idle(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_idle),
    .ap_ready(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_ready),
    .vq_cache_i_stream_TVALID(vq_cache_i_stream_TVALID),
    .cache_0_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_address1),
    .cache_0_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_ce1),
    .cache_0_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_we1),
    .cache_0_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_d1),
    .cache_1_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_address1),
    .cache_1_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_ce1),
    .cache_1_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_we1),
    .cache_1_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_d1),
    .cache_2_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_address1),
    .cache_2_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_ce1),
    .cache_2_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_we1),
    .cache_2_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_d1),
    .cache_3_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_address1),
    .cache_3_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_ce1),
    .cache_3_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_we1),
    .cache_3_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_d1),
    .vq_cache_i_stream_TDATA(vq_cache_i_stream_TDATA),
    .vq_cache_i_stream_TREADY(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_vq_cache_i_stream_TREADY)
);

RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2 grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start),
    .ap_done(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done),
    .ap_idle(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_idle),
    .ap_ready(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_ready),
    .vq_stream_dout(vq_stream_dout),
    .vq_stream_empty_n(vq_stream_empty_n),
    .vq_stream_read(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_stream_read),
    .vq_stream_num_data_valid(3'd0),
    .vq_stream_fifo_cap(3'd0),
    .vq_cache_o_stream_TREADY(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TREADY),
    .vq_cache_o_stream_TDATA(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TDATA),
    .vq_cache_o_stream_TVALID(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TVALID),
    .p_cast15(select_ln461_reg_213),
    .cache_0_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_address1),
    .cache_0_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_ce1),
    .cache_0_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_we1),
    .cache_0_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_d1),
    .cache_1_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_address1),
    .cache_1_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_ce1),
    .cache_1_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_we1),
    .cache_1_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_d1),
    .cache_2_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_address1),
    .cache_2_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_ce1),
    .cache_2_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_we1),
    .cache_2_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_d1),
    .cache_3_address1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_address1),
    .cache_3_ce1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_ce1),
    .cache_3_we1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_we1),
    .cache_3_d1(grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_ready == 1'b1)) begin
            grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start_reg <= 1'b1;
        end else if ((grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_ready == 1'b1)) begin
            grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_193 <= empty_fu_109_p1;
        tmp_reg_198 <= pos_r_dout[32'd31];
        trunc_ln461_2_reg_203 <= {{pos_r_dout[11:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_done == 1'b1))) begin
        select_ln461_reg_213 <= select_ln461_fu_161_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln461_1_reg_208 <= {{sub_ln461_fu_141_p2[11:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TVALID == 1'b1))) begin
        vq_cache_o_stream_TDATA_reg <= grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_0_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_0_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_address1;
    end else begin
        cache_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_0_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_0_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_ce1;
    end else begin
        cache_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_0_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_0_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_d1;
    end else begin
        cache_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_0_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_0_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_0_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_0_we1;
    end else begin
        cache_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_1_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_1_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_address1;
    end else begin
        cache_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_1_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_1_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_ce1;
    end else begin
        cache_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_1_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_1_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_d1;
    end else begin
        cache_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_1_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_1_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_1_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_1_we1;
    end else begin
        cache_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_2_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_2_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_address1;
    end else begin
        cache_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_2_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_2_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_ce1;
    end else begin
        cache_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_2_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_2_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_d1;
    end else begin
        cache_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_2_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_2_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_2_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_2_we1;
    end else begin
        cache_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_3_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_3_address1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_address1;
    end else begin
        cache_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_3_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_3_ce1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_ce1;
    end else begin
        cache_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_3_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_3_d1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_d1;
    end else begin
        cache_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_3_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_cache_3_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cache_3_we1 = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_cache_3_we1;
    end else begin
        cache_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_blk_n = pos_r_empty_n;
    end else begin
        pos_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_read = 1'b1;
    end else begin
        pos_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vq_cache_i_stream_TREADY = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_vq_cache_i_stream_TREADY;
    end else begin
        vq_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TVALID == 1'b1))) begin
        vq_cache_o_stream_TDATA = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TDATA;
    end else begin
        vq_cache_o_stream_TDATA = vq_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((pos_r_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign empty_fu_109_p1 = pos_r_dout[11:0];

assign grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1_fu_78_ap_start_reg;

assign grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_ap_start_reg;

assign grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TREADY = (vq_cache_o_stream_TREADY & ap_CS_fsm_state5);

assign select_ln461_fu_161_p3 = ((tmp_reg_198[0:0] == 1'b1) ? sub_ln461_1_fu_156_p2 : trunc_ln461_2_reg_203);

assign sub_ln461_1_fu_156_p2 = (9'd0 - trunc_ln461_1_reg_208);

assign sub_ln461_fu_141_p2 = (12'd0 - empty_reg_193);

assign vq_cache_o_stream_TVALID = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_cache_o_stream_TVALID;

assign vq_stream_read = grp_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2_fu_92_vq_stream_read;

endmodule //RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_cache_i_stream_TVALID,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1,
        vq_cache_i_stream_TDATA,
        vq_cache_i_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   vq_cache_i_stream_TVALID;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [63:0] cache_0_d1;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [63:0] cache_1_d1;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [63:0] cache_2_d1;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [63:0] cache_3_d1;
input  [63:0] vq_cache_i_stream_TDATA;
output   vq_cache_i_stream_TREADY;

reg ap_idle;
reg vq_cache_i_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln104_reg_327;
reg   [0:0] icmp_ln104_reg_327_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln104_fu_184_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_cache_i_stream_TDATA_blk_n;
wire   [0:0] icmp_ln104_reg_327_pp0_iter0_reg;
wire   [4:0] select_ln104_fu_219_p3;
reg   [4:0] select_ln104_reg_331;
wire   [1:0] trunc_ln104_fu_235_p1;
reg   [1:0] trunc_ln104_reg_336;
wire   [1:0] trunc_ln104_reg_336_pp0_iter1_reg;
reg   [3:0] tmp_reg_340;
wire   [63:0] zext_ln113_4_fu_298_p1;
reg   [4:0] ct_fu_76;
wire   [4:0] add_ln105_fu_249_p2;
wire    ap_loop_init;
reg   [6:0] tt_fu_80;
wire   [6:0] select_ln104_2_fu_227_p3;
reg   [10:0] indvar_flatten_fu_84;
wire   [10:0] add_ln104_2_fu_190_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    cache_2_we1_local;
reg    cache_2_ce1_local;
reg    cache_1_we1_local;
reg    cache_1_ce1_local;
reg    cache_0_we1_local;
reg    cache_0_ce1_local;
reg    cache_3_we1_local;
reg    cache_3_ce1_local;
wire   [0:0] icmp_ln105_fu_213_p2;
wire   [6:0] add_ln104_fu_207_p2;
wire   [6:0] tmp_6_fu_272_p3;
wire   [8:0] p_shl_fu_265_p3;
wire   [8:0] zext_ln113_fu_279_p1;
wire   [8:0] sub_ln113_fu_283_p2;
wire   [8:0] zext_ln113_3_fu_289_p1;
wire   [8:0] add_ln113_fu_292_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_76 = 5'd0;
//#0 tt_fu_80 = 7'd0;
//#0 indvar_flatten_fu_84 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

RV_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_76 <= 5'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_327_pp0_iter0_reg == 1'd0))) begin
        ct_fu_76 <= add_ln105_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln104_fu_184_p2 == 1'd0)) begin
            indvar_flatten_fu_84 <= add_ln104_2_fu_190_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_80 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_327_pp0_iter0_reg == 1'd0))) begin
        tt_fu_80 <= select_ln104_2_fu_227_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln104_reg_327 <= icmp_ln104_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln104_reg_327_pp0_iter1_reg <= icmp_ln104_reg_327;
        select_ln104_reg_331 <= select_ln104_fu_219_p3;
        tmp_reg_340 <= {{select_ln104_2_fu_227_p3[5:2]}};
        trunc_ln104_reg_336 <= trunc_ln104_fu_235_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln104_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_0_ce1_local = 1'b1;
    end else begin
        cache_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_336_pp0_iter1_reg == 2'd0))) begin
        cache_0_we1_local = 1'b1;
    end else begin
        cache_0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_1_ce1_local = 1'b1;
    end else begin
        cache_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_336_pp0_iter1_reg == 2'd1))) begin
        cache_1_we1_local = 1'b1;
    end else begin
        cache_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_2_ce1_local = 1'b1;
    end else begin
        cache_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_336_pp0_iter1_reg == 2'd2))) begin
        cache_2_we1_local = 1'b1;
    end else begin
        cache_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        cache_3_ce1_local = 1'b1;
    end else begin
        cache_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_336_pp0_iter1_reg == 2'd3))) begin
        cache_3_we1_local = 1'b1;
    end else begin
        cache_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        vq_cache_i_stream_TDATA_blk_n = vq_cache_i_stream_TVALID;
    end else begin
        vq_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        vq_cache_i_stream_TREADY = 1'b1;
    end else begin
        vq_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln104_reg_327_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln104_2_fu_190_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln104_fu_207_p2 = (tt_fu_80 + 7'd1);

assign add_ln105_fu_249_p2 = (select_ln104_fu_219_p3 + 5'd1);

assign add_ln113_fu_292_p2 = (sub_ln113_fu_283_p2 + zext_ln113_3_fu_289_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln104_reg_327_pp0_iter1_reg == 1'd0) & (vq_cache_i_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_0_address1 = zext_ln113_4_fu_298_p1;

assign cache_0_ce1 = cache_0_ce1_local;

assign cache_0_d1 = vq_cache_i_stream_TDATA;

assign cache_0_we1 = cache_0_we1_local;

assign cache_1_address1 = zext_ln113_4_fu_298_p1;

assign cache_1_ce1 = cache_1_ce1_local;

assign cache_1_d1 = vq_cache_i_stream_TDATA;

assign cache_1_we1 = cache_1_we1_local;

assign cache_2_address1 = zext_ln113_4_fu_298_p1;

assign cache_2_ce1 = cache_2_ce1_local;

assign cache_2_d1 = vq_cache_i_stream_TDATA;

assign cache_2_we1 = cache_2_we1_local;

assign cache_3_address1 = zext_ln113_4_fu_298_p1;

assign cache_3_ce1 = cache_3_ce1_local;

assign cache_3_d1 = vq_cache_i_stream_TDATA;

assign cache_3_we1 = cache_3_we1_local;

assign icmp_ln104_fu_184_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln104_reg_327_pp0_iter0_reg = icmp_ln104_reg_327;

assign icmp_ln105_fu_213_p2 = ((ct_fu_76 == 5'd24) ? 1'b1 : 1'b0);

assign p_shl_fu_265_p3 = {{tmp_reg_340}, {5'd0}};

assign select_ln104_2_fu_227_p3 = ((icmp_ln105_fu_213_p2[0:0] == 1'b1) ? add_ln104_fu_207_p2 : tt_fu_80);

assign select_ln104_fu_219_p3 = ((icmp_ln105_fu_213_p2[0:0] == 1'b1) ? 5'd0 : ct_fu_76);

assign sub_ln113_fu_283_p2 = (p_shl_fu_265_p3 - zext_ln113_fu_279_p1);

assign tmp_6_fu_272_p3 = {{tmp_reg_340}, {3'd0}};

assign trunc_ln104_fu_235_p1 = select_ln104_2_fu_227_p3[1:0];

assign trunc_ln104_reg_336_pp0_iter1_reg = trunc_ln104_reg_336;

assign zext_ln113_3_fu_289_p1 = select_ln104_reg_331;

assign zext_ln113_4_fu_298_p1 = add_ln113_fu_292_p2;

assign zext_ln113_fu_279_p1 = tmp_6_fu_272_p3;

endmodule //RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_stream_dout,
        vq_stream_empty_n,
        vq_stream_read,
        vq_stream_num_data_valid,
        vq_stream_fifo_cap,
        vq_cache_o_stream_TREADY,
        vq_cache_o_stream_TDATA,
        vq_cache_o_stream_TVALID,
        p_cast15,
        cache_0_address1,
        cache_0_ce1,
        cache_0_we1,
        cache_0_d1,
        cache_1_address1,
        cache_1_ce1,
        cache_1_we1,
        cache_1_d1,
        cache_2_address1,
        cache_2_ce1,
        cache_2_we1,
        cache_2_d1,
        cache_3_address1,
        cache_3_ce1,
        cache_3_we1,
        cache_3_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] vq_stream_dout;
input   vq_stream_empty_n;
output   vq_stream_read;
input  [2:0] vq_stream_num_data_valid;
input  [2:0] vq_stream_fifo_cap;
input   vq_cache_o_stream_TREADY;
output  [63:0] vq_cache_o_stream_TDATA;
output   vq_cache_o_stream_TVALID;
input  [8:0] p_cast15;
output  [8:0] cache_0_address1;
output   cache_0_ce1;
output   cache_0_we1;
output  [63:0] cache_0_d1;
output  [8:0] cache_1_address1;
output   cache_1_ce1;
output   cache_1_we1;
output  [63:0] cache_1_d1;
output  [8:0] cache_2_address1;
output   cache_2_ce1;
output   cache_2_we1;
output  [63:0] cache_2_d1;
output  [8:0] cache_3_address1;
output   cache_3_ce1;
output   cache_3_we1;
output  [63:0] cache_3_d1;

reg ap_idle;
reg vq_stream_read;
reg vq_cache_o_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln467_reg_256;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln467_fu_178_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_cache_o_stream_TDATA_blk_n;
reg    vq_stream_blk_n;
reg   [0:0] icmp_ln467_reg_256_pp0_iter1_reg;
wire   [6:0] add_ln467_fu_184_p2;
reg   [6:0] add_ln467_reg_260;
wire   [1:0] trunc_ln467_fu_190_p1;
reg   [1:0] trunc_ln467_reg_265;
reg   [1:0] trunc_ln467_reg_265_pp0_iter1_reg;
reg   [3:0] tmp_reg_269;
wire   [8:0] add_ln473_fu_228_p2;
reg   [8:0] add_ln473_reg_275;
reg   [63:0] vq_stream_read_reg_280;
wire   [63:0] zext_ln473_2_fu_237_p1;
reg   [6:0] c_fu_78;
reg   [6:0] ap_sig_allocacmp_c_2;
wire    ap_loop_init;
reg    cache_2_we1_local;
reg    cache_2_ce1_local;
reg    cache_1_we1_local;
reg    cache_1_ce1_local;
reg    cache_0_we1_local;
reg    cache_0_ce1_local;
reg    cache_3_we1_local;
reg    cache_3_ce1_local;
wire   [6:0] tmp_5_fu_211_p3;
wire   [8:0] p_shl_fu_204_p3;
wire   [8:0] zext_ln473_fu_218_p1;
wire   [8:0] sub_ln473_fu_222_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 c_fu_78 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

RV_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        c_fu_78 <= 7'd0;
    end else if (((icmp_ln467_reg_256 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        c_fu_78 <= add_ln467_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln467_reg_260 <= add_ln467_fu_184_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln467_reg_256 <= icmp_ln467_fu_178_p2;
        tmp_reg_269 <= {{ap_sig_allocacmp_c_2[5:2]}};
        trunc_ln467_reg_265 <= trunc_ln467_fu_190_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        add_ln473_reg_275 <= add_ln473_fu_228_p2;
        icmp_ln467_reg_256_pp0_iter1_reg <= icmp_ln467_reg_256;
        trunc_ln467_reg_265_pp0_iter1_reg <= trunc_ln467_reg_265;
        vq_stream_read_reg_280 <= vq_stream_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln467_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_2 = 7'd0;
    end else if (((icmp_ln467_reg_256 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_c_2 = add_ln467_reg_260;
    end else begin
        ap_sig_allocacmp_c_2 = c_fu_78;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        cache_0_ce1_local = 1'b1;
    end else begin
        cache_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (trunc_ln467_reg_265_pp0_iter1_reg == 2'd0) & (icmp_ln467_reg_256_pp0_iter1_reg == 1'd0))) begin
        cache_0_we1_local = 1'b1;
    end else begin
        cache_0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        cache_1_ce1_local = 1'b1;
    end else begin
        cache_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (trunc_ln467_reg_265_pp0_iter1_reg == 2'd1) & (icmp_ln467_reg_256_pp0_iter1_reg == 1'd0))) begin
        cache_1_we1_local = 1'b1;
    end else begin
        cache_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        cache_2_ce1_local = 1'b1;
    end else begin
        cache_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (trunc_ln467_reg_265_pp0_iter1_reg == 2'd2) & (icmp_ln467_reg_256_pp0_iter1_reg == 1'd0))) begin
        cache_2_we1_local = 1'b1;
    end else begin
        cache_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        cache_3_ce1_local = 1'b1;
    end else begin
        cache_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (trunc_ln467_reg_265_pp0_iter1_reg == 2'd3) & (icmp_ln467_reg_256_pp0_iter1_reg == 1'd0))) begin
        cache_3_we1_local = 1'b1;
    end else begin
        cache_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_256 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        vq_cache_o_stream_TDATA_blk_n = vq_cache_o_stream_TREADY;
    end else begin
        vq_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_256 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vq_cache_o_stream_TVALID = 1'b1;
    end else begin
        vq_cache_o_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_256 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        vq_stream_blk_n = vq_stream_empty_n;
    end else begin
        vq_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_256 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vq_stream_read = 1'b1;
    end else begin
        vq_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln467_reg_256_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln467_fu_184_p2 = (ap_sig_allocacmp_c_2 + 7'd1);

assign add_ln473_fu_228_p2 = (sub_ln473_fu_222_p2 + p_cast15);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((vq_cache_o_stream_TREADY == 1'b0) & (icmp_ln467_reg_256 == 1'd0)) | ((icmp_ln467_reg_256 == 1'd0) & (vq_stream_empty_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cache_0_address1 = zext_ln473_2_fu_237_p1;

assign cache_0_ce1 = cache_0_ce1_local;

assign cache_0_d1 = vq_stream_read_reg_280;

assign cache_0_we1 = cache_0_we1_local;

assign cache_1_address1 = zext_ln473_2_fu_237_p1;

assign cache_1_ce1 = cache_1_ce1_local;

assign cache_1_d1 = vq_stream_read_reg_280;

assign cache_1_we1 = cache_1_we1_local;

assign cache_2_address1 = zext_ln473_2_fu_237_p1;

assign cache_2_ce1 = cache_2_ce1_local;

assign cache_2_d1 = vq_stream_read_reg_280;

assign cache_2_we1 = cache_2_we1_local;

assign cache_3_address1 = zext_ln473_2_fu_237_p1;

assign cache_3_ce1 = cache_3_ce1_local;

assign cache_3_d1 = vq_stream_read_reg_280;

assign cache_3_we1 = cache_3_we1_local;

assign icmp_ln467_fu_178_p2 = ((ap_sig_allocacmp_c_2 == 7'd64) ? 1'b1 : 1'b0);

assign p_shl_fu_204_p3 = {{tmp_reg_269}, {5'd0}};

assign sub_ln473_fu_222_p2 = (p_shl_fu_204_p3 - zext_ln473_fu_218_p1);

assign tmp_5_fu_211_p3 = {{tmp_reg_269}, {3'd0}};

assign trunc_ln467_fu_190_p1 = ap_sig_allocacmp_c_2[1:0];

assign vq_cache_o_stream_TDATA = vq_stream_dout;

assign zext_ln473_2_fu_237_p1 = add_ln473_reg_275;

assign zext_ln473_fu_218_p1 = tmp_5_fu_211_p3;

endmodule //RV_GEMM_update_v_cache_ap_int_8_64_8_192_8_5_Pipeline_2
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pos_r_dout,
        pos_r_empty_n,
        pos_r_read,
        pos_r_num_data_valid,
        pos_r_fifo_cap,
        vs_stream_i_dout,
        vs_stream_i_empty_n,
        vs_stream_i_read,
        vs_stream_i_num_data_valid,
        vs_stream_i_fifo_cap,
        vs_cache_i_stream_TDATA,
        vs_cache_i_stream_TVALID,
        vs_cache_i_stream_TREADY,
        vs_cache_o_stream_TDATA,
        vs_cache_o_stream_TVALID,
        vs_cache_o_stream_TREADY,
        vs_cache_buffer_2_i_address1,
        vs_cache_buffer_2_i_ce1,
        vs_cache_buffer_2_i_we1,
        vs_cache_buffer_2_i_d1,
        vs_cache_buffer_1_i_11_address1,
        vs_cache_buffer_1_i_11_ce1,
        vs_cache_buffer_1_i_11_we1,
        vs_cache_buffer_1_i_11_d1,
        vs_cache_buffer_1_i_address1,
        vs_cache_buffer_1_i_ce1,
        vs_cache_buffer_1_i_we1,
        vs_cache_buffer_1_i_d1,
        vs_cache_buffer_i_address1,
        vs_cache_buffer_i_ce1,
        vs_cache_buffer_i_we1,
        vs_cache_buffer_i_d1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] pos_r_dout;
input   pos_r_empty_n;
output   pos_r_read;
input  [3:0] pos_r_num_data_valid;
input  [3:0] pos_r_fifo_cap;
input  [3:0] vs_stream_i_dout;
input   vs_stream_i_empty_n;
output   vs_stream_i_read;
input  [2:0] vs_stream_i_num_data_valid;
input  [2:0] vs_stream_i_fifo_cap;
input  [7:0] vs_cache_i_stream_TDATA;
input   vs_cache_i_stream_TVALID;
output   vs_cache_i_stream_TREADY;
output  [7:0] vs_cache_o_stream_TDATA;
output   vs_cache_o_stream_TVALID;
input   vs_cache_o_stream_TREADY;
output  [8:0] vs_cache_buffer_2_i_address1;
output   vs_cache_buffer_2_i_ce1;
output   vs_cache_buffer_2_i_we1;
output  [3:0] vs_cache_buffer_2_i_d1;
output  [8:0] vs_cache_buffer_1_i_11_address1;
output   vs_cache_buffer_1_i_11_ce1;
output   vs_cache_buffer_1_i_11_we1;
output  [3:0] vs_cache_buffer_1_i_11_d1;
output  [8:0] vs_cache_buffer_1_i_address1;
output   vs_cache_buffer_1_i_ce1;
output   vs_cache_buffer_1_i_we1;
output  [3:0] vs_cache_buffer_1_i_d1;
output  [8:0] vs_cache_buffer_i_address1;
output   vs_cache_buffer_i_ce1;
output   vs_cache_buffer_i_we1;
output  [3:0] vs_cache_buffer_i_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pos_r_read;
reg vs_cache_i_stream_TREADY;
reg[7:0] vs_cache_o_stream_TDATA;
reg[8:0] vs_cache_buffer_2_i_address1;
reg vs_cache_buffer_2_i_ce1;
reg vs_cache_buffer_2_i_we1;
reg[3:0] vs_cache_buffer_2_i_d1;
reg[8:0] vs_cache_buffer_1_i_11_address1;
reg vs_cache_buffer_1_i_11_ce1;
reg vs_cache_buffer_1_i_11_we1;
reg[3:0] vs_cache_buffer_1_i_11_d1;
reg[8:0] vs_cache_buffer_1_i_address1;
reg vs_cache_buffer_1_i_ce1;
reg vs_cache_buffer_1_i_we1;
reg[3:0] vs_cache_buffer_1_i_d1;
reg[8:0] vs_cache_buffer_i_address1;
reg vs_cache_buffer_i_ce1;
reg vs_cache_buffer_i_we1;
reg[3:0] vs_cache_buffer_i_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pos_r_blk_n;
reg   [31:0] pos_read_reg_185;
reg    ap_block_state1;
reg   [0:0] tmp_reg_190;
reg   [8:0] tmp_4_reg_195;
reg   [8:0] tmp_3_reg_200;
wire    ap_CS_fsm_state2;
wire   [8:0] select_ln74_fu_153_p3;
reg   [8:0] select_ln74_reg_205;
wire    ap_CS_fsm_state3;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_done;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_idle;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_ready;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_d1;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_d1;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_d1;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_d1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_i_stream_TREADY;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_idle;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_ready;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_stream_i_read;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TREADY;
wire   [7:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TDATA;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TVALID;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_d1;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_d1;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_d1;
wire   [8:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_address1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_ce1;
wire    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_we1;
wire   [3:0] grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_d1;
reg    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start_reg;
reg    grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [7:0] vs_cache_o_stream_TDATA_reg;
wire    ap_CS_fsm_state5;
wire   [31:0] sub_ln74_fu_123_p2;
wire   [8:0] sub_ln74_1_fu_148_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start_reg = 1'b0;
//#0 grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start_reg = 1'b0;
end

RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1 grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start),
    .ap_done(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_done),
    .ap_idle(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_idle),
    .ap_ready(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_ready),
    .vs_cache_i_stream_TVALID(vs_cache_i_stream_TVALID),
    .vs_cache_buffer_2_i_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_address1),
    .vs_cache_buffer_2_i_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_ce1),
    .vs_cache_buffer_2_i_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_we1),
    .vs_cache_buffer_2_i_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_d1),
    .vs_cache_buffer_1_i_10_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_address1),
    .vs_cache_buffer_1_i_10_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_ce1),
    .vs_cache_buffer_1_i_10_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_we1),
    .vs_cache_buffer_1_i_10_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_d1),
    .vs_cache_buffer_1_i_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_address1),
    .vs_cache_buffer_1_i_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_ce1),
    .vs_cache_buffer_1_i_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_we1),
    .vs_cache_buffer_1_i_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_d1),
    .vs_cache_buffer_i_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_address1),
    .vs_cache_buffer_i_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_ce1),
    .vs_cache_buffer_i_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_we1),
    .vs_cache_buffer_i_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_d1),
    .vs_cache_i_stream_TDATA(vs_cache_i_stream_TDATA),
    .vs_cache_i_stream_TREADY(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_i_stream_TREADY)
);

RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2 grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start),
    .ap_done(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done),
    .ap_idle(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_idle),
    .ap_ready(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_ready),
    .vs_stream_i_dout(vs_stream_i_dout),
    .vs_stream_i_empty_n(vs_stream_i_empty_n),
    .vs_stream_i_read(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_stream_i_read),
    .vs_stream_i_num_data_valid(3'd0),
    .vs_stream_i_fifo_cap(3'd0),
    .vs_cache_o_stream_TREADY(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TREADY),
    .vs_cache_o_stream_TDATA(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TDATA),
    .vs_cache_o_stream_TVALID(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TVALID),
    .idxprom10_i(select_ln74_reg_205),
    .vs_cache_buffer_2_i_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_address1),
    .vs_cache_buffer_2_i_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_ce1),
    .vs_cache_buffer_2_i_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_we1),
    .vs_cache_buffer_2_i_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_d1),
    .vs_cache_buffer_1_i_9_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_address1),
    .vs_cache_buffer_1_i_9_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_ce1),
    .vs_cache_buffer_1_i_9_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_we1),
    .vs_cache_buffer_1_i_9_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_d1),
    .vs_cache_buffer_1_i_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_address1),
    .vs_cache_buffer_1_i_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_ce1),
    .vs_cache_buffer_1_i_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_we1),
    .vs_cache_buffer_1_i_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_d1),
    .vs_cache_buffer_i_address1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_address1),
    .vs_cache_buffer_i_ce1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_ce1),
    .vs_cache_buffer_i_we1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_we1),
    .vs_cache_buffer_i_d1(grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start_reg <= 1'b1;
        end else if ((grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_ready == 1'b1)) begin
            grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_ready == 1'b1)) begin
            grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_read_reg_185 <= pos_r_dout;
        tmp_4_reg_195 <= {{pos_r_dout[11:3]}};
        tmp_reg_190 <= pos_r_dout[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_done == 1'b1))) begin
        select_ln74_reg_205 <= select_ln74_fu_153_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_3_reg_200 <= {{sub_ln74_fu_123_p2[11:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TVALID == 1'b1))) begin
        vs_cache_o_stream_TDATA_reg <= grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_blk_n = pos_r_empty_n;
    end else begin
        pos_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pos_r_read = 1'b1;
    end else begin
        pos_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_11_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_11_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_address1;
    end else begin
        vs_cache_buffer_1_i_11_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_11_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_11_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_ce1;
    end else begin
        vs_cache_buffer_1_i_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_11_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_11_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_d1;
    end else begin
        vs_cache_buffer_1_i_11_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_11_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_9_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_11_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_10_we1;
    end else begin
        vs_cache_buffer_1_i_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_address1;
    end else begin
        vs_cache_buffer_1_i_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_ce1;
    end else begin
        vs_cache_buffer_1_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_d1;
    end else begin
        vs_cache_buffer_1_i_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_1_i_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_1_i_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_1_i_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_1_i_we1;
    end else begin
        vs_cache_buffer_1_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_2_i_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_2_i_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_address1;
    end else begin
        vs_cache_buffer_2_i_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_2_i_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_2_i_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_ce1;
    end else begin
        vs_cache_buffer_2_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_2_i_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_2_i_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_d1;
    end else begin
        vs_cache_buffer_2_i_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_2_i_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_2_i_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_2_i_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_2_i_we1;
    end else begin
        vs_cache_buffer_2_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_i_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_i_address1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_address1;
    end else begin
        vs_cache_buffer_i_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_i_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_i_ce1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_ce1;
    end else begin
        vs_cache_buffer_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_i_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_i_d1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_d1;
    end else begin
        vs_cache_buffer_i_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vs_cache_buffer_i_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_buffer_i_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_buffer_i_we1 = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_buffer_i_we1;
    end else begin
        vs_cache_buffer_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vs_cache_i_stream_TREADY = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_vs_cache_i_stream_TREADY;
    end else begin
        vs_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TVALID == 1'b1))) begin
        vs_cache_o_stream_TDATA = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TDATA;
    end else begin
        vs_cache_o_stream_TDATA = vs_cache_o_stream_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((pos_r_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1_fu_74_ap_start_reg;

assign grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_ap_start_reg;

assign grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TREADY = (vs_cache_o_stream_TREADY & ap_CS_fsm_state5);

assign select_ln74_fu_153_p3 = ((tmp_reg_190[0:0] == 1'b1) ? sub_ln74_1_fu_148_p2 : tmp_4_reg_195);

assign sub_ln74_1_fu_148_p2 = (9'd0 - tmp_3_reg_200);

assign sub_ln74_fu_123_p2 = (32'd0 - pos_read_reg_185);

assign vs_cache_o_stream_TVALID = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_cache_o_stream_TVALID;

assign vs_stream_i_read = grp_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2_fu_88_vs_stream_i_read;

endmodule //RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vs_cache_i_stream_TVALID,
        vs_cache_buffer_2_i_address1,
        vs_cache_buffer_2_i_ce1,
        vs_cache_buffer_2_i_we1,
        vs_cache_buffer_2_i_d1,
        vs_cache_buffer_1_i_10_address1,
        vs_cache_buffer_1_i_10_ce1,
        vs_cache_buffer_1_i_10_we1,
        vs_cache_buffer_1_i_10_d1,
        vs_cache_buffer_1_i_address1,
        vs_cache_buffer_1_i_ce1,
        vs_cache_buffer_1_i_we1,
        vs_cache_buffer_1_i_d1,
        vs_cache_buffer_i_address1,
        vs_cache_buffer_i_ce1,
        vs_cache_buffer_i_we1,
        vs_cache_buffer_i_d1,
        vs_cache_i_stream_TDATA,
        vs_cache_i_stream_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   vs_cache_i_stream_TVALID;
output  [8:0] vs_cache_buffer_2_i_address1;
output   vs_cache_buffer_2_i_ce1;
output   vs_cache_buffer_2_i_we1;
output  [3:0] vs_cache_buffer_2_i_d1;
output  [8:0] vs_cache_buffer_1_i_10_address1;
output   vs_cache_buffer_1_i_10_ce1;
output   vs_cache_buffer_1_i_10_we1;
output  [3:0] vs_cache_buffer_1_i_10_d1;
output  [8:0] vs_cache_buffer_1_i_address1;
output   vs_cache_buffer_1_i_ce1;
output   vs_cache_buffer_1_i_we1;
output  [3:0] vs_cache_buffer_1_i_d1;
output  [8:0] vs_cache_buffer_i_address1;
output   vs_cache_buffer_i_ce1;
output   vs_cache_buffer_i_we1;
output  [3:0] vs_cache_buffer_i_d1;
input  [7:0] vs_cache_i_stream_TDATA;
output   vs_cache_i_stream_TREADY;

reg ap_idle;
reg vs_cache_i_stream_TREADY;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln104_reg_331;
reg   [0:0] icmp_ln104_reg_331_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire   [0:0] icmp_ln104_fu_180_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vs_cache_i_stream_TDATA_blk_n;
wire   [0:0] icmp_ln104_reg_331_pp0_iter0_reg;
wire   [4:0] select_ln104_fu_215_p3;
reg   [4:0] select_ln104_reg_335;
wire   [1:0] trunc_ln104_fu_231_p1;
reg   [1:0] trunc_ln104_reg_340;
wire   [1:0] trunc_ln104_reg_340_pp0_iter1_reg;
reg   [3:0] tmp_reg_344;
wire   [63:0] zext_ln113_2_fu_294_p1;
reg   [4:0] ct_fu_76;
wire   [4:0] add_ln105_fu_245_p2;
wire    ap_loop_init;
reg   [6:0] tt_fu_80;
wire   [6:0] select_ln104_1_fu_223_p3;
reg   [10:0] indvar_flatten_fu_84;
wire   [10:0] add_ln104_1_fu_186_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    vs_cache_buffer_1_i_we1_local;
wire   [3:0] trunc_ln108_fu_302_p1;
reg    vs_cache_buffer_1_i_ce1_local;
reg    vs_cache_buffer_1_i_10_we1_local;
reg    vs_cache_buffer_1_i_10_ce1_local;
reg    vs_cache_buffer_2_i_we1_local;
reg    vs_cache_buffer_2_i_ce1_local;
reg    vs_cache_buffer_i_we1_local;
reg    vs_cache_buffer_i_ce1_local;
wire   [0:0] icmp_ln105_fu_209_p2;
wire   [6:0] add_ln104_fu_203_p2;
wire   [6:0] tmp_2_fu_268_p3;
wire   [8:0] p_shl_fu_261_p3;
wire   [8:0] zext_ln113_fu_275_p1;
wire   [8:0] sub_ln113_fu_279_p2;
wire   [8:0] zext_ln113_1_fu_285_p1;
wire   [8:0] add_ln113_fu_288_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 ap_CS_iter2_fsm = 2'd1;
//#0 ct_fu_76 = 5'd0;
//#0 tt_fu_80 = 7'd0;
//#0 indvar_flatten_fu_84 = 11'd0;
//#0 ap_done_reg = 1'b0;
end

RV_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ct_fu_76 <= 5'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_331_pp0_iter0_reg == 1'd0))) begin
        ct_fu_76 <= add_ln105_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln104_fu_180_p2 == 1'd0)) begin
            indvar_flatten_fu_84 <= add_ln104_1_fu_186_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        tt_fu_80 <= 7'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln104_reg_331_pp0_iter0_reg == 1'd0))) begin
        tt_fu_80 <= select_ln104_1_fu_223_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln104_reg_331 <= icmp_ln104_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln104_reg_331_pp0_iter1_reg <= icmp_ln104_reg_331;
        select_ln104_reg_335 <= select_ln104_fu_215_p3;
        tmp_reg_344 <= {{select_ln104_1_fu_223_p3[5:2]}};
        trunc_ln104_reg_340 <= trunc_ln104_fu_231_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage0_iter2)) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (icmp_ln104_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        vs_cache_buffer_1_i_10_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_10_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_340_pp0_iter1_reg == 2'd1))) begin
        vs_cache_buffer_1_i_10_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_10_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        vs_cache_buffer_1_i_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_340_pp0_iter1_reg == 2'd2))) begin
        vs_cache_buffer_1_i_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        vs_cache_buffer_2_i_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_2_i_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_340_pp0_iter1_reg == 2'd0))) begin
        vs_cache_buffer_2_i_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_2_i_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        vs_cache_buffer_i_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_i_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2) & (trunc_ln104_reg_340_pp0_iter1_reg == 2'd3))) begin
        vs_cache_buffer_i_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_i_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        vs_cache_i_stream_TDATA_blk_n = vs_cache_i_stream_TVALID;
    end else begin
        vs_cache_i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
        vs_cache_i_stream_TREADY = 1'b1;
    end else begin
        vs_cache_i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((1'b0 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((((icmp_ln104_reg_331_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3) & (1'b0 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state3_pp0_stage0_iter2)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln104_1_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln104_fu_203_p2 = (tt_fu_80 + 7'd1);

assign add_ln105_fu_245_p2 = (select_ln104_fu_215_p3 + 5'd1);

assign add_ln113_fu_288_p2 = (sub_ln113_fu_279_p2 + zext_ln113_1_fu_285_p1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln104_reg_331_pp0_iter1_reg == 1'd0) & (vs_cache_i_stream_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & (1'b1 == ap_block_state3_pp0_stage0_iter2))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln104_fu_180_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln104_reg_331_pp0_iter0_reg = icmp_ln104_reg_331;

assign icmp_ln105_fu_209_p2 = ((ct_fu_76 == 5'd24) ? 1'b1 : 1'b0);

assign p_shl_fu_261_p3 = {{tmp_reg_344}, {5'd0}};

assign select_ln104_1_fu_223_p3 = ((icmp_ln105_fu_209_p2[0:0] == 1'b1) ? add_ln104_fu_203_p2 : tt_fu_80);

assign select_ln104_fu_215_p3 = ((icmp_ln105_fu_209_p2[0:0] == 1'b1) ? 5'd0 : ct_fu_76);

assign sub_ln113_fu_279_p2 = (p_shl_fu_261_p3 - zext_ln113_fu_275_p1);

assign tmp_2_fu_268_p3 = {{tmp_reg_344}, {3'd0}};

assign trunc_ln104_fu_231_p1 = select_ln104_1_fu_223_p3[1:0];

assign trunc_ln104_reg_340_pp0_iter1_reg = trunc_ln104_reg_340;

assign trunc_ln108_fu_302_p1 = vs_cache_i_stream_TDATA[3:0];

assign vs_cache_buffer_1_i_10_address1 = zext_ln113_2_fu_294_p1;

assign vs_cache_buffer_1_i_10_ce1 = vs_cache_buffer_1_i_10_ce1_local;

assign vs_cache_buffer_1_i_10_d1 = trunc_ln108_fu_302_p1;

assign vs_cache_buffer_1_i_10_we1 = vs_cache_buffer_1_i_10_we1_local;

assign vs_cache_buffer_1_i_address1 = zext_ln113_2_fu_294_p1;

assign vs_cache_buffer_1_i_ce1 = vs_cache_buffer_1_i_ce1_local;

assign vs_cache_buffer_1_i_d1 = trunc_ln108_fu_302_p1;

assign vs_cache_buffer_1_i_we1 = vs_cache_buffer_1_i_we1_local;

assign vs_cache_buffer_2_i_address1 = zext_ln113_2_fu_294_p1;

assign vs_cache_buffer_2_i_ce1 = vs_cache_buffer_2_i_ce1_local;

assign vs_cache_buffer_2_i_d1 = trunc_ln108_fu_302_p1;

assign vs_cache_buffer_2_i_we1 = vs_cache_buffer_2_i_we1_local;

assign vs_cache_buffer_i_address1 = zext_ln113_2_fu_294_p1;

assign vs_cache_buffer_i_ce1 = vs_cache_buffer_i_ce1_local;

assign vs_cache_buffer_i_d1 = trunc_ln108_fu_302_p1;

assign vs_cache_buffer_i_we1 = vs_cache_buffer_i_we1_local;

assign zext_ln113_1_fu_285_p1 = select_ln104_reg_335;

assign zext_ln113_2_fu_294_p1 = add_ln113_fu_288_p2;

assign zext_ln113_fu_275_p1 = tmp_2_fu_268_p3;

endmodule //RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_1
// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vs_stream_i_dout,
        vs_stream_i_empty_n,
        vs_stream_i_read,
        vs_stream_i_num_data_valid,
        vs_stream_i_fifo_cap,
        vs_cache_o_stream_TREADY,
        vs_cache_o_stream_TDATA,
        vs_cache_o_stream_TVALID,
        idxprom10_i,
        vs_cache_buffer_2_i_address1,
        vs_cache_buffer_2_i_ce1,
        vs_cache_buffer_2_i_we1,
        vs_cache_buffer_2_i_d1,
        vs_cache_buffer_1_i_9_address1,
        vs_cache_buffer_1_i_9_ce1,
        vs_cache_buffer_1_i_9_we1,
        vs_cache_buffer_1_i_9_d1,
        vs_cache_buffer_1_i_address1,
        vs_cache_buffer_1_i_ce1,
        vs_cache_buffer_1_i_we1,
        vs_cache_buffer_1_i_d1,
        vs_cache_buffer_i_address1,
        vs_cache_buffer_i_ce1,
        vs_cache_buffer_i_we1,
        vs_cache_buffer_i_d1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] vs_stream_i_dout;
input   vs_stream_i_empty_n;
output   vs_stream_i_read;
input  [2:0] vs_stream_i_num_data_valid;
input  [2:0] vs_stream_i_fifo_cap;
input   vs_cache_o_stream_TREADY;
output  [7:0] vs_cache_o_stream_TDATA;
output   vs_cache_o_stream_TVALID;
input  [8:0] idxprom10_i;
output  [8:0] vs_cache_buffer_2_i_address1;
output   vs_cache_buffer_2_i_ce1;
output   vs_cache_buffer_2_i_we1;
output  [3:0] vs_cache_buffer_2_i_d1;
output  [8:0] vs_cache_buffer_1_i_9_address1;
output   vs_cache_buffer_1_i_9_ce1;
output   vs_cache_buffer_1_i_9_we1;
output  [3:0] vs_cache_buffer_1_i_9_d1;
output  [8:0] vs_cache_buffer_1_i_address1;
output   vs_cache_buffer_1_i_ce1;
output   vs_cache_buffer_1_i_we1;
output  [3:0] vs_cache_buffer_1_i_d1;
output  [8:0] vs_cache_buffer_i_address1;
output   vs_cache_buffer_i_ce1;
output   vs_cache_buffer_i_we1;
output  [3:0] vs_cache_buffer_i_d1;

reg ap_idle;
reg vs_stream_i_read;
reg vs_cache_o_stream_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln467_reg_262;
wire   [0:0] icmp_ln467_reg_262_pp0_iter0_reg;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln467_fu_181_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vs_cache_o_stream_TDATA_blk_n;
reg    vs_stream_i_blk_n;
wire   [6:0] add_ln467_fu_187_p2;
reg   [6:0] add_ln467_reg_266;
wire   [1:0] trunc_ln467_fu_193_p1;
reg   [1:0] trunc_ln467_reg_271;
wire   [1:0] trunc_ln467_reg_271_pp0_iter0_reg;
wire   [8:0] add_ln473_fu_233_p2;
reg   [8:0] add_ln473_reg_275;
wire   [63:0] zext_ln473_1_fu_239_p1;
reg   [6:0] c_fu_78;
reg   [6:0] ap_sig_allocacmp_c_1;
wire    ap_loop_init;
reg    vs_cache_buffer_1_i_we1_local;
reg    vs_cache_buffer_1_i_ce1_local;
reg    vs_cache_buffer_1_i_9_we1_local;
reg    vs_cache_buffer_1_i_9_ce1_local;
reg    vs_cache_buffer_2_i_we1_local;
reg    vs_cache_buffer_2_i_ce1_local;
reg    vs_cache_buffer_i_we1_local;
reg    vs_cache_buffer_i_ce1_local;
wire   [3:0] tmp_fu_197_p4;
wire   [6:0] tmp_1_fu_215_p3;
wire   [8:0] p_shl_fu_207_p3;
wire   [8:0] zext_ln473_fu_223_p1;
wire   [8:0] sub_ln473_fu_227_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_iter0_fsm = 1'd1;
//#0 ap_CS_iter1_fsm = 2'd1;
//#0 c_fu_78 = 7'd0;
//#0 ap_done_reg = 1'b0;
end

RV_GEMM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        c_fu_78 <= 7'd0;
    end else if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        c_fu_78 <= add_ln467_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        add_ln467_reg_266 <= add_ln467_fu_187_p2;
        add_ln473_reg_275 <= add_ln473_fu_233_p2;
        icmp_ln467_reg_262 <= icmp_ln467_fu_181_p2;
        trunc_ln467_reg_271 <= trunc_ln467_fu_193_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln467_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_1 = 7'd0;
    end else if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_sig_allocacmp_c_1 = add_ln467_reg_266;
    end else begin
        ap_sig_allocacmp_c_1 = c_fu_78;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vs_cache_buffer_1_i_9_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_9_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (trunc_ln467_reg_271_pp0_iter0_reg == 2'd1))) begin
        vs_cache_buffer_1_i_9_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_9_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vs_cache_buffer_1_i_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (trunc_ln467_reg_271_pp0_iter0_reg == 2'd2))) begin
        vs_cache_buffer_1_i_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_1_i_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vs_cache_buffer_2_i_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_2_i_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (trunc_ln467_reg_271_pp0_iter0_reg == 2'd0))) begin
        vs_cache_buffer_2_i_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_2_i_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vs_cache_buffer_i_ce1_local = 1'b1;
    end else begin
        vs_cache_buffer_i_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (trunc_ln467_reg_271_pp0_iter0_reg == 2'd3))) begin
        vs_cache_buffer_i_we1_local = 1'b1;
    end else begin
        vs_cache_buffer_i_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        vs_cache_o_stream_TDATA_blk_n = vs_cache_o_stream_TREADY;
    end else begin
        vs_cache_o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vs_cache_o_stream_TVALID = 1'b1;
    end else begin
        vs_cache_o_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        vs_stream_i_blk_n = vs_stream_i_empty_n;
    end else begin
        vs_stream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln467_reg_262 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1))) begin
        vs_stream_i_read = 1'b1;
    end else begin
        vs_stream_i_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((icmp_ln467_reg_262_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2) & (1'b0 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign add_ln467_fu_187_p2 = (ap_sig_allocacmp_c_1 + 7'd1);

assign add_ln473_fu_233_p2 = (sub_ln473_fu_227_p2 + idxprom10_i);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((vs_cache_o_stream_TREADY == 1'b0) & (icmp_ln467_reg_262 == 1'd0)) | ((icmp_ln467_reg_262 == 1'd0) & (vs_stream_i_empty_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln467_fu_181_p2 = ((ap_sig_allocacmp_c_1 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln467_reg_262_pp0_iter0_reg = icmp_ln467_reg_262;

assign p_shl_fu_207_p3 = {{tmp_fu_197_p4}, {5'd0}};

assign sub_ln473_fu_227_p2 = (p_shl_fu_207_p3 - zext_ln473_fu_223_p1);

assign tmp_1_fu_215_p3 = {{tmp_fu_197_p4}, {3'd0}};

assign tmp_fu_197_p4 = {{ap_sig_allocacmp_c_1[5:2]}};

assign trunc_ln467_fu_193_p1 = ap_sig_allocacmp_c_1[1:0];

assign trunc_ln467_reg_271_pp0_iter0_reg = trunc_ln467_reg_271;

assign vs_cache_buffer_1_i_9_address1 = zext_ln473_1_fu_239_p1;

assign vs_cache_buffer_1_i_9_ce1 = vs_cache_buffer_1_i_9_ce1_local;

assign vs_cache_buffer_1_i_9_d1 = vs_stream_i_dout;

assign vs_cache_buffer_1_i_9_we1 = vs_cache_buffer_1_i_9_we1_local;

assign vs_cache_buffer_1_i_address1 = zext_ln473_1_fu_239_p1;

assign vs_cache_buffer_1_i_ce1 = vs_cache_buffer_1_i_ce1_local;

assign vs_cache_buffer_1_i_d1 = vs_stream_i_dout;

assign vs_cache_buffer_1_i_we1 = vs_cache_buffer_1_i_we1_local;

assign vs_cache_buffer_2_i_address1 = zext_ln473_1_fu_239_p1;

assign vs_cache_buffer_2_i_ce1 = vs_cache_buffer_2_i_ce1_local;

assign vs_cache_buffer_2_i_d1 = vs_stream_i_dout;

assign vs_cache_buffer_2_i_we1 = vs_cache_buffer_2_i_we1_local;

assign vs_cache_buffer_i_address1 = zext_ln473_1_fu_239_p1;

assign vs_cache_buffer_i_ce1 = vs_cache_buffer_i_ce1_local;

assign vs_cache_buffer_i_d1 = vs_stream_i_dout;

assign vs_cache_buffer_i_we1 = vs_cache_buffer_i_we1_local;

assign vs_cache_o_stream_TDATA = vs_stream_i_dout;

assign zext_ln473_1_fu_239_p1 = add_ln473_reg_275;

assign zext_ln473_fu_223_p1 = tmp_1_fu_215_p3;

endmodule //RV_GEMM_update_v_cache_ap_uint_4_64_1_24_1_6_Pipeline_2
