#include<sys/mman.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdio.h>
#include<stdint.h>
#include<sys/ioctl.h>
#include<time.h>

#include"include/xparameters.h"
#include"include/xil_io.h"
#include"include/xaxicdma.h"
#include"include/xaxicdma_hw.h"
#include"include/xaxicdma_i.h"
#include"include/xil_printf.h"

#define MAP_REG_BASEADDR (XPAR_REGFILE_WRAPPER_0_BASEADDR)
#define MAP_REG_DEPTH (XPAR_REGFILE_WRAPPER_0_HIGHADDR+1-XPAR_REGFILE_WRAPPER_0_BASEADDR)
#define MAP_CDMA_BASEADDR (XPAR_XAXICDMA_0_BASEADDR)
#define MAP_CDMA_DEPTH (XPAR_XAXICDMA_0_HIGHADDR+1-XPAR_XAXICDMA_0_BASEADDR)

#define DDR_TEST_DEPTH (1<<29)
#define CDMA_TEST_DEPTH 1024
#define CDMA_TEST_DDRSRC_BASEADDR 0x0
#define CDMA_TEST_DDRDST_BASEADDR 0x10000000

#define IP_BRAM_BASEADDR 0xe0000000

// #define FUNCTION_DEBUG_PRINT

XAxiCdma_Config *cdmaConfig;
XAxiCdma cdma;  
volatile u32* regBase;
volatile u32* cdmaBase;


u32 mapInit(){
    int mapped=open("/dev/mem", O_RDWR|O_SYNC);
    if(mapped==-1){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Open device failed!\n");
        #endif
        return XST_FAILURE;
    }
    regBase=(u32*)mmap(NULL, MAP_REG_DEPTH, PROT_READ|PROT_WRITE, MAP_SHARED, mapped, MAP_REG_BASEADDR);
    if(regBase==MAP_FAILED){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Mapping failed!\n");
        #endif
        close(mapped);
        return XST_FAILURE;
    }
    cdmaBase=(u32*)mmap(NULL, MAP_CDMA_DEPTH, PROT_READ|PROT_WRITE, MAP_SHARED, mapped, MAP_CDMA_BASEADDR);
    if(cdmaBase==MAP_FAILED){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Mapping failed!\n");
        #endif
        close(mapped);
        return XST_FAILURE;
    }
}

u32 ddrGetPhysAddr(){
    FILE *fp=fopen("workspace/pynq_alloc_phys_addr.txt", "r");
    if(fp==NULL){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Open pynq allocated address files failed!\n");
        #endif
        return 0;
    }
    char addr[20];
    fgets(addr, 20, fp);
    printf("buffer addr=%s\n",addr);
    fclose(fp);
    return (u32)atoi(addr);
}

void regWrite32(u32 index, u32 value){
    regBase[index]=value;
};

u32 regRead32(u32 index){
    return regBase[index];
}

void cdmaCfgWrite32(u32 index, u32 value){
    cdmaBase[index]=value;
};

u32 cdmaCfgRead32(u32 index){
    return cdmaBase[index];
}


void cdmaCfgReset(XAxiCdma *InstancePtr){
	cdmaCfgWrite32(XAXICDMA_CR_OFFSET>>2, XAXICDMA_CR_RESET_MASK);
	InstancePtr->SimpleNotDone=0;
	InstancePtr->SGWaiting=0;
	InstancePtr->SgHandlerHead=0;
	InstancePtr->SgHandlerTail=0;
	InstancePtr->SimpleCallBackFn=NULL;
	InstancePtr->SimpleCallBackRef=NULL;
	return;
}

int cdmaCfgIsResetDone(){
	return cdmaCfgRead32(XAXICDMA_CR_OFFSET>>2)&XAXICDMA_CR_RESET_MASK ? 0 : 1;
}

int cdmaCfgIsSimpleMode(){
	return cdmaCfgRead32(XAXICDMA_CR_OFFSET>>2)&XAXICDMA_CR_SGMODE_MASK ? 0 : 1;
}

int cdmaCfgIsBusy(){
	return cdmaCfgRead32(XAXICDMA_SR_OFFSET>>2)&XAXICDMA_SR_IDLE_MASK ? 0 : 1;
}

u32 cdmaCfgIntrEnabled(){
	return cdmaCfgRead32(XAXICDMA_CR_OFFSET>>2)&XAXICDMA_XR_IRQ_ALL_MASK;
}


u32 cdmaCfgInit(
    XAxiCdma *InstancePtr, 
    XAxiCdma_Config *CfgPtr,
	UINTPTR EffectiveAddr
){
	u32 RegValue;
	int TimeOut;

	InstancePtr->Initialized=0;
	InstancePtr->BaseAddr=EffectiveAddr;
	InstancePtr->HasDRE=CfgPtr->HasDRE;
	InstancePtr->IsLite=CfgPtr->IsLite;
	InstancePtr->WordLength=((unsigned int)CfgPtr->DataWidth) >> 3;
	InstancePtr->AddrWidth=CfgPtr->AddrWidth;
    
	if(InstancePtr->WordLength<4){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Word length too short %d\n", InstancePtr->WordLength);
        #endif
        return XST_FAILURE;
    }
	RegValue=cdmaCfgRead32(XAXICDMA_SR_OFFSET>>2);
	InstancePtr->SimpleOnlyBuild=!(RegValue&XAXICDMA_SR_SGINCLD_MASK);

	if(InstancePtr->SimpleOnlyBuild&&CfgPtr->IsLite)
		InstancePtr->MaxTransLen=InstancePtr->WordLength*CfgPtr->BurstLen;
    else
		InstancePtr->MaxTransLen=XAXICDMA_MAX_TRANSFER_LEN;

	TimeOut=XAXICDMA_RESET_LOOP_LIMIT;
	cdmaCfgReset(InstancePtr);

	while(TimeOut){
		if(cdmaCfgIsResetDone())
			break;
		TimeOut-=1;
	}

	if(!TimeOut){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Reset failed\n");
        #endif
        return XST_FAILURE;
    }
	InstancePtr->AllBdCnt=0;
	InstancePtr->FreeBdCnt=0;
	InstancePtr->HwBdCnt=0;
	InstancePtr->PreBdCnt=0;
	InstancePtr->PostBdCnt=0;
	InstancePtr->Initialized=1;
    
    return XST_SUCCESS;
}


int cdmaCfgSetSimpleMode(XAxiCdma *InstancePtr){
    if(cdmaCfgIsSimpleMode(InstancePtr))
        return XST_SUCCESS;
    if(cdmaCfgIsBusy()){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("SwitchMode: engine is busy!\n");
        #endif
        return XST_DEVICE_BUSY;
    }
    cdmaCfgWrite32(XAXICDMA_CR_OFFSET>>2,
        (cdmaCfgRead32(XAXICDMA_CR_OFFSET>>2)&~XAXICDMA_CR_SGMODE_MASK));

    if(cdmaCfgIsSimpleMode(InstancePtr))
        return XST_SUCCESS;
    else
        return XST_FAILURE;
    return XST_FAILURE;
}

u32 cdmaSimpleTransfer(
    XAxiCdma *InstancePtr, 
    UINTPTR SrcAddr, 
    UINTPTR DstAddr,
	u32 Length, 
    XAxiCdma_CallBackFn SimpleCallBack, 
    void *CallBackRef
){
	if((Length<1)||(Length>XAXICDMA_MAX_TRANSFER_LEN))
		return XST_FAILURE;
	u32 WordBits=(u32)(InstancePtr->WordLength-1);
	if((SrcAddr&WordBits)||(DstAddr&WordBits)){
		if(!InstancePtr->HasDRE){
            #ifdef FUNCTION_DEBUG_PRINT
                printf("Unaligned transfer without DRE %x/%x\n", (unsigned int)SrcAddr, (unsigned int)DstAddr);
            #endif
			return XST_FAILURE;
		}
	}
	if(cdmaCfgIsBusy()){
        #ifdef FUNCTION_DEBUG_PRINT
            xdbg_printf(XDBG_DEBUG_ERROR, "Engine is busy\r\n");
		#endif
        return XST_FAILURE;
	}
	if(InstancePtr->SimpleNotDone){
        #ifdef FUNCTION_DEBUG_PRINT
            printf("Simple ongoing.\n");
        #endif
		return XST_FAILURE;
	}
	if(!cdmaCfgIsSimpleMode()){
		if(cdmaCfgSetSimpleMode(InstancePtr)!=XST_SUCCESS) {
            #ifdef FUNCTION_DEBUG_PRINT
                xdbg_printf(XDBG_DEBUG_ERROR, "Cannot switch to simple mode\r\n");
            #endif
			return XST_FAILURE;
		}
	}
	if((SimpleCallBack!=NULL)||((cdmaCfgIntrEnabled(InstancePtr)& 
        XAXICDMA_XR_IRQ_SIMPLE_ALL_MASK)!=0x0)){
		InstancePtr->SimpleNotDone=1;
	}
	InstancePtr->SimpleCallBackFn=SimpleCallBack;
	InstancePtr->SimpleCallBackRef=CallBackRef;
    
	cdmaCfgWrite32(XAXICDMA_SRCADDR_OFFSET>>2, LOWER_32_BITS(SrcAddr));
	if(InstancePtr->AddrWidth>32)
		cdmaCfgWrite32(XAXICDMA_SRCADDR_MSB_OFFSET>>2, UPPER_32_BITS(SrcAddr));
	cdmaCfgWrite32(XAXICDMA_DSTADDR_OFFSET>>2, LOWER_32_BITS(DstAddr));
	if(InstancePtr->AddrWidth>32)
		cdmaCfgWrite32(XAXICDMA_DSTADDR_MSB_OFFSET>>2, UPPER_32_BITS(DstAddr));
	cdmaCfgWrite32(XAXICDMA_BTT_OFFSET>>2, Length);
	return XST_SUCCESS;
}

void cdmaInit(){
    cdmaConfig=XAxiCdma_LookupConfig(0);
    if(cdmaConfig==NULL)
        printf("CDMA device configuration lookup failed!\n");
    if(cdmaCfgInit(&cdma, cdmaConfig, cdmaConfig->BaseAddress)!=XST_SUCCESS)
        printf("CDMA initialization failed!\n");
}


int main(){
    // 打印Hello World
    printf("Hello World!\n");
    
    mapInit();
    
    // CDMA
    printf("CDMA Test:\n");
    cdmaInit();
    printf("CDMA init\n");
    u32 buffer=ddrGetPhysAddr();
    u32 bufferSrcPhy=buffer+CDMA_TEST_DDRSRC_BASEADDR;
    u32 bufferDstPhy=buffer+CDMA_TEST_DDRDST_BASEADDR;
    
    u32 cdmaStartTime;
    u32 cdmaEndTime;
    cdmaStartTime=time(NULL);
    if(cdmaSimpleTransfer(&cdma, (u32)bufferSrcPhy, (u32)IP_BRAM_BASEADDR, CDMA_TEST_DEPTH, NULL, NULL)!=XST_SUCCESS)
        printf("Error: CDMA transfer failed!\n");
    printf("CDMA Transfer Start.\n");
    printf("control: 0x%x\n", cdmaCfgRead32(XAXICDMA_CR_OFFSET>>2));
    printf("src: 0x%x\n", cdmaCfgRead32(XAXICDMA_SRCADDR_OFFSET>>2));
    printf("dst: 0x%x\n", cdmaCfgRead32(XAXICDMA_DSTADDR_OFFSET>>2));
    printf("len: 0x%x\n", cdmaCfgRead32(XAXICDMA_BTT_OFFSET>>2));
    while(cdmaCfgIsBusy());
    
    cdmaEndTime=time(NULL);
    printf("CDMA Operation Time: %ds\n", cdmaEndTime-cdmaStartTime);
    
    if(cdmaSimpleTransfer(&cdma, (u32)IP_BRAM_BASEADDR, (u32)bufferDstPhy, CDMA_TEST_DEPTH, NULL, NULL)!=XST_SUCCESS)
        printf("Error: CDMA transfer failed!\n");
    while(cdmaCfgIsBusy());
    printf("CDMA Transfer Start.\n");
    
    printf("control: 0x%x\n", cdmaCfgRead32(XAXICDMA_CR_OFFSET>>2));
    printf("src: 0x%x\n", cdmaCfgRead32(XAXICDMA_SRCADDR_OFFSET>>2));
    printf("dst: 0x%x\n", cdmaCfgRead32(XAXICDMA_DSTADDR_OFFSET>>2));
    printf("len: 0x%x\n", cdmaCfgRead32(XAXICDMA_BTT_OFFSET>>2));
    
    //printf("speed: %fbits/ns\n", (cdmaEndTime-cdmaStartTime)*8000/16384);
    
    
    return 0;
}